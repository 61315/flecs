	.file	"flecs.c"
	.text
	.type	ecs_vasprintf, @function
ecs_vasprintf:
.LFB6:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$0, -44(%rbp)
	movq	$0, -40(%rbp)
	leaq	-32(%rbp), %rcx
	movq	-64(%rbp), %rsi
	movq	(%rsi), %rax
	movq	8(%rsi), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rax
	movq	%rax, 16(%rcx)
	leaq	-32(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-40(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	vsnprintf@PLT
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	jns	.L2
	movl	$0, %eax
	jmp	.L5
.L2:
	movq	16+ecs_os_api(%rip), %rax
	movl	-44(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L4
	movl	$0, %eax
	jmp	.L5
.L4:
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vsprintf@PLT
	movq	-40(%rbp), %rax
.L5:
	movq	-8(%rbp), %rdi
	xorq	%fs:40, %rdi
	je	.L6
	call	__stack_chk_fail@PLT
.L6:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	ecs_vasprintf, .-ecs_vasprintf
	.section	.rodata
.LC0:
	.string	"\033[0;49m"
.LC1:
	.string	"\033[0;36m"
.LC2:
	.string	"\033[0;32m"
.LC3:
	.string	"]"
.LC4:
	.string	"green]"
.LC5:
	.string	"red]"
.LC6:
	.string	"\033[0;31m"
.LC7:
	.string	"blue]"
.LC8:
	.string	"\033[0;34m"
.LC9:
	.string	"magenta]"
.LC10:
	.string	"\033[0;35m"
.LC11:
	.string	"cyan]"
.LC12:
	.string	"yellow]"
.LC13:
	.string	"\033[0;33m"
.LC14:
	.string	"grey]"
.LC15:
	.string	"\033[0;37m"
.LC16:
	.string	"white]"
.LC17:
	.string	"bold]"
.LC18:
	.string	"\033[1;49m"
.LC19:
	.string	"normal]"
.LC20:
	.string	"reset]"
	.text
	.type	ecs_colorize, @function
ecs_colorize:
.LFB7:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1152, %rsp
	movq	%rdi, -1144(%rbp)
	movl	%esi, %eax
	movb	%al, -1148(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-1104(%rbp), %rdx
	movl	$0, %eax
	movl	$136, %ecx
	movq	%rdx, %rdi
	rep stosq
	movb	$0, -1120(%rbp)
	movb	$0, -1119(%rbp)
	movb	$0, -1118(%rbp)
	movb	$0, -1117(%rbp)
	movb	$0, -1116(%rbp)
	movb	$1, -1115(%rbp)
	movb	$0, -1114(%rbp)
	movq	-1144(%rbp), %rax
	movq	%rax, -1112(%rbp)
	jmp	.L8
.L46:
	movb	$0, -1114(%rbp)
	movzbl	-1116(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L9
	cmpb	$0, -1119(%rbp)
	je	.L10
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-1121(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	jne	.L10
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-1121(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$1024, %eax
	testl	%eax, %eax
	jne	.L10
	cmpb	$46, -1121(%rbp)
	je	.L10
	cmpb	$37, -1121(%rbp)
	je	.L10
	cmpb	$0, -1148(%rbp)
	je	.L11
	leaq	-1104(%rbp), %rax
	leaq	.LC0(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L11:
	movb	$0, -1119(%rbp)
.L10:
	cmpb	$0, -1118(%rbp)
	je	.L12
	movzbl	-1118(%rbp), %eax
	cmpb	-1121(%rbp), %al
	jne	.L12
	cmpb	$92, -1120(%rbp)
	je	.L12
	movb	$0, -1118(%rbp)
	jmp	.L13
.L12:
	cmpb	$39, -1121(%rbp)
	je	.L14
	cmpb	$34, -1121(%rbp)
	jne	.L13
.L14:
	cmpb	$0, -1118(%rbp)
	jne	.L13
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-1120(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$1024, %eax
	testl	%eax, %eax
	jne	.L13
	cmpb	$92, -1120(%rbp)
	je	.L13
	cmpb	$0, -1148(%rbp)
	je	.L15
	leaq	-1104(%rbp), %rax
	leaq	.LC1(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L15:
	movzbl	-1121(%rbp), %eax
	movb	%al, -1118(%rbp)
.L13:
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-1121(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	jne	.L16
	cmpb	$37, -1121(%rbp)
	jne	.L17
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-1120(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	jne	.L16
.L17:
	cmpb	$45, -1121(%rbp)
	jne	.L18
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movq	-1112(%rbp), %rdx
	addq	$1, %rdx
	movzbl	(%rdx), %edx
	movsbq	%dl, %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	je	.L18
.L16:
	movzbl	-1119(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L18
	cmpb	$0, -1118(%rbp)
	jne	.L18
	movzbl	-1117(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L18
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-1120(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$1024, %eax
	testl	%eax, %eax
	jne	.L18
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-1120(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	jne	.L18
	cmpb	$95, -1120(%rbp)
	je	.L18
	cmpb	$46, -1120(%rbp)
	je	.L18
	cmpb	$0, -1148(%rbp)
	je	.L19
	leaq	-1104(%rbp), %rax
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L19:
	movb	$1, -1119(%rbp)
.L18:
	cmpb	$0, -1117(%rbp)
	je	.L20
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-1121(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$1024, %eax
	testl	%eax, %eax
	jne	.L20
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-1121(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	jne	.L20
	cmpb	$95, -1121(%rbp)
	je	.L20
	cmpb	$0, -1148(%rbp)
	je	.L21
	leaq	-1104(%rbp), %rax
	leaq	.LC0(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L21:
	movb	$0, -1117(%rbp)
.L20:
	cmpb	$0, -1118(%rbp)
	jne	.L9
	movzbl	-1117(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L9
	cmpb	$36, -1121(%rbp)
	jne	.L9
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movq	-1112(%rbp), %rdx
	addq	$1, %rdx
	movzbl	(%rdx), %edx
	movsbq	%dl, %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$1024, %eax
	testl	%eax, %eax
	je	.L9
	cmpb	$0, -1148(%rbp)
	je	.L22
	leaq	-1104(%rbp), %rax
	leaq	.LC1(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L22:
	movb	$1, -1117(%rbp)
.L9:
	movzbl	-1117(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L23
	cmpb	$0, -1118(%rbp)
	jne	.L23
	movzbl	-1119(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L23
	cmpb	$35, -1121(%rbp)
	jne	.L23
	movq	-1112(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	cmpb	$91, %al
	jne	.L23
	movb	$1, -1113(%rbp)
	movb	$1, -1116(%rbp)
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movzbl	(%rax), %edx
	movzbl	.LC3(%rip), %eax
	movzbl	%dl, %edx
	movzbl	%al, %eax
	subl	%eax, %edx
	movl	%edx, %eax
	testl	%eax, %eax
	jne	.L24
	movb	$0, -1115(%rbp)
	jmp	.L25
.L24:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$6, %edx
	leaq	.LC4(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L26
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L26:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$4, %edx
	leaq	.LC5(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L27
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC6(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L27:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$4, %edx
	leaq	.LC7(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L28
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC8(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L28:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$8, %edx
	leaq	.LC9(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L29
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC10(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L29:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$5, %edx
	leaq	.LC11(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L30
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC1(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L30:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$7, %edx
	leaq	.LC12(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L31
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC13(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L31:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$5, %edx
	leaq	.LC14(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L32
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC15(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L32:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$6, %edx
	leaq	.LC16(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L33
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC0(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L33:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$5, %edx
	leaq	.LC17(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L34
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC18(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L34:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$7, %edx
	leaq	.LC19(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L35
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC0(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L35:
	movq	-1112(%rbp), %rax
	addq	$2, %rax
	movl	$6, %edx
	leaq	.LC20(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L36
	movb	$0, -1116(%rbp)
	cmpb	$0, -1148(%rbp)
	je	.L25
	leaq	-1104(%rbp), %rax
	leaq	.LC0(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L25
.L36:
	movb	$0, -1113(%rbp)
	movb	$0, -1116(%rbp)
.L25:
	cmpb	$0, -1113(%rbp)
	je	.L37
	addq	$2, -1112(%rbp)
	jmp	.L38
.L39:
	addq	$1, -1112(%rbp)
.L38:
	movq	-1112(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -1121(%rbp)
	cmpb	$93, -1121(%rbp)
	jne	.L39
	movb	$1, -1114(%rbp)
.L37:
	movzbl	-1115(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L23
	movb	$1, -1116(%rbp)
.L23:
	cmpb	$10, -1121(%rbp)
	jne	.L40
	cmpb	$0, -1119(%rbp)
	jne	.L41
	cmpb	$0, -1118(%rbp)
	jne	.L41
	cmpb	$0, -1117(%rbp)
	jne	.L41
	cmpb	$0, -1116(%rbp)
	je	.L40
.L41:
	cmpb	$0, -1148(%rbp)
	je	.L42
	leaq	-1104(%rbp), %rax
	leaq	.LC0(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L42:
	movb	$0, -1116(%rbp)
	movb	$0, -1119(%rbp)
	movb	$0, -1118(%rbp)
	movb	$0, -1117(%rbp)
.L40:
	movzbl	-1114(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L43
	movq	-1112(%rbp), %rcx
	leaq	-1104(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstrn
.L43:
	movzbl	-1116(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L44
	cmpb	$39, -1121(%rbp)
	je	.L45
	cmpb	$34, -1121(%rbp)
	jne	.L44
.L45:
	cmpb	$0, -1118(%rbp)
	jne	.L44
	cmpb	$0, -1148(%rbp)
	je	.L44
	leaq	-1104(%rbp), %rax
	leaq	.LC0(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L44:
	movzbl	-1121(%rbp), %eax
	movb	%al, -1120(%rbp)
	addq	$1, -1112(%rbp)
.L8:
	movq	-1112(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -1121(%rbp)
	cmpb	$0, -1121(%rbp)
	jne	.L46
	cmpb	$0, -1119(%rbp)
	jne	.L47
	cmpb	$0, -1118(%rbp)
	jne	.L47
	cmpb	$0, -1117(%rbp)
	jne	.L47
	cmpb	$0, -1116(%rbp)
	je	.L48
.L47:
	cmpb	$0, -1148(%rbp)
	je	.L48
	leaq	-1104(%rbp), %rax
	leaq	.LC0(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L48:
	leaq	-1104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_get
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L50
	call	__stack_chk_fail@PLT
.L50:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE7:
	.size	ecs_colorize, .-ecs_colorize
	.local	trace_indent
	.comm	trace_indent,4,4
	.local	trace_level
	.comm	trace_level,4,4
	.data
	.type	trace_color, @object
	.size	trace_color, 1
trace_color:
	.byte	1
	.section	.rodata
.LC21:
	.string	"%sinfo%s: %s%s%s%s:%s%d%s: %s"
.LC22:
	.string	"%swarn%s: %s%s%s%s:%s%d%s: %s"
.LC23:
	.string	"%serr%s:  %s%s%s%s:%s%d%s: %s"
	.align 8
.LC24:
	.string	"%sfatal%s:  %s%s%s%s:%s%d%s: %s"
.LC25:
	.string	"info: %s%s:%d: %s"
.LC26:
	.string	"warn: %s%s:%d: %s"
.LC27:
	.string	"err:  %s%s:%d: %s"
.LC28:
	.string	"fatal:  %s%s:%d: %s"
	.text
	.type	ecs_log_print, @function
ecs_log_print:
.LFB8:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$368, %rsp
	movl	%edi, -340(%rbp)
	movq	%rsi, -352(%rbp)
	movl	%edx, -344(%rbp)
	movq	%rcx, -360(%rbp)
	movq	%r8, -368(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	trace_level(%rip), %eax
	cmpl	%eax, -340(%rbp)
	jg	.L68
	movq	-352(%rbp), %rdx
	leaq	-272(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy@PLT
	leaq	-272(%rbp), %rax
	movq	%rax, -352(%rbp)
	movq	-352(%rbp), %rax
	movl	$47, %esi
	movq	%rax, %rdi
	call	strrchr@PLT
	movq	%rax, -328(%rbp)
	cmpq	$0, -328(%rbp)
	jne	.L54
	movq	-352(%rbp), %rax
	movl	$92, %esi
	movq	%rax, %rdi
	call	strrchr@PLT
	movq	%rax, -328(%rbp)
.L54:
	cmpq	$0, -328(%rbp)
	je	.L55
	movq	-328(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -352(%rbp)
	jmp	.L56
.L55:
	leaq	-272(%rbp), %rax
	movq	%rax, -352(%rbp)
.L56:
	movl	$0, -332(%rbp)
	jmp	.L57
.L58:
	movl	-332(%rbp), %eax
	addl	%eax, %eax
	cltq
	movb	$124, -304(%rbp,%rax)
	movl	-332(%rbp), %eax
	addl	%eax, %eax
	addl	$1, %eax
	cltq
	movb	$32, -304(%rbp,%rax)
	addl	$1, -332(%rbp)
.L57:
	movl	trace_indent(%rip), %eax
	cmpl	%eax, -332(%rbp)
	jl	.L58
	movl	-332(%rbp), %eax
	addl	%eax, %eax
	cltq
	movb	$0, -304(%rbp,%rax)
	movq	-368(%rbp), %rdx
	movq	-360(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_vasprintf
	movq	%rax, -320(%rbp)
	movzbl	trace_color(%rip), %eax
	movzbl	%al, %edx
	movq	-320(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_colorize
	movq	%rax, -312(%rbp)
	movzbl	trace_color(%rip), %eax
	testb	%al, %al
	je	.L59
	cmpl	$0, -340(%rbp)
	js	.L60
	leaq	-304(%rbp), %rdx
	subq	$8, %rsp
	pushq	-312(%rbp)
	leaq	.LC0(%rip), %rax
	pushq	%rax
	movl	-344(%rbp), %eax
	pushq	%rax
	leaq	.LC2(%rip), %rax
	pushq	%rax
	pushq	-352(%rbp)
	leaq	.LC0(%rip), %r9
	movq	%rdx, %r8
	leaq	.LC15(%rip), %rcx
	leaq	.LC0(%rip), %rdx
	leaq	.LC10(%rip), %rsi
	leaq	.LC21(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_log
	addq	$48, %rsp
	jmp	.L61
.L60:
	cmpl	$-2, -340(%rbp)
	jne	.L62
	leaq	-304(%rbp), %rdx
	subq	$8, %rsp
	pushq	-312(%rbp)
	leaq	.LC0(%rip), %rax
	pushq	%rax
	movl	-344(%rbp), %eax
	pushq	%rax
	leaq	.LC2(%rip), %rax
	pushq	%rax
	pushq	-352(%rbp)
	leaq	.LC0(%rip), %r9
	movq	%rdx, %r8
	leaq	.LC15(%rip), %rcx
	leaq	.LC0(%rip), %rdx
	leaq	.LC13(%rip), %rsi
	leaq	.LC22(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_warn
	addq	$48, %rsp
	jmp	.L61
.L62:
	cmpl	$-3, -340(%rbp)
	jne	.L63
	leaq	-304(%rbp), %rdx
	subq	$8, %rsp
	pushq	-312(%rbp)
	leaq	.LC0(%rip), %rax
	pushq	%rax
	movl	-344(%rbp), %eax
	pushq	%rax
	leaq	.LC2(%rip), %rax
	pushq	%rax
	pushq	-352(%rbp)
	leaq	.LC0(%rip), %r9
	movq	%rdx, %r8
	leaq	.LC15(%rip), %rcx
	leaq	.LC0(%rip), %rdx
	leaq	.LC6(%rip), %rsi
	leaq	.LC23(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	addq	$48, %rsp
	jmp	.L61
.L63:
	cmpl	$-4, -340(%rbp)
	jne	.L61
	leaq	-304(%rbp), %rdx
	subq	$8, %rsp
	pushq	-312(%rbp)
	leaq	.LC0(%rip), %rax
	pushq	%rax
	movl	-344(%rbp), %eax
	pushq	%rax
	leaq	.LC2(%rip), %rax
	pushq	%rax
	pushq	-352(%rbp)
	leaq	.LC0(%rip), %r9
	movq	%rdx, %r8
	leaq	.LC15(%rip), %rcx
	leaq	.LC0(%rip), %rdx
	leaq	.LC6(%rip), %rsi
	leaq	.LC24(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	addq	$48, %rsp
	jmp	.L61
.L59:
	cmpl	$0, -340(%rbp)
	js	.L64
	movq	-312(%rbp), %rsi
	movl	-344(%rbp), %ecx
	movq	-352(%rbp), %rdx
	leaq	-304(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	leaq	.LC25(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_log
	jmp	.L61
.L64:
	cmpl	$-2, -340(%rbp)
	jne	.L65
	movq	-312(%rbp), %rsi
	movl	-344(%rbp), %ecx
	movq	-352(%rbp), %rdx
	leaq	-304(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	leaq	.LC26(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_warn
	jmp	.L61
.L65:
	cmpl	$-3, -340(%rbp)
	jne	.L66
	movq	-312(%rbp), %rsi
	movl	-344(%rbp), %ecx
	movq	-352(%rbp), %rdx
	leaq	-304(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	leaq	.LC27(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	jmp	.L61
.L66:
	cmpl	$-4, -340(%rbp)
	jne	.L61
	movq	-312(%rbp), %rsi
	movl	-344(%rbp), %ecx
	movq	-352(%rbp), %rdx
	leaq	-304(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	leaq	.LC28(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
.L61:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-312(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-320(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	jmp	.L51
.L68:
	nop
.L51:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L67
	call	__stack_chk_fail@PLT
.L67:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE8:
	.size	ecs_log_print, .-ecs_log_print
	.globl	_ecs_trace
	.type	_ecs_trace, @function
_ecs_trace:
.LFB9:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$240, %rsp
	movl	%edi, -212(%rbp)
	movq	%rsi, -224(%rbp)
	movl	%edx, -216(%rbp)
	movq	%rcx, -232(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L70
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L70:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movl	$32, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %rdi
	movq	-232(%rbp), %rcx
	movl	-216(%rbp), %edx
	movq	-224(%rbp), %rsi
	movl	-212(%rbp), %eax
	movq	%rdi, %r8
	movl	%eax, %edi
	call	ecs_log_print
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L71
	call	__stack_chk_fail@PLT
.L71:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE9:
	.size	_ecs_trace, .-_ecs_trace
	.globl	_ecs_warn
	.type	_ecs_warn, @function
_ecs_warn:
.LFB10:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$240, %rsp
	movq	%rdi, -216(%rbp)
	movl	%esi, -220(%rbp)
	movq	%rdx, -232(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L73
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L73:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movl	$24, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %rsi
	movq	-232(%rbp), %rcx
	movl	-220(%rbp), %edx
	movq	-216(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	movl	$-2, %edi
	call	ecs_log_print
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L74
	call	__stack_chk_fail@PLT
.L74:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE10:
	.size	_ecs_warn, .-_ecs_warn
	.globl	_ecs_err
	.type	_ecs_err, @function
_ecs_err:
.LFB11:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$240, %rsp
	movq	%rdi, -216(%rbp)
	movl	%esi, -220(%rbp)
	movq	%rdx, -232(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L76
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L76:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movl	$24, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %rsi
	movq	-232(%rbp), %rcx
	movl	-220(%rbp), %edx
	movq	-216(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	movl	$-3, %edi
	call	ecs_log_print
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L77
	call	__stack_chk_fail@PLT
.L77:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE11:
	.size	_ecs_err, .-_ecs_err
	.globl	_ecs_fatal
	.type	_ecs_fatal, @function
_ecs_fatal:
.LFB12:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$240, %rsp
	movq	%rdi, -216(%rbp)
	movl	%esi, -220(%rbp)
	movq	%rdx, -232(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L79
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L79:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movl	$24, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %rsi
	movq	-232(%rbp), %rcx
	movl	-220(%rbp), %edx
	movq	-216(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	movl	$-4, %edi
	call	ecs_log_print
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L80
	call	__stack_chk_fail@PLT
.L80:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE12:
	.size	_ecs_fatal, .-_ecs_fatal
	.globl	ecs_log_push
	.type	ecs_log_push, @function
ecs_log_push:
.LFB13:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	trace_indent(%rip), %eax
	addl	$1, %eax
	movl	%eax, trace_indent(%rip)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE13:
	.size	ecs_log_push, .-ecs_log_push
	.globl	ecs_log_pop
	.type	ecs_log_pop, @function
ecs_log_pop:
.LFB14:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	trace_indent(%rip), %eax
	subl	$1, %eax
	movl	%eax, trace_indent(%rip)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE14:
	.size	ecs_log_pop, .-ecs_log_pop
	.globl	ecs_tracing_enable
	.type	ecs_tracing_enable, @function
ecs_tracing_enable:
.LFB15:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, trace_level(%rip)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE15:
	.size	ecs_tracing_enable, .-ecs_tracing_enable
	.globl	ecs_tracing_color_enable
	.type	ecs_tracing_color_enable, @function
ecs_tracing_color_enable:
.LFB16:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, %eax
	movb	%al, -4(%rbp)
	movzbl	-4(%rbp), %eax
	movb	%al, trace_color(%rip)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE16:
	.size	ecs_tracing_color_enable, .-ecs_tracing_color_enable
	.section	.rodata
.LC29:
	.string	"%s:%d: error: %s"
.LC30:
	.string	"%d: error: %s"
.LC31:
	.string	"%s: error: %s"
.LC32:
	.string	"error: %s"
.LC33:
	.string	"    %s"
.LC34:
	.string	""
.LC35:
	.string	"    %*s^"
	.text
	.globl	_ecs_parser_error
	.type	_ecs_parser_error, @function
_ecs_parser_error:
.LFB17:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$256, %rsp
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	%rdx, -248(%rbp)
	movq	%rcx, -256(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L86
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L86:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movl	trace_level(%rip), %eax
	cmpl	$-2, %eax
	jl	.L87
	movl	$32, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %rdx
	movq	-256(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_vasprintf
	movq	%rax, -216(%rbp)
	cmpq	$-1, -248(%rbp)
	je	.L88
	cmpq	$0, -232(%rbp)
	je	.L89
	movq	-248(%rbp), %rax
	leaq	1(%rax), %rsi
	movq	-216(%rbp), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, %rcx
	movq	%rsi, %rdx
	movq	%rax, %rsi
	leaq	.LC29(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	jmp	.L90
.L89:
	movq	-248(%rbp), %rax
	leaq	1(%rax), %rcx
	movq	-216(%rbp), %rax
	movq	%rax, %rdx
	movq	%rcx, %rsi
	leaq	.LC30(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	jmp	.L90
.L88:
	cmpq	$0, -232(%rbp)
	je	.L91
	movq	-216(%rbp), %rdx
	movq	-232(%rbp), %rax
	movq	%rax, %rsi
	leaq	.LC31(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	jmp	.L90
.L91:
	movq	-216(%rbp), %rax
	movq	%rax, %rsi
	leaq	.LC32(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
.L90:
	movq	-240(%rbp), %rax
	movq	%rax, %rsi
	leaq	.LC33(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	cmpq	$-1, -248(%rbp)
	je	.L92
	movq	-248(%rbp), %rax
	leaq	.LC34(%rip), %rdx
	movq	%rax, %rsi
	leaq	.LC35(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	jmp	.L93
.L92:
	leaq	.LC34(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
.L93:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-216(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L87:
	movq	208+ecs_os_api(%rip), %rax
	call	*%rax
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L94
	call	__stack_chk_fail@PLT
.L94:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE17:
	.size	_ecs_parser_error, .-_ecs_parser_error
	.section	.rodata
.LC36:
	.string	"%s (%s)"
.LC37:
	.string	"%s"
	.text
	.globl	_ecs_abort
	.type	_ecs_abort, @function
_ecs_abort:
.LFB18:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$256, %rsp
	movl	%edi, -228(%rbp)
	movq	%rsi, -240(%rbp)
	movl	%edx, -232(%rbp)
	movq	%rcx, -248(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L96
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L96:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -248(%rbp)
	je	.L97
	movl	$32, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %rdx
	movq	-248(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_vasprintf
	movq	%rax, -216(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, %edi
	call	ecs_strerror
	movq	%rax, %rcx
	movq	-216(%rbp), %rdx
	movl	-232(%rbp), %esi
	movq	-240(%rbp), %rax
	movq	%rcx, %r8
	movq	%rdx, %rcx
	leaq	.LC36(%rip), %rdx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_fatal
	movq	40+ecs_os_api(%rip), %rdx
	movq	-216(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	jmp	.L98
.L97:
	movl	-228(%rbp), %eax
	movl	%eax, %edi
	call	ecs_strerror
	movq	%rax, %rdx
	movl	-232(%rbp), %esi
	movq	-240(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC37(%rip), %rdx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_fatal
.L98:
	movq	208+ecs_os_api(%rip), %rax
	call	*%rax
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L99
	call	__stack_chk_fail@PLT
.L99:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE18:
	.size	_ecs_abort, .-_ecs_abort
	.section	.rodata
.LC38:
	.string	"assert(%s) %s (%s)"
.LC39:
	.string	"assert(%s) %s"
	.text
	.globl	_ecs_assert
	.type	_ecs_assert, @function
_ecs_assert:
.LFB19:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$272, %rsp
	movl	%esi, -232(%rbp)
	movq	%rdx, -240(%rbp)
	movq	%rcx, -248(%rbp)
	movl	%r8d, -252(%rbp)
	movq	%r9, -264(%rbp)
	testb	%al, %al
	je	.L101
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L101:
	movl	%edi, %eax
	movb	%al, -228(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movzbl	-228(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L106
	cmpq	$0, -264(%rbp)
	je	.L103
	movl	$48, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %rdx
	movq	-264(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_vasprintf
	movq	%rax, -216(%rbp)
	movl	-232(%rbp), %eax
	movl	%eax, %edi
	call	ecs_strerror
	movq	%rax, %rcx
	movq	-216(%rbp), %rdi
	movq	-240(%rbp), %rdx
	movl	-252(%rbp), %esi
	movq	-248(%rbp), %rax
	movq	%rcx, %r9
	movq	%rdi, %r8
	movq	%rdx, %rcx
	leaq	.LC38(%rip), %rdx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_fatal
	movq	40+ecs_os_api(%rip), %rdx
	movq	-216(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	jmp	.L104
.L103:
	movl	-232(%rbp), %eax
	movl	%eax, %edi
	call	ecs_strerror
	movq	%rax, %rcx
	movq	-240(%rbp), %rdx
	movl	-252(%rbp), %esi
	movq	-248(%rbp), %rax
	movq	%rcx, %r8
	movq	%rdx, %rcx
	leaq	.LC39(%rip), %rdx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_fatal
.L104:
	movq	208+ecs_os_api(%rip), %rax
	call	*%rax
.L106:
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L105
	call	__stack_chk_fail@PLT
.L105:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE19:
	.size	_ecs_assert, .-_ecs_assert
	.globl	_ecs_deprecated
	.type	_ecs_deprecated, @function
_ecs_deprecated:
.LFB20:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movl	-12(%rbp), %esi
	movq	-8(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC37(%rip), %rdx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_err
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE20:
	.size	_ecs_deprecated, .-_ecs_deprecated
	.section	.rodata
.LC40:
	.string	"ECS_INVALID_PARAMETER"
.LC41:
	.string	"ECS_NOT_A_COMPONENT"
.LC42:
	.string	"ECS_TYPE_NOT_AN_ENTITY"
.LC43:
	.string	"ECS_INTERNAL_ERROR"
.LC44:
	.string	"ECS_ALREADY_DEFINED"
.LC45:
	.string	"ECS_INVALID_COMPONENT_SIZE"
	.align 8
.LC46:
	.string	"ECS_INVALID_COMPONENT_ALIGNMENT"
.LC47:
	.string	"ECS_OUT_OF_MEMORY"
.LC48:
	.string	"ECS_MODULE_UNDEFINED"
.LC49:
	.string	"ECS_COLUMN_INDEX_OUT_OF_RANGE"
.LC50:
	.string	"ECS_COLUMN_IS_NOT_SHARED"
.LC51:
	.string	"ECS_COLUMN_IS_SHARED"
.LC52:
	.string	"ECS_COLUMN_HAS_NO_DATA"
.LC53:
	.string	"ECS_COLUMN_TYPE_MISMATCH"
.LC54:
	.string	"ECS_INVALID_WHILE_ITERATING"
.LC55:
	.string	"ECS_INVALID_FROM_WORKER"
.LC56:
	.string	"ECS_OUT_OF_RANGE"
.LC57:
	.string	"ECS_THREAD_ERROR"
.LC58:
	.string	"ECS_MISSING_OS_API"
.LC59:
	.string	"ECS_UNSUPPORTED"
.LC60:
	.string	"ECS_NO_OUT_COLUMNS"
.LC61:
	.string	"ECS_COLUMN_ACCESS_VIOLATION"
.LC62:
	.string	"ECS_DESERIALIZE_FORMAT_ERROR"
.LC63:
	.string	"ECS_TYPE_CONSTRAINT_VIOLATION"
.LC64:
	.string	"ECS_COMPONENT_NOT_REGISTERED"
.LC65:
	.string	"ECS_INCONSISTENT_COMPONENT_ID"
.LC66:
	.string	"ECS_TYPE_INVALID_CASE"
.LC67:
	.string	"ECS_INCONSISTENT_NAME"
	.align 8
.LC68:
	.string	"ECS_INCONSISTENT_COMPONENT_ACTION"
.LC69:
	.string	"ECS_INVALID_OPERATION"
.LC70:
	.string	"ECS_INVALID_DELETE"
.LC71:
	.string	"ECS_CYCLE_DETECTED"
.LC72:
	.string	"ECS_LOCKED_STORAGE"
.LC73:
	.string	"unknown error code"
	.text
	.globl	ecs_strerror
	.type	ecs_strerror, @function
ecs_strerror:
.LFB21:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	cmpl	$80, -4(%rbp)
	ja	.L109
	movl	-4(%rbp), %eax
	leaq	0(,%rax,4), %rdx
	leaq	.L111(%rip), %rax
	movl	(%rdx,%rax), %eax
	cltq
	leaq	.L111(%rip), %rdx
	addq	%rdx, %rax
	notrack jmp	*%rax
	.section	.rodata
	.align 4
	.align 4
.L111:
	.long	.L109-.L111
	.long	.L143-.L111
	.long	.L142-.L111
	.long	.L141-.L111
	.long	.L140-.L111
	.long	.L139-.L111
	.long	.L138-.L111
	.long	.L137-.L111
	.long	.L136-.L111
	.long	.L135-.L111
	.long	.L134-.L111
	.long	.L133-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L132-.L111
	.long	.L109-.L111
	.long	.L131-.L111
	.long	.L130-.L111
	.long	.L129-.L111
	.long	.L128-.L111
	.long	.L127-.L111
	.long	.L126-.L111
	.long	.L125-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L124-.L111
	.long	.L123-.L111
	.long	.L122-.L111
	.long	.L121-.L111
	.long	.L120-.L111
	.long	.L119-.L111
	.long	.L118-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L117-.L111
	.long	.L116-.L111
	.long	.L115-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L114-.L111
	.long	.L113-.L111
	.long	.L112-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L109-.L111
	.long	.L110-.L111
	.text
.L142:
	leaq	4+.LC40(%rip), %rax
	jmp	.L144
.L131:
	leaq	4+.LC41(%rip), %rax
	jmp	.L144
.L117:
	leaq	4+.LC42(%rip), %rax
	jmp	.L144
.L137:
	leaq	4+.LC43(%rip), %rax
	jmp	.L144
.L136:
	leaq	4+.LC44(%rip), %rax
	jmp	.L144
.L130:
	leaq	4+.LC45(%rip), %rax
	jmp	.L144
.L129:
	leaq	4+.LC46(%rip), %rax
	jmp	.L144
.L140:
	leaq	4+.LC47(%rip), %rax
	jmp	.L144
.L125:
	leaq	4+.LC48(%rip), %rax
	jmp	.L144
.L123:
	leaq	4+.LC49(%rip), %rax
	jmp	.L144
.L122:
	leaq	4+.LC50(%rip), %rax
	jmp	.L144
.L121:
	leaq	4+.LC51(%rip), %rax
	jmp	.L144
.L120:
	leaq	4+.LC52(%rip), %rax
	jmp	.L144
.L119:
	leaq	4+.LC53(%rip), %rax
	jmp	.L144
.L114:
	leaq	4+.LC54(%rip), %rax
	jmp	.L144
.L112:
	leaq	4+.LC55(%rip), %rax
	jmp	.L144
.L139:
	leaq	4+.LC56(%rip), %rax
	jmp	.L144
.L134:
	leaq	4+.LC57(%rip), %rax
	jmp	.L144
.L135:
	leaq	4+.LC58(%rip), %rax
	jmp	.L144
.L138:
	leaq	4+.LC59(%rip), %rax
	jmp	.L144
.L118:
	leaq	4+.LC60(%rip), %rax
	jmp	.L144
.L124:
	leaq	4+.LC61(%rip), %rax
	jmp	.L144
.L110:
	leaq	4+.LC62(%rip), %rax
	jmp	.L144
.L116:
	leaq	4+.LC63(%rip), %rax
	jmp	.L144
.L128:
	leaq	4+.LC64(%rip), %rax
	jmp	.L144
.L127:
	leaq	4+.LC65(%rip), %rax
	jmp	.L144
.L115:
	leaq	4+.LC66(%rip), %rax
	jmp	.L144
.L132:
	leaq	4+.LC67(%rip), %rax
	jmp	.L144
.L126:
	leaq	4+.LC68(%rip), %rax
	jmp	.L144
.L143:
	leaq	4+.LC69(%rip), %rax
	jmp	.L144
.L141:
	leaq	4+.LC70(%rip), %rax
	jmp	.L144
.L133:
	leaq	4+.LC71(%rip), %rax
	jmp	.L144
.L113:
	leaq	4+.LC72(%rip), %rax
	jmp	.L144
.L109:
	leaq	.LC73(%rip), %rax
.L144:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE21:
	.size	ecs_strerror, .-ecs_strerror
	.section	.rodata
.LC74:
	.string	"flecs.c"
.LC75:
	.string	"ECS_HAS_ROLE(e, SWITCH)"
	.align 8
.LC76:
	.string	"((e & (0xFFull << 56)) == ECS_SWITCH)"
.LC77:
	.string	"type_ptr != NULL"
.LC78:
	.string	"type_ptr != ((void *)0)"
	.text
	.globl	flecs_init_data
	.type	flecs_init_data, @function
flecs_init_data:
.LFB22:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-144(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-144(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -116(%rbp)
	movq	-144(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-144(%rbp), %rax
	movl	124(%rax), %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -116(%rbp)
	jne	.L146
	cmpl	$0, -112(%rbp)
	jne	.L146
	cmpl	$0, -108(%rbp)
	jne	.L146
	movq	-152(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-152(%rbp), %rax
	jmp	.L147
.L146:
	movq	-88(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -80(%rbp)
	cmpl	$0, -116(%rbp)
	je	.L148
	cmpl	$0, -112(%rbp)
	jne	.L148
	movq	32+ecs_os_api(%rip), %rax
	movl	-116(%rbp), %edx
	sall	$4, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-152(%rbp), %rdx
	movq	%rax, 16(%rdx)
	jmp	.L149
.L148:
	cmpl	$0, -116(%rbp)
	jne	.L150
	cmpl	$0, -112(%rbp)
	je	.L149
.L150:
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -104(%rbp)
	movq	32+ecs_os_api(%rip), %rax
	movl	-104(%rbp), %edx
	sall	$4, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-152(%rbp), %rdx
	movq	%rax, 16(%rdx)
.L149:
	cmpl	$0, -116(%rbp)
	je	.L151
	movl	$0, -120(%rbp)
	jmp	.L152
.L154:
	movl	-120(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_component_from_id
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L153
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L153
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	cltq
	movq	-152(%rbp), %rdx
	movq	16(%rdx), %rdx
	movl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	salq	$4, %rcx
	leaq	(%rdx,%rcx), %rbx
	movq	%rax, %rdi
	call	flecs_to_i16
	movw	%ax, 8(%rbx)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	movq	-152(%rbp), %rdx
	movq	16(%rdx), %rdx
	movl	-120(%rbp), %ecx
	movslq	%ecx, %rcx
	salq	$4, %rcx
	leaq	(%rdx,%rcx), %rbx
	movq	%rax, %rdi
	call	flecs_to_i16
	movw	%ax, 10(%rbx)
.L153:
	addl	$1, -120(%rbp)
.L152:
	movl	-120(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jl	.L154
.L151:
	cmpl	$0, -112(%rbp)
	je	.L155
	movq	-144(%rbp), %rax
	movl	120(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	32+ecs_os_api(%rip), %rax
	movl	-112(%rbp), %edx
	sall	$4, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-152(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movl	$0, -120(%rbp)
	jmp	.L156
.L159:
	movl	-120(%rbp), %edx
	movl	-100(%rbp), %eax
	addl	%edx, %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-56(%rbp), %rax
	movabsq	$-360287970189639680, %rdx
	cmpq	%rdx, %rax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2457, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC75(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movabsq	$-72057594037927936, %rax
	andq	-56(%rbp), %rax
	movabsq	$-360287970189639680, %rdx
	cmpq	%rdx, %rax
	je	.L157
	leaq	__PRETTY_FUNCTION__.7960(%rip), %rcx
	movl	$2457, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC76(%rip), %rdi
	call	__assert_fail@PLT
.L157:
	movabsq	$72057594037927935, %rax
	andq	%rax, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	-136(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2460, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC77(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L158
	leaq	__PRETTY_FUNCTION__.7960(%rip), %rcx
	movl	$2460, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC78(%rip), %rdi
	call	__assert_fail@PLT
.L158:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	cltq
	salq	$3, %rax
	leaq	-8(%rax), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rcx
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_switch_new
	movq	%rax, -24(%rbp)
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movl	-120(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rax, (%rdx)
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movl	-120(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	%rax, 8(%rdx)
	movq	-144(%rbp), %rax
	movl	120(%rax), %edx
	movl	-120(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -92(%rbp)
	movq	-152(%rbp), %rax
	movq	16(%rax), %rax
	movl	-92(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	leaq	(%rax,%rdx), %rbx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_switch_values
	movq	%rax, (%rbx)
	movq	-152(%rbp), %rax
	movq	16(%rax), %rax
	movl	-92(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movw	$8, 8(%rax)
	movq	-152(%rbp), %rax
	movq	16(%rax), %rax
	movl	-92(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movw	$8, 10(%rax)
	addl	$1, -120(%rbp)
.L156:
	movl	-120(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.L159
.L155:
	cmpl	$0, -108(%rbp)
	je	.L160
	movq	32+ecs_os_api(%rip), %rax
	movl	-108(%rbp), %edx
	sall	$4, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-152(%rbp), %rdx
	movq	%rax, 32(%rdx)
	movl	$0, -120(%rbp)
	jmp	.L161
.L162:
	movq	-152(%rbp), %rax
	movq	32(%rax), %rax
	movl	-120(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	flecs_bitset_init
	addl	$1, -120(%rbp)
.L161:
	movl	-120(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jl	.L162
.L160:
	movq	-152(%rbp), %rax
.L147:
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE22:
	.size	flecs_init_data, .-flecs_init_data
	.type	get_component_action_flags, @function
get_component_action_flags:
.LFB23:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L164
	orl	$128, -4(%rbp)
.L164:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L165
	orl	$256, -4(%rbp)
.L165:
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L166
	orl	$512, -4(%rbp)
.L166:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L167
	orl	$1024, -4(%rbp)
.L167:
	movl	-4(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE23:
	.size	get_component_action_flags, .-get_component_action_flags
	.type	has_component, @function
has_component:
.LFB24:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L170
.L173:
	movl	-16(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_typeid
	cmpq	%rax, -40(%rbp)
	jne	.L171
	movl	$1, %eax
	jmp	.L172
.L171:
	addl	$1, -16(%rbp)
.L170:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L173
	movl	$0, %eax
.L172:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE24:
	.size	has_component, .-has_component
	.section	.rodata
	.align 8
.LC79:
	.string	"!component || column_count != 0"
	.text
	.type	notify_component_info, @function
notify_component_info:
.LFB25:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L175
	movq	-72(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	has_component
	testb	%al, %al
	je	.L174
.L175:
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -40(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L177
	cmpl	$0, -40(%rbp)
	je	.L178
.L177:
	movl	$1, %eax
	jmp	.L179
.L178:
	movl	$0, %eax
.L179:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2540, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC79(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	je	.L180
	cmpl	$0, -40(%rbp)
	jne	.L180
	leaq	__PRETTY_FUNCTION__.7995(%rip), %rcx
	movl	$2540, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC79(%rip), %rdi
	call	__assert_fail@PLT
.L180:
	cmpl	$0, -40(%rbp)
	je	.L188
	movq	-64(%rbp), %rax
	movq	32(%rax), %rax
	testq	%rax, %rax
	jne	.L182
	movq	32+ecs_os_api(%rip), %rax
	movl	-40(%rbp), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-64(%rbp), %rdx
	movq	%rax, 32(%rdx)
.L182:
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	andl	$-385, %eax
	movl	%eax, %edx
	movq	-64(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-32(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	$0, -44(%rbp)
	jmp	.L183
.L187:
	movl	-44(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_typeid
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L189
	movq	-16(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_c_info
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L186
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	get_component_action_flags
	movl	%eax, -36(%rbp)
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	orl	-36(%rbp), %eax
	movl	%eax, %edx
	movq	-64(%rbp), %rax
	movl	%edx, 16(%rax)
.L186:
	movq	-64(%rbp), %rax
	movq	32(%rax), %rax
	movl	-44(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rax, %rdx
	movq	-8(%rbp), %rax
	movq	%rax, (%rdx)
	jmp	.L185
.L189:
	nop
.L185:
	addl	$1, -44(%rbp)
.L183:
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L187
	jmp	.L174
.L188:
	nop
.L174:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE25:
	.size	notify_component_info, .-notify_component_info
	.type	notify_trigger, @function
notify_trigger:
.LFB26:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	andl	$64, %eax
	testl	%eax, %eax
	jne	.L195
	movl	$286, %eax
	cmpq	%rax, -24(%rbp)
	jne	.L192
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	orb	$8, %ah
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, 16(%rax)
	jmp	.L195
.L192:
	movl	$287, %eax
	cmpq	%rax, -24(%rbp)
	jne	.L193
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	orb	$16, %ah
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, 16(%rax)
	jmp	.L195
.L193:
	movl	$288, %eax
	cmpq	%rax, -24(%rbp)
	jne	.L194
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	orb	$32, %ah
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, 16(%rax)
	jmp	.L195
.L194:
	movl	$289, %eax
	cmpq	%rax, -24(%rbp)
	jne	.L195
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	orb	$64, %ah
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, 16(%rax)
.L195:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE26:
	.size	notify_trigger, .-notify_trigger
	.type	run_on_remove, @function
run_on_remove:
.LFB27:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -48(%rbp)
	cmpl	$0, -48(%rbp)
	je	.L201
	movq	-80(%rbp), %rax
	movq	96(%rax), %rdx
	movl	-48(%rbp), %ecx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	$0, %r9d
	movl	%ecx, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_run_monitors
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L198
.L199:
	movl	-52(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdi
	movl	-48(%rbp), %ecx
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	%rdi, %r9
	movl	%ecx, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_run_remove_actions
	addl	$1, -52(%rbp)
.L198:
	movl	-52(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L199
.L201:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L200
	call	__stack_chk_fail@PLT
.L200:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE27:
	.size	run_on_remove, .-run_on_remove
	.section	.rodata
.LC80:
	.string	"q1 != NULL"
.LC81:
	.string	"q1 != ((void *)0)"
.LC82:
	.string	"q2 != NULL"
.LC83:
	.string	"q2 != ((void *)0)"
.LC84:
	.string	"s1 != 0"
.LC85:
	.string	"s2 != 0"
	.text
	.type	compare_matched_query, @function
compare_matched_query:
.LFB28:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2628, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC80(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L203
	leaq	__PRETTY_FUNCTION__.8031(%rip), %rcx
	movl	$2628, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC81(%rip), %rdi
	call	__assert_fail@PLT
.L203:
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2629, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC82(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L204
	leaq	__PRETTY_FUNCTION__.8031(%rip), %rcx
	movl	$2629, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC83(%rip), %rdi
	call	__assert_fail@PLT
.L204:
	movq	-32(%rbp), %rax
	movq	1632(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	1632(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2633, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC84(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L205
	leaq	__PRETTY_FUNCTION__.8031(%rip), %rcx
	movl	$2633, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC84(%rip), %rdi
	call	__assert_fail@PLT
.L205:
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2634, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC85(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L206
	leaq	__PRETTY_FUNCTION__.8031(%rip), %rcx
	movl	$2634, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC85(%rip), %rdi
	call	__assert_fail@PLT
.L206:
	movq	-16(%rbp), %rax
	cmpq	-8(%rbp), %rax
	seta	%al
	movzbl	%al, %edx
	movq	-16(%rbp), %rax
	cmpq	-8(%rbp), %rax
	setb	%al
	movzbl	%al, %eax
	subl	%eax, %edx
	movl	%edx, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE28:
	.size	compare_matched_query, .-compare_matched_query
	.section	.rodata
.LC86:
	.string	"m != NULL"
.LC87:
	.string	"m != ((void *)0)"
	.text
	.type	add_monitor, @function
add_monitor:
.LFB29:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	movq	-40(%rbp), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2649, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC86(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L209
	leaq	__PRETTY_FUNCTION__.8040(%rip), %rcx
	movl	$2649, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC87(%rip), %rdi
	call	__assert_fail@PLT
.L209:
	movq	-24(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-24(%rbp), %rax
	movl	-52(%rbp), %edx
	movl	%edx, 8(%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rbx
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	leaq	compare_matched_query(%rip), %rcx
	movl	$16, %edx
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	qsort@PLT
	nop
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE29:
	.size	add_monitor, .-add_monitor
	.section	.rodata
.LC88:
	.string	"query != NULL"
.LC89:
	.string	"query != ((void *)0)"
	.align 8
.LC90:
	.string	"monitor #[green]%s#[reset] registered with table #[red]%s"
	.text
	.type	register_monitor, @function
register_monitor:
.LFB30:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -60(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2674, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L211
	leaq	__PRETTY_FUNCTION__.8047(%rip), %rcx
	movl	$2674, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L211:
	movq	-48(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movq	-48(%rbp), %rax
	movq	64(%rax), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L212
.L215:
	movl	-32(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -56(%rbp)
	jne	.L213
	movq	-8(%rbp), %rax
	movl	-60(%rbp), %edx
	movl	%edx, 8(%rax)
	jmp	.L210
.L213:
	addl	$1, -32(%rbp)
.L212:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L215
	movq	-48(%rbp), %rax
	leaq	64(%rax), %rcx
	movl	-60(%rbp), %edx
	movq	-56(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	add_monitor
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_type_str
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	movq	1632(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	movq	-16(%rbp), %rdx
	movq	%rdx, %r9
	movq	%rax, %r8
	leaq	.LC90(%rip), %rcx
	movl	$2690, %edx
	leaq	.LC74(%rip), %rsi
	movl	$2, %edi
	movl	$0, %eax
	call	_ecs_trace
	movq	40+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L210:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE30:
	.size	register_monitor, .-register_monitor
	.type	is_override, @function
is_override:
.LFB31:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	andl	$4, %eax
	testl	%eax, %eax
	jne	.L217
	movl	$0, %eax
	jmp	.L218
.L217:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	-28(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.L219
.L221:
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L220
	movq	-8(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$277, %edx
	cmpq	%rdx, %rax
	jne	.L220
	movq	-8(%rbp), %rax
	movl	%eax, %ecx
	movq	-56(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	je	.L220
	movl	$1, %eax
	jmp	.L218
.L220:
	subl	$1, -32(%rbp)
.L219:
	cmpl	$0, -32(%rbp)
	jns	.L221
	movl	$0, %eax
.L218:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE31:
	.size	is_override, .-is_override
	.type	register_on_set, @function
register_on_set:
.LFB32:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movl	%ecx, -124(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-112(%rbp), %rax
	movl	20(%rax), %eax
	testl	%eax, %eax
	je	.L223
	movq	-112(%rbp), %rax
	movq	72(%rax), %rax
	testq	%rax, %rax
	jne	.L224
	movq	32+ecs_os_api(%rip), %rax
	movq	-112(%rbp), %rdx
	movl	20(%rdx), %edx
	sall	$4, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-112(%rbp), %rdx
	movq	%rax, 72(%rdx)
.L224:
	movq	-120(%rbp), %rax
	movq	1608(%rax), %rax
	movl	-124(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -56(%rbp)
	movb	$0, -81(%rbp)
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-120(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -80(%rbp)
	jmp	.L225
.L233:
	movl	-80(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movl	160(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	-32(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$1, %eax
	testl	%eax, %eax
	je	.L235
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L235
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	jne	.L235
	cmpl	$0, -72(%rbp)
	je	.L229
	cmpl	$3, -72(%rbp)
	jne	.L236
.L229:
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movl	-80(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	movq	-24(%rbp), %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -68(%rbp)
	cmpl	$-1, -68(%rbp)
	je	.L237
	movq	-112(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -68(%rbp)
	jge	.L238
	movq	-112(%rbp), %rax
	movq	72(%rax), %rax
	movl	-68(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	leaq	-64(%rbp), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-16(%rbp), %rax
	movl	-124(%rbp), %edx
	movl	%edx, 8(%rax)
	movq	-112(%rbp), %rax
	movq	72(%rax), %rax
	movl	-68(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rax, %rdx
	movq	-64(%rbp), %rax
	movq	%rax, (%rdx)
	movq	-24(%rbp), %rdx
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	is_override
	orb	-81(%rbp), %al
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	movb	%al, -81(%rbp)
	jmp	.L232
.L235:
	nop
	jmp	.L232
.L236:
	nop
	jmp	.L232
.L237:
	nop
	jmp	.L232
.L238:
	nop
.L232:
	addl	$1, -80(%rbp)
.L225:
	movl	-80(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L233
	cmpb	$0, -81(%rbp)
	je	.L223
	movq	-112(%rbp), %rax
	leaq	88(%rax), %rcx
	movl	-124(%rbp), %edx
	movq	-120(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	add_monitor
.L223:
	movq	-112(%rbp), %rax
	leaq	80(%rax), %rcx
	movl	-124(%rbp), %edx
	movq	-120(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	add_monitor
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L234
	call	__stack_chk_fail@PLT
.L234:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE32:
	.size	register_on_set, .-register_on_set
	.type	register_un_set, @function
register_un_set:
.LFB33:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	orb	$64, %ah
	movl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-16(%rbp), %rax
	leaq	96(%rax), %rcx
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	add_monitor
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE33:
	.size	register_un_set, .-register_un_set
	.type	table_activate, @function
table_activate:
.LFB34:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movl	%ecx, %eax
	movb	%al, -92(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -88(%rbp)
	je	.L241
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	cmpb	$0, -92(%rbp)
	je	.L242
	movl	$2, %eax
	jmp	.L243
.L242:
	movl	$1, %eax
.L243:
	movl	%eax, -32(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_query_notify
	jmp	.L250
.L241:
	movq	-80(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -52(%rbp)
	movl	$0, -56(%rbp)
	jmp	.L245
.L248:
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	cmpb	$0, -92(%rbp)
	je	.L246
	movl	$2, %eax
	jmp	.L247
.L246:
	movl	$1, %eax
.L247:
	movl	%eax, -32(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	-56(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rcx
	leaq	-32(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_query_notify
	addl	$1, -56(%rbp)
.L245:
	movl	-56(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L248
.L250:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L249
	call	__stack_chk_fail@PLT
.L249:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE34:
	.size	table_activate, .-table_activate
	.section	.rodata
.LC91:
	.string	"*q != query"
	.text
	.type	register_query, @function
register_query:
.LFB35:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -60(%rbp)
	movq	-56(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$14, %eax
	testl	%eax, %eax
	jne	.L252
	movq	-48(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L253
.L255:
	movq	-48(%rbp), %rax
	movq	56(%rax), %rax
	movl	-32(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2854, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC91(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -56(%rbp)
	jne	.L254
	leaq	__PRETTY_FUNCTION__.8121(%rip), %rcx
	movl	$2854, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC91(%rip), %rdi
	call	__assert_fail@PLT
.L254:
	addl	$1, -32(%rbp)
.L253:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L255
	movq	-48(%rbp), %rax
	addq	$56, %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L256
	movq	-24(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, (%rax)
.L256:
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L252
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	je	.L252
	movq	-56(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	table_activate
.L252:
	movq	-56(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L257
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orb	$-128, %ah
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
	movl	-60(%rbp), %ecx
	movq	-56(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	register_monitor
.L257:
	movq	-56(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$4, %eax
	testl	%eax, %eax
	je	.L258
	movl	-60(%rbp), %ecx
	movq	-56(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	register_on_set
.L258:
	movq	-56(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$8, %eax
	testl	%eax, %eax
	je	.L260
	movl	-60(%rbp), %ecx
	movq	-56(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	register_un_set
.L260:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE35:
	.size	register_query, .-register_query
	.section	.rodata
.LC92:
	.string	"i != count"
	.text
	.type	unregister_query, @function
unregister_query:
.LFB36:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$14, %eax
	testl	%eax, %eax
	jne	.L268
	movq	-32(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L263
.L266:
	movq	-32(%rbp), %rax
	movq	56(%rax), %rax
	movl	-16(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -40(%rbp)
	je	.L269
	addl	$1, -16(%rbp)
.L263:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L266
	jmp	.L265
.L269:
	nop
.L265:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2905, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC92(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jne	.L267
	leaq	__PRETTY_FUNCTION__.8138(%rip), %rcx
	movl	$2905, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC92(%rip), %rdi
	call	__assert_fail@PLT
.L267:
	movq	-32(%rbp), %rax
	movq	56(%rax), %rax
	movl	-16(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_remove
.L268:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE36:
	.size	unregister_query, .-unregister_query
	.section	.rodata
.LC93:
	.string	"table != NULL"
.LC94:
	.string	"table != ((void *)0)"
	.text
	.globl	flecs_table_get_data
	.type	flecs_table_get_data, @function
flecs_table_get_data:
.LFB37:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2915, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L271
	leaq	__PRETTY_FUNCTION__.8142(%rip), %rcx
	movl	$2915, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L271:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE37:
	.size	flecs_table_get_data, .-flecs_table_get_data
	.section	.rodata
.LC95:
	.string	"!table->lock"
	.text
	.globl	flecs_table_get_or_create_data
	.type	flecs_table_get_or_create_data, @function
flecs_table_get_or_create_data:
.LFB38:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2923, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L274
	leaq	__PRETTY_FUNCTION__.8146(%rip), %rcx
	movl	$2923, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L274:
	movq	-24(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2924, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L275
	leaq	__PRETTY_FUNCTION__.8146(%rip), %rcx
	movl	$2924, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L275:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L276
	movq	32+ecs_os_api(%rip), %rax
	movl	$40, %edi
	call	*%rax
	movq	-24(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -8(%rbp)
.L276:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE38:
	.size	flecs_table_get_or_create_data, .-flecs_table_get_or_create_data
	.type	ctor_component, @function
ctor_component:
.LFB39:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movl	%r8d, -68(%rbp)
	movl	%r9d, -72(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L280
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L280
	movq	-48(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -28(%rbp)
	movq	-56(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -26(%rbp)
	movl	$16, %eax
	cmpw	$16, -26(%rbp)
	cmovge	-26(%rbp), %ax
	movswl	%ax, %edx
	movswl	-28(%rbp), %esi
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movl	-68(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -8(%rbp)
	movswq	-28(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-48(%rbp), %rax
	movq	80(%rax), %rsi
	movl	-72(%rbp), %r8d
	movq	-8(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	-40(%rbp), %rax
	subq	$8, %rsp
	pushq	-16(%rbp)
	movq	-24(%rbp), %r10
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
.L280:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE39:
	.size	ctor_component, .-ctor_component
	.section	.rodata
.LC96:
	.string	"column->data != NULL"
.LC97:
	.string	"column->data != ((void *)0)"
.LC98:
	.string	"ptr != NULL"
.LC99:
	.string	"ptr != ((void *)0)"
	.text
	.type	dtor_component, @function
dtor_component:
.LFB40:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movl	%r8d, -68(%rbp)
	movl	%r9d, -72(%rbp)
	cmpl	$0, -72(%rbp)
	je	.L286
	cmpq	$0, -48(%rbp)
	je	.L281
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L281
	movq	-48(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -28(%rbp)
	movq	-56(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -26(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2976, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC96(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L284
	leaq	__PRETTY_FUNCTION__.8173(%rip), %rcx
	movl	$2976, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC97(%rip), %rdi
	call	__assert_fail@PLT
.L284:
	movl	$16, %eax
	cmpw	$16, -26(%rbp)
	cmovge	-26(%rbp), %ax
	movswl	%ax, %edx
	movswl	-28(%rbp), %esi
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movl	-68(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2978, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC98(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L285
	leaq	__PRETTY_FUNCTION__.8173(%rip), %rcx
	movl	$2978, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC99(%rip), %rdi
	call	__assert_fail@PLT
.L285:
	movswq	-28(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rcx
	movl	-68(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movq	-48(%rbp), %rax
	movq	80(%rax), %rsi
	movl	-72(%rbp), %r8d
	movq	-8(%rbp), %rdx
	movq	-40(%rbp), %rax
	subq	$8, %rsp
	pushq	-16(%rbp)
	movq	-24(%rbp), %r10
	movl	%r8d, %r9d
	movq	%rcx, %r8
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	jmp	.L281
.L286:
	nop
.L281:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE40:
	.size	dtor_component, .-dtor_component
	.section	.rodata
	.align 8
.LC100:
	.string	"!is_delete || update_entity_index"
.LC101:
	.string	"!e || ecs_is_valid(world, e)"
	.align 8
.LC102:
	.string	"!e || records[i] == ecs_eis_get(world, e)"
	.align 8
.LC103:
	.string	"!e || records[i] == ((ecs_record_t*)_flecs_sparse_get((world->store).entity_index, sizeof(ecs_record_t), e))"
	.align 8
.LC104:
	.string	"!e || records[i]->table == table"
	.align 8
.LC105:
	.string	"ecs_is_valid(world, e) == false"
.LC106:
	.string	"ecs_is_valid(world, e) == 0"
.LC107:
	.string	"!ecs_is_valid(world, e)"
	.text
	.type	dtor_all_components, @function
dtor_all_components:
.LFB41:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movq	%rdx, -136(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -144(%rbp)
	movl	%r9d, %edx
	movl	16(%rbp), %eax
	movb	%dl, -148(%rbp)
	movb	%al, -152(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movzbl	-152(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L288
	cmpb	$0, -148(%rbp)
	je	.L289
.L288:
	movl	$1, %eax
	jmp	.L290
.L289:
	movl	$0, %eax
.L290:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$2996, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC100(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movzbl	-152(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L291
	cmpb	$0, -148(%rbp)
	jne	.L291
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$2996, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC100(%rip), %rdi
	call	__assert_fail@PLT
.L291:
	movq	-136(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -96(%rbp)
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -88(%rbp)
	movq	-128(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	-140(%rbp), %edx
	movl	-144(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movq	-128(%rbp), %rax
	movl	16(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	je	.L292
	movq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_defer_begin
	movq	-128(%rbp), %rax
	movl	$1, 132(%rax)
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.L293
.L310:
	movl	$0, -108(%rbp)
	jmp	.L294
.L295:
	movq	-136(%rbp), %rax
	movq	16(%rax), %rax
	movl	-108(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-128(%rbp), %rax
	movq	32(%rax), %rax
	movl	-108(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rsi
	movl	-112(%rbp), %edi
	movq	-88(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-120(%rbp), %rax
	movl	$1, %r9d
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	dtor_component
	addl	$1, -108(%rbp)
.L294:
	movl	-108(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.L295
	cmpb	$0, -148(%rbp)
	je	.L296
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L297
	movq	-64(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	je	.L298
.L297:
	movl	$1, %eax
	jmp	.L299
.L298:
	movl	$0, %eax
.L299:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3025, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC101(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	je	.L300
	movq	-64(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L300
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3025, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC101(%rip), %rdi
	call	__assert_fail@PLT
.L300:
	cmpq	$0, -64(%rbp)
	je	.L301
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rbx
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	movq	-64(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	cmpq	%rax, %rbx
	jne	.L302
.L301:
	movl	$1, %eax
	jmp	.L303
.L302:
	movl	$0, %eax
.L303:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3027, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC102(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	je	.L304
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rbx
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	movq	-64(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	cmpq	%rax, %rbx
	je	.L304
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3027, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC103(%rip), %rdi
	call	__assert_fail@PLT
.L304:
	cmpq	$0, -64(%rbp)
	je	.L305
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	cmpq	%rax, -128(%rbp)
	jne	.L306
.L305:
	movl	$1, %eax
	jmp	.L307
.L306:
	movl	$0, %eax
.L307:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3029, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC104(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	je	.L308
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	cmpq	%rax, -128(%rbp)
	je	.L308
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3029, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC104(%rip), %rdi
	call	__assert_fail@PLT
.L308:
	cmpb	$0, -152(%rbp)
	je	.L309
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_remove
	movq	-64(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3034, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC105(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	xorl	$1, %eax
	testb	%al, %al
	jne	.L296
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3034, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC106(%rip), %rdi
	call	__assert_fail@PLT
.L309:
	movq	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	leaq	-48(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_set
.L296:
	addl	$1, -112(%rbp)
.L293:
	movl	-112(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.L310
	movq	-128(%rbp), %rax
	movl	$0, 132(%rax)
	movq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_defer_end
	jmp	.L343
.L292:
	cmpb	$0, -148(%rbp)
	je	.L343
	cmpb	$0, -152(%rbp)
	je	.L312
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.L313
.L327:
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L314
	movq	-72(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	je	.L315
.L314:
	movl	$1, %eax
	jmp	.L316
.L315:
	movl	$0, %eax
.L316:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3056, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC101(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	je	.L317
	movq	-72(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L317
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3056, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC101(%rip), %rdi
	call	__assert_fail@PLT
.L317:
	cmpq	$0, -72(%rbp)
	je	.L318
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rbx
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	movq	-72(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	cmpq	%rax, %rbx
	jne	.L319
.L318:
	movl	$1, %eax
	jmp	.L320
.L319:
	movl	$0, %eax
.L320:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3057, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC102(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	je	.L321
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rbx
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	movq	-72(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	cmpq	%rax, %rbx
	je	.L321
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3057, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC103(%rip), %rdi
	call	__assert_fail@PLT
.L321:
	cmpq	$0, -72(%rbp)
	je	.L322
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	cmpq	%rax, -128(%rbp)
	jne	.L323
.L322:
	movl	$1, %eax
	jmp	.L324
.L323:
	movl	$0, %eax
.L324:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3059, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC104(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	je	.L325
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	cmpq	%rax, -128(%rbp)
	je	.L325
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3059, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC104(%rip), %rdi
	call	__assert_fail@PLT
.L325:
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_remove
	movq	-72(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3063, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC107(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	xorl	$1, %eax
	testb	%al, %al
	jne	.L326
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3063, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC107(%rip), %rdi
	call	__assert_fail@PLT
.L326:
	addl	$1, -112(%rbp)
.L313:
	movl	-112(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.L327
	jmp	.L343
.L312:
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	jmp	.L328
.L341:
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L329
	movq	-80(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	je	.L330
.L329:
	movl	$1, %eax
	jmp	.L331
.L330:
	movl	$0, %eax
.L331:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3068, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC101(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	je	.L332
	movq	-80(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L332
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3068, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC101(%rip), %rdi
	call	__assert_fail@PLT
.L332:
	cmpq	$0, -80(%rbp)
	je	.L333
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rbx
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	movq	-80(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	cmpq	%rax, %rbx
	jne	.L334
.L333:
	movl	$1, %eax
	jmp	.L335
.L334:
	movl	$0, %eax
.L335:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3069, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC102(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	je	.L336
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rbx
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	movq	-80(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	cmpq	%rax, %rbx
	je	.L336
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3069, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC103(%rip), %rdi
	call	__assert_fail@PLT
.L336:
	cmpq	$0, -80(%rbp)
	je	.L337
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	cmpq	%rax, -128(%rbp)
	jne	.L338
.L337:
	movl	$1, %eax
	jmp	.L339
.L338:
	movl	$0, %eax
.L339:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3071, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC104(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	je	.L340
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	cmpq	%rax, -128(%rbp)
	je	.L340
	leaq	__PRETTY_FUNCTION__.8184(%rip), %rcx
	movl	$3071, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC104(%rip), %rdi
	call	__assert_fail@PLT
.L340:
	movq	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	leaq	-48(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_set
	addl	$1, -112(%rbp)
.L328:
	movl	-112(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.L341
.L343:
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L342
	call	__stack_chk_fail@PLT
.L342:
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE41:
	.size	dtor_all_components, .-dtor_all_components
	.section	.rodata
	.align 8
.LC108:
	.string	"ecs_vector_count(data->record_ptrs) == ecs_vector_count(data->entities)"
	.align 8
.LC109:
	.string	"!columns[c].data || (ecs_vector_count(columns[c].data) == ecs_vector_count(data->entities))"
	.text
	.type	fini_data, @function
fini_data:
.LFB42:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movl	%ecx, %eax
	movl	%r8d, %esi
	movl	%r9d, %ecx
	movl	16(%rbp), %edx
	movb	%al, -108(%rbp)
	movl	%esi, %eax
	movb	%al, -112(%rbp)
	movl	%ecx, %eax
	movb	%al, -116(%rbp)
	movl	%edx, %eax
	movb	%al, -120(%rbp)
	movq	-96(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3090, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-96(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L345
	leaq	__PRETTY_FUNCTION__.8218(%rip), %rcx
	movl	$3090, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L345:
	cmpq	$0, -104(%rbp)
	je	.L364
	cmpb	$0, -108(%rbp)
	je	.L348
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	run_on_remove
.L348:
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_data_count
	movl	%eax, -56(%rbp)
	cmpl	$0, -56(%rbp)
	je	.L349
	movzbl	-116(%rbp), %ecx
	movzbl	-112(%rbp), %r8d
	movl	-56(%rbp), %edi
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rax
	subq	$8, %rsp
	pushq	%rcx
	movl	%r8d, %r9d
	movl	%edi, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	dtor_all_components
	addq	$16, %rsp
.L349:
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %ebx
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3107, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC108(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %ebx
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	je	.L350
	leaq	__PRETTY_FUNCTION__.8218(%rip), %rcx
	movl	$3107, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC108(%rip), %rdi
	call	__assert_fail@PLT
.L350:
	movq	-104(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L351
	movq	-96(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -68(%rbp)
	jmp	.L352
.L357:
	movl	-68(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L353
	movl	-68(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %ebx
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	jne	.L354
.L353:
	movl	$1, %eax
	jmp	.L355
.L354:
	movl	$0, %eax
.L355:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3115, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC109(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-68(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L356
	movl	-68(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %ebx
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	je	.L356
	leaq	__PRETTY_FUNCTION__.8218(%rip), %rcx
	movl	$3115, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC109(%rip), %rdi
	call	__assert_fail@PLT
.L356:
	movl	-68(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	addl	$1, -68(%rbp)
.L352:
	movl	-68(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L357
	movq	40+ecs_os_api(%rip), %rdx
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-104(%rbp), %rax
	movq	$0, 16(%rax)
.L351:
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L358
	movq	-96(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	$0, -64(%rbp)
	jmp	.L359
.L360:
	movl	-64(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	flecs_switch_free
	addl	$1, -64(%rbp)
.L359:
	movl	-64(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jl	.L360
	movq	40+ecs_os_api(%rip), %rdx
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-104(%rbp), %rax
	movq	$0, 24(%rax)
.L358:
	movq	-104(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L361
	movq	-96(%rbp), %rax
	movl	124(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	$0, -60(%rbp)
	jmp	.L362
.L363:
	movl	-60(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	flecs_bitset_deinit
	addl	$1, -60(%rbp)
.L362:
	movl	-60(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L363
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-104(%rbp), %rax
	movq	$0, 32(%rax)
.L361:
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-104(%rbp), %rax
	movq	$0, (%rax)
	movq	-104(%rbp), %rax
	movq	$0, 8(%rax)
	cmpb	$0, -120(%rbp)
	je	.L344
	cmpl	$0, -56(%rbp)
	je	.L344
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rax
	movl	$0, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	table_activate
	jmp	.L344
.L364:
	nop
.L344:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE42:
	.size	fini_data, .-fini_data
	.globl	flecs_table_clear_data
	.type	flecs_table_clear_data, @function
flecs_table_clear_data:
.LFB43:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	$0
	movl	$0, %r9d
	movl	$0, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	fini_data
	addq	$16, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE43:
	.size	flecs_table_clear_data, .-flecs_table_clear_data
	.globl	flecs_table_clear_entities_silent
	.type	flecs_table_clear_entities_silent, @function
flecs_table_clear_entities_silent:
.LFB44:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	$0, %r9d
	movl	$1, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	fini_data
	addq	$16, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE44:
	.size	flecs_table_clear_entities_silent, .-flecs_table_clear_entities_silent
	.globl	flecs_table_clear_entities
	.type	flecs_table_clear_entities, @function
flecs_table_clear_entities:
.LFB45:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	$0, %r9d
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rax, %rdi
	call	fini_data
	addq	$16, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE45:
	.size	flecs_table_clear_entities, .-flecs_table_clear_entities
	.globl	flecs_table_delete_entities
	.type	flecs_table_delete_entities, @function
flecs_table_delete_entities:
.LFB46:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	$1, %r9d
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rax, %rdi
	call	fini_data
	addq	$16, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE46:
	.size	flecs_table_delete_entities, .-flecs_table_delete_entities
	.globl	flecs_table_remove_actions
	.type	flecs_table_remove_actions, @function
flecs_table_remove_actions:
.LFB47:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L371
	movq	-8(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	run_on_remove
.L371:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE47:
	.size	flecs_table_remove_actions, .-flecs_table_remove_actions
	.globl	flecs_table_free
	.type	flecs_table_free, @function
flecs_table_free:
.LFB48:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3207, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L373
	leaq	__PRETTY_FUNCTION__.8264(%rip), %rcx
	movl	$3207, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L373:
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	subq	$8, %rsp
	pushq	$0
	movl	$1, %r9d
	movl	$1, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	fini_data
	addq	$16, %rsp
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_clear_edges
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_unregister_table
	movq	40+ecs_os_api(%rip), %rdx
	movq	-32(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-32(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-32(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	40+ecs_os_api(%rip), %rdx
	movq	-32(%rbp), %rax
	movq	104(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-32(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-32(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-32(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	testq	%rax, %rax
	je	.L374
	movq	40+ecs_os_api(%rip), %rdx
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L374:
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	testq	%rax, %rax
	je	.L375
	movl	$0, -12(%rbp)
	jmp	.L376
.L377:
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	addl	$1, -12(%rbp)
.L376:
	movq	-32(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L377
	movq	40+ecs_os_api(%rip), %rdx
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L375:
	movq	-32(%rbp), %rax
	movq	$0, (%rax)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE48:
	.size	flecs_table_free, .-flecs_table_free
	.globl	flecs_table_free_type
	.type	flecs_table_free_type, @function
flecs_table_free_type:
.LFB49:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE49:
	.size	flecs_table_free_type, .-flecs_table_free_type
	.globl	flecs_table_reset
	.type	flecs_table_reset, @function
flecs_table_reset:
.LFB50:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3257, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L380
	leaq	__PRETTY_FUNCTION__.8277(%rip), %rcx
	movl	$3257, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L380:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-16(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE50:
	.size	flecs_table_reset, .-flecs_table_reset
	.type	mark_table_dirty, @function
mark_table_dirty:
.LFB51:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	testq	%rax, %rax
	je	.L383
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %edx
	addl	$1, %edx
	movl	%edx, (%rax)
.L383:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE51:
	.size	mark_table_dirty, .-mark_table_dirty
	.section	.rodata
.LC110:
	.string	"index != -1"
	.text
	.globl	flecs_table_mark_dirty
	.type	flecs_table_mark_dirty, @function
flecs_table_mark_dirty:
.LFB52:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3280, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L385
	leaq	__PRETTY_FUNCTION__.8286(%rip), %rcx
	movl	$3280, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L385:
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3281, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L386
	leaq	__PRETTY_FUNCTION__.8286(%rip), %rcx
	movl	$3281, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L386:
	movq	-24(%rbp), %rax
	movq	104(%rax), %rax
	testq	%rax, %rax
	je	.L389
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-32(%rbp), %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -4(%rbp)
	cmpl	$-1, -4(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3285, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC110(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$-1, -4(%rbp)
	jne	.L388
	leaq	__PRETTY_FUNCTION__.8286(%rip), %rcx
	movl	$3285, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC110(%rip), %rdi
	call	__assert_fail@PLT
.L388:
	movq	-24(%rbp), %rax
	movq	104(%rax), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %edx
	addl	$1, %edx
	movl	%edx, (%rax)
.L389:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE52:
	.size	flecs_table_mark_dirty, .-flecs_table_mark_dirty
	.type	move_switch_columns, @function
move_switch_columns:
.LFB53:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$176, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movl	%edx, -148(%rbp)
	movq	%rcx, -160(%rbp)
	movq	%r8, -168(%rbp)
	movl	%r9d, -152(%rbp)
	movl	$0, -116(%rbp)
	movq	-160(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -112(%rbp)
	movq	-136(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.L399
	cmpl	$0, -100(%rbp)
	je	.L399
	movq	-168(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-136(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-160(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-136(%rbp), %rax
	movl	120(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-160(%rbp), %rax
	movl	120(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-72(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	jmp	.L394
.L398:
	movl	-112(%rbp), %edx
	movl	-96(%rbp), %eax
	addl	%edx, %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-116(%rbp), %edx
	movl	-92(%rbp), %eax
	addl	%edx, %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jne	.L395
	movl	-116(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-112(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-148(%rbp), %edx
	movl	16(%rbp), %eax
	addl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_ensure
	movl	$0, -108(%rbp)
	jmp	.L396
.L397:
	movl	-152(%rbp), %edx
	movl	-108(%rbp), %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_get
	movq	%rax, -8(%rbp)
	movl	-148(%rbp), %edx
	movl	-108(%rbp), %eax
	leal	(%rdx,%rax), %ecx
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_switch_set
	addl	$1, -108(%rbp)
.L396:
	movl	-108(%rbp), %eax
	cmpl	16(%rbp), %eax
	jl	.L397
.L395:
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	setbe	%al
	movzbl	%al, %eax
	addl	%eax, -112(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	setnb	%al
	movzbl	%al, %eax
	addl	%eax, -116(%rbp)
.L394:
	movl	-112(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.L390
	movl	-116(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.L398
	jmp	.L390
.L399:
	nop
.L390:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE53:
	.size	move_switch_columns, .-move_switch_columns
	.type	move_bitset_columns, @function
move_bitset_columns:
.LFB54:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$176, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movl	%edx, -148(%rbp)
	movq	%rcx, -160(%rbp)
	movq	%r8, -168(%rbp)
	movl	%r9d, -152(%rbp)
	movl	$0, -116(%rbp)
	movq	-160(%rbp), %rax
	movl	124(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -112(%rbp)
	movq	-136(%rbp), %rax
	movl	124(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -104(%rbp)
	je	.L409
	cmpl	$0, -100(%rbp)
	je	.L409
	movq	-168(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-144(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-136(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-160(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-136(%rbp), %rax
	movl	128(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	-160(%rbp), %rax
	movl	128(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-72(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	jmp	.L404
.L408:
	movl	-112(%rbp), %edx
	movl	-96(%rbp), %eax
	addl	%edx, %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-116(%rbp), %edx
	movl	-92(%rbp), %eax
	addl	%edx, %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jne	.L405
	movl	-116(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movl	-112(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movl	-148(%rbp), %edx
	movl	16(%rbp), %eax
	addl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_ensure
	movl	$0, -108(%rbp)
	jmp	.L406
.L407:
	movl	-152(%rbp), %edx
	movl	-108(%rbp), %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_get
	movzbl	%al, %eax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %edx
	movl	-148(%rbp), %ecx
	movl	-108(%rbp), %eax
	addl	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_set
	addl	$1, -108(%rbp)
.L406:
	movl	-108(%rbp), %eax
	cmpl	16(%rbp), %eax
	jl	.L407
.L405:
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	setbe	%al
	movzbl	%al, %eax
	addl	%eax, -112(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-32(%rbp), %rax
	setnb	%al
	movzbl	%al, %eax
	addl	%eax, -116(%rbp)
.L404:
	movl	-112(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.L400
	movl	-116(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.L408
	jmp	.L400
.L409:
	nop
.L400:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE54:
	.size	move_bitset_columns, .-move_bitset_columns
	.section	.rodata
	.align 8
.LC111:
	.string	"sw_column_count == 0 || sw_columns != NULL"
	.align 8
.LC112:
	.string	"sw_column_count == 0 || sw_columns != ((void *)0)"
	.align 8
.LC113:
	.string	"bs_column_count == 0 || bs_columns != NULL"
	.align 8
.LC114:
	.string	"bs_column_count == 0 || bs_columns != ((void *)0)"
.LC115:
	.string	"!column_count || columns"
	.align 8
.LC116:
	.string	"!sw_column_count || sw_columns"
	.align 8
.LC117:
	.string	"!bs_column_count || bs_columns"
	.text
	.type	ensure_data, @function
ensure_data:
.LFB55:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movq	-64(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-64(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-64(%rbp), %rax
	movl	124(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	$0, -8(%rbp)
	movl	-36(%rbp), %eax
	orl	-32(%rbp), %eax
	orl	-28(%rbp), %eax
	testl	%eax, %eax
	je	.L411
	movq	-72(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-72(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L412
	cmpq	$0, -16(%rbp)
	jne	.L412
	cmpq	$0, -8(%rbp)
	jne	.L412
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_init_data
	movq	-72(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-72(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpl	$0, -32(%rbp)
	je	.L413
	cmpq	$0, -16(%rbp)
	je	.L414
.L413:
	movl	$1, %eax
	jmp	.L415
.L414:
	movl	$0, %eax
.L415:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3424, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC111(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -32(%rbp)
	je	.L416
	cmpq	$0, -16(%rbp)
	jne	.L416
	leaq	__PRETTY_FUNCTION__.8371(%rip), %rcx
	movl	$3424, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC112(%rip), %rdi
	call	__assert_fail@PLT
.L416:
	cmpl	$0, -28(%rbp)
	je	.L417
	cmpq	$0, -8(%rbp)
	je	.L418
.L417:
	movl	$1, %eax
	jmp	.L419
.L418:
	movl	$0, %eax
.L419:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3426, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC113(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -28(%rbp)
	je	.L412
	cmpq	$0, -8(%rbp)
	jne	.L412
	leaq	__PRETTY_FUNCTION__.8371(%rip), %rcx
	movl	$3426, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC114(%rip), %rdi
	call	__assert_fail@PLT
.L412:
	movq	-80(%rbp), %rax
	movl	-36(%rbp), %edx
	movl	%edx, (%rax)
	movq	-88(%rbp), %rax
	movl	-32(%rbp), %edx
	movl	%edx, (%rax)
	movq	-96(%rbp), %rax
	movl	-28(%rbp), %edx
	movl	%edx, (%rax)
	movq	16(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	24(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	32(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
.L411:
	cmpl	$0, -36(%rbp)
	je	.L420
	cmpq	$0, -24(%rbp)
	je	.L421
.L420:
	movl	$1, %eax
	jmp	.L422
.L421:
	movl	$0, %eax
.L422:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3438, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC115(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -36(%rbp)
	je	.L423
	cmpq	$0, -24(%rbp)
	jne	.L423
	leaq	__PRETTY_FUNCTION__.8371(%rip), %rcx
	movl	$3438, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC115(%rip), %rdi
	call	__assert_fail@PLT
.L423:
	cmpl	$0, -32(%rbp)
	je	.L424
	cmpq	$0, -16(%rbp)
	je	.L425
.L424:
	movl	$1, %eax
	jmp	.L426
.L425:
	movl	$0, %eax
.L426:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3439, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC116(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -32(%rbp)
	je	.L427
	cmpq	$0, -16(%rbp)
	jne	.L427
	leaq	__PRETTY_FUNCTION__.8371(%rip), %rcx
	movl	$3439, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC116(%rip), %rdi
	call	__assert_fail@PLT
.L427:
	cmpl	$0, -28(%rbp)
	je	.L428
	cmpq	$0, -8(%rbp)
	je	.L429
.L428:
	movl	$1, %eax
	jmp	.L430
.L429:
	movl	$0, %eax
.L430:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3440, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC117(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -28(%rbp)
	je	.L432
	cmpq	$0, -8(%rbp)
	jne	.L432
	leaq	__PRETTY_FUNCTION__.8371(%rip), %rcx
	movl	$3440, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC117(%rip), %rdi
	call	__assert_fail@PLT
.L432:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE55:
	.size	ensure_data, .-ensure_data
	.section	.rodata
.LC118:
	.string	"new_size >= new_count"
.LC119:
	.string	"ctor != NULL"
.LC120:
	.string	"ctor != ((void *)0)"
	.align 8
.LC121:
	.string	"ecs_vector_size(column->data) == new_size"
	.text
	.type	grow_column, @function
grow_column:
.LFB56:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r12
	pushq	%rbx
	subq	$144, %rsp
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movq	%rdx, -136(%rbp)
	movq	%rcx, -144(%rbp)
	movl	%r8d, -148(%rbp)
	movl	%r9d, -152(%rbp)
	movl	16(%rbp), %eax
	movb	%al, -156(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-136(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -106(%rbp)
	movq	-136(%rbp), %rax
	movzwl	8(%rax), %eax
	cwtl
	movl	%eax, -104(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -100(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	movl	%eax, -96(%rbp)
	movl	-100(%rbp), %edx
	movl	-148(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -92(%rbp)
	movl	-152(%rbp), %eax
	cmpl	-96(%rbp), %eax
	setne	%al
	movb	%al, -107(%rbp)
	movl	-152(%rbp), %eax
	cmpl	-92(%rbp), %eax
	setge	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3462, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC118(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-152(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.L434
	leaq	__PRETTY_FUNCTION__.8388(%rip), %rcx
	movl	$3462, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC118(%rip), %rdi
	call	__assert_fail@PLT
.L434:
	cmpq	$0, -144(%rbp)
	je	.L435
	cmpl	$0, -100(%rbp)
	je	.L435
	cmpb	$0, -107(%rbp)
	je	.L435
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L435
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3469, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC119(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L436
	leaq	__PRETTY_FUNCTION__.8388(%rip), %rcx
	movl	$3469, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC120(%rip), %rdi
	call	__assert_fail@PLT
.L436:
	movl	$16, %eax
	cmpw	$16, -106(%rbp)
	cmovge	-106(%rbp), %ax
	movswl	%ax, %ecx
	movl	-152(%rbp), %edx
	movl	-104(%rbp), %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	%rax, -80(%rbp)
	movl	$16, %eax
	cmpw	$16, -106(%rbp)
	cmovge	-106(%rbp), %ax
	movswl	%ax, %edx
	movl	-92(%rbp), %ecx
	movl	-104(%rbp), %esi
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movl	$16, %eax
	cmpw	$16, -106(%rbp)
	cmovge	-106(%rbp), %ax
	movswl	%ax, %edx
	movq	-88(%rbp), %rax
	movl	-104(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -56(%rbp)
	movl	$16, %eax
	cmpw	$16, -106(%rbp)
	cmovge	-106(%rbp), %ax
	movswl	%ax, %edx
	movq	-80(%rbp), %rax
	movl	-104(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	movq	-144(%rbp), %rax
	movq	32(%rax), %r12
	cmpb	$0, -156(%rbp)
	je	.L437
	movl	-92(%rbp), %ebx
	jmp	.L438
.L437:
	movl	-100(%rbp), %ebx
.L438:
	movl	-104(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-144(%rbp), %rax
	movq	80(%rax), %rsi
	movq	-48(%rbp), %rcx
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rax
	subq	$8, %rsp
	pushq	%r12
	movq	-64(%rbp), %r10
	movl	%ebx, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	movq	-144(%rbp), %rax
	movq	32(%rax), %rbx
	movl	-104(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-144(%rbp), %rax
	movq	80(%rax), %rsi
	movq	-56(%rbp), %r9
	movq	-48(%rbp), %r11
	movq	-128(%rbp), %rcx
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rax
	subq	$8, %rsp
	pushq	%rbx
	movl	-100(%rbp), %r8d
	pushq	%r8
	pushq	%rdi
	movq	-72(%rbp), %r10
	movq	%r11, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-80(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, (%rax)
	jmp	.L439
.L435:
	cmpb	$0, -107(%rbp)
	je	.L440
	movl	$16, %eax
	cmpw	$16, -106(%rbp)
	cmovge	-106(%rbp), %ax
	movswl	%ax, %edx
	movl	-152(%rbp), %ecx
	movl	-104(%rbp), %esi
	leaq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_size
.L440:
	movl	$16, %eax
	cmpw	$16, -106(%rbp)
	cmovge	-106(%rbp), %ax
	movswl	%ax, %edx
	movl	-148(%rbp), %ecx
	movl	-104(%rbp), %esi
	leaq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_addn
	movq	%rax, -40(%rbp)
	cmpb	$0, -156(%rbp)
	je	.L441
	cmpq	$0, -144(%rbp)
	je	.L441
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L441
	movq	-144(%rbp), %rax
	movq	32(%rax), %rbx
	movl	-104(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rcx
	movl	-100(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-128(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movq	-144(%rbp), %rax
	movq	80(%rax), %rsi
	movl	-148(%rbp), %r8d
	movq	-40(%rbp), %rdx
	movq	-120(%rbp), %rax
	subq	$8, %rsp
	pushq	%rbx
	movq	-32(%rbp), %r10
	movl	%r8d, %r9d
	movq	%rcx, %r8
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
.L441:
	movq	-88(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, (%rax)
.L439:
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	cmpl	%eax, -152(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3513, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC121(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	cmpl	%eax, -152(%rbp)
	je	.L444
	leaq	__PRETTY_FUNCTION__.8388(%rip), %rcx
	movl	$3513, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC121(%rip), %rdi
	call	__assert_fail@PLT
.L444:
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L443
	call	__stack_chk_fail@PLT
.L443:
	leaq	-16(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE56:
	.size	grow_column, .-grow_column
	.section	.rodata
.LC122:
	.string	"data != NULL"
.LC123:
	.string	"data != ((void *)0)"
.LC124:
	.string	"r != NULL"
.LC125:
	.string	"r != ((void *)0)"
.LC126:
	.string	"e != NULL"
.LC127:
	.string	"e != ((void *)0)"
	.align 8
.LC128:
	.string	"ecs_vector_size(data->entities) == size"
	.align 8
.LC129:
	.string	"ecs_vector_size(columns[i].data) == size"
	.text
	.type	grow_data, @function
grow_data:
.LFB57:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$176, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	%ecx, -156(%rbp)
	movl	%r8d, -160(%rbp)
	movq	%r9, -168(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -144(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3526, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -144(%rbp)
	jne	.L446
	leaq	__PRETTY_FUNCTION__.8404(%rip), %rcx
	movl	$3526, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L446:
	cmpq	$0, -152(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3527, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -152(%rbp)
	jne	.L447
	leaq	__PRETTY_FUNCTION__.8404(%rip), %rcx
	movl	$3527, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L447:
	movq	-152(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_data_count
	movl	%eax, -100(%rbp)
	movq	-144(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -116(%rbp)
	movq	-144(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-144(%rbp), %rax
	movl	124(%rax), %eax
	movl	%eax, -108(%rbp)
	movq	$0, -96(%rbp)
	movq	$0, -88(%rbp)
	movq	$0, -80(%rbp)
	leaq	-108(%rbp), %r9
	leaq	-112(%rbp), %r8
	leaq	-116(%rbp), %rcx
	movq	-152(%rbp), %rdx
	movq	-144(%rbp), %rsi
	movq	-136(%rbp), %rax
	subq	$8, %rsp
	leaq	-80(%rbp), %rdi
	pushq	%rdi
	leaq	-88(%rbp), %rdi
	pushq	%rdi
	leaq	-96(%rbp), %rdi
	pushq	%rdi
	movq	%rax, %rdi
	call	ensure_data
	addq	$32, %rsp
	movq	-152(%rbp), %rax
	leaq	8(%rax), %rdi
	movl	-160(%rbp), %eax
	movl	%eax, %ecx
	movl	$16, %edx
	movl	$8, %esi
	call	_ecs_vector_set_size
	movq	-152(%rbp), %rax
	leaq	8(%rax), %rdi
	movl	-156(%rbp), %eax
	movl	%eax, %ecx
	movl	$16, %edx
	movl	$8, %esi
	call	_ecs_vector_addn
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3542, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC124(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L448
	leaq	__PRETTY_FUNCTION__.8404(%rip), %rcx
	movl	$3542, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC125(%rip), %rdi
	call	__assert_fail@PLT
.L448:
	movq	-152(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	cmpl	%eax, -160(%rbp)
	jge	.L449
	movq	-152(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	movl	%eax, -160(%rbp)
.L449:
	movq	-152(%rbp), %rax
	movl	-160(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_set_size
	movq	-152(%rbp), %rax
	movl	-156(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_addn
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3550, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC126(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L450
	leaq	__PRETTY_FUNCTION__.8404(%rip), %rcx
	movl	$3550, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC127(%rip), %rdi
	call	__assert_fail@PLT
.L450:
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	cmpl	%eax, -160(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3551, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC128(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	cmpl	%eax, -160(%rbp)
	je	.L451
	leaq	__PRETTY_FUNCTION__.8404(%rip), %rcx
	movl	$3551, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC128(%rip), %rdi
	call	__assert_fail@PLT
.L451:
	cmpq	$0, -168(%rbp)
	je	.L452
	movl	$0, -104(%rbp)
	jmp	.L453
.L454:
	movl	-104(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-168(%rbp), %rax
	addq	%rdx, %rax
	movl	-104(%rbp), %edx
	movslq	%edx, %rdx
	leaq	0(,%rdx,8), %rcx
	movq	-56(%rbp), %rdx
	addq	%rcx, %rdx
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	addl	$1, -104(%rbp)
.L453:
	movl	-104(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jl	.L454
	jmp	.L455
.L452:
	movl	-156(%rbp), %eax
	sall	$3, %eax
	movslq	%eax, %rdx
	movq	-56(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
.L455:
	movl	-156(%rbp), %eax
	sall	$3, %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	movq	-144(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movl	$0, -104(%rbp)
	jmp	.L456
.L460:
	movq	-96(%rbp), %rax
	movl	-104(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movzwl	8(%rax), %eax
	testw	%ax, %ax
	je	.L468
	movq	$0, -72(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L459
	movl	-104(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
.L459:
	movl	-160(%rbp), %r8d
	movl	-156(%rbp), %edi
	movq	-72(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-136(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	%r8d, %r9d
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	grow_column
	addq	$16, %rsp
	movq	-96(%rbp), %rax
	movl	-104(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	cmpl	%eax, -160(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3579, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC129(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-96(%rbp), %rax
	movl	-104(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	cmpl	%eax, -160(%rbp)
	je	.L458
	leaq	__PRETTY_FUNCTION__.8404(%rip), %rcx
	movl	$3579, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC129(%rip), %rdi
	call	__assert_fail@PLT
.L468:
	nop
.L458:
	addl	$1, -104(%rbp)
.L456:
	movl	-116(%rbp), %eax
	cmpl	%eax, -104(%rbp)
	jl	.L460
	movl	$0, -104(%rbp)
	jmp	.L461
.L462:
	movq	-88(%rbp), %rax
	movl	-104(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-156(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_addn
	addl	$1, -104(%rbp)
.L461:
	movl	-112(%rbp), %eax
	cmpl	%eax, -104(%rbp)
	jl	.L462
	movl	$0, -104(%rbp)
	jmp	.L463
.L464:
	movq	-80(%rbp), %rax
	movl	-104(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movl	-156(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_addn
	addl	$1, -104(%rbp)
.L463:
	movl	-108(%rbp), %eax
	cmpl	%eax, -104(%rbp)
	jl	.L464
	movq	-144(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	mark_table_dirty
	movq	-136(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L465
	cmpl	$0, -100(%rbp)
	jne	.L465
	movq	-144(%rbp), %rsi
	movq	-136(%rbp), %rax
	movl	$1, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	table_activate
.L465:
	movq	-144(%rbp), %rax
	movl	112(%rax), %eax
	leal	1(%rax), %edx
	movq	-144(%rbp), %rax
	movl	%edx, 112(%rax)
	movl	-100(%rbp), %eax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L467
	call	__stack_chk_fail@PLT
.L467:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE57:
	.size	grow_data, .-grow_data
	.type	fast_append, @function
fast_append:
.LFB58:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L470
.L472:
	movl	-12(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -16(%rbp)
	cmpw	$0, -16(%rbp)
	je	.L471
	movq	-8(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -14(%rbp)
	movl	$16, %eax
	cmpw	$16, -14(%rbp)
	cmovge	-14(%rbp), %ax
	movswl	%ax, %edx
	movswl	-16(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
.L471:
	addl	$1, -12(%rbp)
.L470:
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L472
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE58:
	.size	fast_append, .-fast_append
	.section	.rodata
.LC130:
	.string	"count >= 0"
	.align 8
.LC131:
	.string	"ecs_vector_size(columns[i].data) == ecs_vector_size(data->entities)"
	.align 8
.LC132:
	.string	"ecs_vector_count(columns[i].data) == ecs_vector_count(data->entities)"
.LC133:
	.string	"sw_columns != NULL"
.LC134:
	.string	"sw_columns != ((void *)0)"
.LC135:
	.string	"bs_columns != NULL"
.LC136:
	.string	"bs_columns != ((void *)0)"
	.text
	.globl	flecs_table_append
	.type	flecs_table_append, @function
flecs_table_append:
.LFB59:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movq	%rcx, -176(%rbp)
	movq	%r8, -184(%rbp)
	movl	%r9d, %eax
	movb	%al, -188(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -160(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3633, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -160(%rbp)
	jne	.L474
	leaq	__PRETTY_FUNCTION__.8453(%rip), %rcx
	movl	$3633, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L474:
	cmpq	$0, -168(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3634, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -168(%rbp)
	jne	.L475
	leaq	__PRETTY_FUNCTION__.8453(%rip), %rcx
	movl	$3634, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L475:
	movq	-160(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3635, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-160(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L476
	leaq	__PRETTY_FUNCTION__.8453(%rip), %rcx
	movl	$3635, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L476:
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -120(%rbp)
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	movl	%eax, -116(%rbp)
	movq	-160(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-160(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-160(%rbp), %rax
	movl	124(%rax), %eax
	movl	%eax, -128(%rbp)
	movq	$0, -112(%rbp)
	movq	$0, -104(%rbp)
	movq	$0, -96(%rbp)
	leaq	-128(%rbp), %r9
	leaq	-132(%rbp), %r8
	leaq	-136(%rbp), %rcx
	movq	-168(%rbp), %rdx
	movq	-160(%rbp), %rsi
	movq	-152(%rbp), %rax
	subq	$8, %rsp
	leaq	-96(%rbp), %rdi
	pushq	%rdi
	leaq	-104(%rbp), %rdi
	pushq	%rdi
	leaq	-112(%rbp), %rdi
	pushq	%rdi
	movq	%rax, %rdi
	call	ensure_data
	addq	$32, %rsp
	movq	-168(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3654, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC126(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	jne	.L477
	leaq	__PRETTY_FUNCTION__.8453(%rip), %rcx
	movl	$3654, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC127(%rip), %rdi
	call	__assert_fail@PLT
.L477:
	movq	-80(%rbp), %rax
	movq	-176(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-160(%rbp), %rax
	movl	112(%rax), %edx
	movl	-120(%rbp), %eax
	cmpl	-116(%rbp), %eax
	sete	%al
	movzbl	%al, %eax
	addl	%eax, %edx
	movq	-160(%rbp), %rax
	movl	%edx, 112(%rax)
	movq	-168(%rbp), %rax
	addq	$8, %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3663, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC124(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L478
	leaq	__PRETTY_FUNCTION__.8453(%rip), %rcx
	movl	$3663, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC125(%rip), %rdi
	call	__assert_fail@PLT
.L478:
	movq	-72(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-160(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	mark_table_dirty
	movq	-152(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L479
	cmpl	$0, -120(%rbp)
	jne	.L479
	movq	-160(%rbp), %rsi
	movq	-152(%rbp), %rax
	movl	$1, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	table_activate
.L479:
	movl	-120(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3675, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC130(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -120(%rbp)
	jns	.L480
	leaq	__PRETTY_FUNCTION__.8453(%rip), %rcx
	movl	$3675, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC130(%rip), %rdi
	call	__assert_fail@PLT
.L480:
	movq	-160(%rbp), %rax
	movl	16(%rax), %eax
	andl	$196992, %eax
	testl	%eax, %eax
	jne	.L481
	movl	-136(%rbp), %edx
	movq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	fast_append
	movl	-120(%rbp), %eax
	jmp	.L495
.L481:
	movq	-160(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -56(%rbp)
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	movl	%eax, -116(%rbp)
	movl	$0, -124(%rbp)
	jmp	.L483
.L488:
	movq	-112(%rbp), %rax
	movl	-124(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movzwl	8(%rax), %eax
	testw	%ax, %ax
	je	.L497
	movq	$0, -88(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L486
	movl	-124(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
.L486:
	movzbl	-188(%rbp), %edi
	movl	-116(%rbp), %r8d
	movq	-88(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	-152(%rbp), %rax
	subq	$8, %rsp
	pushq	%rdi
	movl	%r8d, %r9d
	movl	$1, %r8d
	movq	%rax, %rdi
	call	grow_column
	addq	$16, %rsp
	movq	-112(%rbp), %rax
	movl	-124(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	movl	%eax, %ebx
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	cmpl	%eax, %ebx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3707, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC131(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-112(%rbp), %rax
	movl	-124(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	movl	%eax, %ebx
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	cmpl	%eax, %ebx
	je	.L487
	leaq	__PRETTY_FUNCTION__.8453(%rip), %rcx
	movl	$3707, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC131(%rip), %rdi
	call	__assert_fail@PLT
.L487:
	movq	-112(%rbp), %rax
	movl	-124(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %ebx
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3711, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC132(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-112(%rbp), %rax
	movl	-124(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %ebx
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	je	.L485
	leaq	__PRETTY_FUNCTION__.8453(%rip), %rcx
	movl	$3711, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC132(%rip), %rdi
	call	__assert_fail@PLT
.L497:
	nop
.L485:
	addl	$1, -124(%rbp)
.L483:
	movl	-136(%rbp), %eax
	cmpl	%eax, -124(%rbp)
	jl	.L488
	movl	$0, -124(%rbp)
	jmp	.L489
.L491:
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3718, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC133(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	jne	.L490
	leaq	__PRETTY_FUNCTION__.8453(%rip), %rcx
	movl	$3718, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC134(%rip), %rdi
	call	__assert_fail@PLT
.L490:
	movq	-104(%rbp), %rax
	movl	-124(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_switch_add
	movq	-112(%rbp), %rdx
	movq	-160(%rbp), %rax
	movl	120(%rax), %ecx
	movl	-124(%rbp), %eax
	addl	%ecx, %eax
	cltq
	salq	$4, %rax
	leaq	(%rdx,%rax), %rbx
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_switch_values
	movq	%rax, (%rbx)
	addl	$1, -124(%rbp)
.L489:
	movl	-132(%rbp), %eax
	cmpl	%eax, -124(%rbp)
	jl	.L491
	movl	$0, -124(%rbp)
	jmp	.L492
.L494:
	movq	-96(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3726, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC135(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-96(%rbp), %rax
	testq	%rax, %rax
	jne	.L493
	leaq	__PRETTY_FUNCTION__.8453(%rip), %rcx
	movl	$3726, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC136(%rip), %rdi
	call	__assert_fail@PLT
.L493:
	movq	-96(%rbp), %rax
	movl	-124(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	flecs_bitset_addn
	addl	$1, -124(%rbp)
.L492:
	movl	-128(%rbp), %eax
	cmpl	%eax, -124(%rbp)
	jl	.L494
	movl	-120(%rbp), %eax
.L495:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L496
	call	__stack_chk_fail@PLT
.L496:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE59:
	.size	flecs_table_append, .-flecs_table_append
	.type	fast_delete_last, @function
fast_delete_last:
.LFB60:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L499
.L500:
	movl	-12(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_remove_last
	addl	$1, -12(%rbp)
.L499:
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L500
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE60:
	.size	fast_delete_last, .-fast_delete_last
	.type	fast_delete, @function
fast_delete:
.LFB61:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L502
.L504:
	movl	-12(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -16(%rbp)
	cmpw	$0, -16(%rbp)
	je	.L503
	movq	-8(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -14(%rbp)
	movl	$16, %eax
	cmpw	$16, -14(%rbp)
	cmovge	-14(%rbp), %ax
	movswl	%ax, %edx
	movswl	-16(%rbp), %esi
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_remove
.L503:
	addl	$1, -12(%rbp)
.L502:
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L504
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE61:
	.size	fast_delete, .-fast_delete
	.section	.rodata
.LC137:
	.string	"world != NULL"
.LC138:
	.string	"world != ((void *)0)"
.LC139:
	.string	"count > 0"
.LC140:
	.string	"index <= count"
	.align 8
.LC141:
	.string	"count < ecs_vector_count(v_records)"
.LC142:
	.string	"record_to_move->table != NULL"
	.align 8
.LC143:
	.string	"record_to_move->table != ((void *)0)"
	.align 8
.LC144:
	.string	"record_to_move->table == table"
.LC145:
	.string	"c_info_array != NULL"
.LC146:
	.string	"c_info_array != ((void *)0)"
	.text
	.globl	flecs_table_delete
	.type	flecs_table_delete, @function
flecs_table_delete:
.LFB62:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r12
	pushq	%rbx
	subq	$240, %rsp
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	%rdx, -248(%rbp)
	movl	%ecx, -252(%rbp)
	movl	%r8d, %eax
	movb	%al, -256(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -232(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3770, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -232(%rbp)
	jne	.L506
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3770, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L506:
	cmpq	$0, -240(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3771, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -240(%rbp)
	jne	.L507
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3771, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L507:
	cmpq	$0, -248(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3772, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -248(%rbp)
	jne	.L508
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3772, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L508:
	movq	-240(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3773, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-240(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L509
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3773, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L509:
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -208(%rbp)
	cmpl	$0, -208(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3778, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC139(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -208(%rbp)
	jg	.L510
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3778, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC139(%rip), %rdi
	call	__assert_fail@PLT
.L510:
	subl	$1, -208(%rbp)
	movl	-252(%rbp), %eax
	cmpl	-208(%rbp), %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3780, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC140(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-252(%rbp), %eax
	cmpl	-208(%rbp), %eax
	jle	.L511
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3780, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC140(%rip), %rdi
	call	__assert_fail@PLT
.L511:
	movq	-160(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -152(%rbp)
	movl	-208(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-152(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -176(%rbp)
	movl	-252(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-152(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -168(%rbp)
	movl	-252(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-152(%rbp), %rax
	addq	%rax, %rdx
	movq	-176(%rbp), %rax
	movq	%rax, (%rdx)
	movq	-160(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_remove_last
	movq	-248(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -208(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3791, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC141(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -208(%rbp)
	jl	.L512
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3791, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC141(%rip), %rdi
	call	__assert_fail@PLT
.L512:
	movq	-144(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -136(%rbp)
	movl	-208(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-136(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	-252(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-136(%rbp), %rax
	addq	%rax, %rdx
	movq	-128(%rbp), %rax
	movq	%rax, (%rdx)
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_remove_last
	movl	-252(%rbp), %eax
	cmpl	-208(%rbp), %eax
	je	.L513
	cmpq	$0, -128(%rbp)
	je	.L513
	movq	-128(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	js	.L514
	movl	-252(%rbp), %eax
	leal	1(%rax), %edx
	movq	-128(%rbp), %rax
	movl	%edx, 8(%rax)
	jmp	.L515
.L514:
	movl	-252(%rbp), %eax
	notl	%eax
	movl	%eax, %edx
	movq	-128(%rbp), %rax
	movl	%edx, 8(%rax)
.L515:
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3806, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC142(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L516
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3806, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC143(%rip), %rdi
	call	__assert_fail@PLT
.L516:
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -240(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3807, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC144(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -240(%rbp)
	je	.L513
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3807, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC144(%rip), %rdi
	call	__assert_fail@PLT
.L513:
	movq	-240(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	mark_table_dirty
	cmpl	$0, -208(%rbp)
	jne	.L517
	movq	-240(%rbp), %rsi
	movq	-232(%rbp), %rax
	movl	$0, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	table_activate
.L517:
	movq	-240(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-248(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-240(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -204(%rbp)
	movq	-240(%rbp), %rax
	movl	16(%rax), %eax
	andl	$196992, %eax
	testl	%eax, %eax
	jne	.L518
	movl	-252(%rbp), %eax
	cmpl	-208(%rbp), %eax
	jne	.L519
	movl	-204(%rbp), %edx
	movq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	fast_delete_last
	jmp	.L505
.L519:
	movl	-252(%rbp), %edx
	movl	-204(%rbp), %ecx
	movq	-112(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	fast_delete
	jmp	.L505
.L518:
	movl	-252(%rbp), %eax
	cmpl	-208(%rbp), %eax
	jne	.L522
	cmpb	$0, -256(%rbp)
	je	.L523
	movq	-240(%rbp), %rax
	movl	16(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	je	.L523
	cmpq	$0, -120(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3841, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC145(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -120(%rbp)
	jne	.L524
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3841, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC146(%rip), %rdi
	call	__assert_fail@PLT
.L524:
	movl	$0, -212(%rbp)
	jmp	.L525
.L529:
	movl	-212(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L526
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L526
	movq	-56(%rbp), %rax
	movl	88(%rax), %eax
	movl	%eax, -192(%rbp)
	movq	-56(%rbp), %rax
	movl	92(%rax), %eax
	movl	%eax, -188(%rbp)
	movq	-56(%rbp), %rax
	movq	32(%rax), %rbx
	movl	-192(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %r12
	cmpl	$15, -188(%rbp)
	jle	.L527
	movl	-188(%rbp), %eax
	cwtl
	jmp	.L528
.L527:
	movl	$16, %eax
.L528:
	movl	-212(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rdx, %rcx
	salq	$4, %rcx
	movq	-112(%rbp), %rdx
	addq	%rcx, %rdx
	movq	(%rdx), %rcx
	movl	-192(%rbp), %esi
	movl	%eax, %edx
	movq	%rcx, %rdi
	call	_ecs_vector_last
	movq	%rax, %rcx
	movq	-56(%rbp), %rax
	movq	80(%rax), %rsi
	leaq	-168(%rbp), %rdx
	movq	-232(%rbp), %rax
	subq	$8, %rsp
	pushq	%rbx
	movq	-48(%rbp), %r10
	movl	$1, %r9d
	movq	%r12, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
.L526:
	addl	$1, -212(%rbp)
.L525:
	movl	-212(%rbp), %eax
	cmpl	-204(%rbp), %eax
	jl	.L529
.L523:
	movl	-204(%rbp), %edx
	movq	-112(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	fast_delete_last
	jmp	.L530
.L522:
	cmpb	$0, -256(%rbp)
	je	.L531
	movq	-240(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1280, %eax
	testl	%eax, %eax
	je	.L531
	cmpq	$0, -120(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3862, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC145(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -120(%rbp)
	jne	.L532
	leaq	__PRETTY_FUNCTION__.8509(%rip), %rcx
	movl	$3862, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC146(%rip), %rdi
	call	__assert_fail@PLT
.L532:
	movl	$0, -212(%rbp)
	jmp	.L533
.L540:
	movl	-212(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movzwl	8(%rax), %eax
	cwtl
	movl	%eax, -200(%rbp)
	movq	-104(%rbp), %rax
	movzwl	10(%rax), %eax
	cwtl
	movl	%eax, -196(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	cmpl	$15, -196(%rbp)
	jle	.L534
	movl	-196(%rbp), %eax
	cwtl
	jmp	.L535
.L534:
	movl	$16, %eax
.L535:
	movl	-252(%rbp), %edx
	movl	-200(%rbp), %esi
	movq	-96(%rbp), %rdi
	movl	%edx, %ecx
	movl	%eax, %edx
	call	_ecs_vector_get
	movq	%rax, -88(%rbp)
	cmpl	$15, -196(%rbp)
	jle	.L536
	movl	-196(%rbp), %eax
	cwtl
	jmp	.L537
.L536:
	movl	$16, %eax
.L537:
	movl	-200(%rbp), %esi
	movq	-96(%rbp), %rcx
	movl	%eax, %edx
	movq	%rcx, %rdi
	call	_ecs_vector_last
	movq	%rax, -80(%rbp)
	movl	-212(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L538
	movq	-72(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L538
	movq	-72(%rbp), %rax
	movq	32(%rax), %rbx
	movl	-200(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-72(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	80(%rax), %rsi
	movq	-88(%rbp), %r9
	leaq	-168(%rbp), %r8
	leaq	-176(%rbp), %rcx
	movq	-232(%rbp), %rax
	pushq	%rbx
	pushq	$1
	pushq	%rdi
	pushq	-80(%rbp)
	movq	-64(%rbp), %r10
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L539
.L538:
	movl	-200(%rbp), %eax
	movslq	%eax, %rdx
	movq	-80(%rbp), %rcx
	movq	-88(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L539:
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_remove_last
	addl	$1, -212(%rbp)
.L533:
	movl	-212(%rbp), %eax
	cmpl	-204(%rbp), %eax
	jl	.L540
	jmp	.L530
.L531:
	movl	-252(%rbp), %edx
	movl	-204(%rbp), %ecx
	movq	-112(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	fast_delete
.L530:
	movq	-248(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-240(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -184(%rbp)
	movl	$0, -212(%rbp)
	jmp	.L541
.L542:
	movl	-212(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-252(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_remove
	addl	$1, -212(%rbp)
.L541:
	movl	-212(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jl	.L542
	movq	-248(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-240(%rbp), %rax
	movl	124(%rax), %eax
	movl	%eax, -180(%rbp)
	movl	$0, -212(%rbp)
	jmp	.L543
.L544:
	movl	-212(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdx
	movl	-252(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	flecs_bitset_remove
	addl	$1, -212(%rbp)
.L543:
	movl	-212(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jl	.L544
.L505:
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L545
	call	__stack_chk_fail@PLT
.L545:
	leaq	-16(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE62:
	.size	flecs_table_delete, .-flecs_table_delete
	.section	.rodata
.LC147:
	.string	"dst != NULL"
.LC148:
	.string	"dst != ((void *)0)"
.LC149:
	.string	"src != NULL"
.LC150:
	.string	"src != ((void *)0)"
	.text
	.type	fast_move, @function
fast_move:
.LFB63:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$176, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movl	%edx, -148(%rbp)
	movq	%rcx, -160(%rbp)
	movq	%r8, -168(%rbp)
	movl	%r9d, -152(%rbp)
	movq	-136(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-160(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -112(%rbp)
	movq	-136(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -108(%rbp)
	movq	-160(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -100(%rbp)
	movq	-96(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -72(%rbp)
	movq	-168(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-144(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.L547
.L552:
	movl	-112(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-108(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jne	.L548
	movl	-112(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movl	-108(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -116(%rbp)
	cmpw	$0, -116(%rbp)
	je	.L548
	movq	-32(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -114(%rbp)
	movl	$16, %eax
	cmpw	$16, -114(%rbp)
	cmovge	-114(%rbp), %ax
	movswl	%ax, %edx
	movswl	-116(%rbp), %esi
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	-148(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -16(%rbp)
	movl	$16, %eax
	cmpw	$16, -114(%rbp)
	cmovge	-114(%rbp), %ax
	movswl	%ax, %edx
	movswl	-116(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-152(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3941, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC147(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L549
	leaq	__PRETTY_FUNCTION__.8576(%rip), %rcx
	movl	$3941, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC148(%rip), %rdi
	call	__assert_fail@PLT
.L549:
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3942, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC149(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L550
	leaq	__PRETTY_FUNCTION__.8576(%rip), %rcx
	movl	$3942, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC150(%rip), %rdi
	call	__assert_fail@PLT
.L550:
	movswq	-116(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L548:
	movq	-48(%rbp), %rax
	cmpq	-40(%rbp), %rax
	setbe	%al
	movzbl	%al, %eax
	addl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	cmpq	-40(%rbp), %rax
	setnb	%al
	movzbl	%al, %eax
	addl	%eax, -108(%rbp)
.L547:
	movl	-112(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.L553
	movl	-108(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.L552
.L553:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE63:
	.size	fast_move, .-fast_move
	.section	.rodata
.LC151:
	.string	"new_table != NULL"
.LC152:
	.string	"new_table != ((void *)0)"
.LC153:
	.string	"old_table != NULL"
.LC154:
	.string	"old_table != ((void *)0)"
.LC155:
	.string	"!new_table->lock"
.LC156:
	.string	"!old_table->lock"
.LC157:
	.string	"old_index >= 0"
.LC158:
	.string	"new_index >= 0"
.LC159:
	.string	"old_data != NULL"
.LC160:
	.string	"old_data != ((void *)0)"
.LC161:
	.string	"new_data != NULL"
.LC162:
	.string	"new_data != ((void *)0)"
	.text
	.globl	flecs_table_move
	.type	flecs_table_move, @function
flecs_table_move:
.LFB64:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$208, %rsp
	movq	%rdi, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	%rcx, -192(%rbp)
	movq	%r8, -200(%rbp)
	movl	%r9d, -204(%rbp)
	movl	40(%rbp), %eax
	movb	%al, -208(%rbp)
	cmpq	$0, -192(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3964, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC151(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -192(%rbp)
	jne	.L555
	leaq	__PRETTY_FUNCTION__.8592(%rip), %rcx
	movl	$3964, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC152(%rip), %rdi
	call	__assert_fail@PLT
.L555:
	cmpq	$0, 16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3965, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC153(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, 16(%rbp)
	jne	.L556
	leaq	__PRETTY_FUNCTION__.8592(%rip), %rcx
	movl	$3965, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC154(%rip), %rdi
	call	__assert_fail@PLT
.L556:
	movq	-192(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3966, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC155(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-192(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L557
	leaq	__PRETTY_FUNCTION__.8592(%rip), %rcx
	movl	$3966, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC155(%rip), %rdi
	call	__assert_fail@PLT
.L557:
	movq	16(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3967, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC156(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	16(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L558
	leaq	__PRETTY_FUNCTION__.8592(%rip), %rcx
	movl	$3967, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC156(%rip), %rdi
	call	__assert_fail@PLT
.L558:
	movl	32(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3969, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC157(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, 32(%rbp)
	jns	.L559
	leaq	__PRETTY_FUNCTION__.8592(%rip), %rcx
	movl	$3969, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC157(%rip), %rdi
	call	__assert_fail@PLT
.L559:
	movl	-204(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3970, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC158(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -204(%rbp)
	jns	.L560
	leaq	__PRETTY_FUNCTION__.8592(%rip), %rcx
	movl	$3970, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC158(%rip), %rdi
	call	__assert_fail@PLT
.L560:
	cmpq	$0, 24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3972, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC159(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, 24(%rbp)
	jne	.L561
	leaq	__PRETTY_FUNCTION__.8592(%rip), %rcx
	movl	$3972, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC160(%rip), %rdi
	call	__assert_fail@PLT
.L561:
	cmpq	$0, -200(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$3973, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC161(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -200(%rbp)
	jne	.L562
	leaq	__PRETTY_FUNCTION__.8592(%rip), %rcx
	movl	$3973, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC162(%rip), %rdi
	call	__assert_fail@PLT
.L562:
	movq	-192(%rbp), %rax
	movl	16(%rax), %edx
	movq	16(%rbp), %rax
	movl	16(%rax), %eax
	orl	%edx, %eax
	andl	$196992, %eax
	testl	%eax, %eax
	jne	.L563
	movl	32(%rbp), %edi
	movq	24(%rbp), %rcx
	movl	-204(%rbp), %edx
	movq	-200(%rbp), %rsi
	movq	-192(%rbp), %rax
	movl	%edi, %r9d
	movq	%rcx, %r8
	movq	16(%rbp), %rcx
	movq	%rax, %rdi
	call	fast_move
	jmp	.L554
.L563:
	movl	32(%rbp), %edi
	movq	24(%rbp), %rcx
	movl	-204(%rbp), %edx
	movq	-200(%rbp), %rsi
	movq	-192(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	%edi, %r9d
	movq	%rcx, %r8
	movq	16(%rbp), %rcx
	movq	%rax, %rdi
	call	move_switch_columns
	addq	$16, %rsp
	movl	32(%rbp), %edi
	movq	24(%rbp), %rcx
	movl	-204(%rbp), %edx
	movq	-200(%rbp), %rsi
	movq	-192(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	%edi, %r9d
	movq	%rcx, %r8
	movq	16(%rbp), %rcx
	movq	%rax, %rdi
	call	move_bitset_columns
	addq	$16, %rsp
	movq	-176(%rbp), %rdx
	movq	-184(%rbp), %rax
	cmpq	%rax, %rdx
	sete	%al
	movb	%al, -157(%rbp)
	movq	-192(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -152(%rbp)
	movq	-192(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -148(%rbp)
	movq	16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-136(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -120(%rbp)
	movq	-128(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -112(%rbp)
	movq	24(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-200(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -96(%rbp)
	jmp	.L565
.L577:
	movl	-152(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-148(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jne	.L566
	movl	-152(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -72(%rbp)
	movl	-148(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-104(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -64(%rbp)
	movq	-72(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -156(%rbp)
	movq	-72(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -154(%rbp)
	cmpw	$0, -156(%rbp)
	je	.L574
	movl	$16, %eax
	cmpw	$16, -154(%rbp)
	cmovge	-154(%rbp), %ax
	movswl	%ax, %edx
	movswl	-156(%rbp), %esi
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-204(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -56(%rbp)
	movl	$16, %eax
	cmpw	$16, -154(%rbp)
	cmovge	-154(%rbp), %ax
	movswl	%ax, %edx
	movswl	-156(%rbp), %esi
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	32(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -48(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4015, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC147(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L568
	leaq	__PRETTY_FUNCTION__.8592(%rip), %rcx
	movl	$4015, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC148(%rip), %rdi
	call	__assert_fail@PLT
.L568:
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4016, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC149(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L569
	leaq	__PRETTY_FUNCTION__.8592(%rip), %rcx
	movl	$4016, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC150(%rip), %rdi
	call	__assert_fail@PLT
.L569:
	movq	-192(%rbp), %rax
	movq	32(%rax), %rax
	movl	-152(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpb	$0, -157(%rbp)
	je	.L570
	cmpq	$0, -40(%rbp)
	je	.L571
	movq	-40(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L571
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -8(%rbp)
	movswq	-156(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-40(%rbp), %rdx
	movq	-56(%rbp), %r9
	leaq	-184(%rbp), %r8
	leaq	-176(%rbp), %rcx
	movq	-88(%rbp), %rsi
	movq	-168(%rbp), %rax
	pushq	-8(%rbp)
	pushq	$1
	pushq	%rdi
	pushq	-48(%rbp)
	movq	-16(%rbp), %r10
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L574
.L571:
	movswq	-156(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	jmp	.L574
.L570:
	cmpq	$0, -40(%rbp)
	je	.L573
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L573
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movswq	-156(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-40(%rbp), %rdx
	movq	-56(%rbp), %r9
	leaq	-184(%rbp), %r8
	leaq	-176(%rbp), %rcx
	movq	-88(%rbp), %rsi
	movq	-168(%rbp), %rax
	pushq	-24(%rbp)
	pushq	$1
	pushq	%rdi
	pushq	-48(%rbp)
	movq	-32(%rbp), %r10
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L574
.L573:
	movswq	-156(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	jmp	.L574
.L566:
	movq	-88(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jnb	.L575
	cmpb	$0, -208(%rbp)
	je	.L574
	movl	-152(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movq	-192(%rbp), %rax
	movq	32(%rax), %rax
	movl	-152(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rsi
	movl	-204(%rbp), %ecx
	leaq	-176(%rbp), %rdx
	movq	-168(%rbp), %rax
	movl	$1, %r9d
	movl	%ecx, %r8d
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	ctor_component
	jmp	.L574
.L575:
	movl	-148(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-104(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movq	16(%rbp), %rax
	movq	32(%rax), %rax
	movl	-148(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rsi
	movl	32(%rbp), %ecx
	leaq	-184(%rbp), %rdx
	movq	-168(%rbp), %rax
	movl	$1, %r9d
	movl	%ecx, %r8d
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	dtor_component
.L574:
	movq	-88(%rbp), %rax
	cmpq	-80(%rbp), %rax
	setbe	%al
	movzbl	%al, %eax
	addl	%eax, -152(%rbp)
	movq	-88(%rbp), %rax
	cmpq	-80(%rbp), %rax
	setnb	%al
	movzbl	%al, %eax
	addl	%eax, -148(%rbp)
.L565:
	movl	-152(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.L576
	movl	-148(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.L577
.L576:
	cmpb	$0, -208(%rbp)
	je	.L581
	jmp	.L579
.L580:
	movl	-152(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movq	-192(%rbp), %rax
	movq	32(%rax), %rax
	movl	-152(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rsi
	movl	-204(%rbp), %ecx
	leaq	-176(%rbp), %rdx
	movq	-168(%rbp), %rax
	movl	$1, %r9d
	movl	%ecx, %r8d
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	ctor_component
	addl	$1, -152(%rbp)
.L579:
	movl	-152(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.L580
	jmp	.L581
.L582:
	movl	-148(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-104(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movq	16(%rbp), %rax
	movq	32(%rax), %rax
	movl	-148(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rsi
	movl	32(%rbp), %ecx
	leaq	-184(%rbp), %rdx
	movq	-168(%rbp), %rax
	movl	$1, %r9d
	movl	%ecx, %r8d
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	dtor_component
	addl	$1, -148(%rbp)
.L581:
	movl	-148(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.L582
.L554:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE64:
	.size	flecs_table_move, .-flecs_table_move
	.globl	flecs_table_appendn
	.type	flecs_table_appendn, @function
flecs_table_appendn:
.LFB65:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	%r8, -56(%rbp)
	movq	-32(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4078, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L584
	leaq	__PRETTY_FUNCTION__.8633(%rip), %rcx
	movl	$4078, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L584:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_data_count
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %edx
	movl	-44(%rbp), %eax
	leal	(%rdx,%rax), %r8d
	movq	-56(%rbp), %rdi
	movl	-44(%rbp), %ecx
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rdi, %r9
	movq	%rax, %rdi
	call	grow_data
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE65:
	.size	flecs_table_appendn, .-flecs_table_appendn
	.globl	flecs_table_set_size
	.type	flecs_table_set_size, @function
flecs_table_set_size:
.LFB66:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movl	%ecx, -76(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-64(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4090, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L587
	leaq	__PRETTY_FUNCTION__.8641(%rip), %rcx
	movl	$4090, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L587:
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_data_count
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.L588
	movl	-76(%rbp), %ecx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %r9d
	movl	%ecx, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	grow_data
	jmp	.L591
.L588:
	cmpl	$0, -76(%rbp)
	jne	.L591
	movq	-64(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-64(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movl	124(%rax), %eax
	movl	%eax, -40(%rbp)
	leaq	-40(%rbp), %r9
	leaq	-44(%rbp), %r8
	leaq	-48(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	subq	$8, %rsp
	leaq	-16(%rbp), %rdi
	pushq	%rdi
	leaq	-24(%rbp), %rdi
	pushq	%rdi
	leaq	-32(%rbp), %rdi
	pushq	%rdi
	movq	%rax, %rdi
	call	ensure_data
	addq	$32, %rsp
.L591:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L590
	call	__stack_chk_fail@PLT
.L590:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE66:
	.size	flecs_table_set_size, .-flecs_table_set_size
	.globl	flecs_table_data_count
	.type	flecs_table_data_count, @function
flecs_table_data_count:
.LFB67:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L593
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	jmp	.L595
.L593:
	movl	$0, %eax
.L595:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE67:
	.size	flecs_table_data_count, .-flecs_table_data_count
	.type	swap_switch_columns, @function
swap_switch_columns:
.LFB68:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -56(%rbp)
	movl	$0, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.L601
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L599
.L600:
	movl	-24(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movl	-56(%rbp), %edx
	movl	-52(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_switch_swap
	addl	$1, -24(%rbp)
.L599:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L600
	jmp	.L596
.L601:
	nop
.L596:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE68:
	.size	swap_switch_columns, .-swap_switch_columns
	.type	swap_bitset_columns, @function
swap_bitset_columns:
.LFB69:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -56(%rbp)
	movl	$0, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	124(%rax), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.L607
	movq	-48(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L605
.L606:
	movl	-24(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movl	-56(%rbp), %edx
	movl	-52(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_swap
	addl	$1, -24(%rbp)
.L605:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L606
	jmp	.L602
.L607:
	nop
.L602:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE69:
	.size	swap_bitset_columns, .-swap_bitset_columns
	.section	.rodata
.LC163:
	.string	"row_1 >= 0"
.LC164:
	.string	"row_2 >= 0"
.LC165:
	.string	"record_ptr_1 != NULL"
.LC166:
	.string	"record_ptr_1 != ((void *)0)"
.LC167:
	.string	"record_ptr_2 != NULL"
.LC168:
	.string	"record_ptr_2 != ((void *)0)"
	.text
	.globl	flecs_table_swap
	.type	flecs_table_swap, @function
flecs_table_swap:
.LFB70:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$144, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movq	%rdx, -136(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -144(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-128(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4165, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-128(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L609
	leaq	__PRETTY_FUNCTION__.8685(%rip), %rcx
	movl	$4165, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L609:
	cmpq	$0, -136(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4166, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -136(%rbp)
	jne	.L610
	leaq	__PRETTY_FUNCTION__.8685(%rip), %rcx
	movl	$4166, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L610:
	movl	-140(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4167, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC163(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -140(%rbp)
	jns	.L611
	leaq	__PRETTY_FUNCTION__.8685(%rip), %rcx
	movl	$4167, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC163(%rip), %rdi
	call	__assert_fail@PLT
.L611:
	movl	-144(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4168, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC164(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -144(%rbp)
	jns	.L612
	leaq	__PRETTY_FUNCTION__.8685(%rip), %rcx
	movl	$4168, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC164(%rip), %rdi
	call	__assert_fail@PLT
.L612:
	movl	-140(%rbp), %eax
	cmpl	-144(%rbp), %eax
	je	.L625
	movq	-128(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	mark_table_dirty
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -96(%rbp)
	movl	-140(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-144(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-136(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -72(%rbp)
	movl	-140(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-144(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4185, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC165(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L615
	leaq	__PRETTY_FUNCTION__.8685(%rip), %rcx
	movl	$4185, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC166(%rip), %rdi
	call	__assert_fail@PLT
.L615:
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4186, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC167(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L616
	leaq	__PRETTY_FUNCTION__.8685(%rip), %rcx
	movl	$4186, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC168(%rip), %rdi
	call	__assert_fail@PLT
.L616:
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	shrl	$31, %eax
	movb	%al, -110(%rbp)
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	shrl	$31, %eax
	movb	%al, -109(%rbp)
	movl	-140(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rax, %rdx
	movq	-80(%rbp), %rax
	movq	%rax, (%rdx)
	movl	-144(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rax, %rdx
	movq	-88(%rbp), %rax
	movq	%rax, (%rdx)
	movzbl	-110(%rbp), %edx
	movl	-144(%rbp), %eax
	movl	%edx, %esi
	movl	%eax, %edi
	call	flecs_row_to_record
	movq	-64(%rbp), %rdx
	movl	%eax, 8(%rdx)
	movzbl	-109(%rbp), %edx
	movl	-140(%rbp), %eax
	movl	%edx, %esi
	movl	%eax, %edi
	call	flecs_row_to_record
	movq	-56(%rbp), %rdx
	movl	%eax, 8(%rdx)
	movl	-140(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rax, %rdx
	movq	-56(%rbp), %rax
	movq	%rax, (%rdx)
	movl	-144(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rax, %rdx
	movq	-64(%rbp), %rax
	movq	%rax, (%rdx)
	movl	-144(%rbp), %ecx
	movl	-140(%rbp), %edx
	movq	-136(%rbp), %rsi
	movq	-128(%rbp), %rax
	movq	%rax, %rdi
	call	swap_switch_columns
	movl	-144(%rbp), %ecx
	movl	-140(%rbp), %edx
	movq	-136(%rbp), %rsi
	movq	-128(%rbp), %rax
	movq	%rax, %rdi
	call	swap_bitset_columns
	movq	-136(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L626
	movq	-128(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -100(%rbp)
	movl	$0, -104(%rbp)
	jmp	.L618
.L623:
	movl	-104(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movzwl	8(%rax), %eax
	movw	%ax, -108(%rbp)
	movl	-104(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movzwl	10(%rax), %eax
	movw	%ax, -106(%rbp)
	movl	$16, %eax
	cmpw	$16, -106(%rbp)
	cmovge	-106(%rbp), %ax
	movswl	%ax, %edx
	movswl	-108(%rbp), %ecx
	movl	-104(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rsi
	movq	-48(%rbp), %rax
	addq	%rsi, %rax
	movq	(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	cmpw	$0, -108(%rbp)
	je	.L619
	movswq	-108(%rbp), %rax
	leaq	8(%rax), %rdx
	movl	$16, %eax
	subq	$1, %rax
	addq	%rdx, %rax
	movl	$16, %ecx
	movl	$0, %edx
	divq	%rcx
	imulq	$16, %rax, %rax
	movq	%rax, %rdx
	andq	$-4096, %rdx
	movq	%rsp, %rdi
	subq	%rdx, %rdi
	movq	%rdi, %rdx
.L620:
	cmpq	%rdx, %rsp
	je	.L621
	subq	$4096, %rsp
	orq	$0, 4088(%rsp)
	jmp	.L620
.L621:
	movq	%rax, %rdx
	andl	$4095, %edx
	subq	%rdx, %rsp
	movq	%rax, %rdx
	andl	$4095, %edx
	testq	%rdx, %rdx
	je	.L622
	andl	$4095, %eax
	subq	$8, %rax
	addq	%rsp, %rax
	orq	$0, (%rax)
.L622:
	movq	%rsp, %rax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	movq	%rax, -32(%rbp)
	movswl	-108(%rbp), %eax
	imull	-140(%rbp), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movswl	-108(%rbp), %eax
	imull	-144(%rbp), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movswq	-108(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movswq	-108(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movswq	-108(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L619:
	addl	$1, -104(%rbp)
.L618:
	movl	-104(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.L623
	jmp	.L608
.L625:
	nop
	jmp	.L608
.L626:
	nop
.L608:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L624
	call	__stack_chk_fail@PLT
.L624:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE70:
	.size	flecs_table_swap, .-flecs_table_swap
	.type	merge_vector, @function
merge_vector:
.LFB71:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%ecx, %eax
	movw	%dx, -68(%rbp)
	movw	%ax, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	jne	.L628
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	je	.L629
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
.L629:
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, (%rax)
	jmp	.L632
.L628:
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %eax
	leal	(%rdx,%rax), %ecx
	movl	$16, %eax
	cmpw	$16, -72(%rbp)
	cmovge	-72(%rbp), %ax
	movswl	%ax, %edx
	movswl	-68(%rbp), %esi
	leaq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movl	$16, %eax
	cmpw	$16, -72(%rbp)
	cmovge	-72(%rbp), %ax
	movswl	%ax, %edx
	movswl	-68(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	$16, %eax
	cmpw	$16, -72(%rbp)
	cmovge	-72(%rbp), %ax
	movswl	%ax, %edx
	movswl	-68(%rbp), %ecx
	movq	-64(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movswl	-68(%rbp), %eax
	imull	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movswl	-68(%rbp), %eax
	imull	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-32(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, (%rax)
.L632:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L631
	call	__stack_chk_fail@PLT
.L631:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE71:
	.size	merge_vector, .-merge_vector
	.type	merge_column, @function
merge_column:
.LFB72:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movl	%ecx, -124(%rbp)
	movq	%r8, -136(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -72(%rbp)
	movq	-112(%rbp), %rax
	movq	32(%rax), %rax
	movl	-124(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-120(%rbp), %rax
	movq	16(%rax), %rax
	movl	-124(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-56(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -92(%rbp)
	movq	-56(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -90(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -88(%rbp)
	cmpl	$0, -88(%rbp)
	jne	.L634
	movq	-80(%rbp), %rax
	testq	%rax, %rax
	je	.L635
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
.L635:
	movq	-56(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rdx, (%rax)
	jmp	.L641
.L634:
	movq	-136(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -84(%rbp)
	movl	-88(%rbp), %edx
	movl	-84(%rbp), %eax
	leal	(%rdx,%rax), %ecx
	movl	$16, %eax
	cmpw	$16, -90(%rbp)
	cmovge	-90(%rbp), %ax
	movswl	%ax, %edx
	movswl	-92(%rbp), %esi
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movq	-80(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, (%rax)
	cmpq	$0, -64(%rbp)
	je	.L637
	movl	-84(%rbp), %r8d
	movl	-88(%rbp), %edi
	movq	-72(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-104(%rbp), %rax
	movl	%r8d, %r9d
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	ctor_component
.L637:
	movl	$16, %eax
	cmpw	$16, -90(%rbp)
	cmovge	-90(%rbp), %ax
	movswl	%ax, %edx
	movswl	-92(%rbp), %ecx
	movq	-80(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	movl	$16, %eax
	cmpw	$16, -90(%rbp)
	cmovge	-90(%rbp), %ax
	movswl	%ax, %edx
	movswl	-92(%rbp), %ecx
	movq	-136(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movswl	-92(%rbp), %eax
	imull	-88(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L638
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L638
	movq	-64(%rbp), %rax
	movq	32(%rax), %rbx
	movswq	-92(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-64(%rbp), %rax
	movq	80(%rax), %rsi
	movq	-40(%rbp), %r9
	movq	-48(%rbp), %r11
	movq	-72(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-104(%rbp), %rax
	subq	$8, %rsp
	pushq	%rbx
	movl	-84(%rbp), %r8d
	pushq	%r8
	pushq	%rdi
	movq	-32(%rbp), %r10
	movq	%r11, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L639
.L638:
	movswl	-92(%rbp), %eax
	imull	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L639:
	movq	-136(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
.L641:
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L640
	call	__stack_chk_fail@PLT
.L640:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE72:
	.size	merge_column, .-merge_column
	.section	.rodata
	.align 8
.LC169:
	.string	"!new_component_count || new_columns"
	.align 8
.LC170:
	.string	"ecs_vector_count(new_data->entities) == old_count + new_count"
	.text
	.type	merge_table_data, @function
merge_table_data:
.LFB73:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$192, %rsp
	movq	%rdi, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movl	%ecx, -172(%rbp)
	movl	%r8d, -176(%rbp)
	movq	%r9, -184(%rbp)
	movl	$0, -136(%rbp)
	movq	-160(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -128(%rbp)
	movl	$0, -132(%rbp)
	movq	-168(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-160(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -112(%rbp)
	movq	-168(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -104(%rbp)
	movq	-184(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	16(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -120(%rbp)
	cmpq	$0, -120(%rbp)
	jne	.L643
	movq	16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L643
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rax
	movq	16(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_init_data
	movq	16(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -120(%rbp)
.L643:
	cmpl	$0, -128(%rbp)
	je	.L644
	cmpq	$0, -120(%rbp)
	je	.L645
.L644:
	movl	$1, %eax
	jmp	.L646
.L645:
	movl	$0, %eax
.L646:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4342, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC169(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -128(%rbp)
	je	.L647
	cmpq	$0, -120(%rbp)
	jne	.L647
	leaq	__PRETTY_FUNCTION__.8752(%rip), %rcx
	movl	$4342, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC169(%rip), %rdi
	call	__assert_fail@PLT
.L647:
	cmpl	$0, -172(%rbp)
	je	.L665
	movq	-184(%rbp), %rax
	movq	(%rax), %rsi
	movq	16(%rbp), %rax
	movl	$8, %ecx
	movl	$8, %edx
	movq	%rax, %rdi
	call	merge_vector
	movq	-184(%rbp), %rax
	movq	$0, (%rax)
	movq	16(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -88(%rbp)
	movq	16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	-172(%rbp), %ecx
	movl	-176(%rbp), %edx
	addl	%ecx, %edx
	cmpl	%edx, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4354, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC170(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	-172(%rbp), %ecx
	movl	-176(%rbp), %edx
	addl	%ecx, %edx
	cmpl	%edx, %eax
	je	.L650
	leaq	__PRETTY_FUNCTION__.8752(%rip), %rcx
	movl	$4354, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC170(%rip), %rdi
	call	__assert_fail@PLT
.L650:
	movq	-184(%rbp), %rax
	movq	8(%rax), %rax
	movq	16(%rbp), %rdx
	leaq	8(%rdx), %rdi
	movl	$8, %ecx
	movl	$8, %edx
	movq	%rax, %rsi
	call	merge_vector
	movq	-184(%rbp), %rax
	movq	$0, 8(%rax)
	jmp	.L651
.L658:
	movl	-136(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-132(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-104(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	-136(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movzwl	8(%rax), %eax
	movw	%ax, -144(%rbp)
	movl	-136(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movzwl	10(%rax), %eax
	movw	%ax, -142(%rbp)
	movq	-80(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jne	.L652
	movl	-132(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rcx
	movl	-136(%rbp), %edx
	movq	-160(%rbp), %rsi
	movq	-152(%rbp), %rax
	movq	%rcx, %r8
	movl	%edx, %ecx
	movq	16(%rbp), %rdx
	movq	%rax, %rdi
	call	merge_column
	movl	-132(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	$0, (%rax)
	movl	-136(%rbp), %eax
	leal	1(%rax), %edx
	movq	-160(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	mark_table_dirty
	addl	$1, -136(%rbp)
	addl	$1, -132(%rbp)
	jmp	.L651
.L652:
	movq	-80(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jnb	.L653
	cmpw	$0, -144(%rbp)
	je	.L654
	movl	-136(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movl	-172(%rbp), %edx
	movl	-176(%rbp), %eax
	leal	(%rdx,%rax), %ecx
	movl	$16, %eax
	cmpw	$16, -142(%rbp)
	cmovge	-142(%rbp), %ax
	movswl	%ax, %edx
	movswl	-144(%rbp), %esi
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movq	-160(%rbp), %rax
	movq	32(%rax), %rax
	movl	-136(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L654
	movl	-172(%rbp), %edx
	movl	-176(%rbp), %eax
	leal	(%rdx,%rax), %edi
	movq	-88(%rbp), %rcx
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-152(%rbp), %rax
	movl	%edi, %r9d
	movl	$0, %r8d
	movq	%rax, %rdi
	call	ctor_component
.L654:
	addl	$1, -136(%rbp)
	jmp	.L651
.L653:
	movq	-80(%rbp), %rax
	cmpq	-72(%rbp), %rax
	jbe	.L651
	cmpw	$0, -144(%rbp)
	je	.L655
	movl	-132(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -64(%rbp)
	movq	-168(%rbp), %rax
	movq	32(%rax), %rax
	movl	-132(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L656
	movl	-172(%rbp), %edi
	movq	-88(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	-152(%rbp), %rax
	movl	%edi, %r9d
	movl	$0, %r8d
	movq	%rax, %rdi
	call	dtor_component
.L656:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-64(%rbp), %rax
	movq	$0, (%rax)
.L655:
	addl	$1, -132(%rbp)
.L651:
	movl	-136(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jge	.L657
	movl	-132(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jl	.L658
.L657:
	movq	-184(%rbp), %rdi
	movq	-168(%rbp), %rcx
	movl	-176(%rbp), %edx
	movq	-160(%rbp), %rax
	subq	$8, %rsp
	movl	-172(%rbp), %esi
	pushq	%rsi
	movl	$0, %r9d
	movq	%rdi, %r8
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	move_switch_columns
	addq	$16, %rsp
	jmp	.L659
.L661:
	movl	-136(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -140(%rbp)
	movq	-16(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -138(%rbp)
	cmpw	$0, -140(%rbp)
	je	.L660
	movl	-172(%rbp), %edx
	movl	-176(%rbp), %eax
	leal	(%rdx,%rax), %ecx
	movl	$16, %eax
	cmpw	$16, -138(%rbp)
	cmovge	-138(%rbp), %ax
	movswl	%ax, %edx
	movswl	-140(%rbp), %esi
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movq	-160(%rbp), %rax
	movq	32(%rax), %rax
	movl	-136(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L660
	movl	-172(%rbp), %edx
	movl	-176(%rbp), %eax
	leal	(%rdx,%rax), %edi
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	-152(%rbp), %rax
	movl	%edi, %r9d
	movl	$0, %r8d
	movq	%rax, %rdi
	call	ctor_component
.L660:
	addl	$1, -136(%rbp)
.L659:
	movl	-136(%rbp), %eax
	cmpl	-128(%rbp), %eax
	jl	.L661
	jmp	.L662
.L664:
	movl	-132(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-168(%rbp), %rax
	movq	32(%rax), %rax
	movl	-132(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L663
	movl	-172(%rbp), %edi
	movq	-88(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	-152(%rbp), %rax
	movl	%edi, %r9d
	movl	$0, %r8d
	movq	%rax, %rdi
	call	dtor_component
.L663:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-32(%rbp), %rax
	movq	$0, (%rax)
	addl	$1, -132(%rbp)
.L662:
	movl	-132(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jl	.L664
	movq	-160(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	mark_table_dirty
	jmp	.L642
.L665:
	nop
.L642:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE73:
	.size	merge_table_data, .-merge_table_data
	.globl	ecs_table_count
	.type	ecs_table_count, @function
ecs_table_count:
.LFB74:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4460, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L667
	leaq	__PRETTY_FUNCTION__.8780(%rip), %rcx
	movl	$4460, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L667:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L668
	movl	$0, %eax
	jmp	.L669
.L668:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_data_count
.L669:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE74:
	.size	ecs_table_count, .-ecs_table_count
	.section	.rodata
.LC171:
	.string	"record != NULL"
.LC172:
	.string	"record != ((void *)0)"
	.text
	.globl	flecs_table_merge
	.type	flecs_table_merge, @function
flecs_table_merge:
.LFB75:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	%r8, -104(%rbp)
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4476, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC153(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L671
	leaq	__PRETTY_FUNCTION__.8789(%rip), %rcx
	movl	$4476, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC154(%rip), %rdi
	call	__assert_fail@PLT
.L671:
	movq	-88(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4477, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC156(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L672
	leaq	__PRETTY_FUNCTION__.8789(%rip), %rcx
	movl	$4477, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC156(%rip), %rdi
	call	__assert_fail@PLT
.L672:
	movb	$0, -54(%rbp)
	cmpq	$0, -80(%rbp)
	jne	.L673
	movq	-104(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_clear_data
	movl	$0, %eax
	jmp	.L674
.L673:
	movq	-80(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4486, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC155(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L675
	leaq	__PRETTY_FUNCTION__.8789(%rip), %rcx
	movl	$4486, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC155(%rip), %rdi
	call	__assert_fail@PLT
.L675:
	cmpq	$0, -104(%rbp)
	jne	.L676
	movl	$0, %eax
	jmp	.L674
.L676:
	cmpq	$0, -96(%rbp)
	jne	.L677
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -96(%rbp)
	movq	-80(%rbp), %rax
	cmpq	-88(%rbp), %rax
	jne	.L677
	movb	$1, -54(%rbp)
.L677:
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -48(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -44(%rbp)
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L678
.L681:
	movq	-80(%rbp), %rax
	cmpq	-88(%rbp), %rax
	je	.L679
	movl	-52(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4514, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC171(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L680
	leaq	__PRETTY_FUNCTION__.8789(%rip), %rcx
	movl	$4514, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC172(%rip), %rdi
	call	__assert_fail@PLT
.L679:
	movl	-52(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-72(%rbp), %rax
	movq	40(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_ensure
	movq	%rax, -40(%rbp)
.L680:
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	shrl	$31, %eax
	movb	%al, -53(%rbp)
	movzbl	-53(%rbp), %eax
	movl	-44(%rbp), %ecx
	movl	-52(%rbp), %edx
	addl	%ecx, %edx
	movl	%eax, %esi
	movl	%edx, %edi
	call	flecs_row_to_record
	movq	-40(%rbp), %rdx
	movl	%eax, 8(%rdx)
	movq	-40(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rdx, (%rax)
	addl	$1, -52(%rbp)
.L678:
	movl	-52(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jl	.L681
	cmpb	$0, -54(%rbp)
	je	.L682
	movq	-96(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	(%rdx), %rcx
	movq	8(%rdx), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16(%rdx), %rcx
	movq	24(%rdx), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32(%rdx), %rdx
	movq	%rdx, 32(%rax)
	jmp	.L683
.L682:
	movq	-104(%rbp), %r8
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %ecx
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	subq	$8, %rsp
	pushq	-96(%rbp)
	movq	%r8, %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	merge_table_data
	addq	$16, %rsp
.L683:
	movq	-80(%rbp), %rax
	movl	112(%rax), %eax
	leal	1(%rax), %edx
	movq	-80(%rbp), %rax
	movl	%edx, 112(%rax)
	cmpl	$0, -44(%rbp)
	jne	.L684
	cmpl	$0, -48(%rbp)
	je	.L684
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	$1, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	table_activate
.L684:
	movq	-96(%rbp), %rax
.L674:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE75:
	.size	flecs_table_merge, .-flecs_table_merge
	.section	.rodata
.LC173:
	.string	"!data || data != table_data"
	.text
	.globl	flecs_table_replace_data
	.type	flecs_table_replace_data, @function
flecs_table_replace_data:
.LFB76:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movl	$0, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L686
	movq	-56(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.L687
.L686:
	movl	$1, %eax
	jmp	.L688
.L687:
	movl	$0, %eax
.L688:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4548, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC173(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	je	.L689
	movq	-56(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.L689
	leaq	__PRETTY_FUNCTION__.8808(%rip), %rcx
	movl	$4548, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC173(%rip), %rdi
	call	__assert_fail@PLT
.L689:
	movq	-48(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4549, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-48(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L690
	leaq	__PRETTY_FUNCTION__.8808(%rip), %rcx
	movl	$4549, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L690:
	cmpq	$0, -24(%rbp)
	je	.L691
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	run_on_remove
	movq	-24(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_clear_data
.L691:
	cmpq	$0, -56(%rbp)
	je	.L696
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	(%rdx), %rcx
	movq	8(%rdx), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16(%rdx), %rcx
	movq	24(%rdx), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32(%rdx), %rdx
	movq	%rdx, 32(%rax)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.L695
	cmpl	$0, -28(%rbp)
	je	.L695
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$1, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	table_activate
	jmp	.L685
.L695:
	cmpl	$0, -32(%rbp)
	je	.L685
	cmpl	$0, -28(%rbp)
	jne	.L685
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$0, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	table_activate
	jmp	.L685
.L696:
	nop
.L685:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE76:
	.size	flecs_table_replace_data, .-flecs_table_replace_data
	.globl	flecs_table_match_filter
	.type	flecs_table_match_filter, @function
flecs_table_match_filter:
.LFB77:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4578, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L698
	leaq	__PRETTY_FUNCTION__.8815(%rip), %rcx
	movl	$4578, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L698:
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4579, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L699
	leaq	__PRETTY_FUNCTION__.8815(%rip), %rcx
	movl	$4579, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L699:
	cmpq	$0, -40(%rbp)
	jne	.L700
	movl	$1, %eax
	jmp	.L701
.L700:
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-40(%rbp), %rax
	movq	1576(%rax), %rax
	testq	%rax, %rax
	je	.L702
	movq	-40(%rbp), %rax
	movl	1592(%rax), %eax
	cmpl	$3, %eax
	jne	.L703
	movq	-40(%rbp), %rax
	movq	1576(%rax), %rax
	cmpq	%rax, -8(%rbp)
	je	.L702
	movl	$0, %eax
	jmp	.L701
.L703:
	movq	-40(%rbp), %rax
	movl	1592(%rax), %eax
	cmpl	$2, %eax
	setne	%al
	movzbl	%al, %ecx
	movq	-40(%rbp), %rax
	movq	1576(%rax), %rdx
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$1, %r8d
	movq	%rax, %rdi
	call	flecs_type_contains
	testq	%rax, %rax
	jne	.L702
	movl	$0, %eax
	jmp	.L701
.L702:
	movq	-40(%rbp), %rax
	movq	1584(%rax), %rax
	testq	%rax, %rax
	je	.L704
	movq	-40(%rbp), %rax
	movl	1596(%rax), %eax
	cmpl	$3, %eax
	jne	.L705
	movq	-40(%rbp), %rax
	movq	1584(%rax), %rax
	cmpq	%rax, -8(%rbp)
	jne	.L704
	movl	$0, %eax
	jmp	.L701
.L705:
	movq	-40(%rbp), %rax
	movl	1596(%rax), %eax
	cmpl	$1, %eax
	sete	%al
	movzbl	%al, %ecx
	movq	-40(%rbp), %rax
	movq	1584(%rax), %rdx
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$1, %r8d
	movq	%rax, %rdi
	call	flecs_type_contains
	testq	%rax, %rax
	je	.L704
	movl	$0, %eax
	jmp	.L701
.L704:
	movl	$1, %eax
.L701:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE77:
	.size	flecs_table_match_filter, .-flecs_table_match_filter
	.section	.rodata
.LC174:
	.string	"table->dirty_state != NULL"
	.align 8
.LC175:
	.string	"table->dirty_state != ((void *)0)"
	.text
	.globl	flecs_table_get_dirty_state
	.type	flecs_table_get_dirty_state, @function
flecs_table_get_dirty_state:
.LFB78:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4623, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC95(%rip), %rdx
	movl	$71, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	je	.L707
	leaq	__PRETTY_FUNCTION__.8820(%rip), %rcx
	movl	$4623, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC95(%rip), %rdi
	call	__assert_fail@PLT
.L707:
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	testq	%rax, %rax
	jne	.L708
	movq	32+ecs_os_api(%rip), %rax
	movq	-8(%rbp), %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	sall	$2, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, 104(%rdx)
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4627, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC174(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	testq	%rax, %rax
	jne	.L708
	leaq	__PRETTY_FUNCTION__.8820(%rip), %rcx
	movl	$4627, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC175(%rip), %rdi
	call	__assert_fail@PLT
.L708:
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE78:
	.size	flecs_table_get_dirty_state, .-flecs_table_get_dirty_state
	.section	.rodata
.LC176:
	.string	"dirty_state != NULL"
.LC177:
	.string	"dirty_state != ((void *)0)"
	.text
	.globl	flecs_table_get_monitor
	.type	flecs_table_get_monitor, @function
flecs_table_get_monitor:
.LFB79:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_dirty_state
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4636, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC176(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L711
	leaq	__PRETTY_FUNCTION__.8825(%rip), %rcx
	movl	$4636, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC177(%rip), %rdi
	call	__assert_fail@PLT
.L711:
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	leal	0(,%rax,4), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_os_memdup
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE79:
	.size	flecs_table_get_monitor, .-flecs_table_get_monitor
	.globl	flecs_table_notify
	.type	flecs_table_notify, @function
flecs_table_notify:
.LFB80:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movzbl	682(%rax), %eax
	testb	%al, %al
	jne	.L720
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$3, %eax
	je	.L716
	cmpl	$3, %eax
	ja	.L713
	cmpl	$2, %eax
	je	.L717
	cmpl	$2, %eax
	ja	.L713
	testl	%eax, %eax
	je	.L718
	cmpl	$1, %eax
	je	.L719
	jmp	.L713
.L718:
	movq	-24(%rbp), %rax
	movl	16(%rax), %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	register_query
	jmp	.L713
.L719:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	unregister_query
	jmp	.L713
.L716:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	notify_component_info
	jmp	.L713
.L717:
	movq	-24(%rbp), %rax
	movq	32(%rax), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	notify_trigger
	jmp	.L713
.L720:
	nop
.L713:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE80:
	.size	flecs_table_notify, .-flecs_table_notify
	.globl	ecs_table_lock
	.type	ecs_table_lock, @function
ecs_table_lock:
.LFB81:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	jne	.L723
	movq	-8(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L723
	movq	-16(%rbp), %rax
	movl	132(%rax), %eax
	leal	1(%rax), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 132(%rax)
.L723:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE81:
	.size	ecs_table_lock, .-ecs_table_lock
	.section	.rodata
.LC178:
	.string	"table->lock >= 0"
	.text
	.globl	ecs_table_unlock
	.type	ecs_table_unlock, @function
ecs_table_unlock:
.LFB82:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	jne	.L726
	movq	-8(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L726
	movq	-16(%rbp), %rax
	movl	132(%rax), %eax
	leal	-1(%rax), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 132(%rax)
	movq	-16(%rbp), %rax
	movl	132(%rax), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4684, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC178(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	132(%rax), %eax
	testl	%eax, %eax
	jns	.L726
	leaq	__PRETTY_FUNCTION__.8845(%rip), %rcx
	movl	$4684, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC178(%rip), %rdi
	call	__assert_fail@PLT
.L726:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE82:
	.size	ecs_table_unlock, .-ecs_table_unlock
	.globl	ecs_table_has_module
	.type	ecs_table_has_module, @function
ecs_table_has_module:
.LFB83:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	andl	$8, %eax
	testl	%eax, %eax
	setne	%al
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE83:
	.size	ecs_table_has_module, .-ecs_table_has_module
	.globl	ecs_table_column_for_id
	.type	ecs_table_column_for_id, @function
ecs_table_column_for_id:
.LFB84:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_table_record
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L730
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L730
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	cltq
	salq	$4, %rax
	addq	%rdx, %rax
	jmp	.L731
.L730:
	movl	$0, %eax
.L731:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE84:
	.size	ecs_table_column_for_id, .-ecs_table_column_for_id
	.section	.rodata
	.align 8
.LC179:
	.string	"column_index < table->column_count"
.LC180:
	.string	"size != 0"
	.text
	.type	get_component_w_index, @function
get_component_w_index:
.LFB85:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movl	%edx, -48(%rbp)
	movq	-40(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -44(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4726, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC179(%rip), %rdx
	movl	$22, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -44(%rbp)
	jl	.L733
	leaq	__PRETTY_FUNCTION__.8868(%rip), %rcx
	movl	$4726, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC179(%rip), %rdi
	call	__assert_fail@PLT
.L733:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movl	-44(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movzwl	8(%rax), %eax
	cwtl
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4734, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC180(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -28(%rbp)
	jne	.L734
	leaq	__PRETTY_FUNCTION__.8868(%rip), %rcx
	movl	$4734, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC180(%rip), %rdi
	call	__assert_fail@PLT
.L734:
	movq	-16(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	imull	-48(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE85:
	.size	get_component_w_index, .-get_component_w_index
	.type	get_component, @function
get_component:
.LFB86:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L737
	movl	$0, %eax
	jmp	.L738
.L737:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L739
	movl	$0, %eax
	jmp	.L738
.L739:
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	movl	-36(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	get_component_w_index
.L738:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE86:
	.size	get_component, .-get_component
	.section	.rodata
	.align 8
.LC181:
	.string	"recur_depth < ECS_MAX_RECURSION"
.LC182:
	.string	"recur_depth < (512)"
.LC183:
	.string	"idr != NULL"
.LC184:
	.string	"idr != ((void *)0)"
.LC185:
	.string	"tr_isa != NULL"
.LC186:
	.string	"tr_isa != ((void *)0)"
	.text
	.type	get_base_component, @function
get_base_component:
.LFB87:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$144, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%rcx, -128(%rbp)
	movq	%r8, -136(%rbp)
	movl	%r9d, -140(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpl	$511, -140(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4771, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC181(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$511, -140(%rbp)
	jle	.L741
	leaq	__PRETTY_FUNCTION__.8889(%rip), %rcx
	movl	$4771, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC182(%rip), %rdi
	call	__assert_fail@PLT
.L741:
	movq	-112(%rbp), %rax
	movl	16(%rax), %eax
	andl	$4, %eax
	testl	%eax, %eax
	jne	.L742
	movl	$0, %eax
	jmp	.L743
.L742:
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	cmpq	%rax, -120(%rbp)
	jne	.L744
	movl	$0, %eax
	jmp	.L743
.L744:
	cmpq	$0, -136(%rbp)
	jne	.L745
	movl	$277, %eax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4787, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC183(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L746
	leaq	__PRETTY_FUNCTION__.8889(%rip), %rcx
	movl	$4787, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC184(%rip), %rdi
	call	__assert_fail@PLT
.L746:
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
.L745:
	movq	-112(%rbp), %rax
	movq	(%rax), %rdx
	movq	-136(%rbp), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4795, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC185(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L747
	leaq	__PRETTY_FUNCTION__.8889(%rip), %rcx
	movl	$4795, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC186(%rip), %rdi
	call	__assert_fail@PLT
.L747:
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -92(%rbp)
	movq	-64(%rbp), %rax
	movl	12(%rax), %edx
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	addl	%edx, %eax
	movl	%eax, -88(%rbp)
	movq	$0, -80(%rbp)
.L753:
	movl	-92(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -92(%rbp)
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	%eax, %edx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -32(%rbp)
	movq	-104(%rbp), %rax
	movq	40(%rax), %rax
	movq	-32(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L755
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	cmpq	$0, -112(%rbp)
	je	.L756
	movq	-112(%rbp), %rax
	movq	(%rax), %rdx
	movq	-128(%rbp), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L751
	movl	-140(%rbp), %eax
	leal	1(%rax), %r8d
	movq	-136(%rbp), %rdi
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	-104(%rbp), %rax
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	get_base_component
	movq	%rax, -80(%rbp)
	jmp	.L749
.L751:
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	leaq	-93(%rbp), %rdx
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	flecs_record_to_row
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movl	-84(%rbp), %edx
	movq	-112(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	get_component_w_index
	movq	%rax, -80(%rbp)
	jmp	.L749
.L755:
	nop
	jmp	.L749
.L756:
	nop
.L749:
	cmpq	$0, -80(%rbp)
	jne	.L752
	movl	-92(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jl	.L753
.L752:
	movq	-80(%rbp), %rax
.L743:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L754
	call	__stack_chk_fail@PLT
.L754:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE87:
	.size	get_base_component, .-get_base_component
	.type	set_row_info, @function
set_row_info:
.LFB88:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	leaq	28(%rax), %rdx
	movl	-12(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	flecs_record_to_row
	movq	-8(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE88:
	.size	set_row_info, .-set_row_info
	.section	.rodata
	.align 8
.LC187:
	.string	"ecs_vector_count(data->entities) > info->row"
	.text
	.type	set_info_from_record, @function
set_info_from_record:
.LFB89:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4846, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC171(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L760
	leaq	__PRETTY_FUNCTION__.8914(%rip), %rcx
	movl	$4846, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC172(%rip), %rdi
	call	__assert_fail@PLT
.L760:
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	8(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	set_row_info
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L764
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4860, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L763
	leaq	__PRETTY_FUNCTION__.8914(%rip), %rcx
	movl	$4860, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L763:
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movq	-24(%rbp), %rdx
	movl	24(%rdx), %edx
	cmpl	%edx, %eax
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4864, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC187(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movq	-24(%rbp), %rdx
	movl	24(%rdx), %edx
	cmpl	%edx, %eax
	jg	.L759
	leaq	__PRETTY_FUNCTION__.8914(%rip), %rcx
	movl	$4864, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC187(%rip), %rdi
	call	__assert_fail@PLT
.L764:
	nop
.L759:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE89:
	.size	set_info_from_record, .-set_info_from_record
	.type	get_c_info, @function
get_c_info:
.LFB90:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_typeid
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L766
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_c_info
	jmp	.L767
.L766:
	movl	$0, %eax
.L767:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE90:
	.size	get_c_info, .-get_c_info
	.type	get_column_info, @function
get_column_info:
.LFB91:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%rcx, -112(%rbp)
	movl	%r8d, %eax
	movb	%al, -116(%rbp)
	movq	-96(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	-96(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	cmpb	$0, -116(%rbp)
	je	.L769
	movq	-96(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -52(%rbp)
	movl	$0, -72(%rbp)
	jmp	.L770
.L771:
	movl	-72(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-72(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rax, (%rdx)
	movl	-72(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movq	-24(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_c_info
	movq	%rax, 8(%rbx)
	movl	-72(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rax, %rdx
	movl	-72(%rbp), %eax
	movl	%eax, 16(%rdx)
	addl	$1, -72(%rbp)
.L770:
	movl	-72(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L771
	movl	-52(%rbp), %eax
	jmp	.L772
.L769:
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-104(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -68(%rbp)
	jmp	.L773
.L778:
	movl	-68(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	-68(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rax, %rdx
	movq	-32(%rbp), %rax
	movq	%rax, (%rdx)
	movl	-68(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movq	-32(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_c_info
	movq	%rax, 8(%rbx)
	movl	-68(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movl	$-1, 16(%rax)
	movl	$0, -64(%rbp)
	jmp	.L774
.L777:
	movl	-64(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	cmpq	%rax, -32(%rbp)
	jne	.L775
	movl	-68(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rax, %rdx
	movl	-64(%rbp), %eax
	movl	%eax, 16(%rdx)
	jmp	.L776
.L775:
	addl	$1, -64(%rbp)
.L774:
	movl	-64(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jl	.L777
.L776:
	addl	$1, -68(%rbp)
.L773:
	movl	-68(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jl	.L778
	movl	-56(%rbp), %eax
.L772:
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE91:
	.size	get_column_info, .-get_column_info
	.type	run_set_systems_for_entities, @function
run_set_systems_for_entities:
.LFB92:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movl	%ecx, -108(%rbp)
	movl	%r8d, -112(%rbp)
	movq	%r9, -120(%rbp)
	movl	16(%rbp), %eax
	movb	%al, -124(%rbp)
	cmpb	$0, -124(%rbp)
	je	.L780
	movq	-104(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -60(%rbp)
	movq	-24(%rbp), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -76(%rbp)
	jmp	.L781
.L782:
	movl	-76(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-120(%rbp), %r8
	movl	-112(%rbp), %edi
	movl	-108(%rbp), %ecx
	movq	-96(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	-88(%rbp), %rax
	movq	%r8, %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	flecs_run_monitor
	addl	$1, -76(%rbp)
.L781:
	movl	-76(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jl	.L782
	jmp	.L787
.L780:
	movq	-104(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L787
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -68(%rbp)
	cmpl	$-1, -68(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4961, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC110(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$-1, -68(%rbp)
	jne	.L784
	leaq	__PRETTY_FUNCTION__.8967(%rip), %rcx
	movl	$4961, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC110(%rip), %rdi
	call	__assert_fail@PLT
.L784:
	movl	-68(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -64(%rbp)
	movq	-48(%rbp), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movl	$0, -72(%rbp)
	jmp	.L785
.L786:
	movl	-72(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-120(%rbp), %r8
	movl	-112(%rbp), %edi
	movl	-108(%rbp), %ecx
	movq	-96(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-88(%rbp), %rax
	movq	%r8, %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	flecs_run_monitor
	addl	$1, -72(%rbp)
.L785:
	movl	-72(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jl	.L786
.L787:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE92:
	.size	run_set_systems_for_entities, .-run_set_systems_for_entities
	.section	.rodata
.LC188:
	.string	"count != 0"
	.text
	.type	notify, @function
notify:
.LFB93:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -48(%rbp)
	movq	%r9, -56(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4982, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L789
	leaq	__PRETTY_FUNCTION__.8985(%rip), %rcx
	movl	$4982, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L789:
	cmpl	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$4983, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC188(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -48(%rbp)
	jne	.L790
	leaq	__PRETTY_FUNCTION__.8985(%rip), %rcx
	movl	$4983, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC188(%rip), %rdi
	call	__assert_fail@PLT
.L790:
	movq	16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	16(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L791
.L792:
	movl	-16(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rsi
	movl	-44(%rbp), %r9d
	movq	-40(%rbp), %r8
	movq	-32(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-24(%rbp), %rax
	subq	$8, %rsp
	movl	-48(%rbp), %edi
	pushq	%rdi
	movq	%rax, %rdi
	call	flecs_triggers_notify
	addq	$16, %rsp
	addl	$1, -16(%rbp)
.L791:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L792
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE93:
	.size	notify, .-notify
	.section	.rodata
.LC189:
	.string	"base_index != -1"
.LC190:
	.string	"i_table != NULL"
.LC191:
	.string	"i_table != ((void *)0)"
.LC192:
	.string	"child != instance"
	.text
	.type	instantiate_children, @function
instantiate_children:
.LFB94:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -200(%rbp)
	movq	%rsi, -208(%rbp)
	movq	%rdx, -216(%rbp)
	movq	%rcx, -224(%rbp)
	movl	%r8d, -228(%rbp)
	movl	%r9d, -232(%rbp)
	movq	16(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-240(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-240(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -144(%rbp)
	cmpq	$0, -144(%rbp)
	je	.L821
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_data_count
	testl	%eax, %eax
	je	.L821
	movq	-240(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -164(%rbp)
	movq	-152(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -136(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -160(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	sall	$3, %eax
	cltq
	leaq	8(%rax), %rdx
	movl	$16, %eax
	subq	$1, %rax
	addq	%rdx, %rax
	movl	$16, %ebx
	movl	$0, %edx
	divq	%rbx
	imulq	$16, %rax, %rax
	movq	%rax, %rdx
	andq	$-4096, %rdx
	movq	%rsp, %rbx
	subq	%rdx, %rbx
	movq	%rbx, %rdx
.L797:
	cmpq	%rdx, %rsp
	je	.L798
	subq	$4096, %rsp
	orq	$0, 4088(%rsp)
	jmp	.L797
.L798:
	movq	%rax, %rdx
	andl	$4095, %edx
	subq	%rdx, %rsp
	movq	%rax, %rdx
	andl	$4095, %edx
	testq	%rdx, %rdx
	je	.L799
	andl	$4095, %eax
	subq	$8, %rax
	addq	%rsp, %rax
	orq	$0, (%rax)
.L799:
	movq	%rsp, %rax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	movq	%rax, -48(%rbp)
	movl	-164(%rbp), %eax
	sall	$3, %eax
	cltq
	leaq	8(%rax), %rdx
	movl	$16, %eax
	subq	$1, %rax
	addq	%rdx, %rax
	movl	$16, %ebx
	movl	$0, %edx
	divq	%rbx
	imulq	$16, %rax, %rax
	movq	%rax, %rdx
	andq	$-4096, %rdx
	movq	%rsp, %rbx
	subq	%rdx, %rbx
	movq	%rbx, %rdx
.L800:
	cmpq	%rdx, %rsp
	je	.L801
	subq	$4096, %rsp
	orq	$0, 4088(%rsp)
	jmp	.L800
.L801:
	movq	%rax, %rdx
	andl	$4095, %edx
	subq	%rdx, %rsp
	movq	%rax, %rdx
	andl	$4095, %edx
	testq	%rdx, %rdx
	je	.L802
	andl	$4095, %eax
	subq	$8, %rax
	addq	%rsp, %rax
	orq	$0, (%rax)
.L802:
	movq	%rsp, %rax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	movq	%rax, -128(%rbp)
	movl	$-1, -176(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -180(%rbp)
	jmp	.L803
.L809:
	movl	-180(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-136(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$260, %eax
	cmpq	%rax, -64(%rbp)
	je	.L822
	movabsq	$-72057594037927936, %rax
	andq	-64(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L806
	movq	-64(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$276, %edx
	cmpq	%rdx, %rax
	jne	.L806
	movq	-64(%rbp), %rax
	movl	%eax, %eax
	cmpq	%rax, -208(%rbp)
	jne	.L806
	movl	-172(%rbp), %eax
	movl	%eax, -176(%rbp)
.L806:
	movl	-180(%rbp), %eax
	cmpl	-164(%rbp), %eax
	jge	.L807
	movq	-144(%rbp), %rax
	movq	16(%rax), %rax
	movl	-180(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-56(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %ecx
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movl	-172(%rbp), %esi
	movslq	%esi, %rsi
	leaq	0(,%rsi,8), %rdi
	movq	-128(%rbp), %rsi
	leaq	(%rdi,%rsi), %rbx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, (%rbx)
	jmp	.L808
.L807:
	movl	-172(%rbp), %eax
	cmpl	-164(%rbp), %eax
	jge	.L808
	movl	-172(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-128(%rbp), %rax
	addq	%rdx, %rax
	movq	$0, (%rax)
.L808:
	movq	-48(%rbp), %rax
	movl	-172(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rax, %rdx
	movq	-64(%rbp), %rax
	movq	%rax, (%rdx)
	addl	$1, -172(%rbp)
	jmp	.L805
.L822:
	nop
.L805:
	addl	$1, -180(%rbp)
.L803:
	movl	-180(%rbp), %eax
	cmpl	-160(%rbp), %eax
	jl	.L809
	cmpl	$-1, -176(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5065, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC189(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$-1, -176(%rbp)
	jne	.L810
	leaq	__PRETTY_FUNCTION__.9024(%rip), %rcx
	movl	$5065, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC189(%rip), %rdi
	call	__assert_fail@PLT
.L810:
	movq	-216(%rbp), %rax
	movl	16(%rax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L811
	movq	-48(%rbp), %rax
	movl	-172(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movl	$260, %edx
	movq	%rdx, (%rax)
	addl	$1, -172(%rbp)
.L811:
	movl	-172(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -120(%rbp)
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -156(%rbp)
	movl	-228(%rbp), %eax
	movl	%eax, -180(%rbp)
	jmp	.L812
.L819:
	movl	-180(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	movl	%eax, %eax
	leaq	(%rdx,%rax), %rsi
	movabsq	$-432345564227567616, %rcx
	movq	-48(%rbp), %rax
	movl	-176(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	orq	%rcx, %rsi
	movq	%rsi, %rdx
	movq	%rdx, (%rax)
	leaq	-48(%rbp), %rdx
	movq	-200(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_find_or_create
	movq	%rax, -104(%rbp)
	cmpq	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5087, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC190(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -104(%rbp)
	jne	.L813
	leaq	__PRETTY_FUNCTION__.9024(%rip), %rcx
	movl	$5087, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC191(%rip), %rdi
	call	__assert_fail@PLT
.L813:
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -96(%rbp)
	movl	$0, -168(%rbp)
	jmp	.L814
.L816:
	movl	-168(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	cmpq	-112(%rbp), %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5098, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC192(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	cmpq	-112(%rbp), %rax
	jne	.L815
	leaq	__PRETTY_FUNCTION__.9024(%rip), %rcx
	movl	$5098, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC192(%rip), %rdi
	call	__assert_fail@PLT
.L815:
	addl	$1, -168(%rbp)
.L814:
	movl	-168(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jl	.L816
	leaq	-184(%rbp), %rdi
	movq	-128(%rbp), %rcx
	movl	-156(%rbp), %edx
	movq	-104(%rbp), %rsi
	movq	-200(%rbp), %rax
	movq	%rdi, %r9
	movq	%rcx, %r8
	movl	%edx, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	new_w_data
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -88(%rbp)
	movl	$0, -168(%rbp)
	jmp	.L817
.L818:
	movl	-168(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	-184(%rbp), %edx
	movl	-168(%rbp), %eax
	leal	(%rdx,%rax), %edi
	movq	-88(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-200(%rbp), %rax
	movl	$1, %r9d
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	instantiate
	addl	$1, -168(%rbp)
.L817:
	movl	-168(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jl	.L818
	addl	$1, -180(%rbp)
.L812:
	movl	-232(%rbp), %edx
	movl	-228(%rbp), %eax
	addl	%edx, %eax
	cmpl	%eax, -180(%rbp)
	jl	.L819
	jmp	.L793
.L821:
	nop
.L793:
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L820
	call	__stack_chk_fail@PLT
.L820:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE94:
	.size	instantiate_children, .-instantiate_children
	.type	instantiate, @function
instantiate:
.LFB95:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-80(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L828
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L828
	movq	-64(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L825
.L826:
	movq	-56(%rbp), %rax
	movq	(%rax), %rdi
	movl	-104(%rbp), %r9d
	movl	-100(%rbp), %r8d
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	subq	$8, %rsp
	pushq	%rdi
	movq	%rax, %rdi
	call	instantiate_children
	addq	$16, %rsp
.L825:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L826
.L828:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L827
	call	__stack_chk_fail@PLT
.L827:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE95:
	.size	instantiate, .-instantiate
	.section	.rodata
.LC193:
	.string	"component != 0"
	.text
	.type	override_from_base, @function
override_from_base:
.LFB96:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$176, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movq	%rcx, -160(%rbp)
	movq	%r8, -168(%rbp)
	movl	%r9d, -172(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -152(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5158, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC193(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -152(%rbp)
	jne	.L830
	leaq	__PRETTY_FUNCTION__.9075(%rip), %rcx
	movl	$5158, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC193(%rip), %rdi
	call	__assert_fail@PLT
.L830:
	cmpq	$0, -152(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5161, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC193(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -152(%rbp)
	jne	.L831
	leaq	__PRETTY_FUNCTION__.9075(%rip), %rcx
	movl	$5161, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC193(%rip), %rdi
	call	__assert_fail@PLT
.L831:
	movq	-144(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	xorl	$1, %eax
	testb	%al, %al
	jne	.L832
	movq	-40(%rbp), %rax
	testq	%rax, %rax
	jne	.L833
.L832:
	movl	$0, %eax
	jmp	.L844
.L833:
	movl	-24(%rbp), %edx
	movq	-40(%rbp), %rsi
	movq	-152(%rbp), %rcx
	movq	-136(%rbp), %rax
	movq	%rax, %rdi
	call	get_component
	movq	%rax, -104(%rbp)
	cmpq	$0, -104(%rbp)
	je	.L835
	movq	-168(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -118(%rbp)
	movq	-168(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-168(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %ecx
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -88(%rbp)
	movswl	-118(%rbp), %eax
	imull	-172(%rbp), %eax
	movslq	%eax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -112(%rbp)
	movq	-152(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_typeid
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_c_info
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L836
	movq	-80(%rbp), %rax
	movq	16(%rax), %rax
	jmp	.L837
.L836:
	movl	$0, %eax
.L837:
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L838
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -64(%rbp)
	movq	-80(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -116(%rbp)
	jmp	.L839
.L840:
	movswq	-118(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rcx
	movl	-172(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movq	-104(%rbp), %r9
	movq	-112(%rbp), %r8
	leaq	-144(%rbp), %rdx
	movq	-152(%rbp), %rsi
	movq	-136(%rbp), %rax
	subq	$8, %rsp
	pushq	-56(%rbp)
	pushq	$1
	pushq	%rcx
	movq	-72(%rbp), %r10
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	movswq	-118(%rbp), %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -112(%rbp)
	addl	$1, -116(%rbp)
.L839:
	movl	-116(%rbp), %eax
	cmpl	16(%rbp), %eax
	jl	.L840
	jmp	.L841
.L838:
	movl	$0, -116(%rbp)
	jmp	.L842
.L843:
	movswq	-118(%rbp), %rdx
	movq	-104(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movswq	-118(%rbp), %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -112(%rbp)
	addl	$1, -116(%rbp)
.L842:
	movl	-116(%rbp), %eax
	cmpl	16(%rbp), %eax
	jl	.L843
.L841:
	movl	$1, %eax
	jmp	.L844
.L835:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-172(%rbp), %r9d
	movq	-168(%rbp), %r8
	movq	-160(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	-152(%rbp), %rsi
	movq	-136(%rbp), %rax
	subq	$8, %rsp
	movl	16(%rbp), %edi
	pushq	%rdi
	movq	%rax, %rdi
	call	override_component
	addq	$16, %rsp
.L844:
	movq	-8(%rbp), %rdi
	xorq	%fs:40, %rdi
	je	.L845
	call	__stack_chk_fail@PLT
.L845:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE96:
	.size	override_from_base, .-override_from_base
	.type	override_component, @function
override_component:
.LFB97:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movq	-56(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
.L851:
	movl	-24(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	testq	%rax, %rax
	je	.L852
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L849
	movq	-8(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$277, %edx
	cmpq	%rdx, %rax
	jne	.L849
	movq	-8(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, %rdi
	movl	-76(%rbp), %r9d
	movq	-72(%rbp), %r8
	movq	-64(%rbp), %rcx
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	subq	$8, %rsp
	movl	16(%rbp), %esi
	pushq	%rsi
	movq	%rdi, %rsi
	movq	%rax, %rdi
	call	override_from_base
	addq	$16, %rsp
	testb	%al, %al
	je	.L849
	movl	$1, %eax
	jmp	.L850
.L849:
	subl	$1, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jns	.L851
	jmp	.L848
.L852:
	nop
.L848:
	movl	$0, %eax
.L850:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE97:
	.size	override_component, .-override_component
	.section	.rodata
.LC194:
	.string	"component_count != 0"
.LC195:
	.string	"component_info != NULL"
.LC196:
	.string	"component_info != ((void *)0)"
.LC197:
	.string	"base != 0"
.LC198:
	.string	"data->columns != NULL"
.LC199:
	.string	"data->columns != ((void *)0)"
	.text
	.type	components_override, @function
components_override:
.LFB98:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$144, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movl	%ecx, -124(%rbp)
	movl	%r8d, -128(%rbp)
	movq	%r9, -136(%rbp)
	movl	24(%rbp), %eax
	movb	%al, -140(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -120(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5251, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -120(%rbp)
	jne	.L854
	leaq	__PRETTY_FUNCTION__.9118(%rip), %rcx
	movl	$5251, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L854:
	cmpl	$0, 16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5252, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC194(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, 16(%rbp)
	jne	.L855
	leaq	__PRETTY_FUNCTION__.9118(%rip), %rcx
	movl	$5252, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC194(%rip), %rdi
	call	__assert_fail@PLT
.L855:
	cmpq	$0, -136(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5253, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC195(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -136(%rbp)
	jne	.L856
	leaq	__PRETTY_FUNCTION__.9118(%rip), %rcx
	movl	$5253, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC196(%rip), %rdi
	call	__assert_fail@PLT
.L856:
	movq	-112(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-120(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-112(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -88(%rbp)
	movl	$0, -92(%rbp)
	jmp	.L857
.L867:
	movl	-92(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-136(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	cmpq	$255, %rax
	jbe	.L858
	movq	-80(%rbp), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	cmpq	%rax, %rdx
	jne	.L858
	movq	-80(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$277, %edx
	cmpq	%rdx, %rax
	jne	.L858
	movq	-80(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5269, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC197(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L859
	leaq	__PRETTY_FUNCTION__.9118(%rip), %rcx
	movl	$5269, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC197(%rip), %rdi
	call	__assert_fail@PLT
.L859:
	movl	-128(%rbp), %r8d
	movl	-124(%rbp), %edi
	movq	-120(%rbp), %rcx
	movq	-112(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-104(%rbp), %rax
	movl	%r8d, %r9d
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	instantiate
	leaq	-80(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-72(%rbp), %rsi
	movq	-104(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -72(%rbp)
.L858:
	movl	-92(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-136(%rbp), %rax
	addq	%rdx, %rax
	movl	16(%rax), %eax
	movl	%eax, -84(%rbp)
	cmpl	$-1, -84(%rbp)
	je	.L870
	movl	-84(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.L870
	movq	-120(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5294, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC198(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-120(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L863
	leaq	__PRETTY_FUNCTION__.9118(%rip), %rcx
	movl	$5294, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC199(%rip), %rdi
	call	__assert_fail@PLT
.L863:
	movq	-120(%rbp), %rax
	movq	16(%rax), %rax
	movl	-84(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movzwl	8(%rax), %eax
	testw	%ax, %ax
	je	.L871
	movl	-84(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-80(%rbp), %rsi
	movl	-124(%rbp), %r9d
	movq	-40(%rbp), %r8
	movq	-120(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-104(%rbp), %rax
	subq	$8, %rsp
	movl	-128(%rbp), %edi
	pushq	%rdi
	movq	%rax, %rdi
	call	override_component
	addq	$16, %rsp
	testb	%al, %al
	je	.L866
	leaq	-80(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-72(%rbp), %rsi
	movq	-104(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -72(%rbp)
	jmp	.L866
.L870:
	nop
	jmp	.L866
.L871:
	nop
.L866:
	addl	$1, -92(%rbp)
.L857:
	movl	-92(%rbp), %eax
	cmpl	16(%rbp), %eax
	jl	.L867
	cmpb	$0, -140(%rbp)
	je	.L872
	movq	-72(%rbp), %rax
	cmpq	-112(%rbp), %rax
	je	.L872
	movq	-72(%rbp), %rax
	movq	80(%rax), %r8
	movq	-112(%rbp), %rax
	movq	80(%rax), %rdx
	movl	-128(%rbp), %edi
	movl	-124(%rbp), %ecx
	movq	-112(%rbp), %rsi
	movq	-104(%rbp), %rax
	movq	%r8, %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	flecs_run_monitors
.L872:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L869
	call	__stack_chk_fail@PLT
.L869:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE98:
	.size	components_override, .-components_override
	.section	.rodata
.LC200:
	.string	"sw_case != 0"
.LC201:
	.string	"sw_index != -1"
.LC202:
	.string	"sw != NULL"
.LC203:
	.string	"sw != ((void *)0)"
	.text
	.type	set_switch, @function
set_switch:
.LFB99:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -80(%rbp)
	movq	%r9, -88(%rbp)
	movl	16(%rbp), %eax
	movb	%al, -92(%rbp)
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-88(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -48(%rbp)
	jmp	.L874
.L881:
	movl	-48(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	movabsq	$-288230376151711744, %rdx
	cmpq	%rdx, %rax
	jne	.L875
	movabsq	$72057594037927935, %rax
	andq	%rax, -16(%rbp)
	movq	$0, -32(%rbp)
	movzbl	-92(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L876
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5343, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC200(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L876
	leaq	__PRETTY_FUNCTION__.9148(%rip), %rcx
	movl	$5343, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC200(%rip), %rdi
	call	__assert_fail@PLT
.L876:
	movq	-16(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_switch_from_case
	movl	%eax, -36(%rbp)
	cmpl	$-1, -36(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5347, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC201(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$-1, -36(%rbp)
	jne	.L877
	leaq	__PRETTY_FUNCTION__.9148(%rip), %rcx
	movl	$5347, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC201(%rip), %rdi
	call	__assert_fail@PLT
.L877:
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movl	-36(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5349, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC202(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L878
	leaq	__PRETTY_FUNCTION__.9148(%rip), %rcx
	movl	$5349, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC203(%rip), %rdi
	call	__assert_fail@PLT
.L878:
	movl	$0, -44(%rbp)
	jmp	.L879
.L880:
	movl	-76(%rbp), %edx
	movl	-44(%rbp), %eax
	leal	(%rdx,%rax), %ecx
	movq	-32(%rbp), %rdx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_switch_set
	addl	$1, -44(%rbp)
.L879:
	movl	-44(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jl	.L880
.L875:
	addl	$1, -48(%rbp)
.L874:
	movl	-48(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L881
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE99:
	.size	set_switch, .-set_switch
	.type	ecs_components_switch, @function
ecs_components_switch:
.LFB100:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L883
	movq	-40(%rbp), %r8
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	$0
	movq	%r8, %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	set_switch
	addq	$16, %rsp
.L883:
	cmpq	$0, 16(%rbp)
	je	.L885
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movq	16(%rbp), %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	set_switch
	addq	$16, %rsp
.L885:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE100:
	.size	ecs_components_switch, .-ecs_components_switch
	.section	.rodata
.LC204:
	.string	"added != NULL"
.LC205:
	.string	"added != ((void *)0)"
	.align 8
.LC206:
	.string	"ecs_vector_count(new_data[0].entities) > new_row"
	.text
	.type	new_entity, @function
new_entity:
.LFB101:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, %eax
	movb	%al, -76(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -8(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5390, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC204(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L887
	leaq	__PRETTY_FUNCTION__.9178(%rip), %rcx
	movl	$5390, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC205(%rip), %rdi
	call	__assert_fail@PLT
.L887:
	cmpq	$0, -16(%rbp)
	jne	.L888
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	-48(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_ensure
	movq	%rax, -16(%rbp)
.L888:
	movzbl	-76(%rbp), %r8d
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rcx
	movq	-8(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	flecs_table_append
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-56(%rbp), %rax
	movzbl	28(%rax), %eax
	movzbl	%al, %edx
	movl	-20(%rbp), %eax
	movl	%edx, %esi
	movl	%eax, %edi
	call	flecs_row_to_record
	movq	-16(%rbp), %rdx
	movl	%eax, 8(%rdx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -20(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5402, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC206(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -20(%rbp)
	jl	.L889
	leaq	__PRETTY_FUNCTION__.9178(%rip), %rcx
	movl	$5402, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC206(%rip), %rdi
	call	__assert_fail@PLT
.L889:
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	andl	$108676, %eax
	testl	%eax, %eax
	je	.L890
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %ecx
	movq	-8(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-40(%rbp), %rax
	pushq	$1
	pushq	$1
	movq	%rdi, %r9
	movl	$1, %r8d
	movq	%rax, %rdi
	call	flecs_run_add_actions
	addq	$16, %rsp
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	andl	$32768, %eax
	testl	%eax, %eax
	je	.L890
	movq	-64(%rbp), %rax
	movq	64(%rax), %rdx
	movl	-20(%rbp), %ecx
	movq	-64(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$0, %r9d
	movl	$1, %r8d
	movq	%rax, %rdi
	call	flecs_run_monitors
.L890:
	movq	-56(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movl	-20(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE101:
	.size	new_entity, .-new_entity
	.section	.rodata
.LC207:
	.string	"src_data != dst_data"
.LC208:
	.string	"ecs_is_alive(world, entity)"
.LC209:
	.string	"src_table != NULL"
.LC210:
	.string	"src_table != ((void *)0)"
.LC211:
	.string	"src_data != NULL"
.LC212:
	.string	"src_data != ((void *)0)"
.LC213:
	.string	"src_row >= 0"
	.align 8
.LC214:
	.string	"ecs_vector_count(src_data->entities) > src_row"
	.align 8
.LC215:
	.string	"!record || record == ecs_eis_get(world, entity)"
	.align 8
.LC216:
	.string	"!record || record == ((ecs_record_t*)_flecs_sparse_get((world->store).entity_index, sizeof(ecs_record_t), entity))"
	.text
	.type	move_entity, @function
move_entity:
.LFB102:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movl	40(%rbp), %eax
	movb	%al, -80(%rbp)
	movq	16(%rbp), %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -16(%rbp)
	movq	-72(%rbp), %rax
	cmpq	-16(%rbp), %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5435, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC207(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jne	.L893
	leaq	__PRETTY_FUNCTION__.9192(%rip), %rcx
	movl	$5435, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC207(%rip), %rdi
	call	__assert_fail@PLT
.L893:
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_alive
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5436, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC208(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_alive
	testb	%al, %al
	jne	.L894
	leaq	__PRETTY_FUNCTION__.9192(%rip), %rcx
	movl	$5436, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC208(%rip), %rdi
	call	__assert_fail@PLT
.L894:
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5437, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC209(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L895
	leaq	__PRETTY_FUNCTION__.9192(%rip), %rcx
	movl	$5437, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC210(%rip), %rdi
	call	__assert_fail@PLT
.L895:
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5438, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC211(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L896
	leaq	__PRETTY_FUNCTION__.9192(%rip), %rcx
	movl	$5438, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC212(%rip), %rdi
	call	__assert_fail@PLT
.L896:
	movl	-76(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5439, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC213(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -76(%rbp)
	jns	.L897
	leaq	__PRETTY_FUNCTION__.9192(%rip), %rcx
	movl	$5439, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC213(%rip), %rdi
	call	__assert_fail@PLT
.L897:
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -76(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5440, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC214(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -76(%rbp)
	jl	.L898
	leaq	__PRETTY_FUNCTION__.9192(%rip), %rcx
	movl	$5440, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC214(%rip), %rdi
	call	__assert_fail@PLT
.L898:
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L899
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	-48(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	cmpq	%rax, -8(%rbp)
	jne	.L900
.L899:
	movl	$1, %eax
	jmp	.L901
.L900:
	movl	$0, %eax
.L901:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5444, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC215(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	je	.L902
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	-48(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	cmpq	%rax, -8(%rbp)
	je	.L902
	leaq	__PRETTY_FUNCTION__.9192(%rip), %rcx
	movl	$5444, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC216(%rip), %rdi
	call	__assert_fail@PLT
.L902:
	movq	-8(%rbp), %rsi
	movq	-48(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	-40(%rbp), %rax
	movl	$0, %r9d
	movq	%rsi, %r8
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_table_append
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -76(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5450, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC214(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -76(%rbp)
	jl	.L903
	leaq	__PRETTY_FUNCTION__.9192(%rip), %rcx
	movl	$5450, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC214(%rip), %rdi
	call	__assert_fail@PLT
.L903:
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L904
	cmpq	$0, 32(%rbp)
	je	.L905
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	andl	$53508, %eax
	testl	%eax, %eax
	je	.L905
	movq	16(%rbp), %rax
	movq	96(%rax), %rsi
	movq	-64(%rbp), %rax
	movq	96(%rax), %rdx
	movl	-76(%rbp), %ecx
	movq	-40(%rbp), %rax
	movq	%rsi, %r9
	movl	$1, %r8d
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_run_monitors
	movq	32(%rbp), %rdi
	movl	-76(%rbp), %ecx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rdi, %r9
	movl	$1, %r8d
	movq	%rax, %rdi
	call	flecs_run_remove_actions
.L905:
	movzbl	-80(%rbp), %ecx
	movl	-20(%rbp), %r8d
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	pushq	%rcx
	movl	-76(%rbp), %ecx
	pushq	%rcx
	pushq	-72(%rbp)
	pushq	-64(%rbp)
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	16(%rbp), %rcx
	movq	%rax, %rdi
	call	flecs_table_move
	addq	$32, %rsp
.L904:
	movq	-8(%rbp), %rax
	movq	16(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-56(%rbp), %rax
	movzbl	28(%rax), %eax
	movzbl	%al, %edx
	movl	-20(%rbp), %eax
	movl	%edx, %esi
	movl	%eax, %edi
	call	flecs_row_to_record
	movq	-8(%rbp), %rdx
	movl	%eax, 8(%rdx)
	movl	-76(%rbp), %ecx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$0, %r8d
	movq	%rax, %rdi
	call	flecs_table_delete
	movq	-64(%rbp), %rax
	cmpq	16(%rbp), %rax
	jne	.L906
	cmpq	$0, 24(%rbp)
	je	.L907
	movq	24(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L907
.L906:
	cmpq	$0, 24(%rbp)
	je	.L908
	movq	16(%rbp), %rax
	movl	16(%rax), %eax
	andl	$108676, %eax
	testl	%eax, %eax
	je	.L908
	movq	24(%rbp), %rsi
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movq	-40(%rbp), %rax
	pushq	$1
	pushq	$0
	movq	%rsi, %r9
	movl	$1, %r8d
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_run_add_actions
	addq	$16, %rsp
.L908:
	movq	16(%rbp), %rax
	movl	16(%rax), %eax
	andl	$32768, %eax
	testl	%eax, %eax
	je	.L909
	movq	-64(%rbp), %rax
	movq	64(%rax), %rsi
	movq	16(%rbp), %rax
	movq	64(%rax), %rdx
	movl	-20(%rbp), %ecx
	movq	-40(%rbp), %rax
	movq	%rsi, %r9
	movl	$1, %r8d
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_run_monitors
.L909:
	cmpq	$0, 32(%rbp)
	je	.L907
	movq	16(%rbp), %rax
	movl	16(%rax), %eax
	andl	$4, %eax
	testl	%eax, %eax
	je	.L907
	movq	16(%rbp), %rax
	movq	88(%rax), %rsi
	movq	-64(%rbp), %rax
	movq	88(%rax), %rdx
	movl	-20(%rbp), %ecx
	movq	-40(%rbp), %rax
	movq	%rsi, %r9
	movl	$1, %r8d
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_run_monitors
.L907:
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movl	-20(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE102:
	.size	move_entity, .-move_entity
	.type	delete_entity, @function
delete_entity:
.LFB103:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	%r8, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L912
	movq	-16(%rbp), %rax
	movq	96(%rax), %rdx
	movl	-28(%rbp), %ecx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	$0, %r9d
	movl	$1, %r8d
	movq	%rax, %rdi
	call	flecs_run_monitors
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	andl	$53508, %eax
	testl	%eax, %eax
	je	.L912
	movq	-40(%rbp), %rdi
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rdi, %r9
	movl	$1, %r8d
	movq	%rax, %rdi
	call	flecs_run_remove_actions
.L912:
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	$1, %r8d
	movq	%rax, %rdi
	call	flecs_table_delete
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE103:
	.size	delete_entity, .-delete_entity
	.type	update_component_monitor_w_array, @function
update_component_monitor_w_array:
.LFB104:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%rcx, -112(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -112(%rbp)
	je	.L922
	movl	$0, -68(%rbp)
	jmp	.L916
.L920:
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movl	-68(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-64(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L917
	movq	-64(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	cmpq	-104(%rbp), %rax
	je	.L917
	movq	-56(%rbp), %rax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	testq	%rax, %rax
	je	.L917
	movq	-112(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	update_component_monitor_w_array
.L917:
	movabsq	$-72057594037927936, %rax
	andq	-64(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L918
	movq	-64(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$277, %edx
	cmpq	%rdx, %rax
	jne	.L918
	movq	-64(%rbp), %rax
	movl	%eax, %edx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_type
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-32(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	update_component_monitor_w_array
	jmp	.L919
.L918:
	movq	-64(%rbp), %rdx
	movq	-104(%rbp), %rcx
	movq	-88(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_monitor_mark_dirty
.L919:
	addl	$1, -68(%rbp)
.L916:
	movq	-112(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -68(%rbp)
	jl	.L920
	jmp	.L913
.L922:
	nop
.L913:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L921
	call	__stack_chk_fail@PLT
.L921:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE104:
	.size	update_component_monitor_w_array, .-update_component_monitor_w_array
	.type	update_component_monitors, @function
update_component_monitors:
.LFB105:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rdx, %rcx
	movl	$0, %edx
	movq	%rax, %rdi
	call	update_component_monitor_w_array
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rdx, %rcx
	movl	$0, %edx
	movq	%rax, %rdi
	call	update_component_monitor_w_array
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE105:
	.size	update_component_monitors, .-update_component_monitors
	.section	.rodata
.LC217:
	.string	"!world->is_readonly"
.LC218:
	.string	"dst_table != NULL"
.LC219:
	.string	"dst_table != ((void *)0)"
	.align 8
.LC220:
	.string	"!world->stats.max_id || entity <= world->stats.max_id"
.LC221:
	.string	"entity >= world->stats.min_id"
	.text
	.type	commit, @function
commit:
.LFB106:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movl	16(%rbp), %eax
	movb	%al, -100(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-56(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5597, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L925
	leaq	__PRETTY_FUNCTION__.9232(%rip), %rcx
	movl	$5597, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L925:
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jne	.L926
	cmpq	$0, -88(%rbp)
	je	.L927
	movq	-88(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jne	.L928
.L927:
	cmpq	$0, -96(%rbp)
	je	.L942
	movq	-96(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L942
.L928:
	cmpq	$0, -48(%rbp)
	je	.L942
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L942
	movq	-72(%rbp), %rax
	movl	24(%rax), %ecx
	movq	-72(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-88(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-56(%rbp), %rax
	subq	$8, %rsp
	pushq	-96(%rbp)
	movq	%rdi, %r9
	movl	$1, %r8d
	movq	%rax, %rdi
	call	ecs_components_switch
	addq	$16, %rsp
	jmp	.L942
.L926:
	cmpq	$0, -48(%rbp)
	je	.L931
	movq	-72(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -80(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5616, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC218(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	jne	.L932
	leaq	__PRETTY_FUNCTION__.9232(%rip), %rcx
	movl	$5616, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC219(%rip), %rdi
	call	__assert_fail@PLT
.L932:
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L933
	movzbl	-100(%rbp), %edi
	movq	-72(%rbp), %rax
	movl	24(%rax), %r9d
	movq	-40(%rbp), %r8
	movq	-48(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	pushq	%rdi
	pushq	-96(%rbp)
	pushq	-88(%rbp)
	pushq	-80(%rbp)
	movq	%rax, %rdi
	call	move_entity
	addq	$32, %rsp
	movq	-72(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movq	-72(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rdx, 8(%rax)
	jmp	.L934
.L933:
	movq	-72(%rbp), %rax
	movl	24(%rax), %ecx
	movq	-96(%rbp), %rdi
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	delete_entity
	movq	$0, -32(%rbp)
	movq	-72(%rbp), %rax
	movzbl	28(%rax), %eax
	movzbl	%al, %eax
	negl	%eax
	movl	%eax, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	leaq	-32(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_set
	jmp	.L934
.L931:
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L934
	movzbl	-100(%rbp), %r8d
	movq	-88(%rbp), %rdi
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	new_entity
	movq	-72(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movq	-72(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rdx, 8(%rax)
.L934:
	movq	-72(%rbp), %rax
	movzbl	28(%rax), %eax
	testb	%al, %al
	je	.L935
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	update_component_monitors
.L935:
	cmpq	$0, -48(%rbp)
	je	.L936
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L924
.L936:
	movq	-56(%rbp), %rax
	movzbl	32(%rax), %eax
	testb	%al, %al
	je	.L924
	movq	-56(%rbp), %rax
	movq	552(%rax), %rax
	testq	%rax, %rax
	je	.L937
	movq	-56(%rbp), %rax
	movq	552(%rax), %rax
	cmpq	%rax, -64(%rbp)
	ja	.L938
.L937:
	movl	$1, %eax
	jmp	.L939
.L938:
	movl	$0, %eax
.L939:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5647, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC220(%rip), %rdx
	movl	$5, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movq	552(%rax), %rax
	testq	%rax, %rax
	je	.L940
	movq	-56(%rbp), %rax
	movq	552(%rax), %rax
	cmpq	%rax, -64(%rbp)
	jbe	.L940
	leaq	__PRETTY_FUNCTION__.9232(%rip), %rcx
	movl	$5647, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC220(%rip), %rdi
	call	__assert_fail@PLT
.L940:
	movq	-56(%rbp), %rax
	movq	544(%rax), %rax
	cmpq	%rax, -64(%rbp)
	setnb	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5648, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC221(%rip), %rdx
	movl	$5, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movq	544(%rax), %rax
	cmpq	%rax, -64(%rbp)
	jnb	.L924
	leaq	__PRETTY_FUNCTION__.9232(%rip), %rcx
	movl	$5648, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC221(%rip), %rdi
	call	__assert_fail@PLT
.L942:
	nop
.L924:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L941
	call	__stack_chk_fail@PLT
.L941:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE106:
	.size	commit, .-commit
	.type	new, @function
new:
.LFB107:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	-72(%rbp), %rax
	leaq	88(%rax), %rsi
	movq	-88(%rbp), %rdx
	movq	-72(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -56(%rbp)
	movq	-88(%rbp), %rdi
	movq	-56(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	$1, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	new_entity
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L944
	call	__stack_chk_fail@PLT
.L944:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE107:
	.size	new, .-new
	.section	.rodata
.LC222:
	.string	"ids != NULL"
.LC223:
	.string	"ids != ((void *)0)"
.LC224:
	.string	"table_index >= 0"
	.text
	.type	new_w_data, @function
new_w_data:
.LFB108:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -200(%rbp)
	movq	%rsi, -208(%rbp)
	movq	%rdx, -216(%rbp)
	movl	%ecx, -220(%rbp)
	movq	%r8, -232(%rbp)
	movq	%r9, -240(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -200(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5673, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -200(%rbp)
	jne	.L946
	leaq	__PRETTY_FUNCTION__.9251(%rip), %rcx
	movl	$5673, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L946:
	cmpq	$0, -208(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5674, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -208(%rbp)
	jne	.L947
	leaq	__PRETTY_FUNCTION__.9251(%rip), %rcx
	movl	$5674, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L947:
	cmpl	$0, -220(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5675, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC188(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -220(%rbp)
	jne	.L948
	leaq	__PRETTY_FUNCTION__.9251(%rip), %rcx
	movl	$5675, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC188(%rip), %rdi
	call	__assert_fail@PLT
.L948:
	movq	-200(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -180(%rbp)
	movq	-200(%rbp), %rax
	movq	40(%rax), %rax
	movl	-220(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_sparse_new_ids
	movq	%rax, -168(%rbp)
	cmpq	$0, -168(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5679, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC222(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -168(%rbp)
	jne	.L949
	leaq	__PRETTY_FUNCTION__.9251(%rip), %rcx
	movl	$5679, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC223(%rip), %rdi
	call	__assert_fail@PLT
.L949:
	movq	-208(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -160(%rbp)
	cmpq	$0, -160(%rbp)
	jne	.L950
	movq	-168(%rbp), %rax
	jmp	.L965
.L950:
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	cmpq	$0, -216(%rbp)
	jne	.L952
	leaq	-80(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-160(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -72(%rbp)
.L952:
	movq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -152(%rbp)
	movq	-168(%rbp), %rdi
	movl	-220(%rbp), %ecx
	movq	-152(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-200(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	flecs_table_appendn
	movl	%eax, -176(%rbp)
	movq	-160(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-152(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -144(%rbp)
	movl	$0, -188(%rbp)
	jmp	.L953
.L954:
	movq	-208(%rbp), %rax
	movq	%rax, -48(%rbp)
	movl	-176(%rbp), %edx
	movl	-188(%rbp), %eax
	addl	%edx, %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-188(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-168(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-200(%rbp), %rax
	movq	40(%rax), %rax
	movl	-176(%rbp), %esi
	movl	-188(%rbp), %ecx
	addl	%esi, %ecx
	movslq	%ecx, %rcx
	leaq	0(,%rcx,8), %rsi
	movq	-144(%rbp), %rcx
	leaq	(%rsi,%rcx), %rbx
	leaq	-48(%rbp), %rcx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_set
	movq	%rax, (%rbx)
	addl	$1, -188(%rbp)
.L953:
	movl	-188(%rbp), %eax
	cmpl	-220(%rbp), %eax
	jl	.L954
	movq	-200(%rbp), %rax
	leaq	368(%rax), %rdx
	movq	-200(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_none
	cmpq	$0, -232(%rbp)
	sete	%al
	movzbl	%al, %edi
	leaq	-64(%rbp), %r9
	movl	-220(%rbp), %r8d
	movl	-176(%rbp), %ecx
	movq	-152(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	-200(%rbp), %rax
	pushq	%rdi
	pushq	$1
	movq	%rax, %rdi
	call	flecs_run_add_actions
	addq	$16, %rsp
	cmpq	$0, -232(%rbp)
	je	.L955
	movl	$0, -184(%rbp)
	jmp	.L956
.L963:
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movl	-184(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rdx
	movq	-160(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -172(%rbp)
	movl	-172(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5723, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC224(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -172(%rbp)
	jns	.L957
	leaq	__PRETTY_FUNCTION__.9251(%rip), %rcx
	movl	$5723, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC224(%rip), %rdi
	call	__assert_fail@PLT
.L957:
	movq	-208(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -172(%rbp)
	jge	.L967
	movq	-152(%rbp), %rax
	movq	16(%rax), %rax
	movl	-172(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -192(%rbp)
	cmpw	$0, -192(%rbp)
	je	.L968
	movq	-128(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -190(%rbp)
	movl	$16, %eax
	cmpw	$16, -190(%rbp)
	cmovge	-190(%rbp), %ax
	movswl	%ax, %edx
	movswl	-192(%rbp), %ecx
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -120(%rbp)
	movswl	-192(%rbp), %eax
	imull	-176(%rbp), %eax
	movslq	%eax, %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -120(%rbp)
	movl	-184(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-232(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -112(%rbp)
	cmpq	$0, -112(%rbp)
	je	.L969
	movq	-136(%rbp), %rdx
	movq	-200(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_c_info
	movq	%rax, -104(%rbp)
	cmpq	$0, -104(%rbp)
	je	.L962
	movq	-104(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -96(%rbp)
	cmpq	$0, -96(%rbp)
	je	.L962
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -88(%rbp)
	movq	-104(%rbp), %rax
	movq	32(%rax), %rbx
	movswq	-192(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-112(%rbp), %r9
	movq	-120(%rbp), %r11
	movq	-88(%rbp), %rcx
	movq	-88(%rbp), %rdx
	movq	-136(%rbp), %rsi
	movq	-200(%rbp), %rax
	subq	$8, %rsp
	pushq	%rbx
	movl	-220(%rbp), %r8d
	pushq	%r8
	pushq	%rdi
	movq	-96(%rbp), %r10
	movq	%r11, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L959
.L962:
	movswl	-192(%rbp), %eax
	imull	-220(%rbp), %eax
	movslq	%eax, %rdx
	movq	-112(%rbp), %rcx
	movq	-120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	jmp	.L959
.L967:
	nop
	jmp	.L959
.L968:
	nop
	jmp	.L959
.L969:
	nop
.L959:
	addl	$1, -184(%rbp)
.L956:
	movq	-216(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -184(%rbp)
	jl	.L963
	movl	-176(%rbp), %edi
	movq	-152(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	-200(%rbp), %rax
	pushq	$1
	movl	-220(%rbp), %esi
	pushq	%rsi
	movl	%edi, %r9d
	movl	$0, %r8d
	movl	$0, %esi
	movq	%rax, %rdi
	call	flecs_run_set_systems
	addq	$16, %rsp
.L955:
	movq	-208(%rbp), %rax
	movq	64(%rax), %rdx
	movl	-220(%rbp), %edi
	movl	-176(%rbp), %ecx
	movq	-208(%rbp), %rsi
	movq	-200(%rbp), %rax
	movl	$0, %r9d
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	flecs_run_monitors
	movq	-200(%rbp), %rax
	leaq	368(%rax), %rdx
	movq	-200(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	cmpq	$0, -240(%rbp)
	je	.L964
	movq	-240(%rbp), %rax
	movl	-176(%rbp), %edx
	movl	%edx, (%rax)
.L964:
	movq	-200(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_ids
	movq	%rax, -168(%rbp)
	movl	-180(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-168(%rbp), %rax
	addq	%rdx, %rax
.L965:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L966
	call	__stack_chk_fail@PLT
.L966:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE108:
	.size	new_w_data, .-new_w_data
	.type	has_type, @function
has_type:
.LFB109:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, %eax
	movl	%r8d, %edx
	movb	%al, -44(%rbp)
	movl	%edx, %eax
	movb	%al, -48(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5779, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L971
	leaq	__PRETTY_FUNCTION__.9287(%rip), %rcx
	movl	$5779, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L971:
	cmpq	$0, -32(%rbp)
	jne	.L972
	movl	$0, %eax
	jmp	.L973
.L972:
	cmpq	$0, -40(%rbp)
	jne	.L974
	movl	$1, %eax
	jmp	.L973
.L974:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_type
	movq	%rax, -8(%rbp)
	movzbl	-48(%rbp), %edi
	movzbl	-44(%rbp), %ecx
	movq	-40(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	flecs_type_contains
	testq	%rax, %rax
	setne	%al
.L973:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE109:
	.size	has_type, .-has_type
	.section	.rodata
	.align 8
.LC225:
	.string	"world->magic == ECS_WORLD_MAGIC"
.LC226:
	.string	"world->magic == (0x65637377)"
	.align 8
.LC227:
	.string	"to_add->count < ECS_MAX_ADD_REMOVE"
.LC228:
	.string	"to_add->count < (32)"
	.align 8
.LC229:
	.string	"to_remove->count < ECS_MAX_ADD_REMOVE"
.LC230:
	.string	"to_remove->count < (32)"
	.text
	.type	add_remove, @function
add_remove:
.LFB110:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$640, %rsp
	movq	%rdi, -616(%rbp)
	movq	%rsi, -624(%rbp)
	movq	%rdx, -632(%rbp)
	movq	%rcx, -640(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -616(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5802, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -616(%rbp)
	jne	.L976
	leaq	__PRETTY_FUNCTION__.9295(%rip), %rcx
	movl	$5802, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L976:
	movq	-616(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5803, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-616(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L977
	leaq	__PRETTY_FUNCTION__.9295(%rip), %rcx
	movl	$5803, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L977:
	movq	-632(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5804, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC227(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-632(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	jle	.L978
	leaq	__PRETTY_FUNCTION__.9295(%rip), %rcx
	movl	$5804, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC228(%rip), %rdi
	call	__assert_fail@PLT
.L978:
	movq	-640(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5805, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC229(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-640(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	jle	.L979
	leaq	__PRETTY_FUNCTION__.9295(%rip), %rcx
	movl	$5805, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC230(%rip), %rdi
	call	__assert_fail@PLT
.L979:
	leaq	-560(%rbp), %rdx
	movq	-624(%rbp), %rcx
	movq	-616(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	movq	$0, -592(%rbp)
	movq	$0, -584(%rbp)
	leaq	-528(%rbp), %rax
	movq	%rax, -592(%rbp)
	movq	$0, -576(%rbp)
	movq	$0, -568(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -576(%rbp)
	movq	-552(%rbp), %rax
	movq	%rax, -608(%rbp)
	leaq	-576(%rbp), %rcx
	movq	-640(%rbp), %rdx
	movq	-608(%rbp), %rsi
	movq	-616(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -600(%rbp)
	leaq	-592(%rbp), %rcx
	movq	-632(%rbp), %rdx
	movq	-600(%rbp), %rsi
	movq	-616(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -600(%rbp)
	leaq	-576(%rbp), %r8
	leaq	-592(%rbp), %rdi
	movq	-600(%rbp), %rcx
	leaq	-560(%rbp), %rdx
	movq	-624(%rbp), %rsi
	movq	-616(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	commit
	addq	$16, %rsp
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L980
	call	__stack_chk_fail@PLT
.L980:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE110:
	.size	add_remove, .-add_remove
	.section	.rodata
	.align 8
.LC231:
	.string	"components->count < ECS_MAX_ADD_REMOVE"
.LC232:
	.string	"components->count < (32)"
	.text
	.type	add_ids_w_info, @function
add_ids_w_info:
.LFB111:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$352, %rsp
	movq	%rdi, -312(%rbp)
	movq	%rsi, -320(%rbp)
	movq	%rdx, -328(%rbp)
	movq	%rcx, -336(%rbp)
	movl	%r8d, %eax
	movb	%al, -340(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-336(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5834, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC231(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-336(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	jle	.L982
	leaq	__PRETTY_FUNCTION__.9310(%rip), %rcx
	movl	$5834, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC232(%rip), %rdi
	call	__assert_fail@PLT
.L982:
	movq	$0, -288(%rbp)
	movq	$0, -280(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	-328(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	leaq	-288(%rbp), %rcx
	movq	-336(%rbp), %rdx
	movq	-304(%rbp), %rsi
	movq	-312(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -296(%rbp)
	movzbl	-340(%rbp), %edi
	leaq	-288(%rbp), %r8
	movq	-296(%rbp), %rcx
	movq	-328(%rbp), %rdx
	movq	-320(%rbp), %rsi
	movq	-312(%rbp), %rax
	subq	$8, %rsp
	pushq	%rdi
	movl	$0, %r9d
	movq	%rax, %rdi
	call	commit
	addq	$16, %rsp
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L983
	call	__stack_chk_fail@PLT
.L983:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE111:
	.size	add_ids_w_info, .-add_ids_w_info
	.type	remove_ids_w_info, @function
remove_ids_w_info:
.LFB112:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$336, %rsp
	movq	%rdi, -312(%rbp)
	movq	%rsi, -320(%rbp)
	movq	%rdx, -328(%rbp)
	movq	%rcx, -336(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-336(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5852, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC231(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-336(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	jle	.L985
	leaq	__PRETTY_FUNCTION__.9321(%rip), %rcx
	movl	$5852, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC232(%rip), %rdi
	call	__assert_fail@PLT
.L985:
	movq	$0, -288(%rbp)
	movq	$0, -280(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	-328(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -304(%rbp)
	leaq	-288(%rbp), %rcx
	movq	-336(%rbp), %rdx
	movq	-304(%rbp), %rsi
	movq	-312(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -296(%rbp)
	leaq	-288(%rbp), %rdi
	movq	-296(%rbp), %rcx
	movq	-328(%rbp), %rdx
	movq	-320(%rbp), %rsi
	movq	-312(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movq	%rdi, %r9
	movl	$0, %r8d
	movq	%rax, %rdi
	call	commit
	addq	$16, %rsp
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L986
	call	__stack_chk_fail@PLT
.L986:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE112:
	.size	remove_ids_w_info, .-remove_ids_w_info
	.type	add_ids, @function
add_ids:
.LFB113:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$384, %rsp
	movq	%rdi, -360(%rbp)
	movq	%rsi, -368(%rbp)
	movq	%rdx, -376(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-360(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5869, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-360(%rbp), %rax
	testq	%rax, %rax
	jne	.L988
	leaq	__PRETTY_FUNCTION__.9331(%rip), %rcx
	movl	$5869, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L988:
	movq	-376(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5870, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC231(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-376(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	jle	.L989
	leaq	__PRETTY_FUNCTION__.9331(%rip), %rcx
	movl	$5870, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC232(%rip), %rdi
	call	__assert_fail@PLT
.L989:
	leaq	-360(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -344(%rbp)
	movq	-360(%rbp), %rax
	movq	-376(%rbp), %rcx
	movq	-368(%rbp), %rdx
	movq	-344(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_defer_add
	testb	%al, %al
	jne	.L993
	movq	-360(%rbp), %rax
	leaq	-304(%rbp), %rdx
	movq	-368(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	movq	$0, -320(%rbp)
	movq	$0, -312(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-296(%rbp), %rax
	movq	%rax, -336(%rbp)
	movq	-360(%rbp), %rax
	leaq	-320(%rbp), %rcx
	movq	-376(%rbp), %rdx
	movq	-336(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -328(%rbp)
	movq	-360(%rbp), %rax
	leaq	-320(%rbp), %rdi
	movq	-328(%rbp), %rcx
	leaq	-304(%rbp), %rdx
	movq	-368(%rbp), %rsi
	subq	$8, %rsp
	pushq	$1
	movl	$0, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	commit
	addq	$16, %rsp
	movq	-360(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	jmp	.L987
.L993:
	nop
.L987:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L992
	call	__stack_chk_fail@PLT
.L992:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE113:
	.size	add_ids, .-add_ids
	.type	remove_ids, @function
remove_ids:
.LFB114:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$384, %rsp
	movq	%rdi, -360(%rbp)
	movq	%rsi, -368(%rbp)
	movq	%rdx, -376(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-360(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5898, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-360(%rbp), %rax
	testq	%rax, %rax
	jne	.L995
	leaq	__PRETTY_FUNCTION__.9343(%rip), %rcx
	movl	$5898, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L995:
	movq	-376(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5899, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC231(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-376(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$31, %eax
	jle	.L996
	leaq	__PRETTY_FUNCTION__.9343(%rip), %rcx
	movl	$5899, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC232(%rip), %rdi
	call	__assert_fail@PLT
.L996:
	leaq	-360(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -344(%rbp)
	movq	-360(%rbp), %rax
	movq	-376(%rbp), %rcx
	movq	-368(%rbp), %rdx
	movq	-344(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_defer_remove
	testb	%al, %al
	jne	.L1000
	movq	-360(%rbp), %rax
	leaq	-304(%rbp), %rdx
	movq	-368(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	movq	$0, -320(%rbp)
	movq	$0, -312(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-296(%rbp), %rax
	movq	%rax, -336(%rbp)
	movq	-360(%rbp), %rax
	leaq	-320(%rbp), %rcx
	movq	-376(%rbp), %rdx
	movq	-336(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -328(%rbp)
	movq	-360(%rbp), %rax
	leaq	-320(%rbp), %rdi
	movq	-328(%rbp), %rcx
	leaq	-304(%rbp), %rdx
	movq	-368(%rbp), %rsi
	subq	$8, %rsp
	pushq	$1
	movq	%rdi, %r9
	movl	$0, %r8d
	movq	%rax, %rdi
	call	commit
	addq	$16, %rsp
	movq	-360(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	jmp	.L994
.L1000:
	nop
.L994:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L999
	call	__stack_chk_fail@PLT
.L999:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE114:
	.size	remove_ids, .-remove_ids
	.section	.rodata
	.align 8
.LC233:
	.string	"(component & ECS_COMPONENT_MASK) == component || ECS_HAS_ROLE(component, PAIR)"
	.align 8
.LC234:
	.string	"(component & (~(0xFFull << 56))) == component || ((component & (0xFFull << 56)) == ECS_PAIR)"
.LC235:
	.string	"info->table != NULL"
.LC236:
	.string	"info->table != ((void *)0)"
	.text
	.type	get_mutable, @function
get_mutable:
.LFB115:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5929, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L1002
	leaq	__PRETTY_FUNCTION__.9357(%rip), %rcx
	movl	$5929, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1002:
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5930, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC193(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	jne	.L1003
	leaq	__PRETTY_FUNCTION__.9357(%rip), %rcx
	movl	$5930, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC193(%rip), %rdi
	call	__assert_fail@PLT
.L1003:
	movq	-72(%rbp), %rax
	movabsq	$72057594037927935, %rdx
	andq	%rax, %rdx
	movq	-72(%rbp), %rax
	cmpq	%rax, %rdx
	je	.L1004
	movq	-72(%rbp), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	cmpq	%rax, %rdx
	jne	.L1005
.L1004:
	movl	$1, %eax
	jmp	.L1006
.L1005:
	movl	$0, %eax
.L1006:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5931, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC233(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movabsq	$72057594037927935, %rdx
	andq	%rax, %rdx
	movq	-72(%rbp), %rax
	cmpq	%rax, %rdx
	je	.L1007
	movq	-72(%rbp), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	cmpq	%rax, %rdx
	je	.L1007
	leaq	__PRETTY_FUNCTION__.9357(%rip), %rcx
	movl	$5931, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC234(%rip), %rdi
	call	__assert_fail@PLT
.L1007:
	movq	$0, -48(%rbp)
	movq	-80(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	testb	%al, %al
	je	.L1008
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L1008
	movq	-72(%rbp), %rcx
	movq	-80(%rbp), %rax
	movl	24(%rax), %edx
	movq	-80(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	get_component
	movq	%rax, -48(%rbp)
.L1008:
	cmpq	$0, -48(%rbp)
	jne	.L1009
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	leaq	-72(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$1, %r8d
	movq	%rax, %rdi
	call	add_ids_w_info
	movq	-80(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5950, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC235(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L1010
	leaq	__PRETTY_FUNCTION__.9357(%rip), %rcx
	movl	$5950, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC236(%rip), %rdi
	call	__assert_fail@PLT
.L1010:
	movq	-72(%rbp), %rcx
	movq	-80(%rbp), %rax
	movl	24(%rax), %edx
	movq	-80(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	get_component
	movq	%rax, -48(%rbp)
	cmpq	$0, -88(%rbp)
	je	.L1011
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -40(%rbp)
	setne	%dl
	movq	-88(%rbp), %rax
	movb	%dl, (%rax)
.L1011:
	movq	-48(%rbp), %rax
	jmp	.L1012
.L1009:
	cmpq	$0, -88(%rbp)
	je	.L1013
	movq	-88(%rbp), %rax
	movb	$0, (%rax)
.L1013:
	movq	-48(%rbp), %rax
.L1012:
	movq	-8(%rbp), %rdi
	xorq	%fs:40, %rdi
	je	.L1014
	call	__stack_chk_fail@PLT
.L1014:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE115:
	.size	get_mutable, .-get_mutable
	.globl	flecs_run_add_actions
	.type	flecs_run_add_actions, @function
flecs_run_add_actions:
.LFB116:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$848, %rsp
	movq	%rdi, -808(%rbp)
	movq	%rsi, -816(%rbp)
	movq	%rdx, -824(%rbp)
	movl	%ecx, -828(%rbp)
	movl	%r8d, -832(%rbp)
	movq	%r9, -840(%rbp)
	movl	16(%rbp), %edx
	movl	24(%rbp), %eax
	movb	%dl, -844(%rbp)
	movb	%al, -848(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -840(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$5981, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC204(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -840(%rbp)
	jne	.L1016
	leaq	__PRETTY_FUNCTION__.9371(%rip), %rcx
	movl	$5981, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC205(%rip), %rdi
	call	__assert_fail@PLT
.L1016:
	movq	-816(%rbp), %rax
	movl	16(%rax), %eax
	andl	$4, %eax
	testl	%eax, %eax
	je	.L1017
	movzbl	-844(%rbp), %edi
	leaq	-784(%rbp), %rcx
	movq	-840(%rbp), %rdx
	movq	-816(%rbp), %rsi
	movq	-808(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	get_column_info
	movl	%eax, -788(%rbp)
	movzbl	-848(%rbp), %edi
	leaq	-784(%rbp), %r9
	movl	-832(%rbp), %r8d
	movl	-828(%rbp), %ecx
	movq	-824(%rbp), %rdx
	movq	-816(%rbp), %rsi
	movq	-808(%rbp), %rax
	pushq	%rdi
	movl	-788(%rbp), %edi
	pushq	%rdi
	movq	%rax, %rdi
	call	components_override
	addq	$16, %rsp
.L1017:
	movq	-816(%rbp), %rax
	movl	16(%rax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	je	.L1018
	movq	-840(%rbp), %r8
	movl	-832(%rbp), %edi
	movl	-828(%rbp), %ecx
	movq	-824(%rbp), %rdx
	movq	-816(%rbp), %rsi
	movq	-808(%rbp), %rax
	subq	$8, %rsp
	pushq	$0
	movq	%r8, %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	ecs_components_switch
	addq	$16, %rsp
.L1018:
	movq	-816(%rbp), %rax
	movl	16(%rax), %eax
	andl	$2048, %eax
	testl	%eax, %eax
	je	.L1021
	movl	$286, %r8d
	movl	-832(%rbp), %edi
	movl	-828(%rbp), %ecx
	movq	-824(%rbp), %rdx
	movq	-816(%rbp), %rsi
	movq	-808(%rbp), %rax
	subq	$8, %rsp
	pushq	-840(%rbp)
	movq	%r8, %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	notify
	addq	$16, %rsp
.L1021:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1020
	call	__stack_chk_fail@PLT
.L1020:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE116:
	.size	flecs_run_add_actions, .-flecs_run_add_actions
	.section	.rodata
.LC237:
	.string	"removed != NULL"
.LC238:
	.string	"removed != ((void *)0)"
	.text
	.globl	flecs_run_remove_actions
	.type	flecs_run_remove_actions, @function
flecs_run_remove_actions:
.LFB117:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6011, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC237(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1023
	leaq	__PRETTY_FUNCTION__.9382(%rip), %rcx
	movl	$6011, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC238(%rip), %rdi
	call	__assert_fail@PLT
.L1023:
	cmpl	$0, -32(%rbp)
	je	.L1026
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	andl	$16384, %eax
	testl	%eax, %eax
	je	.L1025
	movl	$289, %r8d
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	-40(%rbp)
	movq	%r8, %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	notify
	addq	$16, %rsp
.L1025:
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	andl	$4096, %eax
	testl	%eax, %eax
	je	.L1026
	movl	$287, %r8d
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	-40(%rbp)
	movq	%r8, %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	notify
	addq	$16, %rsp
.L1026:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE117:
	.size	flecs_run_remove_actions, .-flecs_run_remove_actions
	.globl	flecs_get_info
	.type	flecs_get_info, @function
flecs_get_info:
.LFB118:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	$0, (%rax)
	movq	-40(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-40(%rbp), %rax
	movb	$0, 28(%rax)
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	jns	.L1028
	movl	$0, %eax
	jmp	.L1029
.L1028:
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movq	-32(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L1030
	movl	$0, %eax
	jmp	.L1029
.L1030:
	movq	-8(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	set_info_from_record
	movl	$1, %eax
.L1029:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE118:
	.size	flecs_get_info, .-flecs_get_info
	.section	.rodata
.LC239:
	.string	"set_all || column != NULL"
	.align 8
.LC240:
	.string	"set_all || column != ((void *)0)"
.LC241:
	.string	"!column || column->size != 0"
.LC242:
	.string	"entities != NULL"
.LC243:
	.string	"entities != ((void *)0)"
	.align 8
.LC244:
	.string	"row < ecs_vector_count(data->entities)"
	.align 8
.LC245:
	.string	"(row + count) <= ecs_vector_count(data->entities)"
	.text
	.globl	flecs_run_set_systems
	.type	flecs_run_set_systems, @function
flecs_run_set_systems:
.LFB119:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$200, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	%rcx, -192(%rbp)
	movq	%r8, -200(%rbp)
	movl	%r9d, -204(%rbp)
	movl	24(%rbp), %eax
	movb	%al, -208(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpb	$0, -208(%rbp)
	jne	.L1032
	cmpq	$0, -200(%rbp)
	je	.L1033
.L1032:
	movl	$1, %eax
	jmp	.L1034
.L1033:
	movl	$0, %eax
.L1034:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6058, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC239(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpb	$0, -208(%rbp)
	jne	.L1035
	cmpq	$0, -200(%rbp)
	jne	.L1035
	leaq	__PRETTY_FUNCTION__.9399(%rip), %rcx
	movl	$6058, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC240(%rip), %rdi
	call	__assert_fail@PLT
.L1035:
	cmpq	$0, -200(%rbp)
	je	.L1036
	movq	-200(%rbp), %rax
	movzwl	8(%rax), %eax
	testw	%ax, %ax
	je	.L1037
.L1036:
	movl	$1, %eax
	jmp	.L1038
.L1037:
	movl	$0, %eax
.L1038:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6059, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC241(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -200(%rbp)
	je	.L1039
	movq	-200(%rbp), %rax
	movzwl	8(%rax), %eax
	testw	%ax, %ax
	jne	.L1039
	leaq	__PRETTY_FUNCTION__.9399(%rip), %rcx
	movl	$6059, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC241(%rip), %rdi
	call	__assert_fail@PLT
.L1039:
	cmpl	$0, 16(%rbp)
	je	.L1059
	cmpq	$0, -192(%rbp)
	je	.L1059
	cmpq	$0, -200(%rbp)
	je	.L1041
	movq	-200(%rbp), %rax
	movzwl	8(%rax), %eax
	testw	%ax, %ax
	je	.L1059
.L1041:
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -136(%rbp)
	cmpq	$0, -136(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6066, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC242(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -136(%rbp)
	jne	.L1043
	leaq	__PRETTY_FUNCTION__.9399(%rip), %rcx
	movl	$6066, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC243(%rip), %rdi
	call	__assert_fail@PLT
.L1043:
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -204(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6067, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC244(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -204(%rbp)
	jl	.L1044
	leaq	__PRETTY_FUNCTION__.9399(%rip), %rcx
	movl	$6067, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC244(%rip), %rdi
	call	__assert_fail@PLT
.L1044:
	movl	-204(%rbp), %edx
	movl	16(%rbp), %eax
	leal	(%rdx,%rax), %ebx
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6068, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC245(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-204(%rbp), %edx
	movl	16(%rbp), %eax
	leal	(%rdx,%rax), %ebx
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	jle	.L1045
	leaq	__PRETTY_FUNCTION__.9399(%rip), %rcx
	movl	$6068, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC245(%rip), %rdi
	call	__assert_fail@PLT
.L1045:
	movl	-204(%rbp), %eax
	sall	$3, %eax
	movslq	%eax, %rdx
	movq	-136(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -136(%rbp)
	movzbl	-208(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1046
	movq	-176(%rbp), %rdx
	movq	-168(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_c_info
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L1047
	movq	-80(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L1047
	movq	-200(%rbp), %rax
	movzwl	8(%rax), %eax
	cwtl
	movl	%eax, -144(%rbp)
	movq	-200(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movl	-204(%rbp), %ecx
	movl	-144(%rbp), %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -64(%rbp)
	movq	-80(%rbp), %rax
	movq	32(%rax), %rbx
	movl	-144(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-176(%rbp), %rsi
	movq	-64(%rbp), %rcx
	movq	-136(%rbp), %rdx
	movq	-168(%rbp), %rax
	subq	$8, %rsp
	pushq	%rbx
	movq	-72(%rbp), %r10
	movl	16(%rbp), %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
.L1047:
	movq	-176(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	leaq	-176(%rbp), %rdx
	movq	%rdx, -48(%rbp)
	movl	%eax, -40(%rbp)
	jmp	.L1048
.L1046:
	movq	-184(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -128(%rbp)
	movq	-184(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -152(%rbp)
	movl	$0, -160(%rbp)
	jmp	.L1049
.L1052:
	movl	-160(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-128(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rdx
	movq	-168(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_c_info
	movq	%rax, -112(%rbp)
	cmpq	$0, -112(%rbp)
	je	.L1050
	movq	-112(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -104(%rbp)
	cmpq	$0, -104(%rbp)
	je	.L1050
	movq	-192(%rbp), %rax
	movq	16(%rax), %rax
	movl	-160(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movzwl	8(%rax), %eax
	cwtl
	movl	%eax, -148(%rbp)
	cmpl	$0, -148(%rbp)
	je	.L1060
	movq	-96(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movl	-204(%rbp), %ecx
	movl	-148(%rbp), %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -88(%rbp)
	movq	-112(%rbp), %rax
	movq	32(%rax), %rbx
	movl	-148(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movl	-160(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-128(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rsi
	movq	-88(%rbp), %rcx
	movq	-136(%rbp), %rdx
	movq	-168(%rbp), %rax
	subq	$8, %rsp
	pushq	%rbx
	movq	-104(%rbp), %r10
	movl	16(%rbp), %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	jmp	.L1050
.L1060:
	nop
.L1050:
	addl	$1, -160(%rbp)
.L1049:
	movl	-160(%rbp), %eax
	cmpl	-152(%rbp), %eax
	jl	.L1052
	movq	-128(%rbp), %rax
	movq	%rax, -48(%rbp)
	movl	-152(%rbp), %eax
	movl	%eax, -40(%rbp)
.L1048:
	movzbl	-208(%rbp), %edi
	movq	-136(%rbp), %r8
	movl	-204(%rbp), %ecx
	movq	-184(%rbp), %rdx
	leaq	-48(%rbp), %rsi
	movq	-168(%rbp), %rax
	subq	$8, %rsp
	pushq	%rdi
	movq	%r8, %r9
	movl	16(%rbp), %r8d
	movq	%rax, %rdi
	call	run_set_systems_for_entities
	addq	$16, %rsp
	movq	-184(%rbp), %rax
	movl	16(%rax), %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L1031
	movzbl	-208(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1054
	movl	$288, %r8d
	movl	-204(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-168(%rbp), %rax
	subq	$8, %rsp
	leaq	-48(%rbp), %rdi
	pushq	%rdi
	movq	%r8, %r9
	movl	16(%rbp), %r8d
	movq	%rax, %rdi
	call	notify
	addq	$16, %rsp
	jmp	.L1031
.L1054:
	movq	-184(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -140(%rbp)
	movl	$0, -156(%rbp)
	jmp	.L1055
.L1057:
	movq	-192(%rbp), %rax
	movq	16(%rax), %rax
	movl	-156(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movzwl	8(%rax), %eax
	testw	%ax, %ax
	je	.L1056
	movl	$288, %r8d
	movl	-204(%rbp), %ecx
	movq	-192(%rbp), %rdx
	movq	-184(%rbp), %rsi
	movq	-168(%rbp), %rax
	subq	$8, %rsp
	leaq	-48(%rbp), %rdi
	pushq	%rdi
	movq	%r8, %r9
	movl	16(%rbp), %r8d
	movq	%rax, %rdi
	call	notify
	addq	$16, %rsp
.L1056:
	addl	$1, -156(%rbp)
.L1055:
	movl	-156(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.L1057
	jmp	.L1031
.L1059:
	nop
.L1031:
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1058
	call	__stack_chk_fail@PLT
.L1058:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE119:
	.size	flecs_run_set_systems, .-flecs_run_set_systems
	.section	.rodata
	.align 8
.LC246:
	.string	"!(dst_table->flags & EcsTableIsPrefab)"
.LC247:
	.string	"!(dst_table->flags & 2u)"
.LC248:
	.string	"system != 0"
	.text
	.globl	flecs_run_monitors
	.type	flecs_run_monitors, @function
flecs_run_monitors:
.LFB120:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movl	%ecx, -108(%rbp)
	movl	%r8d, -112(%rbp)
	movq	%r9, -120(%rbp)
	movq	-104(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.L1078
	cmpq	$0, -104(%rbp)
	je	.L1079
	movq	-96(%rbp), %rax
	movl	16(%rax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6160, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC246(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-96(%rbp), %rax
	movl	16(%rax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L1065
	leaq	__PRETTY_FUNCTION__.9435(%rip), %rcx
	movl	$6160, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC247(%rip), %rdi
	call	__assert_fail@PLT
.L1065:
	cmpq	$0, -120(%rbp)
	jne	.L1066
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -60(%rbp)
	movq	-104(%rbp), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -80(%rbp)
	jmp	.L1067
.L1068:
	movl	-80(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movl	-112(%rbp), %ecx
	movl	-108(%rbp), %edx
	movq	-8(%rbp), %rsi
	movq	-88(%rbp), %rax
	movl	$0, %r9d
	movl	%ecx, %r8d
	movl	%edx, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	flecs_run_monitor
	addl	$1, -80(%rbp)
.L1067:
	movl	-80(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jl	.L1068
	jmp	.L1061
.L1066:
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -68(%rbp)
	movl	$0, -72(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -64(%rbp)
	movq	-104(%rbp), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	movq	-120(%rbp), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movl	$0, -76(%rbp)
	jmp	.L1069
.L1077:
	movl	-76(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	1632(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6178, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC248(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1070
	leaq	__PRETTY_FUNCTION__.9435(%rip), %rcx
	movl	$6178, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC248(%rip), %rdi
	call	__assert_fail@PLT
.L1070:
	movq	$0, -56(%rbp)
	jmp	.L1071
.L1074:
	movl	-72(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	1632(%rax), %rax
	cmpq	%rax, -24(%rbp)
	jbe	.L1080
	addl	$1, -72(%rbp)
.L1071:
	movl	-72(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jl	.L1074
	jmp	.L1073
.L1080:
	nop
.L1073:
	cmpq	$0, -56(%rbp)
	je	.L1075
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	1632(%rax), %rax
	cmpq	%rax, -24(%rbp)
	je	.L1081
.L1075:
	movl	-112(%rbp), %ecx
	movl	-108(%rbp), %edx
	movq	-32(%rbp), %rsi
	movq	-88(%rbp), %rax
	movl	$0, %r9d
	movl	%ecx, %r8d
	movl	%edx, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	flecs_run_monitor
	jmp	.L1076
.L1081:
	nop
.L1076:
	addl	$1, -76(%rbp)
.L1069:
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jl	.L1077
	jmp	.L1061
.L1078:
	nop
	jmp	.L1061
.L1079:
	nop
.L1061:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE120:
	.size	flecs_run_monitors, .-flecs_run_monitors
	.globl	flecs_record_to_row
	.type	flecs_record_to_row, @function
flecs_record_to_row:
.LFB121:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -20(%rbp)
	movq	%rsi, -32(%rbp)
	movl	-20(%rbp), %eax
	shrl	$31, %eax
	movb	%al, -1(%rbp)
	movzbl	-1(%rbp), %eax
	addl	%eax, %eax
	movl	$1, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	imull	-20(%rbp), %eax
	movl	%eax, %edx
	cmpl	$0, -20(%rbp)
	setne	%al
	movzbl	%al, %eax
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	movzbl	-1(%rbp), %edx
	movb	%dl, (%rax)
	movl	-20(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE121:
	.size	flecs_record_to_row, .-flecs_record_to_row
	.globl	flecs_row_to_record
	.type	flecs_row_to_record, @function
flecs_row_to_record:
.LFB122:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	movl	%esi, %eax
	movb	%al, -8(%rbp)
	movl	-4(%rbp), %eax
	leal	1(%rax), %edx
	movzbl	-8(%rbp), %eax
	addl	%eax, %eax
	movl	$1, %ecx
	subl	%eax, %ecx
	movl	%ecx, %eax
	imull	%edx, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE122:
	.size	flecs_row_to_record, .-flecs_row_to_record
	.globl	flecs_type_to_ids
	.type	flecs_type_to_ids, @function
flecs_type_to_ids:
.LFB123:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, %rbx
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movq	%rbx, %r12
	movl	%eax, %edx
	movq	%r13, %rcx
	movabsq	$-4294967296, %rax
	andq	%rcx, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rax
	movq	%r13, %rdx
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE123:
	.size	flecs_type_to_ids, .-flecs_type_to_ids
	.globl	flecs_set_watch
	.type	flecs_set_watch, @function
flecs_set_watch:
.LFB124:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	-64(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L1089
	movq	$0, -32(%rbp)
	movl	$-1, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	leaq	-32(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_set
	jmp	.L1093
.L1089:
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jle	.L1091
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	negl	%eax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, 8(%rax)
	jmp	.L1093
.L1091:
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jne	.L1093
	movq	-40(%rbp), %rax
	movl	$-1, 8(%rax)
	movq	-40(%rbp), %rax
	movq	$0, (%rax)
.L1093:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1092
	call	__stack_chk_fail@PLT
.L1092:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE124:
	.size	flecs_set_watch, .-flecs_set_watch
	.globl	ecs_commit
	.type	ecs_commit, @function
ecs_commit:
.LFB125:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	%r8, -104(%rbp)
	movq	%r9, -112(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6260, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L1095
	leaq	__PRETTY_FUNCTION__.9486(%rip), %rcx
	movl	$6260, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1095:
	movq	$0, -56(%rbp)
	cmpq	$0, -88(%rbp)
	jne	.L1096
	movq	-72(%rbp), %rax
	movq	40(%rax), %rax
	movq	-80(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
.L1096:
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	cmpq	$0, -88(%rbp)
	je	.L1097
	movq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	set_info_from_record
.L1097:
	movq	-112(%rbp), %r8
	movq	-104(%rbp), %rdi
	movq	-96(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	commit
	addq	$16, %rsp
	movq	-56(%rbp), %rax
	cmpq	-96(%rbp), %rax
	setne	%al
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1099
	call	__stack_chk_fail@PLT
.L1099:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE125:
	.size	ecs_commit, .-ecs_commit
	.section	.rodata
	.align 8
.LC249:
	.string	"unsafe_world->stats.last_id < UINT_MAX"
	.align 8
.LC250:
	.string	"unsafe_world->stats.last_id < (0x7fffffff * 2U + 1U)"
	.align 8
.LC251:
	.string	"!unsafe_world->stats.max_id || ecs_entity_t_lo(entity) <= unsafe_world->stats.max_id"
	.align 8
.LC252:
	.string	"!unsafe_world->stats.max_id || ((uint32_t)(entity)) <= unsafe_world->stats.max_id"
	.text
	.globl	ecs_new_id
	.type	ecs_new_id, @function
ecs_new_id:
.LFB126:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6281, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1101
	leaq	__PRETTY_FUNCTION__.9492(%rip), %rcx
	movl	$6281, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1101:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_readonly_world
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movzbl	81(%rax), %eax
	testb	%al, %al
	jne	.L1102
	call	ecs_os_has_threading
	testb	%al, %al
	je	.L1103
	cmpl	$1, -28(%rbp)
	jle	.L1103
.L1102:
	movq	-8(%rbp), %rax
	movq	536(%rax), %rax
	movl	$4294967294, %edx
	cmpq	%rdx, %rax
	setbe	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6296, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC249(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	536(%rax), %rax
	movl	$4294967294, %edx
	cmpq	%rdx, %rax
	jbe	.L1104
	leaq	__PRETTY_FUNCTION__.9492(%rip), %rcx
	movl	$6296, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC250(%rip), %rdi
	call	__assert_fail@PLT
.L1104:
	movq	72+ecs_os_api(%rip), %rax
	movq	-8(%rbp), %rdx
	addq	$536, %rdx
	movq	%rdx, %rdi
	call	*%rax
	cltq
	movq	%rax, -24(%rbp)
	jmp	.L1105
.L1103:
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_new_id
	movq	%rax, -24(%rbp)
.L1105:
	movq	-8(%rbp), %rax
	movq	552(%rax), %rax
	testq	%rax, %rax
	je	.L1106
	movq	-24(%rbp), %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movq	552(%rax), %rax
	cmpq	%rax, %rdx
	ja	.L1107
.L1106:
	movl	$1, %eax
	jmp	.L1108
.L1107:
	movl	$0, %eax
.L1108:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6305, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC251(%rip), %rdx
	movl	$5, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	552(%rax), %rax
	testq	%rax, %rax
	je	.L1109
	movq	-24(%rbp), %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movq	552(%rax), %rax
	cmpq	%rax, %rdx
	jbe	.L1109
	leaq	__PRETTY_FUNCTION__.9492(%rip), %rcx
	movl	$6305, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC252(%rip), %rdi
	call	__assert_fail@PLT
.L1109:
	movq	-24(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE126:
	.size	ecs_new_id, .-ecs_new_id
	.globl	ecs_set_with
	.type	ecs_set_with, @function
ecs_set_with:
.LFB127:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	leaq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, 72(%rax)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE127:
	.size	ecs_set_with, .-ecs_set_with
	.globl	ecs_get_with
	.type	ecs_get_with, @function
ecs_get_with:
.LFB128:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_readonly_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE128:
	.size	ecs_get_with, .-ecs_get_with
	.section	.rodata
	.align 8
.LC253:
	.string	"ecs_get_stage_count(world) <= 1"
	.text
	.globl	ecs_new_component_id
	.type	ecs_new_component_id, @function
ecs_new_component_id:
.LFB129:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6332, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1116
	leaq	__PRETTY_FUNCTION__.9510(%rip), %rcx
	movl	$6332, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1116:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	681(%rax), %eax
	testb	%al, %al
	je	.L1117
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	cmpl	$1, %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6342, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC253(%rip), %rdx
	movl	$70, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	cmpl	$1, %eax
	jle	.L1117
	leaq	__PRETTY_FUNCTION__.9510(%rip), %rcx
	movl	$6342, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC253(%rip), %rdi
	call	__assert_fail@PLT
.L1117:
	movq	-8(%rbp), %rax
	movq	528(%rax), %rax
	cmpq	$255, %rax
	ja	.L1118
.L1119:
	movq	-8(%rbp), %rax
	movq	528(%rax), %rax
	leaq	1(%rax), %rcx
	movq	-8(%rbp), %rdx
	movq	%rcx, 528(%rdx)
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_exists
	testb	%al, %al
	je	.L1118
	cmpq	$255, -16(%rbp)
	jbe	.L1119
.L1118:
	movq	-8(%rbp), %rax
	movq	528(%rax), %rax
	cmpq	$255, %rax
	jbe	.L1120
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, -16(%rbp)
.L1120:
	movq	-16(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE129:
	.size	ecs_new_component_id, .-ecs_new_component_id
	.globl	ecs_new_w_type
	.type	ecs_new_w_type, @function
ecs_new_w_type:
.LFB130:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6366, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	jne	.L1123
	leaq	__PRETTY_FUNCTION__.9519(%rip), %rcx
	movl	$6366, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1123:
	cmpq	$0, -112(%rbp)
	jne	.L1124
	movq	-104(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_new_w_id
	jmp	.L1125
.L1124:
	leaq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -96(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, -88(%rbp)
	movq	-96(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-96(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-104(%rbp), %rax
	leaq	-64(%rbp), %rcx
	movq	-88(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_defer_new
	testb	%al, %al
	je	.L1126
	cmpq	$0, -80(%rbp)
	je	.L1127
	movq	-104(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L1127:
	cmpq	$0, -72(%rbp)
	je	.L1128
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-72(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-104(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L1128:
	movq	-88(%rbp), %rax
	jmp	.L1125
.L1126:
	movq	-104(%rbp), %rax
	leaq	-64(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	new
	leaq	-48(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -56(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L1129
	movl	-56(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -56(%rbp)
	cltq
	movq	-80(%rbp), %rdx
	movq	%rdx, -48(%rbp,%rax,8)
.L1129:
	cmpq	$0, -72(%rbp)
	je	.L1130
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-72(%rbp), %rax
	movl	%eax, %eax
	leaq	(%rdx,%rax), %rsi
	movabsq	$-432345564227567616, %rcx
	movl	-56(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -56(%rbp)
	orq	%rcx, %rsi
	movq	%rsi, %rdx
	cltq
	movq	%rdx, -48(%rbp,%rax,8)
.L1130:
	movl	-56(%rbp), %eax
	testl	%eax, %eax
	je	.L1131
	movq	-104(%rbp), %rax
	leaq	-64(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_ids
.L1131:
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	movq	-88(%rbp), %rax
.L1125:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L1133
	call	__stack_chk_fail@PLT
.L1133:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE130:
	.size	ecs_new_w_type, .-ecs_new_w_type
	.globl	ecs_new_w_id
	.type	ecs_new_w_id, @function
ecs_new_w_id:
.LFB131:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6413, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	jne	.L1135
	leaq	__PRETTY_FUNCTION__.9531(%rip), %rcx
	movl	$6413, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1135:
	leaq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -96(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, -88(%rbp)
	leaq	-32(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -56(%rbp)
	cmpq	$0, -112(%rbp)
	je	.L1136
	movl	-56(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -56(%rbp)
	cltq
	movq	-112(%rbp), %rdx
	movq	%rdx, -32(%rbp,%rax,8)
.L1136:
	movq	-96(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L1137
	movl	-56(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -56(%rbp)
	cltq
	movq	-80(%rbp), %rdx
	movq	%rdx, -32(%rbp,%rax,8)
.L1137:
	movq	-96(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L1138
	cmpq	$0, -112(%rbp)
	je	.L1139
	movabsq	$-72057594037927936, %rax
	andq	-112(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L1139
	movq	-112(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$276, %edx
	cmpq	%rdx, %rax
	je	.L1138
.L1139:
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-72(%rbp), %rax
	movl	%eax, %eax
	leaq	(%rdx,%rax), %rsi
	movabsq	$-432345564227567616, %rcx
	movl	-56(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -56(%rbp)
	orq	%rcx, %rsi
	movq	%rsi, %rdx
	cltq
	movq	%rdx, -32(%rbp,%rax,8)
.L1138:
	movq	-104(%rbp), %rax
	leaq	-64(%rbp), %rcx
	movq	-88(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_defer_new
	testb	%al, %al
	je	.L1140
	movq	-88(%rbp), %rax
	jmp	.L1144
.L1140:
	movl	-56(%rbp), %eax
	testl	%eax, %eax
	je	.L1142
	movq	-104(%rbp), %rax
	leaq	-64(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	new
	jmp	.L1143
.L1142:
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	-104(%rbp), %rax
	movq	40(%rax), %rax
	leaq	-48(%rbp), %rcx
	movq	-88(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_set
.L1143:
	movq	-104(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	movq	-88(%rbp), %rax
.L1144:
	movq	-8(%rbp), %rdi
	xorq	%fs:40, %rdi
	je	.L1145
	call	__stack_chk_fail@PLT
.L1145:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE131:
	.size	ecs_new_w_id, .-ecs_new_w_id
	.section	.rodata
	.align 8
.LC254:
	.string	"invalid non-trivial term in add expression"
.LC255:
	.string	"expected type for AND role"
	.text
	.type	traverse_from_expr, @function
traverse_from_expr:
.LFB132:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$320, %rsp
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	%rdx, -296(%rbp)
	movq	%rcx, -304(%rbp)
	movq	%r8, -312(%rbp)
	movl	%r9d, %edx
	movl	16(%rbp), %eax
	movb	%dl, -316(%rbp)
	movb	%al, -320(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-312(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -268(%rbp)
	cmpl	$31, -268(%rbp)
	jg	.L1147
	movl	$32, -268(%rbp)
.L1147:
	movq	-304(%rbp), %rax
	movq	%rax, -256(%rbp)
	cmpq	$0, -256(%rbp)
	je	.L1148
	leaq	-208(%rbp), %rdx
	movl	$0, %eax
	movl	$24, %ecx
	movq	%rdx, %rdi
	rep stosq
	jmp	.L1149
.L1169:
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_is_initialized
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1171
	leaq	-208(%rbp), %rcx
	movq	-304(%rbp), %rdx
	movq	-296(%rbp), %rsi
	movq	-280(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_finalize
	testl	%eax, %eax
	je	.L1152
	movl	$0, %eax
	jmp	.L1153
.L1152:
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_is_trivial
	xorl	$1, %eax
	testb	%al, %al
	je	.L1154
	movq	-256(%rbp), %rax
	subq	-304(%rbp), %rax
	movq	%rax, %rdx
	movq	-304(%rbp), %rsi
	movq	-296(%rbp), %rax
	leaq	.LC254(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L1154:
	movq	-312(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -268(%rbp)
	jne	.L1155
	sall	-268(%rbp)
	movq	16+ecs_os_api(%rip), %rax
	movl	-268(%rbp), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -248(%rbp)
	movq	-312(%rbp), %rax
	movl	8(%rax), %eax
	sall	$3, %eax
	movslq	%eax, %rdx
	movq	-312(%rbp), %rax
	movq	(%rax), %rcx
	movq	-248(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-312(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$32, %eax
	je	.L1156
	movq	40+ecs_os_api(%rip), %rdx
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1156:
	movq	-312(%rbp), %rax
	movq	-248(%rbp), %rdx
	movq	%rdx, (%rax)
.L1155:
	movl	-48(%rbp), %eax
	testl	%eax, %eax
	je	.L1157
	movzbl	-320(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1158
.L1157:
	leaq	-208(%rbp), %rax
	movq	%rax, -224(%rbp)
	movl	$1, -216(%rbp)
	cmpb	$0, -316(%rbp)
	je	.L1159
	movq	-312(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -288(%rbp)
	jmp	.L1160
.L1159:
	movq	-312(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -288(%rbp)
.L1160:
	cmpq	$0, -288(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6513, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -288(%rbp)
	jne	.L1172
	leaq	__PRETTY_FUNCTION__.9554(%rip), %rcx
	movl	$6513, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L1158:
	movl	-48(%rbp), %eax
	cmpl	$4, %eax
	jne	.L1162
	movq	-208(%rbp), %rcx
	movq	-280(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -240(%rbp)
	cmpq	$0, -240(%rbp)
	jne	.L1163
	movq	-256(%rbp), %rax
	subq	-304(%rbp), %rax
	movq	%rax, %rdx
	movq	-304(%rbp), %rsi
	movq	-296(%rbp), %rax
	leaq	.LC255(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L1163:
	movq	-240(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -232(%rbp)
	movq	-240(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -260(%rbp)
	movl	$0, -264(%rbp)
	jmp	.L1164
.L1168:
	movl	-264(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-232(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -224(%rbp)
	movl	$1, -216(%rbp)
	cmpb	$0, -316(%rbp)
	je	.L1165
	movq	-312(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -288(%rbp)
	jmp	.L1166
.L1165:
	movq	-312(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -288(%rbp)
.L1166:
	cmpq	$0, -288(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6535, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -288(%rbp)
	jne	.L1167
	leaq	__PRETTY_FUNCTION__.9554(%rip), %rcx
	movl	$6535, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L1167:
	addl	$1, -264(%rbp)
.L1164:
	movl	-264(%rbp), %eax
	cmpl	-260(%rbp), %eax
	jl	.L1168
	jmp	.L1162
.L1172:
	nop
.L1162:
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_fini
.L1149:
	movq	-256(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L1148
	leaq	-208(%rbp), %rdi
	movq	-256(%rbp), %rcx
	movq	-304(%rbp), %rdx
	movq	-296(%rbp), %rsi
	movq	-280(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	ecs_parse_term
	movq	%rax, -256(%rbp)
	cmpq	$0, -256(%rbp)
	jne	.L1169
	jmp	.L1148
.L1171:
	nop
.L1148:
	movq	-288(%rbp), %rax
.L1153:
	movq	-8(%rbp), %rdi
	xorq	%fs:40, %rdi
	je	.L1170
	call	__stack_chk_fail@PLT
.L1170:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE132:
	.size	traverse_from_expr, .-traverse_from_expr
	.type	defer_from_expr, @function
defer_from_expr:
.LFB133:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$288, %rsp
	movq	%rdi, -248(%rbp)
	movq	%rsi, -256(%rbp)
	movq	%rdx, -264(%rbp)
	movq	%rcx, -272(%rbp)
	movl	%r8d, %eax
	movl	%r9d, %edx
	movb	%al, -276(%rbp)
	movl	%edx, %eax
	movb	%al, -280(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-272(%rbp), %rax
	movq	%rax, -232(%rbp)
	cmpq	$0, -232(%rbp)
	je	.L1173
	leaq	-208(%rbp), %rdx
	movl	$0, %eax
	movl	$24, %ecx
	movq	%rdx, %rdi
	rep stosq
	jmp	.L1175
.L1190:
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_is_initialized
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1192
	leaq	-208(%rbp), %rcx
	movq	-272(%rbp), %rdx
	movq	-264(%rbp), %rsi
	movq	-248(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_finalize
	testl	%eax, %eax
	jne	.L1193
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_is_trivial
	xorl	$1, %eax
	testb	%al, %al
	je	.L1179
	movq	-232(%rbp), %rax
	subq	-272(%rbp), %rax
	movq	%rax, %rdx
	movq	-272(%rbp), %rsi
	movq	-264(%rbp), %rax
	leaq	.LC254(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L1179:
	movl	-48(%rbp), %eax
	testl	%eax, %eax
	je	.L1180
	movzbl	-280(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1181
.L1180:
	cmpb	$0, -276(%rbp)
	je	.L1182
	movq	-208(%rbp), %rdx
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	jmp	.L1184
.L1182:
	movq	-208(%rbp), %rdx
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_remove_id
	jmp	.L1184
.L1181:
	movl	-48(%rbp), %eax
	cmpl	$4, %eax
	jne	.L1184
	movq	-208(%rbp), %rcx
	movq	-248(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -224(%rbp)
	cmpq	$0, -224(%rbp)
	jne	.L1185
	movq	-232(%rbp), %rax
	subq	-272(%rbp), %rax
	movq	%rax, %rdx
	movq	-272(%rbp), %rsi
	movq	-264(%rbp), %rax
	leaq	.LC255(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L1185:
	movq	-224(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -216(%rbp)
	movq	-224(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -236(%rbp)
	movl	$0, -240(%rbp)
	jmp	.L1186
.L1189:
	cmpb	$0, -276(%rbp)
	je	.L1187
	movl	-240(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-216(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	jmp	.L1188
.L1187:
	movl	-240(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-216(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-256(%rbp), %rcx
	movq	-248(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_remove_id
.L1188:
	addl	$1, -240(%rbp)
.L1186:
	movl	-240(%rbp), %eax
	cmpl	-236(%rbp), %eax
	jl	.L1189
.L1184:
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_fini
.L1175:
	movq	-232(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L1173
	leaq	-208(%rbp), %rdi
	movq	-232(%rbp), %rcx
	movq	-272(%rbp), %rdx
	movq	-264(%rbp), %rsi
	movq	-248(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	ecs_parse_term
	movq	%rax, -232(%rbp)
	cmpq	$0, -232(%rbp)
	jne	.L1190
	jmp	.L1173
.L1192:
	nop
	jmp	.L1173
.L1193:
	nop
.L1173:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1191
	call	__stack_chk_fail@PLT
.L1191:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE133:
	.size	defer_from_expr, .-defer_from_expr
	.section	.rodata
	.align 8
.LC256:
	.string	"ecs_get_name(world, result) != NULL"
	.align 8
.LC257:
	.string	"ecs_get_name(world, result) != ((void *)0)"
	.align 8
.LC258:
	.string	"!ecs_os_strcmp(desc->symbol, sym)"
.LC259:
	.string	"!strcmp(desc->symbol, sym)"
	.text
	.type	traverse_add_remove, @function
traverse_add_remove:
.LFB134:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$744, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -696(%rbp)
	movq	%rsi, -704(%rbp)
	movq	%rdx, -712(%rbp)
	movq	%rcx, -720(%rbp)
	movq	%r8, -728(%rbp)
	movq	%r9, -736(%rbp)
	movl	16(%rbp), %edx
	movl	24(%rbp), %eax
	movb	%dl, -740(%rbp)
	movb	%al, -744(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-720(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -656(%rbp)
	movq	$0, -576(%rbp)
	movq	$0, -568(%rbp)
	movq	$0, -560(%rbp)
	movq	$0, -552(%rbp)
	movq	$0, -648(%rbp)
	movq	$0, -664(%rbp)
	movzbl	-740(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1195
	leaq	-576(%rbp), %rdx
	movq	-704(%rbp), %rcx
	movq	-696(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	testb	%al, %al
	je	.L1195
	movq	-568(%rbp), %rax
	movq	%rax, -664(%rbp)
.L1195:
	movq	$0, -624(%rbp)
	movq	$0, -616(%rbp)
	leaq	-544(%rbp), %rax
	movq	%rax, -624(%rbp)
	movq	$0, -608(%rbp)
	movq	$0, -600(%rbp)
	leaq	-288(%rbp), %rax
	movq	%rax, -608(%rbp)
	cmpb	$0, -740(%rbp)
	je	.L1196
	cmpb	$0, -740(%rbp)
	je	.L1197
	cmpq	$0, -728(%rbp)
	je	.L1197
	cmpq	$0, -712(%rbp)
	jne	.L1197
	movzbl	-744(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1197
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-728(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -672(%rbp)
	leaq	-672(%rbp), %rax
	movq	%rax, -592(%rbp)
	movl	$1, -584(%rbp)
	leaq	-624(%rbp), %rcx
	leaq	-592(%rbp), %rdx
	movq	-664(%rbp), %rsi
	movq	-696(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -664(%rbp)
	cmpq	$0, -664(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6647, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -664(%rbp)
	jne	.L1197
	leaq	__PRETTY_FUNCTION__.9605(%rip), %rcx
	movl	$6647, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L1197:
	movq	-736(%rbp), %rax
	testq	%rax, %rax
	je	.L1196
	leaq	-736(%rbp), %rax
	movq	%rax, -592(%rbp)
	movl	$1, -584(%rbp)
	leaq	-624(%rbp), %rcx
	leaq	-592(%rbp), %rdx
	movq	-664(%rbp), %rsi
	movq	-696(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -664(%rbp)
	cmpq	$0, -664(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6653, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -664(%rbp)
	jne	.L1196
	leaq	__PRETTY_FUNCTION__.9605(%rip), %rcx
	movl	$6653, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L1196:
	cmpq	$0, -712(%rbp)
	je	.L1200
	movzbl	-744(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1200
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -672(%rbp)
	leaq	-672(%rbp), %rax
	movq	%rax, -592(%rbp)
	movl	$1, -584(%rbp)
	leaq	-624(%rbp), %rcx
	leaq	-592(%rbp), %rdx
	movq	-664(%rbp), %rsi
	movq	-696(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -664(%rbp)
	cmpq	$0, -664(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6662, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -664(%rbp)
	jne	.L1200
	leaq	__PRETTY_FUNCTION__.9605(%rip), %rcx
	movl	$6662, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L1200:
	movl	$0, -676(%rbp)
	movq	-720(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -640(%rbp)
	jmp	.L1202
.L1205:
	leaq	-672(%rbp), %rax
	movq	%rax, -592(%rbp)
	movl	$1, -584(%rbp)
	leaq	-624(%rbp), %rcx
	leaq	-592(%rbp), %rdx
	movq	-664(%rbp), %rsi
	movq	-696(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -664(%rbp)
	cmpq	$0, -664(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6672, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -664(%rbp)
	jne	.L1202
	leaq	__PRETTY_FUNCTION__.9605(%rip), %rcx
	movl	$6672, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L1202:
	cmpl	$31, -676(%rbp)
	jg	.L1204
	movl	-676(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -676(%rbp)
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-640(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -672(%rbp)
	movq	-672(%rbp), %rax
	testq	%rax, %rax
	jne	.L1205
.L1204:
	movl	$0, -676(%rbp)
	movq	-720(%rbp), %rax
	addq	$304, %rax
	movq	%rax, -640(%rbp)
	jmp	.L1206
.L1209:
	leaq	-672(%rbp), %rax
	movq	%rax, -592(%rbp)
	movl	$1, -584(%rbp)
	leaq	-608(%rbp), %rcx
	leaq	-592(%rbp), %rdx
	movq	-664(%rbp), %rsi
	movq	-696(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -664(%rbp)
	cmpq	$0, -664(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6681, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -664(%rbp)
	jne	.L1206
	leaq	__PRETTY_FUNCTION__.9605(%rip), %rcx
	movl	$6681, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L1206:
	cmpl	$31, -676(%rbp)
	jg	.L1208
	movl	-676(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -676(%rbp)
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-640(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -672(%rbp)
	movq	-672(%rbp), %rax
	testq	%rax, %rax
	jne	.L1209
.L1208:
	movq	-720(%rbp), %rax
	movq	560(%rax), %rax
	testq	%rax, %rax
	je	.L1210
	movq	-720(%rbp), %rax
	movq	560(%rax), %rcx
	leaq	-624(%rbp), %rdi
	movq	-712(%rbp), %rdx
	movq	-664(%rbp), %rsi
	movq	-696(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	$1, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	traverse_from_expr
	addq	$16, %rsp
	movq	%rax, -664(%rbp)
.L1210:
	movq	-720(%rbp), %rax
	movq	568(%rax), %rax
	testq	%rax, %rax
	je	.L1211
	movq	-720(%rbp), %rax
	movq	568(%rax), %rcx
	leaq	-608(%rbp), %rdi
	movq	-712(%rbp), %rdx
	movq	-664(%rbp), %rsi
	movq	-696(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	$0, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	traverse_from_expr
	addq	$16, %rsp
	movq	%rax, -664(%rbp)
.L1211:
	movq	-648(%rbp), %rax
	cmpq	-664(%rbp), %rax
	je	.L1212
	leaq	-608(%rbp), %r8
	leaq	-624(%rbp), %rdi
	movq	-664(%rbp), %rcx
	leaq	-576(%rbp), %rdx
	movq	-704(%rbp), %rsi
	movq	-696(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	commit
	addq	$16, %rsp
.L1212:
	cmpq	$0, -712(%rbp)
	je	.L1213
	movzbl	-744(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1213
	movq	-656(%rbp), %rdi
	movq	-712(%rbp), %rcx
	movq	-728(%rbp), %rdx
	movq	-704(%rbp), %rsi
	movq	-696(%rbp), %rax
	movl	$0, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	ecs_add_path_w_sep
	movq	-704(%rbp), %rdx
	movq	-696(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6712, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC256(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-704(%rbp), %rdx
	movq	-696(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	testq	%rax, %rax
	jne	.L1213
	leaq	__PRETTY_FUNCTION__.9605(%rip), %rcx
	movl	$6712, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC257(%rip), %rdi
	call	__assert_fail@PLT
.L1213:
	movq	-720(%rbp), %rax
	movq	32(%rax), %rax
	testq	%rax, %rax
	je	.L1214
	movq	-704(%rbp), %rdx
	movq	-696(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_symbol
	movq	%rax, -632(%rbp)
	cmpq	$0, -632(%rbp)
	je	.L1215
	movq	-720(%rbp), %rax
	movq	32(%rax), %rbx
	movq	-720(%rbp), %rax
	movq	32(%rax), %rax
	movq	-632(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movq	%rbx, %r9
	movl	$6719, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC258(%rip), %rdx
	movl	$20, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-720(%rbp), %rax
	movq	32(%rax), %rax
	movq	-632(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	je	.L1214
	leaq	__PRETTY_FUNCTION__.9605(%rip), %rcx
	movl	$6719, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC259(%rip), %rdi
	call	__assert_fail@PLT
.L1215:
	movq	-720(%rbp), %rax
	movq	32(%rax), %rdx
	movq	-704(%rbp), %rcx
	movq	-696(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
.L1214:
	movl	-616(%rbp), %eax
	cmpl	$32, %eax
	jle	.L1216
	movq	40+ecs_os_api(%rip), %rdx
	movq	-624(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1216:
	movl	-600(%rbp), %eax
	cmpl	$32, %eax
	jle	.L1219
	movq	40+ecs_os_api(%rip), %rdx
	movq	-608(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1219:
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1218
	call	__stack_chk_fail@PLT
.L1218:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE134:
	.size	traverse_add_remove, .-traverse_add_remove
	.section	.rodata
	.align 8
.LC260:
	.string	"!ecs_os_strcmp(sym, desc->symbol)"
.LC261:
	.string	"!strcmp(sym, desc->symbol)"
	.text
	.type	deferred_add_remove, @function
deferred_add_remove:
.LFB135:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movl	16(%rbp), %edx
	movl	24(%rbp), %eax
	movb	%dl, -100(%rbp)
	movb	%al, -104(%rbp)
	movq	-80(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpb	$0, -100(%rbp)
	je	.L1221
	cmpb	$0, -100(%rbp)
	je	.L1222
	cmpq	$0, -88(%rbp)
	je	.L1222
	cmpq	$0, -72(%rbp)
	jne	.L1222
	movzbl	-104(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1222
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-88(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L1222:
	cmpq	$0, -96(%rbp)
	je	.L1221
	movq	-96(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L1221:
	movl	$0, -36(%rbp)
	movq	-80(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	jmp	.L1223
.L1225:
	movq	-16(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L1223:
	cmpl	$31, -36(%rbp)
	jg	.L1224
	movl	-36(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -36(%rbp)
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L1225
.L1224:
	movl	$0, -36(%rbp)
	movq	-80(%rbp), %rax
	addq	$304, %rax
	movq	%rax, -24(%rbp)
	jmp	.L1226
.L1228:
	movq	-16(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_remove_id
.L1226:
	cmpl	$31, -36(%rbp)
	jg	.L1227
	movl	-36(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -36(%rbp)
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L1228
.L1227:
	movq	-80(%rbp), %rax
	movq	560(%rax), %rax
	testq	%rax, %rax
	je	.L1229
	movq	-80(%rbp), %rax
	movq	560(%rax), %rcx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$1, %r9d
	movl	$1, %r8d
	movq	%rax, %rdi
	call	defer_from_expr
.L1229:
	movq	-80(%rbp), %rax
	movq	568(%rax), %rax
	testq	%rax, %rax
	je	.L1230
	movq	-80(%rbp), %rax
	movq	568(%rax), %rcx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %r9d
	movl	$1, %r8d
	movq	%rax, %rdi
	call	defer_from_expr
.L1230:
	cmpq	$0, -72(%rbp)
	je	.L1231
	movzbl	-104(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1231
	movq	-32(%rbp), %rdi
	movq	-72(%rbp), %rcx
	movq	-88(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	ecs_add_path_w_sep
.L1231:
	movq	-80(%rbp), %rax
	movq	32(%rax), %rax
	testq	%rax, %rax
	je	.L1233
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_symbol
	movq	%rax, -8(%rbp)
	movq	-80(%rbp), %rax
	movq	32(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6802, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC260(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movq	32(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	je	.L1233
	leaq	__PRETTY_FUNCTION__.9642(%rip), %rcx
	movl	$6802, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC261(%rip), %rdi
	call	__assert_fail@PLT
.L1233:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE135:
	.size	deferred_add_remove, .-deferred_add_remove
	.section	.rodata
.LC262:
	.string	"desc != NULL"
.LC263:
	.string	"desc != ((void *)0)"
.LC264:
	.string	"."
	.align 8
.LC265:
	.string	"ecs_get_type(world, result) == NULL"
	.align 8
.LC266:
	.string	"ecs_get_type(world, result) == ((void *)0)"
.LC267:
	.string	"ecs_is_valid(world, result)"
	.align 8
.LC268:
	.string	"name_assigned == ecs_has_pair( world, result, ecs_id(EcsIdentifier), EcsName)"
	.align 8
.LC269:
	.string	"name_assigned == ecs_has_id(world, result, (ECS_PAIR | ((((uint64_t)((4))) << 32) + ((uint32_t)(EcsName)))))"
	.text
	.globl	ecs_entity_init
	.type	ecs_entity_init, @function
ecs_entity_init:
.LFB136:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6811, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	jne	.L1235
	leaq	__PRETTY_FUNCTION__.9647(%rip), %rcx
	movl	$6811, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1235:
	cmpq	$0, -96(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6812, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC262(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -96(%rbp)
	jne	.L1236
	leaq	__PRETTY_FUNCTION__.9647(%rip), %rcx
	movl	$6812, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC263(%rip), %rdi
	call	__assert_fail@PLT
.L1236:
	leaq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -48(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movq	%rax, -40(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_with
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-96(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	jne	.L1237
	leaq	.LC264(%rip), %rax
	movq	%rax, -64(%rbp)
.L1237:
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movb	$0, -78(%rbp)
	movb	$0, -77(%rbp)
	movq	-88(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L1238
	cmpq	$0, -16(%rbp)
	je	.L1238
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L1238
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movl	-76(%rbp), %edx
	movslq	%edx, %rcx
	movq	-72(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rdx), %edx
	movsbq	%dl, %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L1239
	movl	-76(%rbp), %eax
	movslq	%eax, %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$95, %al
	jne	.L1238
.L1239:
	movl	-76(%rbp), %eax
	movslq	%eax, %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$95, %al
	jne	.L1240
	movl	-76(%rbp), %eax
	cltq
	addq	$1, %rax
	addq	%rax, -72(%rbp)
	jmp	.L1238
.L1240:
	movl	-76(%rbp), %eax
	cltq
	addq	%rax, -72(%rbp)
.L1238:
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L1241
	cmpq	$0, -72(%rbp)
	je	.L1242
	movq	-88(%rbp), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movl	$0, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	ecs_lookup_path_w_sep
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L1242
	movb	$1, -77(%rbp)
.L1242:
	cmpq	$0, -56(%rbp)
	jne	.L1243
	movq	-96(%rbp), %rax
	movzbl	40(%rax), %eax
	testb	%al, %al
	je	.L1244
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_component_id
	movq	%rax, -56(%rbp)
	jmp	.L1245
.L1244:
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, -56(%rbp)
.L1245:
	movb	$1, -78(%rbp)
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_type
	testq	%rax, %rax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6868, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC265(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_type
	testq	%rax, %rax
	je	.L1243
	leaq	__PRETTY_FUNCTION__.9647(%rip), %rcx
	movl	$6868, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC266(%rip), %rdi
	call	__assert_fail@PLT
.L1241:
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6872, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC267(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1246
	leaq	__PRETTY_FUNCTION__.9647(%rip), %rcx
	movl	$6872, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC267(%rip), %rdi
	call	__assert_fail@PLT
.L1246:
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	movb	%al, -77(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L1243
	cmpb	$0, -77(%rbp)
	je	.L1243
	movq	-88(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movl	$0, %r8d
	movq	%rax, %rdi
	call	ecs_get_path_w_sep
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1243
	movq	-72(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	je	.L1247
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movl	$0, %eax
	jmp	.L1248
.L1247:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1243:
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	cmpb	%al, -77(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6890, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC268(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	cmpb	%al, -77(%rbp)
	je	.L1249
	leaq	__PRETTY_FUNCTION__.9647(%rip), %rcx
	movl	$6890, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC269(%rip), %rdi
	call	__assert_fail@PLT
.L1249:
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L1250
	movzbl	-77(%rbp), %r8d
	movzbl	-78(%rbp), %edi
	movq	-88(%rbp), %rax
	movq	-32(%rbp), %r9
	movq	-40(%rbp), %r10
	movq	-96(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-56(%rbp), %rsi
	pushq	%r8
	pushq	%rdi
	movq	%r10, %r8
	movq	%rax, %rdi
	call	deferred_add_remove
	addq	$16, %rsp
	jmp	.L1251
.L1250:
	movzbl	-77(%rbp), %r8d
	movzbl	-78(%rbp), %edi
	movq	-88(%rbp), %rax
	movq	-32(%rbp), %r9
	movq	-40(%rbp), %r10
	movq	-96(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-56(%rbp), %rsi
	pushq	%r8
	pushq	%rdi
	movq	%r10, %r8
	movq	%rax, %rdi
	call	traverse_add_remove
	addq	$16, %rsp
.L1251:
	movq	-56(%rbp), %rax
.L1248:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE136:
	.size	ecs_entity_init, .-ecs_entity_init
	.section	.rodata
.LC270:
	.string	"result != 0"
	.align 8
.LC271:
	.string	"ecs_has(world, result, EcsComponent)"
	.align 8
.LC272:
	.string	"ecs_has_type(world, result, FLECS__TEcsComponent)"
	.text
	.globl	ecs_component_init
	.type	ecs_component_init, @function
ecs_component_init:
.LFB137:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$680, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -680(%rbp)
	movq	%rsi, -688(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -680(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6909, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -680(%rbp)
	jne	.L1253
	leaq	__PRETTY_FUNCTION__.9664(%rip), %rcx
	movl	$6909, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1253:
	movq	-680(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -680(%rbp)
	movq	-680(%rbp), %rax
	movzbl	681(%rax), %eax
	movb	%al, -662(%rbp)
	movq	-680(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_is_deferred
	movb	%al, -661(%rbp)
	movl	$0, -660(%rbp)
	movq	$0, -648(%rbp)
	movq	$0, -640(%rbp)
	cmpb	$0, -662(%rbp)
	jne	.L1254
	cmpb	$0, -661(%rbp)
	je	.L1255
.L1254:
	movq	-680(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	cmpl	$1, %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6922, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC253(%rip), %rdx
	movl	$70, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-680(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	cmpl	$1, %eax
	jle	.L1256
	leaq	__PRETTY_FUNCTION__.9664(%rip), %rcx
	movl	$6922, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC253(%rip), %rdi
	call	__assert_fail@PLT
.L1256:
	movq	-680(%rbp), %rax
	movb	$0, 681(%rax)
	movq	-680(%rbp), %rax
	movq	%rax, -656(%rbp)
	leaq	-656(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -640(%rbp)
	movq	-640(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -660(%rbp)
	movq	-640(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -648(%rbp)
	movq	-640(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-640(%rbp), %rax
	movq	$0, 16(%rax)
.L1255:
	movq	-688(%rbp), %rdx
	leaq	-608(%rbp), %rax
	movq	%rdx, %rsi
	movl	$72, %edx
	movq	%rax, %rdi
	movq	%rdx, %rcx
	rep movsq
	movb	$1, -568(%rbp)
	movq	-576(%rbp), %rax
	testq	%rax, %rax
	jne	.L1257
	movq	-600(%rbp), %rax
	movq	%rax, -576(%rbp)
.L1257:
	movq	-688(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -632(%rbp)
	leaq	-608(%rbp), %rdx
	movq	-680(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_entity_init
	movq	%rax, -624(%rbp)
	cmpq	$0, -624(%rbp)
	jne	.L1258
	movl	$0, %eax
	jmp	.L1268
.L1258:
	movb	$0, -656(%rbp)
	leaq	-656(%rbp), %rdx
	movq	-624(%rbp), %rsi
	movq	-680(%rbp), %rax
	movq	%rdx, %rcx
	movl	$1, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -616(%rbp)
	movzbl	-656(%rbp), %eax
	testb	%al, %al
	je	.L1260
	movq	-688(%rbp), %rax
	movq	576(%rax), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movq	-616(%rbp), %rdx
	movl	%eax, (%rdx)
	movq	-688(%rbp), %rax
	movq	584(%rax), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movq	-616(%rbp), %rdx
	movl	%eax, 4(%rdx)
	jmp	.L1261
.L1260:
	movq	-616(%rbp), %rax
	movl	(%rax), %ebx
	movq	-688(%rbp), %rax
	movq	576(%rax), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	cmpl	%eax, %ebx
	je	.L1262
	movq	-688(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	movl	$6957, %edx
	leaq	.LC74(%rip), %rsi
	movl	$23, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L1262:
	movq	-616(%rbp), %rax
	movl	4(%rax), %ebx
	movq	-688(%rbp), %rax
	movq	584(%rax), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	cmpl	%eax, %ebx
	je	.L1261
	movq	-688(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	movl	$6960, %edx
	leaq	.LC74(%rip), %rsi
	movl	$24, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L1261:
	movq	-624(%rbp), %rcx
	movq	-680(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_modified_id
	movq	-680(%rbp), %rax
	movq	528(%rax), %rax
	cmpq	%rax, -632(%rbp)
	jbe	.L1263
	cmpq	$255, -632(%rbp)
	ja	.L1263
	movq	-632(%rbp), %rax
	leaq	1(%rax), %rdx
	movq	-680(%rbp), %rax
	movq	%rdx, 528(%rax)
.L1263:
	movl	$290, %eax
	salq	$32, %rax
	movl	$308, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-624(%rbp), %rcx
	movq	-680(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	cmpb	$0, -662(%rbp)
	jne	.L1264
	cmpb	$0, -661(%rbp)
	je	.L1265
.L1264:
	movq	-680(%rbp), %rax
	movzbl	-662(%rbp), %edx
	movb	%dl, 681(%rax)
	movq	-640(%rbp), %rax
	movl	-660(%rbp), %edx
	movl	%edx, 8(%rax)
	movq	-640(%rbp), %rax
	movq	-648(%rbp), %rdx
	movq	%rdx, 16(%rax)
.L1265:
	cmpq	$0, -624(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6980, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC270(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -624(%rbp)
	jne	.L1266
	leaq	__PRETTY_FUNCTION__.9664(%rip), %rcx
	movl	$6980, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC270(%rip), %rdi
	call	__assert_fail@PLT
.L1266:
	movq	FLECS__TEcsComponent(%rip), %rdx
	movq	-624(%rbp), %rcx
	movq	-680(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_type
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$6981, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC271(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	FLECS__TEcsComponent(%rip), %rdx
	movq	-624(%rbp), %rcx
	movq	-680(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_type
	testb	%al, %al
	jne	.L1267
	leaq	__PRETTY_FUNCTION__.9664(%rip), %rcx
	movl	$6981, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC272(%rip), %rdi
	call	__assert_fail@PLT
.L1267:
	movq	-624(%rbp), %rax
.L1268:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L1269
	call	__stack_chk_fail@PLT
.L1269:
	addq	$680, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE137:
	.size	ecs_component_init, .-ecs_component_init
	.globl	ecs_type_init
	.type	ecs_type_init, @function
ecs_type_init:
.LFB138:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$400, %rsp
	movq	%rdi, -392(%rbp)
	movq	%rsi, -400(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-400(%rbp), %rdx
	movq	-392(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_entity_init
	movq	%rax, -368(%rbp)
	movq	-368(%rbp), %rax
	testq	%rax, %rax
	jne	.L1271
	movl	$0, %eax
	jmp	.L1285
.L1271:
	movq	$0, -352(%rbp)
	movq	$0, -344(%rbp)
	movq	$0, -304(%rbp)
	movq	$0, -296(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -304(%rbp)
	movl	$0, -372(%rbp)
	movq	-400(%rbp), %rax
	addq	$576, %rax
	movq	%rax, -320(%rbp)
	jmp	.L1273
.L1276:
	leaq	-360(%rbp), %rax
	movq	%rax, -288(%rbp)
	movl	$1, -280(%rbp)
	leaq	-304(%rbp), %rcx
	leaq	-288(%rbp), %rdx
	movq	-344(%rbp), %rsi
	movq	-392(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -344(%rbp)
	leaq	-304(%rbp), %rcx
	leaq	-288(%rbp), %rdx
	movq	-352(%rbp), %rsi
	movq	-392(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -352(%rbp)
	cmpq	$0, -352(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7010, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -352(%rbp)
	jne	.L1273
	leaq	__PRETTY_FUNCTION__.9689(%rip), %rcx
	movl	$7010, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L1273:
	cmpl	$31, -372(%rbp)
	jg	.L1275
	movl	-372(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -372(%rbp)
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-320(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -360(%rbp)
	movq	-360(%rbp), %rax
	testq	%rax, %rax
	jne	.L1276
.L1275:
	movq	-400(%rbp), %rax
	movq	832(%rax), %rax
	testq	%rax, %rax
	je	.L1277
	movq	-400(%rbp), %rax
	movq	832(%rax), %rcx
	movq	-400(%rbp), %rax
	movq	8(%rax), %rdx
	leaq	-304(%rbp), %rdi
	movq	-344(%rbp), %rsi
	movq	-392(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	$1, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	traverse_from_expr
	addq	$16, %rsp
	movq	%rax, -344(%rbp)
	movq	-400(%rbp), %rax
	movq	832(%rax), %rcx
	movq	-400(%rbp), %rax
	movq	8(%rax), %rdx
	leaq	-304(%rbp), %rdi
	movq	-352(%rbp), %rsi
	movq	-392(%rbp), %rax
	subq	$8, %rsp
	pushq	$0
	movl	$1, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	traverse_from_expr
	addq	$16, %rsp
	movq	%rax, -352(%rbp)
.L1277:
	movl	-296(%rbp), %eax
	cmpl	$32, %eax
	jle	.L1278
	movq	40+ecs_os_api(%rip), %rdx
	movq	-304(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1278:
	movq	$0, -336(%rbp)
	movq	$0, -328(%rbp)
	cmpq	$0, -352(%rbp)
	je	.L1279
	movq	-352(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -336(%rbp)
.L1279:
	cmpq	$0, -344(%rbp)
	je	.L1280
	movq	-344(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -328(%rbp)
.L1280:
	movb	$0, -288(%rbp)
	movq	-368(%rbp), %rsi
	leaq	-288(%rbp), %rdx
	movq	-392(%rbp), %rax
	movq	%rdx, %rcx
	movl	$3, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -312(%rbp)
	movzbl	-288(%rbp), %eax
	testb	%al, %al
	je	.L1281
	movq	-312(%rbp), %rax
	movq	-336(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-312(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rdx, 8(%rax)
	cmpq	$0, -336(%rbp)
	je	.L1282
	movq	-336(%rbp), %rdx
	movq	-392(%rbp), %rax
	movq	296(%rax), %rax
	leaq	-368(%rbp), %rcx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_map_set
.L1282:
	movq	-368(%rbp), %rcx
	movq	-392(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_modified_id
	jmp	.L1283
.L1281:
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -336(%rbp)
	je	.L1284
	movq	-400(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	movl	$7056, %edx
	leaq	.LC74(%rip), %rsi
	movl	$8, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L1284:
	movq	-312(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -328(%rbp)
	je	.L1283
	movq	-400(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	movl	$7059, %edx
	leaq	.LC74(%rip), %rsi
	movl	$8, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L1283:
	movq	-368(%rbp), %rax
.L1285:
	movq	-8(%rbp), %rdi
	xorq	%fs:40, %rdi
	je	.L1286
	call	__stack_chk_fail@PLT
.L1286:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE138:
	.size	ecs_type_init, .-ecs_type_init
	.globl	ecs_bulk_new_w_data
	.type	ecs_bulk_new_w_data, @function
ecs_bulk_new_w_data:
.LFB139:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-40(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7072, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	testq	%rax, %rax
	jne	.L1288
	leaq	__PRETTY_FUNCTION__.9703(%rip), %rcx
	movl	$7072, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1288:
	leaq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	leaq	-32(%rbp), %r8
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rcx
	movl	-44(%rbp), %edx
	movq	-24(%rbp), %rsi
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	flecs_defer_bulk_new
	testb	%al, %al
	je	.L1289
	movq	-32(%rbp), %rax
	jmp	.L1291
.L1289:
	movq	-40(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_find_or_create
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	-64(%rbp), %rcx
	movl	-44(%rbp), %edx
	movq	-16(%rbp), %rsi
	movl	$0, %r9d
	movq	%rcx, %r8
	movl	%edx, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	new_w_data
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	movq	-32(%rbp), %rax
.L1291:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1292
	call	__stack_chk_fail@PLT
.L1292:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE139:
	.size	ecs_bulk_new_w_data, .-ecs_bulk_new_w_data
	.globl	ecs_bulk_new_w_type
	.type	ecs_bulk_new_w_type, @function
ecs_bulk_new_w_type:
.LFB140:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -84(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7091, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	jne	.L1294
	leaq	__PRETTY_FUNCTION__.9712(%rip), %rcx
	movl	$7091, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1294:
	leaq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -48(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-72(%rbp), %rax
	leaq	-56(%rbp), %rdi
	leaq	-32(%rbp), %rcx
	movl	-84(%rbp), %edx
	movq	-48(%rbp), %rsi
	movq	%rdi, %r9
	movl	$0, %r8d
	movq	%rax, %rdi
	call	flecs_defer_bulk_new
	testb	%al, %al
	je	.L1295
	movq	-56(%rbp), %rax
	jmp	.L1297
.L1295:
	movq	-72(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_table_from_type
	movq	%rax, -40(%rbp)
	movq	-72(%rbp), %rax
	movl	-84(%rbp), %edx
	movq	-40(%rbp), %rsi
	movl	$0, %r9d
	movl	$0, %r8d
	movl	%edx, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	new_w_data
	movq	%rax, -56(%rbp)
	movq	-72(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	movq	-56(%rbp), %rax
.L1297:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1298
	call	__stack_chk_fail@PLT
.L1298:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE140:
	.size	ecs_bulk_new_w_type, .-ecs_bulk_new_w_type
	.section	.rodata
.LC273:
	.string	"ecs_is_valid(world, id)"
	.text
	.globl	ecs_bulk_new_w_id
	.type	ecs_bulk_new_w_id, @function
ecs_bulk_new_w_id:
.LFB141:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -84(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7110, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	jne	.L1300
	leaq	__PRETTY_FUNCTION__.9722(%rip), %rcx
	movl	$7110, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1300:
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7111, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC273(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1301
	leaq	__PRETTY_FUNCTION__.9722(%rip), %rcx
	movl	$7111, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC273(%rip), %rdi
	call	__assert_fail@PLT
.L1301:
	leaq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -48(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	movq	-72(%rbp), %rax
	leaq	-56(%rbp), %rdi
	leaq	-32(%rbp), %rcx
	movl	-84(%rbp), %edx
	movq	-48(%rbp), %rsi
	movq	%rdi, %r9
	movl	$0, %r8d
	movq	%rax, %rdi
	call	flecs_defer_bulk_new
	testb	%al, %al
	je	.L1302
	movq	-56(%rbp), %rax
	jmp	.L1304
.L1302:
	movq	-72(%rbp), %rax
	leaq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_find_or_create
	movq	%rax, -40(%rbp)
	movq	-72(%rbp), %rax
	movl	-84(%rbp), %edx
	movq	-40(%rbp), %rsi
	movl	$0, %r9d
	movl	$0, %r8d
	movl	%edx, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	new_w_data
	movq	%rax, -56(%rbp)
	movq	-72(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	movq	-56(%rbp), %rax
.L1304:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1305
	call	__stack_chk_fail@PLT
.L1305:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE141:
	.size	ecs_bulk_new_w_id, .-ecs_bulk_new_w_id
	.section	.rodata
.LC274:
	.string	"ecs_is_valid(world, entity)"
	.text
	.globl	ecs_clear
	.type	ecs_clear, @function
ecs_clear:
.LFB142:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7132, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	jne	.L1307
	leaq	__PRETTY_FUNCTION__.9731(%rip), %rcx
	movl	$7132, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1307:
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7133, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1308
	leaq	__PRETTY_FUNCTION__.9731(%rip), %rcx
	movl	$7133, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1308:
	leaq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -88(%rbp)
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_clear
	testb	%al, %al
	jne	.L1313
	movq	$0, -40(%rbp)
	movq	-104(%rbp), %rax
	leaq	-48(%rbp), %rdx
	movq	-112(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	movq	-40(%rbp), %rax
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L1311
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-104(%rbp), %rax
	leaq	-64(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	call	remove_ids_w_info
.L1311:
	movq	-104(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	jmp	.L1306
.L1313:
	nop
.L1306:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1312
	call	__stack_chk_fail@PLT
.L1312:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE142:
	.size	ecs_clear, .-ecs_clear
	.type	throw_invalid_delete, @function
throw_invalid_delete:
.LFB143:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$288, %rsp
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-272(%rbp), %rdx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rax
	movl	$256, %ecx
	movq	%rax, %rdi
	call	ecs_id_str
	leaq	-272(%rbp), %rax
	movq	%rax, %rcx
	movl	$7169, %edx
	leaq	.LC74(%rip), %rsi
	movl	$3, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
	.cfi_endproc
.LFE143:
	.size	throw_invalid_delete, .-throw_invalid_delete
	.section	.rodata
	.align 8
.LC275:
	.string	"!is_role || ((ids[column] & ECS_ROLE_MASK) != 0)"
	.align 8
.LC276:
	.string	"!is_role || ((ids[column] & (0xFFull << 56)) != 0)"
	.text
	.type	remove_from_table, @function
remove_from_table:
.LFB144:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$416, %rsp
	movq	%rdi, -392(%rbp)
	movq	%rsi, -400(%rbp)
	movq	%rdx, -408(%rbp)
	movl	%ecx, -412(%rbp)
	movl	%r8d, -416(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	$0, -304(%rbp)
	movq	$0, -296(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -304(%rbp)
	cmpl	$32, -416(%rbp)
	jle	.L1317
	movq	16+ecs_os_api(%rip), %rax
	movl	-416(%rbp), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -304(%rbp)
.L1317:
	movq	-400(%rbp), %rax
	movq	%rax, -344(%rbp)
	movq	-400(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -336(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-408(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	sete	%al
	movb	%al, -371(%rbp)
	cmpb	$0, -371(%rbp)
	je	.L1318
	movl	-412(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-336(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	cmpq	%rax, %rdx
	je	.L1318
	movl	$1, %eax
	jmp	.L1319
.L1318:
	movl	$0, %eax
.L1319:
	movb	%al, -370(%rbp)
	andb	$1, -370(%rbp)
	movzbl	-370(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1320
	movl	-412(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-336(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rdx, %rax
	testq	%rax, %rax
	je	.L1321
.L1320:
	movl	$1, %eax
	jmp	.L1322
.L1321:
	movl	$0, %eax
.L1322:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7194, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC275(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movzbl	-370(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1323
	movl	-412(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-336(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rdx, %rax
	testq	%rax, %rax
	jne	.L1323
	leaq	__PRETTY_FUNCTION__.9758(%rip), %rcx
	movl	$7194, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC276(%rip), %rdi
	call	__assert_fail@PLT
.L1323:
	movq	-408(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_id_is_wildcard
	movb	%al, -369(%rbp)
	movq	-400(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -360(%rbp)
	movl	$0, -364(%rbp)
	movq	-408(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, -328(%rbp)
	movl	-412(%rbp), %eax
	movl	%eax, -368(%rbp)
	jmp	.L1324
.L1331:
	movl	-368(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-336(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -352(%rbp)
	cmpb	$0, -370(%rbp)
	je	.L1325
	movq	-352(%rbp), %rax
	movabsq	$72057594037927935, %rdx
	andq	%rdx, %rax
	cmpq	%rax, -328(%rbp)
	je	.L1326
	jmp	.L1330
.L1325:
	cmpb	$0, -369(%rbp)
	je	.L1326
	movq	-352(%rbp), %rax
	movq	-408(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_id_match
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1338
.L1326:
	leaq	-352(%rbp), %rax
	movq	%rax, -288(%rbp)
	movl	$1, -280(%rbp)
	leaq	-304(%rbp), %rcx
	leaq	-288(%rbp), %rdx
	movq	-344(%rbp), %rsi
	movq	-392(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -344(%rbp)
	addl	$1, -364(%rbp)
	movl	-364(%rbp), %eax
	cmpl	-416(%rbp), %eax
	je	.L1339
	jmp	.L1330
.L1338:
	nop
.L1330:
	addl	$1, -368(%rbp)
.L1324:
	movl	-368(%rbp), %eax
	cmpl	-360(%rbp), %eax
	jl	.L1331
	jmp	.L1329
.L1339:
	nop
.L1329:
	cmpq	$0, -344(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7222, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC218(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -344(%rbp)
	jne	.L1332
	leaq	__PRETTY_FUNCTION__.9758(%rip), %rcx
	movl	$7222, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC219(%rip), %rdi
	call	__assert_fail@PLT
.L1332:
	movq	-344(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L1333
	movq	-400(%rbp), %rdx
	movq	-392(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_clear_entities
	jmp	.L1334
.L1333:
	movq	-344(%rbp), %rax
	cmpq	-400(%rbp), %rax
	je	.L1334
	movq	-400(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -320(%rbp)
	movq	-400(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movl	%eax, -356(%rbp)
	movl	-296(%rbp), %eax
	testl	%eax, %eax
	je	.L1335
	cmpq	$0, -320(%rbp)
	je	.L1335
	leaq	-304(%rbp), %rdi
	movl	-356(%rbp), %ecx
	movq	-320(%rbp), %rdx
	movq	-400(%rbp), %rsi
	movq	-392(%rbp), %rax
	movq	%rdi, %r9
	movl	%ecx, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_run_remove_actions
.L1335:
	movq	-344(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -312(%rbp)
	movq	-320(%rbp), %rdi
	movq	-312(%rbp), %rcx
	movq	-400(%rbp), %rdx
	movq	-344(%rbp), %rsi
	movq	-392(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	flecs_table_merge
.L1334:
	cmpl	$32, -416(%rbp)
	jle	.L1340
	movq	40+ecs_os_api(%rip), %rdx
	movq	-304(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1340:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1337
	call	__stack_chk_fail@PLT
.L1337:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE144:
	.size	remove_from_table, .-remove_from_table
	.type	delete_objects, @function
delete_objects:
.LFB145:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L1346
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -36(%rbp)
	movl	$0, -40(%rbp)
	jmp	.L1343
.L1345:
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1344
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jns	.L1344
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	negl	%eax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 8(%rax)
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	on_delete_action
.L1344:
	addl	$1, -40(%rbp)
.L1343:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L1345
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_delete_entities
.L1346:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE145:
	.size	delete_objects, .-delete_objects
	.type	delete_tables_for_id_record, @function
delete_tables_for_id_record:
.LFB146:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-72(%rbp), %rax
	movzbl	682(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L1352
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-88(%rbp), %rax
	movq	$0, (%rax)
	leaq	-48(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L1349
.L1350:
	movq	-56(%rbp), %rax
	movq	(%rax), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_delete_table
.L1349:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L1350
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_clear_id_record
.L1352:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1351
	call	__stack_chk_fail@PLT
.L1351:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE146:
	.size	delete_tables_for_id_record, .-delete_tables_for_id_record
	.section	.rodata
.LC277:
	.string	"rel_id != NULL"
.LC278:
	.string	"rel_id != ((void *)0)"
.LC279:
	.string	"rel != 0"
	.text
	.type	on_delete_object_action, @function
on_delete_object_action:
.LFB147:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$160, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -112(%rbp)
	cmpq	$0, -112(%rbp)
	je	.L1366
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	leaq	-48(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L1355
.L1364:
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	testl	%eax, %eax
	jne	.L1356
	jmp	.L1355
.L1356:
	movq	-96(%rbp), %rax
	movl	8(%rax), %edx
	movq	-88(%rbp), %rax
	movq	8(%rax), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7325, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC277(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	jne	.L1357
	leaq	__PRETTY_FUNCTION__.9808(%rip), %rcx
	movl	$7325, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC278(%rip), %rdi
	call	__assert_fail@PLT
.L1357:
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7329, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC279(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L1358
	leaq	__PRETTY_FUNCTION__.9808(%rip), %rcx
	movl	$7329, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC279(%rip), %rdi
	call	__assert_fail@PLT
.L1358:
	movq	-72(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L1359
	movq	-64(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L1360
	movl	$306, %eax
	cmpq	%rax, -56(%rbp)
	jne	.L1361
.L1360:
	movq	-96(%rbp), %rax
	movl	12(%rax), %edi
	movq	-96(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-128(%rbp), %rdx
	movq	-88(%rbp), %rsi
	movq	-120(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	remove_from_table
	leaq	-160(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	jmp	.L1355
.L1361:
	movl	$307, %eax
	cmpq	%rax, -56(%rbp)
	jne	.L1363
	movq	-88(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	delete_objects
	jmp	.L1355
.L1363:
	movl	$308, %eax
	cmpq	%rax, -56(%rbp)
	jne	.L1355
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	throw_invalid_delete
	jmp	.L1355
.L1359:
	movq	-96(%rbp), %rax
	movl	12(%rax), %edi
	movq	-96(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-128(%rbp), %rdx
	movq	-88(%rbp), %rsi
	movq	-120(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	remove_from_table
	leaq	-160(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
.L1355:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -96(%rbp)
	cmpq	$0, -96(%rbp)
	jne	.L1364
	movq	-112(%rbp), %rdx
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	delete_tables_for_id_record
.L1366:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1365
	call	__stack_chk_fail@PLT
.L1365:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE147:
	.size	on_delete_object_action, .-on_delete_object_action
	.type	on_delete_relation_action, @function
on_delete_relation_action:
.LFB148:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$368, %rsp
	movq	%rdi, -360(%rbp)
	movq	%rsi, -368(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-368(%rbp), %rdx
	movq	-360(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -352(%rbp)
	leaq	-272(%rbp), %rdx
	movq	-368(%rbp), %rsi
	movq	-360(%rbp), %rax
	movl	$255, %ecx
	movq	%rax, %rdi
	call	ecs_id_str
	cmpq	$0, -352(%rbp)
	je	.L1375
	movq	-352(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -344(%rbp)
	movl	$308, %eax
	cmpq	%rax, -344(%rbp)
	jne	.L1369
	movq	-368(%rbp), %rdx
	movq	-360(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	throw_invalid_delete
.L1369:
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -336(%rbp)
	leaq	-304(%rbp), %rax
	movq	-336(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L1370
.L1373:
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -320(%rbp)
	movq	-352(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -312(%rbp)
	cmpq	$0, -312(%rbp)
	je	.L1371
	movl	$306, %eax
	cmpq	%rax, -312(%rbp)
	jne	.L1372
.L1371:
	movq	-328(%rbp), %rax
	movl	12(%rax), %edi
	movq	-328(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-368(%rbp), %rdx
	movq	-320(%rbp), %rsi
	movq	-360(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	remove_from_table
	jmp	.L1370
.L1372:
	movl	$307, %eax
	cmpq	%rax, -312(%rbp)
	jne	.L1370
	movq	-320(%rbp), %rdx
	movq	-360(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	delete_objects
.L1370:
	leaq	-304(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -328(%rbp)
	cmpq	$0, -328(%rbp)
	jne	.L1373
	movq	-352(%rbp), %rdx
	movq	-368(%rbp), %rcx
	movq	-360(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	delete_tables_for_id_record
.L1375:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1374
	call	__stack_chk_fail@PLT
.L1374:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE148:
	.size	on_delete_relation_action, .-on_delete_relation_action
	.type	on_delete_action, @function
on_delete_action:
.LFB149:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	on_delete_relation_action
	movq	-16(%rbp), %rax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	on_delete_relation_action
	movl	$266, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	on_delete_object_action
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE149:
	.size	on_delete_action, .-on_delete_action
	.globl	ecs_delete_children
	.type	ecs_delete_children, @function
ecs_delete_children:
.LFB150:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	on_delete_action
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE150:
	.size	ecs_delete_children, .-ecs_delete_children
	.section	.rodata
.LC280:
	.string	"entity != 0"
.LC281:
	.string	"!table_id || table"
	.text
	.globl	ecs_delete
	.type	ecs_delete, @function
ecs_delete:
.LFB151:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-120(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7409, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-120(%rbp), %rax
	testq	%rax, %rax
	jne	.L1379
	leaq	__PRETTY_FUNCTION__.9841(%rip), %rcx
	movl	$7409, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1379:
	cmpq	$0, -128(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7410, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC280(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -128(%rbp)
	jne	.L1380
	leaq	__PRETTY_FUNCTION__.9841(%rip), %rcx
	movl	$7410, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC280(%rip), %rdi
	call	__assert_fail@PLT
.L1380:
	leaq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -88(%rbp)
	movq	-120(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_delete
	testb	%al, %al
	jne	.L1394
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	movq	-128(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L1383
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	set_info_from_record
	movq	-40(%rbp), %rax
	movq	%rax, -104(%rbp)
	movq	$0, -96(%rbp)
	cmpq	$0, -104(%rbp)
	je	.L1384
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
.L1384:
	movzbl	-20(%rbp), %eax
	testb	%al, %al
	je	.L1385
	movq	-80(%rbp), %rax
	movl	8(%rax), %eax
	negl	%eax
	movl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-120(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	on_delete_action
	movq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	set_info_from_record
	movq	-40(%rbp), %rax
	movq	%rax, -104(%rbp)
	cmpq	$0, -104(%rbp)
	je	.L1386
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	jmp	.L1387
.L1386:
	movq	$0, -96(%rbp)
.L1387:
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L1385
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-120(%rbp), %rax
	leaq	-64(%rbp), %rdx
	movq	-128(%rbp), %rsi
	movq	%rdx, %rcx
	movl	$0, %edx
	movq	%rax, %rdi
	call	update_component_monitors
.L1385:
	cmpq	$0, -96(%rbp)
	je	.L1388
	cmpq	$0, -104(%rbp)
	je	.L1389
.L1388:
	movl	$1, %eax
	jmp	.L1390
.L1389:
	movl	$0, %eax
.L1390:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7455, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC281(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -96(%rbp)
	je	.L1391
	cmpq	$0, -104(%rbp)
	jne	.L1391
	leaq	__PRETTY_FUNCTION__.9841(%rip), %rcx
	movl	$7455, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC281(%rip), %rdi
	call	__assert_fail@PLT
.L1391:
	cmpq	$0, -96(%rbp)
	je	.L1392
	movq	-120(%rbp), %rax
	movq	48(%rax), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_is_alive
	testb	%al, %al
	je	.L1392
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	-24(%rbp), %ecx
	movq	-32(%rbp), %rdx
	movq	-120(%rbp), %rax
	leaq	-64(%rbp), %rdi
	movq	-104(%rbp), %rsi
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	delete_entity
	movq	-80(%rbp), %rax
	movq	$0, (%rax)
.L1392:
	movq	-80(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-120(%rbp), %rax
	movq	40(%rax), %rax
	movq	-128(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_remove
.L1383:
	movq	-120(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	jmp	.L1378
.L1394:
	nop
.L1378:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1393
	call	__stack_chk_fail@PLT
.L1393:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE151:
	.size	ecs_delete, .-ecs_delete
	.globl	ecs_add_type
	.type	ecs_add_type, @function
ecs_add_type:
.LFB152:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7480, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1396
	leaq	__PRETTY_FUNCTION__.9855(%rip), %rcx
	movl	$7480, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1396:
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7481, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1397
	leaq	__PRETTY_FUNCTION__.9855(%rip), %rcx
	movl	$7481, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1397:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_ids
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1398
	call	__stack_chk_fail@PLT
.L1398:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE152:
	.size	ecs_add_type, .-ecs_add_type
	.globl	ecs_add_id
	.type	ecs_add_id, @function
ecs_add_id:
.LFB153:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7492, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1400
	leaq	__PRETTY_FUNCTION__.9862(%rip), %rcx
	movl	$7492, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1400:
	movq	-56(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7493, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC273(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1401
	leaq	__PRETTY_FUNCTION__.9862(%rip), %rcx
	movl	$7493, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC273(%rip), %rdi
	call	__assert_fail@PLT
.L1401:
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7494, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1402
	leaq	__PRETTY_FUNCTION__.9862(%rip), %rcx
	movl	$7494, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1402:
	leaq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_ids
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1403
	call	__stack_chk_fail@PLT
.L1403:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE153:
	.size	ecs_add_id, .-ecs_add_id
	.globl	ecs_remove_type
	.type	ecs_remove_type, @function
ecs_remove_type:
.LFB154:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7505, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1405
	leaq	__PRETTY_FUNCTION__.9869(%rip), %rcx
	movl	$7505, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1405:
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7506, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1406
	leaq	__PRETTY_FUNCTION__.9869(%rip), %rcx
	movl	$7506, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1406:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	remove_ids
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1407
	call	__stack_chk_fail@PLT
.L1407:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE154:
	.size	ecs_remove_type, .-ecs_remove_type
	.globl	ecs_remove_id
	.type	ecs_remove_id, @function
ecs_remove_id:
.LFB155:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7517, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1409
	leaq	__PRETTY_FUNCTION__.9876(%rip), %rcx
	movl	$7517, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1409:
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7518, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1410
	leaq	__PRETTY_FUNCTION__.9876(%rip), %rcx
	movl	$7518, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1410:
	leaq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	remove_ids
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1411
	call	__stack_chk_fail@PLT
.L1411:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE155:
	.size	ecs_remove_id, .-ecs_remove_id
	.section	.rodata
.LC282:
	.string	"ecs_is_valid(world, id_add)"
	.align 8
.LC283:
	.string	"ecs_is_valid(world, id_remove)"
	.text
	.globl	ecs_add_remove_entity
	.type	ecs_add_remove_entity, @function
ecs_add_remove_entity:
.LFB156:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7531, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L1413
	leaq	__PRETTY_FUNCTION__.9884(%rip), %rcx
	movl	$7531, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1413:
	movq	-72(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7532, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC282(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1414
	leaq	__PRETTY_FUNCTION__.9884(%rip), %rcx
	movl	$7532, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC282(%rip), %rdi
	call	__assert_fail@PLT
.L1414:
	movq	-80(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7533, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC283(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1415
	leaq	__PRETTY_FUNCTION__.9884(%rip), %rcx
	movl	$7533, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC283(%rip), %rdi
	call	__assert_fail@PLT
.L1415:
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7534, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1416
	leaq	__PRETTY_FUNCTION__.9884(%rip), %rcx
	movl	$7534, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1416:
	leaq	-72(%rbp), %rax
	movq	%rax, -48(%rbp)
	movl	$1, -40(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	add_remove
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1417
	call	__stack_chk_fail@PLT
.L1417:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE156:
	.size	ecs_add_remove_entity, .-ecs_add_remove_entity
	.globl	ecs_add_remove_type
	.type	ecs_add_remove_type, @function
ecs_add_remove_type:
.LFB157:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7547, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L1419
	leaq	__PRETTY_FUNCTION__.9893(%rip), %rcx
	movl	$7547, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1419:
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7548, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1420
	leaq	__PRETTY_FUNCTION__.9893(%rip), %rcx
	movl	$7548, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1420:
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-32(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	add_remove
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1421
	call	__stack_chk_fail@PLT
.L1421:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE157:
	.size	ecs_add_remove_type, .-ecs_add_remove_type
	.section	.rodata
.LC284:
	.string	"src != 0"
.LC285:
	.string	"ecs_is_valid(world, src)"
	.text
	.globl	ecs_clone
	.type	ecs_clone, @function
ecs_clone:
.LFB158:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$160, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	%ecx, %eax
	movb	%al, -156(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-136(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7561, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-136(%rbp), %rax
	testq	%rax, %rax
	jne	.L1423
	leaq	__PRETTY_FUNCTION__.9902(%rip), %rcx
	movl	$7561, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1423:
	cmpq	$0, -152(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7562, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC284(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -152(%rbp)
	jne	.L1424
	leaq	__PRETTY_FUNCTION__.9902(%rip), %rcx
	movl	$7562, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC284(%rip), %rdi
	call	__assert_fail@PLT
.L1424:
	movq	-136(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7563, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC285(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-136(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1425
	leaq	__PRETTY_FUNCTION__.9902(%rip), %rcx
	movl	$7563, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC285(%rip), %rdi
	call	__assert_fail@PLT
.L1425:
	leaq	-136(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -120(%rbp)
	cmpq	$0, -144(%rbp)
	jne	.L1426
	movq	-136(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, -144(%rbp)
.L1426:
	movzbl	-156(%rbp), %edi
	movq	-136(%rbp), %rax
	movq	-152(%rbp), %rcx
	movq	-144(%rbp), %rdx
	movq	-120(%rbp), %rsi
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	flecs_defer_clone
	testb	%al, %al
	je	.L1427
	movq	-144(%rbp), %rax
	jmp	.L1432
.L1427:
	movq	-136(%rbp), %rax
	leaq	-80(%rbp), %rdx
	movq	-152(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	movb	%al, -121(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -112(%rbp)
	movzbl	-121(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1429
	cmpq	$0, -112(%rbp)
	jne	.L1430
.L1429:
	movq	-144(%rbp), %rax
	jmp	.L1432
.L1430:
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	-136(%rbp), %rax
	leaq	-96(%rbp), %rdi
	movq	-112(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-144(%rbp), %rsi
	movl	$1, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	new_entity
	movl	%eax, -24(%rbp)
	cmpb	$0, -156(%rbp)
	je	.L1431
	movl	-56(%rbp), %r8d
	movq	-64(%rbp), %rdi
	movl	-24(%rbp), %r9d
	movq	-32(%rbp), %r10
	movq	-136(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %rdx
	movq	-144(%rbp), %rsi
	pushq	$1
	pushq	%r8
	pushq	%rdi
	pushq	-112(%rbp)
	movq	%r10, %r8
	movq	%rax, %rdi
	call	flecs_table_move
	addq	$32, %rsp
	movl	-24(%rbp), %esi
	movq	-64(%rbp), %rcx
	movq	-136(%rbp), %rax
	movq	-112(%rbp), %rdx
	pushq	$1
	pushq	$1
	movl	%esi, %r9d
	movl	$0, %r8d
	movl	$0, %esi
	movq	%rax, %rdi
	call	flecs_run_set_systems
	addq	$16, %rsp
.L1431:
	movq	-136(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	movq	-144(%rbp), %rax
.L1432:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1433
	call	__stack_chk_fail@PLT
.L1433:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE158:
	.size	ecs_clone, .-ecs_clone
	.section	.rodata
	.align 8
.LC286:
	.string	"flecs_stage_from_readonly_world(world)->asynchronous == false"
	.align 8
.LC287:
	.string	"flecs_stage_from_readonly_world(world)->asynchronous == 0"
	.text
	.globl	ecs_get_id
	.type	ecs_get_id, @function
ecs_get_id:
.LFB159:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7607, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L1435
	leaq	__PRETTY_FUNCTION__.9915(%rip), %rcx
	movl	$7607, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1435:
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7608, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1436
	leaq	__PRETTY_FUNCTION__.9915(%rip), %rcx
	movl	$7608, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1436:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_readonly_world
	movzbl	81(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7609, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC286(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_readonly_world
	movzbl	81(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1437
	leaq	__PRETTY_FUNCTION__.9915(%rip), %rcx
	movl	$7609, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC287(%rip), %rdi
	call	__assert_fail@PLT
.L1437:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	-64(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L1438
	movl	$0, %eax
	jmp	.L1443
.L1438:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L1440
	movl	$0, %eax
	jmp	.L1443
.L1440:
	movq	-72(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L1441
	movl	$0, %eax
	jmp	.L1443
.L1441:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L1442
	movq	-24(%rbp), %rax
	movq	(%rax), %rcx
	movq	-72(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %r9d
	movl	$0, %r8d
	movq	%rax, %rdi
	call	get_base_component
	jmp	.L1443
.L1442:
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	leaq	-45(%rbp), %rdx
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	flecs_record_to_row
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %ecx
	movl	-44(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	get_component_w_index
.L1443:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1444
	call	__stack_chk_fail@PLT
.L1444:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE159:
	.size	ecs_get_id, .-ecs_get_id
	.section	.rodata
.LC288:
	.string	"ref != NULL"
.LC289:
	.string	"ref != ((void *)0)"
	.align 8
.LC290:
	.string	"!entity || !ref->entity || entity == ref->entity"
	.align 8
.LC291:
	.string	"!id || !ref->component || id == ref->component"
	.text
	.globl	ecs_get_ref_w_id
	.type	ecs_get_ref_w_id, @function
ecs_get_ref_w_id:
.LFB160:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7647, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1446
	leaq	__PRETTY_FUNCTION__.9928(%rip), %rcx
	movl	$7647, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1446:
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7648, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC288(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L1447
	leaq	__PRETTY_FUNCTION__.9928(%rip), %rcx
	movl	$7648, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC289(%rip), %rdi
	call	__assert_fail@PLT
.L1447:
	cmpq	$0, -56(%rbp)
	je	.L1448
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L1448
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -56(%rbp)
	jne	.L1449
.L1448:
	movl	$1, %eax
	jmp	.L1450
.L1449:
	movl	$0, %eax
.L1450:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7649, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC290(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	je	.L1451
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L1451
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -56(%rbp)
	je	.L1451
	leaq	__PRETTY_FUNCTION__.9928(%rip), %rcx
	movl	$7649, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC290(%rip), %rdi
	call	__assert_fail@PLT
.L1451:
	cmpq	$0, -64(%rbp)
	je	.L1452
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L1452
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -64(%rbp)
	jne	.L1453
.L1452:
	movl	$1, %eax
	jmp	.L1454
.L1453:
	movl	$0, %eax
.L1454:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7650, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC291(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	je	.L1455
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L1455
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -64(%rbp)
	je	.L1455
	leaq	__PRETTY_FUNCTION__.9928(%rip), %rcx
	movl	$7650, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC291(%rip), %rdi
	call	__assert_fail@PLT
.L1455:
	movq	-48(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	orq	%rax, -56(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L1456
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	-56(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -24(%rbp)
.L1456:
	cmpq	$0, -24(%rbp)
	je	.L1457
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L1458
.L1457:
	movl	$0, %eax
	jmp	.L1459
.L1458:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movq	32(%rax), %rax
	cmpq	%rax, -24(%rbp)
	jne	.L1460
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	cmpq	%rax, -16(%rbp)
	jne	.L1460
	movq	-48(%rbp), %rax
	movl	24(%rax), %edx
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, %edx
	jne	.L1460
	movq	-48(%rbp), %rax
	movl	28(%rax), %edx
	movq	-16(%rbp), %rax
	movl	112(%rax), %eax
	cmpl	%eax, %edx
	jne	.L1460
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	jmp	.L1459
.L1460:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	orq	%rax, -64(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-48(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-48(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	movq	-48(%rbp), %rax
	movl	%edx, 24(%rax)
	movq	-16(%rbp), %rax
	movl	112(%rax), %edx
	movq	-48(%rbp), %rax
	movl	%edx, 28(%rax)
	cmpq	$0, -16(%rbp)
	je	.L1461
	leaq	-29(%rbp), %rdx
	movl	-28(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	flecs_record_to_row
	movl	%eax, -28(%rbp)
	movq	-64(%rbp), %rcx
	movl	-28(%rbp), %edx
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	get_component
	movq	-48(%rbp), %rdx
	movq	%rax, 40(%rdx)
.L1461:
	movq	-48(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, 32(%rax)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
.L1459:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1462
	call	__stack_chk_fail@PLT
.L1462:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE160:
	.size	ecs_get_ref_w_id, .-ecs_get_ref_w_id
	.section	.rodata
.LC292:
	.string	"false"
.LC293:
	.string	"0"
	.text
	.globl	ecs_get_mut_id
	.type	ecs_get_mut_id, @function
ecs_get_mut_id:
.LFB161:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%rcx, -112(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7703, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	jne	.L1464
	leaq	__PRETTY_FUNCTION__.9939(%rip), %rcx
	movl	$7703, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1464:
	movq	-88(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7704, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1465
	leaq	__PRETTY_FUNCTION__.9939(%rip), %rcx
	movl	$7704, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1465:
	movq	-88(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7705, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC273(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1466
	leaq	__PRETTY_FUNCTION__.9939(%rip), %rcx
	movl	$7705, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC273(%rip), %rdi
	call	__assert_fail@PLT
.L1466:
	leaq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -64(%rbp)
	movq	-88(%rbp), %rax
	movq	-104(%rbp), %rdi
	movq	-96(%rbp), %rdx
	movq	-64(%rbp), %rsi
	subq	$8, %rsp
	pushq	-112(%rbp)
	leaq	-72(%rbp), %rcx
	pushq	%rcx
	pushq	$0
	movl	$0, %r9d
	movq	%rdi, %r8
	movq	%rdx, %rcx
	movl	$6, %edx
	movq	%rax, %rdi
	call	flecs_defer_set
	addq	$32, %rsp
	testb	%al, %al
	je	.L1467
	movq	-72(%rbp), %rax
	jmp	.L1473
.L1467:
	movq	-88(%rbp), %rax
	movq	-112(%rbp), %rdi
	leaq	-48(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	get_mutable
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7721, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L1469
	leaq	__PRETTY_FUNCTION__.9939(%rip), %rcx
	movl	$7721, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L1469:
	movq	-56(%rbp), %rax
	movl	112(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	-88(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -56(%rbp)
	jne	.L1470
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	112(%rax), %eax
	cmpl	%eax, -80(%rbp)
	jne	.L1470
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -76(%rbp)
	je	.L1471
.L1470:
	movq	-88(%rbp), %rax
	leaq	-48(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	testb	%al, %al
	je	.L1472
	movq	-40(%rbp), %rax
	testq	%rax, %rax
	je	.L1472
	movl	-24(%rbp), %edx
	movq	-40(%rbp), %rsi
	movq	-88(%rbp), %rax
	movq	-104(%rbp), %rcx
	movq	%rax, %rdi
	call	get_component
	movq	%rax, -72(%rbp)
	jmp	.L1471
.L1472:
	movl	$0, %r9d
	movl	$7744, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC292(%rip), %rdx
	movl	$1, %esi
	movl	$0, %edi
	movl	$0, %eax
	call	_ecs_assert
	leaq	__PRETTY_FUNCTION__.9939(%rip), %rcx
	movl	$7744, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC293(%rip), %rdi
	call	__assert_fail@PLT
.L1471:
	movq	-72(%rbp), %rax
.L1473:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1474
	call	__stack_chk_fail@PLT
.L1474:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE161:
	.size	ecs_get_mut_id, .-ecs_get_mut_id
	.section	.rodata
	.align 8
.LC294:
	.string	"!ecs_has_id(world, entity, id)"
	.text
	.globl	ecs_emplace_id
	.type	ecs_emplace_id, @function
ecs_emplace_id:
.LFB162:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7756, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	jne	.L1476
	leaq	__PRETTY_FUNCTION__.9951(%rip), %rcx
	movl	$7756, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1476:
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7757, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1477
	leaq	__PRETTY_FUNCTION__.9951(%rip), %rcx
	movl	$7757, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1477:
	movq	-120(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7758, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC273(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-120(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1478
	leaq	__PRETTY_FUNCTION__.9951(%rip), %rcx
	movl	$7758, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC273(%rip), %rdi
	call	__assert_fail@PLT
.L1478:
	movq	-120(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7759, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC294(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-120(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1479
	leaq	__PRETTY_FUNCTION__.9951(%rip), %rcx
	movl	$7759, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC294(%rip), %rdi
	call	__assert_fail@PLT
.L1479:
	leaq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -80(%rbp)
	movq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	-80(%rbp), %rsi
	subq	$8, %rsp
	pushq	$0
	leaq	-88(%rbp), %rcx
	pushq	%rcx
	pushq	$0
	movl	$0, %r9d
	movq	%rdi, %r8
	movq	%rdx, %rcx
	movl	$6, %edx
	movq	%rax, %rdi
	call	flecs_defer_set
	addq	$32, %rsp
	testb	%al, %al
	je	.L1480
	movq	-88(%rbp), %rax
	jmp	.L1482
.L1480:
	movq	-104(%rbp), %rax
	leaq	-48(%rbp), %rdx
	movq	-112(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	leaq	-120(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$1, -56(%rbp)
	movq	-104(%rbp), %rax
	leaq	-64(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movl	$0, %r8d
	movq	%rax, %rdi
	call	add_ids_w_info
	movq	-120(%rbp), %rcx
	movl	-24(%rbp), %edx
	movq	-40(%rbp), %rsi
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	get_component
	movq	%rax, -72(%rbp)
	movq	-104(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	movq	-72(%rbp), %rax
.L1482:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1483
	call	__stack_chk_fail@PLT
.L1483:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE162:
	.size	ecs_emplace_id, .-ecs_emplace_id
	.section	.rodata
.LC295:
	.string	"ecs_has_id(world, entity, id)"
.LC296:
	.string	"column != NULL"
.LC297:
	.string	"column != ((void *)0)"
	.text
	.globl	ecs_modified_id
	.type	ecs_modified_id, @function
ecs_modified_id:
.LFB163:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7793, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	jne	.L1485
	leaq	__PRETTY_FUNCTION__.9962(%rip), %rcx
	movl	$7793, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1485:
	movq	-72(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7794, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1486
	leaq	__PRETTY_FUNCTION__.9962(%rip), %rcx
	movl	$7794, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1486:
	movq	-72(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7795, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC273(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1487
	leaq	__PRETTY_FUNCTION__.9962(%rip), %rcx
	movl	$7795, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC273(%rip), %rdi
	call	__assert_fail@PLT
.L1487:
	leaq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -64(%rbp)
	movq	-72(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_defer_modified
	testb	%al, %al
	jne	.L1494
	movq	-72(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7807, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC295(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	jne	.L1490
	leaq	__PRETTY_FUNCTION__.9962(%rip), %rcx
	movl	$7807, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC295(%rip), %rdi
	call	__assert_fail@PLT
.L1490:
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	-72(%rbp), %rax
	leaq	-48(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	testb	%al, %al
	je	.L1491
	movq	-40(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_table_column_for_id
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7813, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC296(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L1492
	leaq	__PRETTY_FUNCTION__.9962(%rip), %rcx
	movl	$7813, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC297(%rip), %rdi
	call	__assert_fail@PLT
.L1492:
	movl	-24(%rbp), %r8d
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	-56(%rbp), %rdi
	movq	-88(%rbp), %rsi
	pushq	$0
	pushq	$1
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	flecs_run_set_systems
	addq	$16, %rsp
.L1491:
	movq	-40(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_mark_dirty
	movq	-72(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	jmp	.L1484
.L1494:
	nop
.L1484:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1493
	call	__stack_chk_fail@PLT
.L1493:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE163:
	.size	ecs_modified_id, .-ecs_modified_id
	.type	assign_ptr_w_id, @function
assign_ptr_w_id:
.LFB164:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$160, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movq	%rdx, -136(%rbp)
	movq	%rcx, -144(%rbp)
	movq	%r8, -152(%rbp)
	movl	%r9d, %edx
	movl	16(%rbp), %eax
	movb	%dl, -156(%rbp)
	movb	%al, -160(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -112(%rbp)
	movq	-128(%rbp), %rax
	testq	%rax, %rax
	jne	.L1496
	movq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, -128(%rbp)
	movq	-112(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -104(%rbp)
	cmpq	$0, -104(%rbp)
	je	.L1496
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-104(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L1496:
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movl	%eax, %ecx
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	-136(%rbp), %rdi
	movq	-112(%rbp), %rsi
	subq	$8, %rsp
	pushq	$0
	pushq	$0
	pushq	-152(%rbp)
	movl	%ecx, %r9d
	movq	%rdi, %r8
	movq	%rdx, %rcx
	movl	$5, %edx
	movq	%rax, %rdi
	call	flecs_defer_set
	addq	$32, %rsp
	testb	%al, %al
	je	.L1497
	movq	-128(%rbp), %rax
	jmp	.L1507
.L1497:
	movq	-128(%rbp), %rsi
	movq	-120(%rbp), %rax
	leaq	-48(%rbp), %rcx
	movq	-136(%rbp), %rdx
	movl	$0, %r8d
	movq	%rax, %rdi
	call	get_mutable
	movq	%rax, -96(%rbp)
	cmpq	$0, -96(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7854, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC147(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -96(%rbp)
	jne	.L1499
	leaq	__PRETTY_FUNCTION__.9979(%rip), %rcx
	movl	$7854, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC148(%rip), %rdi
	call	__assert_fail@PLT
.L1499:
	cmpq	$0, -152(%rbp)
	je	.L1500
	movq	-120(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_typeid
	movq	%rax, -88(%rbp)
	movq	-120(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_c_info
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L1501
	cmpb	$0, -156(%rbp)
	je	.L1502
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L1503
	movq	-80(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-120(%rbp), %rax
	movq	-152(%rbp), %r9
	movq	-96(%rbp), %r8
	leaq	-128(%rbp), %rcx
	leaq	-128(%rbp), %rdx
	movq	-88(%rbp), %rsi
	subq	$8, %rsp
	pushq	%rdi
	pushq	$1
	pushq	-144(%rbp)
	movq	-64(%rbp), %r10
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L1504
.L1503:
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movslq	%eax, %rdx
	movq	-152(%rbp), %rcx
	movq	-96(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	jmp	.L1504
.L1502:
	movq	-80(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L1505
	movq	-80(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-120(%rbp), %rax
	movq	-152(%rbp), %r9
	movq	-96(%rbp), %r8
	leaq	-128(%rbp), %rcx
	leaq	-128(%rbp), %rdx
	movq	-88(%rbp), %rsi
	subq	$8, %rsp
	pushq	%rdi
	pushq	$1
	pushq	-144(%rbp)
	movq	-72(%rbp), %r10
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L1504
.L1505:
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movslq	%eax, %rdx
	movq	-152(%rbp), %rcx
	movq	-96(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	jmp	.L1504
.L1501:
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movslq	%eax, %rdx
	movq	-152(%rbp), %rcx
	movq	-96(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	jmp	.L1504
.L1500:
	movq	-144(%rbp), %rdx
	movq	-96(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
.L1504:
	movq	-40(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_mark_dirty
	cmpb	$0, -160(%rbp)
	je	.L1506
	movq	-40(%rbp), %rcx
	movq	-120(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_table_column_for_id
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %r8d
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-120(%rbp), %rax
	movq	-56(%rbp), %rdi
	movq	-136(%rbp), %rsi
	pushq	$0
	pushq	$1
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	flecs_run_set_systems
	addq	$16, %rsp
.L1506:
	movq	-120(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	movq	-128(%rbp), %rax
.L1507:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1508
	call	__stack_chk_fail@PLT
.L1508:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE164:
	.size	assign_ptr_w_id, .-assign_ptr_w_id
	.section	.rodata
	.align 8
.LC298:
	.string	"!entity || ecs_is_valid(world, entity)"
	.text
	.globl	ecs_set_id
	.type	ecs_set_id, @function
ecs_set_id:
.LFB165:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7904, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1510
	leaq	__PRETTY_FUNCTION__.9992(%rip), %rcx
	movl	$7904, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1510:
	cmpq	$0, -16(%rbp)
	je	.L1511
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	je	.L1512
.L1511:
	movl	$1, %eax
	jmp	.L1513
.L1512:
	movl	$0, %eax
.L1513:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7905, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC298(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	je	.L1514
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1514
	leaq	__PRETTY_FUNCTION__.9992(%rip), %rcx
	movl	$7905, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC298(%rip), %rdi
	call	__assert_fail@PLT
.L1514:
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7906, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC273(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1515
	leaq	__PRETTY_FUNCTION__.9992(%rip), %rcx
	movl	$7906, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC273(%rip), %rdi
	call	__assert_fail@PLT
.L1515:
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	$0, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	assign_ptr_w_id
	addq	$16, %rsp
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE165:
	.size	ecs_set_id, .-ecs_set_id
	.section	.rodata
.LC299:
	.string	"ecs_is_valid(world, sw_id)"
.LC300:
	.string	"index >= 0"
.LC301:
	.string	"info.data != NULL"
.LC302:
	.string	"info.data != ((void *)0)"
	.text
	.globl	ecs_get_case
	.type	ecs_get_case, @function
ecs_get_case:
.LFB166:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7918, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L1518
	leaq	__PRETTY_FUNCTION__.9998(%rip), %rcx
	movl	$7918, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1518:
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7919, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1519
	leaq	__PRETTY_FUNCTION__.9998(%rip), %rcx
	movl	$7919, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1519:
	movq	-104(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7920, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC299(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1520
	leaq	__PRETTY_FUNCTION__.9998(%rip), %rcx
	movl	$7920, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC299(%rip), %rdi
	call	__assert_fail@PLT
.L1520:
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -88(%rbp)
	leaq	-48(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1521
	movq	-40(%rbp), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	jne	.L1522
.L1521:
	movl	$0, %eax
	jmp	.L1527
.L1522:
	movabsq	$-360287970189639680, %rax
	orq	%rax, -104(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-104(%rbp), %rdx
	movq	-64(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -76(%rbp)
	cmpl	$-1, -76(%rbp)
	jne	.L1524
	movl	$0, %eax
	jmp	.L1527
.L1524:
	movq	-72(%rbp), %rax
	movl	120(%rax), %eax
	subl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7939, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC300(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -76(%rbp)
	jns	.L1525
	leaq	__PRETTY_FUNCTION__.9998(%rip), %rcx
	movl	$7939, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC300(%rip), %rdi
	call	__assert_fail@PLT
.L1525:
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7942, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC301(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1526
	leaq	__PRETTY_FUNCTION__.9998(%rip), %rcx
	movl	$7942, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC302(%rip), %rdi
	call	__assert_fail@PLT
.L1526:
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movl	-76(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_get
.L1527:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1528
	call	__stack_chk_fail@PLT
.L1528:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE166:
	.size	ecs_get_case, .-ecs_get_case
	.section	.rodata
.LC303:
	.string	"bs != NULL"
.LC304:
	.string	"bs != ((void *)0)"
	.text
	.globl	ecs_enable_component_w_id
	.type	ecs_enable_component_w_id, @function
ecs_enable_component_w_id:
.LFB167:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movl	%ecx, %eax
	movb	%al, -124(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7953, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	jne	.L1530
	leaq	__PRETTY_FUNCTION__.10010(%rip), %rcx
	movl	$7953, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1530:
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7954, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1531
	leaq	__PRETTY_FUNCTION__.10010(%rip), %rcx
	movl	$7954, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1531:
	movq	-104(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7955, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC273(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1532
	leaq	__PRETTY_FUNCTION__.10010(%rip), %rcx
	movl	$7955, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC273(%rip), %rdi
	call	__assert_fail@PLT
.L1532:
	leaq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -80(%rbp)
	movzbl	-124(%rbp), %edi
	movq	-104(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	-112(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	flecs_defer_enable
	testb	%al, %al
	jne	.L1542
	movq	-80(%rbp), %rax
	movl	8(%rax), %eax
	leal	-1(%rax), %edx
	movq	-80(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-104(%rbp), %rax
	leaq	-48(%rbp), %rdx
	movq	-112(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	movabsq	$72057594037927935, %rax
	andq	-120(%rbp), %rax
	movabsq	$-864691128455135232, %rdx
	orq	%rdx, %rax
	movq	%rax, -72(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$-1, -84(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L1535
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	-72(%rbp), %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -84(%rbp)
.L1535:
	cmpl	$-1, -84(%rbp)
	jne	.L1536
	movq	-104(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	-112(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movzbl	-124(%rbp), %ecx
	movq	-104(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	%rax, %rdi
	call	ecs_enable_component_w_id
	jmp	.L1529
.L1536:
	movq	-64(%rbp), %rax
	movl	128(%rax), %eax
	subl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7986, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC300(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -84(%rbp)
	jns	.L1537
	leaq	__PRETTY_FUNCTION__.10010(%rip), %rcx
	movl	$7986, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC300(%rip), %rdi
	call	__assert_fail@PLT
.L1537:
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7989, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC301(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1538
	leaq	__PRETTY_FUNCTION__.10010(%rip), %rcx
	movl	$7989, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC302(%rip), %rdi
	call	__assert_fail@PLT
.L1538:
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movl	-84(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$7991, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC303(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L1539
	leaq	__PRETTY_FUNCTION__.10010(%rip), %rcx
	movl	$7991, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC304(%rip), %rdi
	call	__assert_fail@PLT
.L1539:
	movzbl	-124(%rbp), %edx
	movl	-24(%rbp), %ecx
	movq	-56(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_set
	jmp	.L1529
.L1542:
	nop
.L1529:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1541
	call	__stack_chk_fail@PLT
.L1541:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE167:
	.size	ecs_enable_component_w_id, .-ecs_enable_component_w_id
	.globl	ecs_is_component_enabled_w_id
	.type	ecs_is_component_enabled_w_id, @function
ecs_is_component_enabled_w_id:
.LFB168:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8001, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -104(%rbp)
	jne	.L1544
	leaq	__PRETTY_FUNCTION__.10022(%rip), %rcx
	movl	$8001, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1544:
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8002, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1545
	leaq	__PRETTY_FUNCTION__.10022(%rip), %rcx
	movl	$8002, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1545:
	movq	-120(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8003, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC273(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-120(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1546
	leaq	__PRETTY_FUNCTION__.10022(%rip), %rcx
	movl	$8003, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC273(%rip), %rdi
	call	__assert_fail@PLT
.L1546:
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -104(%rbp)
	leaq	-48(%rbp), %rdx
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1547
	movq	-40(%rbp), %rax
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	jne	.L1548
.L1547:
	movl	$0, %eax
	jmp	.L1553
.L1548:
	movabsq	$72057594037927935, %rax
	andq	-120(%rbp), %rax
	movabsq	$-864691128455135232, %rdx
	orq	%rdx, %rax
	movq	%rax, -72(%rbp)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -84(%rbp)
	cmpl	$-1, -84(%rbp)
	jne	.L1550
	movq	-120(%rbp), %rdx
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	jmp	.L1553
.L1550:
	movq	-80(%rbp), %rax
	movl	128(%rax), %eax
	subl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8025, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC300(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -84(%rbp)
	jns	.L1551
	leaq	__PRETTY_FUNCTION__.10022(%rip), %rcx
	movl	$8025, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC300(%rip), %rdi
	call	__assert_fail@PLT
.L1551:
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8028, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC301(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	jne	.L1552
	leaq	__PRETTY_FUNCTION__.10022(%rip), %rcx
	movl	$8028, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC302(%rip), %rdi
	call	__assert_fail@PLT
.L1552:
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movl	-84(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_get
.L1553:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1554
	call	__stack_chk_fail@PLT
.L1554:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE168:
	.size	ecs_is_component_enabled_w_id, .-ecs_is_component_enabled_w_id
	.section	.rodata
	.align 8
.LC305:
	.string	"index < table->sw_column_count"
	.text
	.globl	ecs_has_id
	.type	ecs_has_id, @function
ecs_has_id:
.LFB169:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8039, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -104(%rbp)
	jne	.L1556
	leaq	__PRETTY_FUNCTION__.10034(%rip), %rcx
	movl	$8039, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1556:
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8040, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1557
	leaq	__PRETTY_FUNCTION__.10034(%rip), %rcx
	movl	$8040, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1557:
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -104(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-120(%rbp), %rax
	movabsq	$-288230376151711744, %rdx
	cmpq	%rdx, %rax
	jne	.L1558
	leaq	-48(%rbp), %rdx
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_info
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1559
	movq	-40(%rbp), %rax
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	jne	.L1560
.L1559:
	movl	$0, %eax
	jmp	.L1563
.L1560:
	movq	-120(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_switch_from_case
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rax
	movl	116(%rax), %eax
	cmpl	%eax, -92(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8053, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC305(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movl	116(%rax), %eax
	cmpl	%eax, -92(%rbp)
	jl	.L1562
	leaq	__PRETTY_FUNCTION__.10034(%rip), %rcx
	movl	$8053, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC305(%rip), %rdi
	call	__assert_fail@PLT
.L1562:
	movq	-32(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movl	-92(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_get
	movq	%rax, -56(%rbp)
	movabsq	$72057594037927935, %rax
	andq	-120(%rbp), %rax
	cmpq	%rax, -56(%rbp)
	sete	%al
	jmp	.L1563
.L1558:
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_table
	movq	%rax, -88(%rbp)
	cmpq	$0, -88(%rbp)
	jne	.L1564
	movl	$0, %eax
	jmp	.L1563
.L1564:
	movl	$277, %edi
	movq	-88(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-120(%rbp), %rcx
	movq	-88(%rbp), %rsi
	movq	-104(%rbp), %rax
	subq	$8, %rsp
	pushq	$0
	pushq	$0
	pushq	$0
	movq	%rdi, %r9
	movq	%rcx, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_match
	addq	$32, %rsp
	cmpl	$-1, %eax
	setne	%al
.L1563:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1565
	call	__stack_chk_fail@PLT
.L1565:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE169:
	.size	ecs_has_id, .-ecs_has_id
	.globl	ecs_has_type
	.type	ecs_has_type, @function
ecs_has_type:
.LFB170:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8076, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1567
	leaq	__PRETTY_FUNCTION__.10047(%rip), %rcx
	movl	$8076, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1567:
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8077, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1568
	leaq	__PRETTY_FUNCTION__.10047(%rip), %rcx
	movl	$8077, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1568:
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	$1, %r8d
	movl	$1, %ecx
	movq	%rax, %rdi
	call	has_type
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE170:
	.size	ecs_has_type, .-ecs_has_type
	.globl	ecs_get_object
	.type	ecs_get_object, @function
ecs_get_object:
.LFB171:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -60(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8087, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1571
	leaq	__PRETTY_FUNCTION__.10054(%rip), %rcx
	movl	$8087, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1571:
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8088, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC279(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L1572
	leaq	__PRETTY_FUNCTION__.10054(%rip), %rcx
	movl	$8088, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC279(%rip), %rdi
	call	__assert_fail@PLT
.L1572:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -40(%rbp)
	cmpq	$0, -48(%rbp)
	jne	.L1573
	movl	$0, %eax
	jmp	.L1574
.L1573:
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_table
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L1575
	movl	$0, %eax
	jmp	.L1574
.L1575:
	movq	-56(%rbp), %rax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_table_record
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L1576
	movl	$0, %eax
	jmp	.L1574
.L1576:
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	cmpl	%eax, -60(%rbp)
	jl	.L1577
	movl	$0, %eax
	jmp	.L1574
.L1577:
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %edx
	movl	-60(%rbp), %eax
	addl	%edx, %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
.L1574:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE171:
	.size	ecs_get_object, .-ecs_get_object
	.globl	ecs_get_name
	.type	ecs_get_name, @function
ecs_get_name:
.LFB172:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8119, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1579
	leaq	__PRETTY_FUNCTION__.10063(%rip), %rcx
	movl	$8119, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1579:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8120, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1580
	leaq	__PRETTY_FUNCTION__.10063(%rip), %rcx
	movl	$8120, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1580:
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1581
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	jmp	.L1582
.L1581:
	movl	$0, %eax
.L1582:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE172:
	.size	ecs_get_name, .-ecs_get_name
	.globl	ecs_get_symbol
	.type	ecs_get_symbol, @function
ecs_get_symbol:
.LFB173:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8136, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1584
	leaq	__PRETTY_FUNCTION__.10069(%rip), %rcx
	movl	$8136, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1584:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8137, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1585
	leaq	__PRETTY_FUNCTION__.10069(%rip), %rcx
	movl	$8137, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1585:
	movl	$272, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1586
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	jmp	.L1587
.L1586:
	movl	$0, %eax
.L1587:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE173:
	.size	ecs_get_symbol, .-ecs_get_symbol
	.globl	ecs_set_name
	.type	ecs_set_name, @function
ecs_set_name:
.LFB174:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8154, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1589
	leaq	__PRETTY_FUNCTION__.10076(%rip), %rcx
	movl	$8154, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1589:
	cmpq	$0, -48(%rbp)
	jne	.L1590
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, -48(%rbp)
.L1590:
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	leaq	-32(%rbp), %rcx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rcx, %r8
	movl	$24, %ecx
	movq	%rax, %rdi
	call	ecs_set_id
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1592
	call	__stack_chk_fail@PLT
.L1592:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE174:
	.size	ecs_set_name, .-ecs_set_name
	.globl	ecs_set_symbol
	.type	ecs_set_symbol, @function
ecs_set_symbol:
.LFB175:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8170, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1594
	leaq	__PRETTY_FUNCTION__.10083(%rip), %rcx
	movl	$8170, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1594:
	cmpq	$0, -48(%rbp)
	jne	.L1595
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, -48(%rbp)
.L1595:
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$272, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	leaq	-32(%rbp), %rcx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rcx, %r8
	movl	$24, %ecx
	movq	%rax, %rdi
	call	ecs_set_id
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1597
	call	__stack_chk_fail@PLT
.L1597:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE175:
	.size	ecs_set_symbol, .-ecs_set_symbol
	.globl	ecs_type_from_id
	.type	ecs_type_from_id, @function
ecs_type_from_id:
.LFB176:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8187, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L1599
	leaq	__PRETTY_FUNCTION__.10089(%rip), %rcx
	movl	$8187, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1599:
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8188, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC273(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1600
	leaq	__PRETTY_FUNCTION__.10089(%rip), %rcx
	movl	$8188, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC273(%rip), %rdi
	call	__assert_fail@PLT
.L1600:
	movq	-64(%rbp), %rax
	testq	%rax, %rax
	jne	.L1601
	movl	$0, %eax
	jmp	.L1605
.L1601:
	movq	-64(%rbp), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rdx, %rax
	testq	%rax, %rax
	jne	.L1603
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L1603
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	jmp	.L1605
.L1603:
	leaq	-64(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_find_or_create
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8207, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1604
	leaq	__PRETTY_FUNCTION__.10089(%rip), %rcx
	movl	$8207, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L1604:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
.L1605:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1606
	call	__stack_chk_fail@PLT
.L1606:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE176:
	.size	ecs_type_from_id, .-ecs_type_from_id
	.globl	ecs_type_to_id
	.type	ecs_type_to_id, @function
ecs_type_to_id:
.LFB177:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L1608
	movl	$0, %eax
	jmp	.L1609
.L1608:
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	$1, %eax
	je	.L1610
	movl	$0, %ecx
	movl	$8224, %edx
	leaq	.LC74(%rip), %rsi
	movl	$60, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L1610:
	movq	-16(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	(%rax), %rax
.L1609:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE177:
	.size	ecs_type_to_id, .-ecs_type_to_id
	.globl	ecs_make_pair
	.type	ecs_make_pair, @function
ecs_make_pair:
.LFB178:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE178:
	.size	ecs_make_pair, .-ecs_make_pair
	.globl	ecs_is_valid
	.type	ecs_is_valid, @function
ecs_is_valid:
.LFB179:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8241, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1614
	leaq	__PRETTY_FUNCTION__.10105(%rip), %rcx
	movl	$8241, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1614:
	cmpq	$0, -32(%rbp)
	jne	.L1615
	movl	$0, %eax
	jmp	.L1616
.L1615:
	movabsq	$71776119061217280, %rax
	andq	-32(%rbp), %rax
	testq	%rax, %rax
	je	.L1617
	movl	$0, %eax
	jmp	.L1616
.L1617:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -24(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-32(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L1618
	movq	-32(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, -8(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L1619
	cmpq	$0, -8(%rbp)
	je	.L1619
	movl	$1, %eax
	jmp	.L1620
.L1619:
	movl	$0, %eax
.L1620:
	andl	$1, %eax
	jmp	.L1616
.L1618:
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	jns	.L1621
	movq	-32(%rbp), %rax
	testl	%eax, %eax
	setne	%al
	jmp	.L1616
.L1621:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_exists
	xorl	$1, %eax
	testb	%al, %al
	jne	.L1622
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_alive
	testb	%al, %al
	je	.L1623
.L1622:
	movl	$1, %eax
	jmp	.L1624
.L1623:
	movl	$0, %eax
.L1624:
	andl	$1, %eax
.L1616:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE179:
	.size	ecs_is_valid, .-ecs_is_valid
	.globl	ecs_is_alive
	.type	ecs_is_alive, @function
ecs_is_alive:
.LFB180:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8278, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1626
	leaq	__PRETTY_FUNCTION__.10112(%rip), %rcx
	movl	$8278, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1626:
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8279, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC280(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L1627
	leaq	__PRETTY_FUNCTION__.10112(%rip), %rcx
	movl	$8279, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC280(%rip), %rdi
	call	__assert_fail@PLT
.L1627:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_is_alive
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE180:
	.size	ecs_is_alive, .-ecs_is_alive
	.section	.rodata
.LC306:
	.string	"(uint32_t)entity == entity"
	.text
	.globl	ecs_get_alive
	.type	ecs_get_alive, @function
ecs_get_alive:
.LFB181:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8291, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1630
	leaq	__PRETTY_FUNCTION__.10117(%rip), %rcx
	movl	$8291, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1630:
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8292, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC280(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L1631
	leaq	__PRETTY_FUNCTION__.10117(%rip), %rcx
	movl	$8292, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC280(%rip), %rdi
	call	__assert_fail@PLT
.L1631:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_alive
	testb	%al, %al
	je	.L1632
	movq	-32(%rbp), %rax
	jmp	.L1633
.L1632:
	movq	-32(%rbp), %rax
	movl	%eax, %eax
	cmpq	%rax, -32(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8300, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC306(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movl	%eax, %eax
	cmpq	%rax, -32(%rbp)
	je	.L1634
	leaq	__PRETTY_FUNCTION__.10117(%rip), %rcx
	movl	$8300, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC306(%rip), %rdi
	call	__assert_fail@PLT
.L1634:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_get_alive
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1635
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_alive
	xorl	$1, %eax
	testb	%al, %al
	je	.L1636
.L1635:
	movl	$0, %eax
	jmp	.L1633
.L1636:
	movq	-8(%rbp), %rax
.L1633:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE181:
	.size	ecs_get_alive, .-ecs_get_alive
	.globl	ecs_ensure
	.type	ecs_ensure, @function
ecs_ensure:
.LFB182:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8317, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1638
	leaq	__PRETTY_FUNCTION__.10123(%rip), %rcx
	movl	$8317, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1638:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8318, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L1639
	leaq	__PRETTY_FUNCTION__.10123(%rip), %rcx
	movl	$8318, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L1639:
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8319, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC280(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L1640
	leaq	__PRETTY_FUNCTION__.10123(%rip), %rcx
	movl	$8319, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC280(%rip), %rdi
	call	__assert_fail@PLT
.L1640:
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_is_alive
	testb	%al, %al
	jne	.L1643
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_ensure
	jmp	.L1637
.L1643:
	nop
.L1637:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE182:
	.size	ecs_ensure, .-ecs_ensure
	.globl	ecs_exists
	.type	ecs_exists, @function
ecs_exists:
.LFB183:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8335, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1645
	leaq	__PRETTY_FUNCTION__.10128(%rip), %rcx
	movl	$8335, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1645:
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8336, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC280(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L1646
	leaq	__PRETTY_FUNCTION__.10128(%rip), %rcx
	movl	$8336, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC280(%rip), %rdi
	call	__assert_fail@PLT
.L1646:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_exists
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE183:
	.size	ecs_exists, .-ecs_exists
	.globl	ecs_get_table
	.type	ecs_get_table, @function
ecs_get_table:
.LFB184:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8348, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1649
	leaq	__PRETTY_FUNCTION__.10133(%rip), %rcx
	movl	$8348, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1649:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8349, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC274(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1650
	leaq	__PRETTY_FUNCTION__.10133(%rip), %rcx
	movl	$8349, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC274(%rip), %rdi
	call	__assert_fail@PLT
.L1650:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movq	-32(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L1651
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1651
	movq	-8(%rbp), %rax
	jmp	.L1652
.L1651:
	movl	$0, %eax
.L1652:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE184:
	.size	ecs_get_table, .-ecs_get_table
	.globl	ecs_get_type
	.type	ecs_get_type, @function
ecs_get_type:
.LFB185:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_table
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1654
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	jmp	.L1655
.L1654:
	movl	$0, %eax
.L1655:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE185:
	.size	ecs_get_type, .-ecs_get_type
	.globl	ecs_get_typeid
	.type	ecs_get_typeid, @function
ecs_get_typeid:
.LFB186:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8379, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1657
	leaq	__PRETTY_FUNCTION__.10145(%rip), %rcx
	movl	$8379, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1657:
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8380, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC273(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	jne	.L1658
	leaq	__PRETTY_FUNCTION__.10145(%rip), %rcx
	movl	$8380, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC273(%rip), %rdi
	call	__assert_fail@PLT
.L1658:
	movabsq	$-72057594037927936, %rax
	andq	-48(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L1659
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -24(%rbp)
	movl	$270, %edx
	movq	-24(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	je	.L1660
	movl	$0, %eax
	jmp	.L1661
.L1660:
	movq	-24(%rbp), %rcx
	movq	-40(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L1662
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L1662
	movq	-24(%rbp), %rax
	jmp	.L1661
.L1662:
	movq	-48(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rcx
	movq	-40(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L1663
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L1663
	movq	-8(%rbp), %rax
	jmp	.L1661
.L1663:
	movl	$0, %eax
	jmp	.L1661
.L1659:
	movabsq	$-72057594037927936, %rax
	andq	-48(%rbp), %rax
	testq	%rax, %rax
	je	.L1664
	movl	$0, %eax
	jmp	.L1661
.L1664:
	movq	-48(%rbp), %rax
.L1661:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE186:
	.size	ecs_get_typeid, .-ecs_get_typeid
	.globl	ecs_count_type
	.type	ecs_count_type, @function
ecs_count_type:
.LFB187:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1632, %rsp
	movq	%rdi, -1624(%rbp)
	movq	%rsi, -1632(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -1624(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8419, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -1624(%rbp)
	jne	.L1666
	leaq	__PRETTY_FUNCTION__.10153(%rip), %rcx
	movl	$8419, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1666:
	cmpq	$0, -1632(%rbp)
	jne	.L1667
	movl	$0, %eax
	jmp	.L1669
.L1667:
	movq	-1624(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -1624(%rbp)
	leaq	-1616(%rbp), %rdx
	movl	$0, %eax
	movl	$200, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-1632(%rbp), %rax
	movq	%rax, -40(%rbp)
	leaq	-1616(%rbp), %rdx
	movq	-1624(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_count_filter
.L1669:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1670
	call	__stack_chk_fail@PLT
.L1670:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE187:
	.size	ecs_count_type, .-ecs_count_type
	.globl	ecs_count_id
	.type	ecs_count_id, @function
ecs_count_id:
.LFB188:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1680, %rsp
	movq	%rdi, -1672(%rbp)
	movq	%rsi, -1680(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -1672(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8437, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -1672(%rbp)
	jne	.L1672
	leaq	__PRETTY_FUNCTION__.10159(%rip), %rcx
	movl	$8437, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1672:
	movq	-1680(%rbp), %rax
	testq	%rax, %rax
	jne	.L1673
	movl	$0, %eax
	jmp	.L1675
.L1673:
	movq	-1672(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -1672(%rbp)
	movq	$0, -1648(%rbp)
	movq	$0, -1640(%rbp)
	movq	$0, -1632(%rbp)
	movl	$1, -1648(%rbp)
	movl	$1, -1644(%rbp)
	movq	$8, -1640(%rbp)
	leaq	-1648(%rbp), %rax
	movq	%rax, -1656(%rbp)
	movq	-1680(%rbp), %rax
	movq	%rax, -1632(%rbp)
	leaq	-1616(%rbp), %rdx
	movl	$0, %eax
	movl	$200, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-1656(%rbp), %rax
	movq	%rax, -40(%rbp)
	leaq	-1616(%rbp), %rdx
	movq	-1672(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_count_filter
.L1675:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L1676
	call	__stack_chk_fail@PLT
.L1676:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE188:
	.size	ecs_count_id, .-ecs_count_id
	.globl	ecs_count_filter
	.type	ecs_count_filter, @function
ecs_count_filter:
.LFB189:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8458, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1678
	leaq	__PRETTY_FUNCTION__.10173(%rip), %rcx
	movl	$8458, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1678:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L1679
.L1682:
	movl	-28(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -8(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L1680
	movq	-48(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_match_filter
	testb	%al, %al
	je	.L1681
.L1680:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	addl	%eax, -24(%rbp)
.L1681:
	addl	$1, -28(%rbp)
.L1679:
	movl	-28(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L1682
	movl	-24(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE189:
	.size	ecs_count_filter, .-ecs_count_filter
	.globl	ecs_defer_begin
	.type	ecs_defer_begin, @function
ecs_defer_begin:
.LFB190:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8480, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	testq	%rax, %rax
	jne	.L1685
	leaq	__PRETTY_FUNCTION__.10185(%rip), %rcx
	movl	$8480, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1685:
	leaq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_none
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE190:
	.size	ecs_defer_begin, .-ecs_defer_begin
	.globl	ecs_defer_end
	.type	ecs_defer_end, @function
ecs_defer_end:
.LFB191:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8488, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	testq	%rax, %rax
	jne	.L1688
	leaq	__PRETTY_FUNCTION__.10190(%rip), %rcx
	movl	$8488, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1688:
	leaq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE191:
	.size	ecs_defer_end, .-ecs_defer_end
	.type	append_to_str, @function
append_to_str:
.LFB192:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	$0, -24(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L1691
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.L1691:
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movq	%rax, -8(%rbp)
	movq	-56(%rbp), %rax
	cmpq	-8(%rbp), %rax
	jnb	.L1692
	movq	-56(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	$0, -56(%rbp)
	jmp	.L1693
.L1692:
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-8(%rbp), %rax
	subq	%rax, -56(%rbp)
.L1693:
	cmpq	$0, -16(%rbp)
	je	.L1694
	cmpq	$0, -24(%rbp)
	je	.L1694
	movq	-16(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L1694:
	movq	-64(%rbp), %rax
	movq	(%rax), %rdx
	movq	-8(%rbp), %rax
	addq	%rax, %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, (%rax)
	cmpq	$0, -40(%rbp)
	je	.L1695
	movq	-40(%rbp), %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	addq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, (%rax)
.L1695:
	movq	-56(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE192:
	.size	append_to_str, .-append_to_str
	.section	.rodata
.LC307:
	.string	"PAIR"
.LC308:
	.string	"DISABLED"
.LC309:
	.string	"XOR"
.LC310:
	.string	"OR"
.LC311:
	.string	"AND"
.LC312:
	.string	"NOT"
.LC313:
	.string	"SWITCH"
.LC314:
	.string	"CASE"
.LC315:
	.string	"OWNED"
.LC316:
	.string	"UNKNOWN"
	.text
	.globl	ecs_role_str
	.type	ecs_role_str, @function
ecs_role_str:
.LFB193:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L1698
	leaq	.LC307(%rip), %rax
	jmp	.L1699
.L1698:
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-864691128455135232, %rdx
	cmpq	%rdx, %rax
	jne	.L1700
	leaq	.LC308(%rip), %rax
	jmp	.L1699
.L1700:
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-648518346341351424, %rdx
	cmpq	%rdx, %rax
	jne	.L1701
	leaq	.LC309(%rip), %rax
	jmp	.L1699
.L1701:
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-576460752303423488, %rdx
	cmpq	%rdx, %rax
	jne	.L1702
	leaq	.LC310(%rip), %rax
	jmp	.L1699
.L1702:
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-504403158265495552, %rdx
	cmpq	%rdx, %rax
	jne	.L1703
	leaq	.LC311(%rip), %rax
	jmp	.L1699
.L1703:
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-720575940379279360, %rdx
	cmpq	%rdx, %rax
	jne	.L1704
	leaq	.LC312(%rip), %rax
	jmp	.L1699
.L1704:
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-360287970189639680, %rdx
	cmpq	%rdx, %rax
	jne	.L1705
	leaq	.LC313(%rip), %rax
	jmp	.L1699
.L1705:
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-288230376151711744, %rdx
	cmpq	%rdx, %rax
	jne	.L1706
	leaq	.LC314(%rip), %rax
	jmp	.L1699
.L1706:
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-792633534417207296, %rdx
	cmpq	%rdx, %rax
	jne	.L1707
	leaq	.LC315(%rip), %rax
	jmp	.L1699
.L1707:
	leaq	.LC316(%rip), %rax
.L1699:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE193:
	.size	ecs_role_str, .-ecs_role_str
	.section	.rodata
.LC317:
	.string	"|"
.LC318:
	.string	"("
.LC319:
	.string	","
.LC320:
	.string	")"
	.text
	.globl	ecs_id_str
	.type	ecs_id_str, @function
ecs_id_str:
.LFB194:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%rcx, -128(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8568, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -104(%rbp)
	jne	.L1709
	leaq	__PRETTY_FUNCTION__.10210(%rip), %rcx
	movl	$8568, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1709:
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -104(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	$0, -80(%rbp)
	movq	-96(%rbp), %rax
	testq	%rax, %rax
	je	.L1710
	leaq	-96(%rbp), %rax
	movq	%rax, -80(%rbp)
.L1710:
	movq	-128(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -72(%rbp)
	movq	$0, -88(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-112(%rbp), %rax
	testq	%rax, %rax
	je	.L1711
	movabsq	$-72057594037927936, %rax
	andq	-112(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	je	.L1711
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_role_str
	movq	%rax, -48(%rbp)
	leaq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	append_to_str
	movq	%rax, -72(%rbp)
	leaq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-80(%rbp), %rax
	leaq	.LC317(%rip), %rsi
	movq	%rax, %rdi
	call	append_to_str
	movq	%rax, -72(%rbp)
.L1711:
	movabsq	$72057594037927935, %rax
	andq	-112(%rbp), %rax
	movq	%rax, -40(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-112(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L1712
	movq	-112(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -64(%rbp)
	movq	-112(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, -56(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L1713
	movq	-64(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -64(%rbp)
.L1713:
	cmpq	$0, -56(%rbp)
	je	.L1714
	movq	-56(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -56(%rbp)
.L1714:
	cmpq	$0, -56(%rbp)
	je	.L1715
	movq	-56(%rbp), %rdx
	movq	-104(%rbp), %rax
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_get_path_w_sep
	movq	%rax, -24(%rbp)
	leaq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-80(%rbp), %rax
	leaq	.LC318(%rip), %rsi
	movq	%rax, %rdi
	call	append_to_str
	movq	%rax, -72(%rbp)
	leaq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	append_to_str
	movq	%rax, -72(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	leaq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-80(%rbp), %rax
	leaq	.LC319(%rip), %rsi
	movq	%rax, %rdi
	call	append_to_str
	movq	%rax, -72(%rbp)
.L1715:
	movq	-64(%rbp), %rdx
	movq	-104(%rbp), %rax
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_get_path_w_sep
	movq	%rax, -16(%rbp)
	leaq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	append_to_str
	movq	%rax, -72(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	cmpq	$0, -56(%rbp)
	je	.L1716
	leaq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-80(%rbp), %rax
	leaq	.LC320(%rip), %rsi
	movq	%rax, %rdi
	call	append_to_str
	jmp	.L1716
.L1712:
	movq	-40(%rbp), %rdx
	movq	-104(%rbp), %rax
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_get_path_w_sep
	movq	%rax, -32(%rbp)
	leaq	-88(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	append_to_str
	movq	40+ecs_os_api(%rip), %rdx
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1716:
	movq	-96(%rbp), %rax
	testq	%rax, %rax
	je	.L1717
	movq	-96(%rbp), %rax
	movb	$0, (%rax)
.L1717:
	movq	-88(%rbp), %rax
	movq	-8(%rbp), %rdi
	xorq	%fs:40, %rdi
	je	.L1719
	call	__stack_chk_fail@PLT
.L1719:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE194:
	.size	ecs_id_str, .-ecs_id_str
	.section	.rodata
.LC321:
	.string	"cptr != NULL"
.LC322:
	.string	"cptr != ((void *)0)"
	.text
	.type	flush_bulk_new, @function
flush_bulk_new:
.LFB195:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-112(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L1721
	movq	-112(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-112(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -88(%rbp)
	jmp	.L1722
.L1726:
	movl	-88(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_component_from_id
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8635, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC321(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1723
	leaq	__PRETTY_FUNCTION__.10233(%rip), %rcx
	movl	$8635, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC322(%rip), %rdi
	call	__assert_fail@PLT
.L1723:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, -16(%rbp)
	movl	-88(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-112(%rbp), %rax
	movl	48(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$0, -84(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -64(%rbp)
	jmp	.L1724
.L1725:
	movl	-84(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rsi
	movq	-64(%rbp), %rdi
	movq	-16(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-104(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	$1, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	assign_ptr_w_id
	addq	$16, %rsp
	addl	$1, -84(%rbp)
	movq	-64(%rbp), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -64(%rbp)
.L1724:
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jl	.L1725
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	addl	$1, -88(%rbp)
.L1722:
	movl	-88(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jl	.L1726
	movq	40+ecs_os_api(%rip), %rdx
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	jmp	.L1727
.L1721:
	movq	-112(%rbp), %rax
	movl	48(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -80(%rbp)
	jmp	.L1728
.L1729:
	movq	-112(%rbp), %rax
	leaq	16(%rax), %rdx
	movl	-80(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rcx
	movq	-56(%rbp), %rax
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_ids
	addl	$1, -80(%rbp)
.L1728:
	movl	-80(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L1729
.L1727:
	movq	-112(%rbp), %rax
	movl	24(%rax), %eax
	cmpl	$1, %eax
	jle	.L1730
	movq	40+ecs_os_api(%rip), %rdx
	movq	-112(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1730:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE195:
	.size	flush_bulk_new, .-flush_bulk_new
	.type	free_value, @function
free_value:
.LFB196:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movl	%r8d, -100(%rbp)
	movq	-88(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_typeid
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_c_info
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L1735
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L1735
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -56(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -48(%rbp)
	jmp	.L1733
.L1734:
	movq	-32(%rbp), %rax
	movq	32(%rax), %rbx
	movl	-52(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rcx
	movl	-56(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movq	-48(%rbp), %rdx
	movq	-88(%rbp), %rsi
	movq	-72(%rbp), %rax
	subq	$8, %rsp
	pushq	%rbx
	movq	-24(%rbp), %r10
	movl	$1, %r9d
	movq	%rcx, %r8
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	addl	$1, -56(%rbp)
	movl	-52(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -48(%rbp)
.L1733:
	movl	-56(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.L1734
.L1735:
	nop
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE196:
	.size	free_value, .-free_value
	.type	discard_op, @function
discard_op:
.LFB197:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$2, %eax
	jne	.L1737
	movq	-64(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L1738
	movq	-64(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-64(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.L1739
.L1740:
	movq	-64(%rbp), %rax
	movl	48(%rax), %edi
	movl	-48(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rcx
	movl	-48(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	free_value
	movq	40+ecs_os_api(%rip), %rdx
	movl	-48(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rcx
	movq	-32(%rbp), %rax
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	addl	$1, -48(%rbp)
.L1739:
	movl	-48(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L1740
	jmp	.L1738
.L1737:
	movq	-64(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L1738
	movq	-64(%rbp), %rax
	movq	40(%rax), %rcx
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-64(%rbp), %rax
	leaq	32(%rax), %rsi
	movq	-56(%rbp), %rax
	movl	$1, %r8d
	movq	%rax, %rdi
	call	free_value
	movq	40+ecs_os_api(%rip), %rdx
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1738:
	movq	-64(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1742
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1742:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE197:
	.size	discard_op, .-discard_op
	.type	is_entity_valid, @function
is_entity_valid:
.LFB198:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_exists
	testb	%al, %al
	je	.L1744
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_alive
	xorl	$1, %eax
	testb	%al, %al
	je	.L1744
	movl	$0, %eax
	jmp	.L1745
.L1744:
	movl	$1, %eax
.L1745:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE198:
	.size	is_entity_valid, .-is_entity_valid
	.type	remove_invalid, @function
remove_invalid:
.LFB199:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -48(%rbp)
	movq	-80(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L1747
.L1759:
	movl	-52(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movb	$0, -53(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-32(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L1748
	movq	-32(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L1749
	movq	-24(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	is_entity_valid
	xorl	$1, %eax
	testb	%al, %al
	je	.L1750
.L1749:
	movb	$1, -53(%rbp)
	jmp	.L1757
.L1750:
	movq	-32(%rbp), %rax
	movl	%eax, %edx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L1752
	movq	-16(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	is_entity_valid
	xorl	$1, %eax
	testb	%al, %al
	je	.L1757
.L1752:
	movq	-24(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1753
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movl	$306, %edx
	cmpq	%rdx, %rax
	jne	.L1754
.L1753:
	movb	$1, -53(%rbp)
	jmp	.L1757
.L1754:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movl	$307, %edx
	cmpq	%rdx, %rax
	jne	.L1755
	movl	$0, %eax
	jmp	.L1756
.L1755:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movl	$308, %edx
	cmpq	%rdx, %rax
	jne	.L1757
	movq	-32(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	throw_invalid_delete
	jmp	.L1757
.L1748:
	movabsq	$72057594037927935, %rax
	andq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	is_entity_valid
	xorl	$1, %eax
	testb	%al, %al
	je	.L1757
	movb	$1, -53(%rbp)
.L1757:
	cmpb	$0, -53(%rbp)
	je	.L1758
	addl	$1, -48(%rbp)
	subl	$1, -44(%rbp)
.L1758:
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movl	-52(%rbp), %ecx
	movl	-48(%rbp), %edx
	addl	%ecx, %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	leaq	(%rax,%rdx), %rcx
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movl	-52(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rax, %rdx
	movq	(%rcx), %rax
	movq	%rax, (%rdx)
	addl	$1, -52(%rbp)
.L1747:
	movl	-52(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L1759
	movq	-80(%rbp), %rax
	movl	-44(%rbp), %edx
	movl	%edx, 8(%rax)
	movl	$1, %eax
.L1756:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE199:
	.size	remove_invalid, .-remove_invalid
	.section	.rodata
.LC323:
	.string	"stage != NULL"
.LC324:
	.string	"stage != ((void *)0)"
	.align 8
.LC325:
	.string	"op->kind != EcsOpNew && op->kind != EcsOpClone"
	.text
	.globl	flecs_defer_flush
	.type	flecs_defer_flush, @function
flecs_defer_flush:
.LFB200:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8792, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L1761
	leaq	__PRETTY_FUNCTION__.10304(%rip), %rcx
	movl	$8792, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1761:
	cmpq	$0, -80(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8793, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC323(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	jne	.L1762
	leaq	__PRETTY_FUNCTION__.10304(%rip), %rcx
	movl	$8793, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC324(%rip), %rdi
	call	__assert_fail@PLT
.L1762:
	movq	-80(%rbp), %rax
	movl	8(%rax), %eax
	leal	-1(%rax), %edx
	movq	-80(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-80(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jne	.L1763
	movq	-80(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-80(%rbp), %rax
	movq	$0, 16(%rax)
	cmpq	$0, -40(%rbp)
	je	.L1764
	movq	-40(%rbp), %rax
	movl	$16, %edx
	movl	$56, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -52(%rbp)
	movl	$0, -56(%rbp)
	jmp	.L1765
.L1790:
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$3, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$2, %eax
	jne	.L1766
	movq	$0, -48(%rbp)
.L1766:
	cmpq	$0, -48(%rbp)
	je	.L1767
	movq	-48(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_alive
	xorl	$1, %eax
	testb	%al, %al
	je	.L1767
	movq	-72(%rbp), %rax
	movq	40(%rax), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_exists
	testb	%al, %al
	je	.L1767
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L1768
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1, %eax
	je	.L1768
	movl	$1, %eax
	jmp	.L1769
.L1768:
	movl	$0, %eax
.L1769:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8818, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC325(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L1770
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1, %eax
	jne	.L1793
.L1770:
	leaq	__PRETTY_FUNCTION__.10304(%rip), %rcx
	movl	$8818, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC325(%rip), %rdi
	call	__assert_fail@PLT
.L1793:
	movq	-72(%rbp), %rax
	movl	676(%rax), %eax
	leal	1(%rax), %edx
	movq	-72(%rbp), %rax
	movl	%edx, 676(%rax)
	movq	-24(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	discard_op
	jmp	.L1772
.L1767:
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	cmpl	$1, %eax
	jne	.L1773
	movq	-24(%rbp), %rax
	leaq	8(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, 16(%rax)
.L1773:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$11, %eax
	ja	.L1774
	movl	%eax, %eax
	leaq	0(,%rax,4), %rdx
	leaq	.L1776(%rip), %rax
	movl	(%rdx,%rax), %eax
	cltq
	leaq	.L1776(%rip), %rdx
	addq	%rdx, %rax
	notrack jmp	*%rax
	.section	.rodata
	.align 4
	.align 4
.L1776:
	.long	.L1784-.L1776
	.long	.L1786-.L1776
	.long	.L1785-.L1776
	.long	.L1784-.L1776
	.long	.L1783-.L1776
	.long	.L1782-.L1776
	.long	.L1781-.L1776
	.long	.L1780-.L1776
	.long	.L1779-.L1776
	.long	.L1778-.L1776
	.long	.L1777-.L1776
	.long	.L1775-.L1776
	.text
.L1784:
	movq	-24(%rbp), %rax
	leaq	16(%rax), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	remove_invalid
	testb	%al, %al
	je	.L1787
	movq	-72(%rbp), %rax
	movl	664(%rax), %eax
	leal	1(%rax), %edx
	movq	-72(%rbp), %rax
	movl	%edx, 664(%rax)
	movq	-24(%rbp), %rax
	leaq	16(%rax), %rdx
	movq	-48(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_ids
	jmp	.L1774
.L1787:
	movq	-48(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_delete
	jmp	.L1774
.L1783:
	movq	-24(%rbp), %rax
	leaq	16(%rax), %rdx
	movq	-48(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	remove_ids
	jmp	.L1774
.L1786:
	movq	-24(%rbp), %rax
	movzbl	52(%rax), %eax
	movzbl	%al, %ecx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-48(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_clone
	jmp	.L1774
.L1782:
	movq	-24(%rbp), %rax
	movq	40(%rax), %rbx
	movq	-24(%rbp), %rax
	movl	48(%rax), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rcx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-48(%rbp), %rsi
	movq	-72(%rbp), %rax
	subq	$8, %rsp
	pushq	$1
	movl	$1, %r9d
	movq	%rbx, %r8
	movq	%rax, %rdi
	call	assign_ptr_w_id
	addq	$16, %rsp
	jmp	.L1774
.L1781:
	movq	-24(%rbp), %rax
	movq	40(%rax), %rbx
	movq	-24(%rbp), %rax
	movl	48(%rax), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rcx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-48(%rbp), %rsi
	movq	-72(%rbp), %rax
	subq	$8, %rsp
	pushq	$0
	movl	$1, %r9d
	movq	%rbx, %r8
	movq	%rax, %rdi
	call	assign_ptr_w_id
	addq	$16, %rsp
	jmp	.L1774
.L1780:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-48(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_modified_id
	jmp	.L1774
.L1779:
	movq	-48(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_delete
	jmp	.L1774
.L1777:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-48(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_enable_component_w_id
	jmp	.L1774
.L1775:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-48(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_enable_component_w_id
	jmp	.L1774
.L1778:
	movq	-48(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_clear
	jmp	.L1774
.L1785:
	movq	-24(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flush_bulk_new
	jmp	.L1772
.L1774:
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	cmpl	$1, %eax
	jle	.L1789
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1789:
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	testq	%rax, %rax
	je	.L1772
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1772:
	addl	$1, -56(%rbp)
.L1765:
	movl	-56(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L1790
	movq	-80(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L1791
	movq	-80(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
.L1791:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_clear
	movq	-80(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 16(%rax)
.L1764:
	movl	$1, %eax
	jmp	.L1792
.L1763:
	movl	$0, %eax
.L1792:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE200:
	.size	flecs_defer_flush, .-flecs_defer_flush
	.globl	flecs_defer_purge
	.type	flecs_defer_purge, @function
flecs_defer_purge:
.LFB201:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8910, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1795
	leaq	__PRETTY_FUNCTION__.10332(%rip), %rcx
	movl	$8910, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1795:
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8911, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC323(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L1796
	leaq	__PRETTY_FUNCTION__.10332(%rip), %rcx
	movl	$8911, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC324(%rip), %rdi
	call	__assert_fail@PLT
.L1796:
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	leal	-1(%rax), %edx
	movq	-48(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jne	.L1797
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movq	$0, 16(%rax)
	cmpq	$0, -16(%rbp)
	je	.L1798
	movq	-16(%rbp), %rax
	movl	$16, %edx
	movl	$56, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L1799
.L1800:
	movl	-24(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$3, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	addq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	discard_op
	addl	$1, -24(%rbp)
.L1799:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L1800
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L1801
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
.L1801:
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_clear
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 16(%rax)
.L1798:
	movl	$1, %eax
	jmp	.L1802
.L1797:
	movl	$0, %eax
.L1802:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE201:
	.size	flecs_defer_purge, .-flecs_defer_purge
	.type	new_defer_op, @function
new_defer_op:
.LFB202:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movl	$16, %edx
	movl	$56, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$56, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE202:
	.size	new_defer_op, .-new_defer_op
	.section	.rodata
.LC326:
	.string	"components != NULL"
.LC327:
	.string	"components != ((void *)0)"
	.text
	.type	new_defer_component_ids, @function
new_defer_component_ids:
.LFB203:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$8951, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC326(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L1806
	leaq	__PRETTY_FUNCTION__.10348(%rip), %rcx
	movl	$8951, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC327(%rip), %rdi
	call	__assert_fail@PLT
.L1806:
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -16(%rbp)
	cmpl	$1, -16(%rbp)
	jne	.L1807
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 24(%rax)
	jmp	.L1810
.L1807:
	cmpl	$0, -16(%rbp)
	je	.L1809
	movl	-16(%rbp), %eax
	sall	$3, %eax
	movl	%eax, -12(%rbp)
	movq	16+ecs_os_api(%rip), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %edi
	call	*%rdx
	movq	-24(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	movl	%edx, 24(%rax)
	jmp	.L1810
.L1809:
	movq	-24(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 16(%rax)
	movq	$0, 24(%rax)
.L1810:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE203:
	.size	new_defer_component_ids, .-new_defer_component_ids
	.type	defer_add_remove, @function
defer_add_remove:
.LFB204:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L1812
	cmpq	$0, -56(%rbp)
	je	.L1813
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jne	.L1813
	movl	$1, %eax
	jmp	.L1814
.L1813:
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	new_defer_op
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	-36(%rbp), %edx
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 32(%rax)
	movq	-56(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	new_defer_component_ids
	cmpl	$0, -36(%rbp)
	jne	.L1815
	movq	-24(%rbp), %rax
	movl	648(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 648(%rax)
	jmp	.L1816
.L1815:
	cmpl	$3, -36(%rbp)
	jne	.L1817
	movq	-24(%rbp), %rax
	movl	664(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 664(%rax)
	jmp	.L1816
.L1817:
	cmpl	$4, -36(%rbp)
	jne	.L1816
	movq	-24(%rbp), %rax
	movl	668(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 668(%rax)
.L1816:
	movl	$1, %eax
	jmp	.L1814
.L1812:
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-32(%rbp), %rax
	movl	%edx, 8(%rax)
	movl	$0, %eax
.L1814:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE204:
	.size	defer_add_remove, .-defer_add_remove
	.section	.rodata
.LC328:
	.string	"s->magic == ECS_STAGE_MAGIC"
.LC329:
	.string	"s->magic == (0x65637374)"
	.text
	.type	merge_stages, @function
merge_stages:
.LFB205:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movl	%esi, %eax
	movb	%al, -60(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	sete	%al
	movb	%al, -42(%rbp)
	leaq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movzbl	683(%rax), %eax
	movb	%al, -41(%rbp)
	cmpb	$0, -41(%rbp)
	je	.L1819
	movq	168+ecs_os_api(%rip), %rdx
	leaq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L1819:
	cmpb	$0, -42(%rbp)
	je	.L1820
	cmpb	$0, -60(%rbp)
	jne	.L1821
	movq	-32(%rbp), %rax
	movzbl	80(%rax), %eax
	testb	%al, %al
	je	.L1822
.L1821:
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_defer_end
	jmp	.L1822
.L1820:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -36(%rbp)
	movl	$0, -40(%rbp)
	jmp	.L1823
.L1827:
	movq	-56(%rbp), %rax
	movl	-40(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_get_stage
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9037, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC328(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L1824
	leaq	__PRETTY_FUNCTION__.10373(%rip), %rcx
	movl	$9037, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC329(%rip), %rdi
	call	__assert_fail@PLT
.L1824:
	cmpb	$0, -60(%rbp)
	jne	.L1825
	movq	-24(%rbp), %rax
	movzbl	80(%rax), %eax
	testb	%al, %al
	je	.L1826
.L1825:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_defer_end
.L1826:
	addl	$1, -40(%rbp)
.L1823:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L1827
.L1822:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_eval_component_monitors
	cmpb	$0, -41(%rbp)
	je	.L1828
	leaq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_time_measure
	cvtsd2ss	%xmm0, %xmm1
	movq	-56(%rbp), %rax
	movss	584(%rax), %xmm0
	movq	-56(%rbp), %rax
	addss	%xmm1, %xmm0
	movss	%xmm0, 584(%rax)
.L1828:
	movq	-56(%rbp), %rax
	movl	600(%rax), %edx
	addl	$1, %edx
	movl	%edx, 600(%rax)
	movq	-32(%rbp), %rax
	movzbl	81(%rax), %eax
	testb	%al, %al
	je	.L1831
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_defer_begin
.L1831:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L1830
	call	__stack_chk_fail@PLT
.L1830:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE205:
	.size	merge_stages, .-merge_stages
	.type	do_auto_merge, @function
do_auto_merge:
.LFB206:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	merge_stages
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE206:
	.size	do_auto_merge, .-do_auto_merge
	.type	do_manual_merge, @function
do_manual_merge:
.LFB207:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	merge_stages
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE207:
	.size	do_manual_merge, .-do_manual_merge
	.globl	flecs_defer_none
	.type	flecs_defer_none, @function
flecs_defer_none:
.LFB208:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$1, %eax
	sete	%al
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE208:
	.size	flecs_defer_none, .-flecs_defer_none
	.globl	flecs_defer_modified
	.type	flecs_defer_modified, @function
flecs_defer_modified:
.LFB209:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L1837
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	new_defer_op
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$7, (%rax)
	movq	-8(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 32(%rax)
	movl	$1, %eax
	jmp	.L1838
.L1837:
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-32(%rbp), %rax
	movl	%edx, 8(%rax)
	movl	$0, %eax
.L1838:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE209:
	.size	flecs_defer_modified, .-flecs_defer_modified
	.globl	flecs_defer_clone
	.type	flecs_defer_clone, @function
flecs_defer_clone:
.LFB210:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movl	%r8d, %eax
	movb	%al, -52(%rbp)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L1840
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	new_defer_op
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, (%rax)
	movq	-8(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 32(%rax)
	movq	-8(%rbp), %rax
	movzbl	-52(%rbp), %edx
	movb	%dl, 52(%rax)
	movl	$1, %eax
	jmp	.L1841
.L1840:
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-32(%rbp), %rax
	movl	%edx, 8(%rax)
	movl	$0, %eax
.L1841:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE210:
	.size	flecs_defer_clone, .-flecs_defer_clone
	.globl	flecs_defer_delete
	.type	flecs_defer_delete, @function
flecs_defer_delete:
.LFB211:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L1843
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	new_defer_op
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$8, (%rax)
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	656(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 656(%rax)
	movl	$1, %eax
	jmp	.L1844
.L1843:
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-32(%rbp), %rax
	movl	%edx, 8(%rax)
	movl	$0, %eax
.L1844:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE211:
	.size	flecs_defer_delete, .-flecs_defer_delete
	.globl	flecs_defer_clear
	.type	flecs_defer_clear, @function
flecs_defer_clear:
.LFB212:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L1846
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	new_defer_op
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$9, (%rax)
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	660(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 660(%rax)
	movl	$1, %eax
	jmp	.L1847
.L1846:
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-32(%rbp), %rax
	movl	%edx, 8(%rax)
	movl	$0, %eax
.L1847:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE212:
	.size	flecs_defer_clear, .-flecs_defer_clear
	.globl	flecs_defer_enable
	.type	flecs_defer_enable, @function
flecs_defer_enable:
.LFB213:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movl	%r8d, %eax
	movb	%al, -52(%rbp)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L1849
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	new_defer_op
	movq	%rax, -8(%rbp)
	cmpb	$0, -52(%rbp)
	je	.L1850
	movl	$10, %edx
	jmp	.L1851
.L1850:
	movl	$11, %edx
.L1851:
	movq	-8(%rbp), %rax
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 32(%rax)
	movq	-8(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movl	$1, %eax
	jmp	.L1852
.L1849:
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-32(%rbp), %rax
	movl	%edx, 8(%rax)
	movl	$0, %eax
.L1852:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE213:
	.size	flecs_defer_enable, .-flecs_defer_enable
	.globl	flecs_defer_bulk_new
	.type	flecs_defer_bulk_new, @function
flecs_defer_bulk_new:
.LFB214:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movl	%edx, -148(%rbp)
	movq	%rcx, -160(%rbp)
	movq	%r8, -168(%rbp)
	movq	%r9, -176(%rbp)
	movq	-144(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L1854
	movq	16+ecs_os_api(%rip), %rax
	movl	-148(%rbp), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -96(%rbp)
	movq	$0, -112(%rbp)
	movq	-136(%rbp), %rax
	movl	652(%rax), %eax
	leal	1(%rax), %edx
	movq	-136(%rbp), %rax
	movl	%edx, 652(%rax)
	movl	$0, -128(%rbp)
	jmp	.L1855
.L1856:
	movl	-128(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movq	-136(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, (%rbx)
	addl	$1, -128(%rbp)
.L1855:
	movl	-128(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jl	.L1856
	cmpq	$0, -168(%rbp)
	je	.L1857
	movq	-160(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -120(%rbp)
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	16+ecs_os_api(%rip), %rax
	movl	-120(%rbp), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -112(%rbp)
	movl	$0, -124(%rbp)
	jmp	.L1858
.L1865:
	movl	-124(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_component_from_id
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9207, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC321(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L1859
	leaq	__PRETTY_FUNCTION__.10441(%rip), %rcx
	movl	$9207, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC322(%rip), %rdi
	call	__assert_fail@PLT
.L1859:
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -116(%rbp)
	movq	16+ecs_os_api(%rip), %rdx
	movl	-116(%rbp), %eax
	imull	-148(%rbp), %eax
	movl	%eax, %edi
	call	*%rdx
	movq	%rax, -64(%rbp)
	movl	-124(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-112(%rbp), %rax
	addq	%rax, %rdx
	movq	-64(%rbp), %rax
	movq	%rax, (%rdx)
	movq	$0, -104(%rbp)
	movq	-80(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_typeid
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L1860
	movq	-56(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_c_info
	movq	%rax, -104(%rbp)
.L1860:
	cmpq	$0, -104(%rbp)
	je	.L1861
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L1861
	movq	-104(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-116(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movl	-148(%rbp), %r8d
	movq	-64(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-136(%rbp), %rax
	subq	$8, %rsp
	pushq	-40(%rbp)
	movq	-48(%rbp), %r10
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L1862
	movl	-116(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movl	-124(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-168(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %r9
	movq	-64(%rbp), %r11
	movq	-96(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-136(%rbp), %rax
	subq	$8, %rsp
	pushq	-40(%rbp)
	movl	-148(%rbp), %r8d
	pushq	%r8
	pushq	%rdi
	movq	-32(%rbp), %r10
	movq	%r11, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L1864
.L1862:
	movl	-116(%rbp), %eax
	imull	-148(%rbp), %eax
	movslq	%eax, %rdx
	movl	-124(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rcx
	movq	-168(%rbp), %rax
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	-64(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	jmp	.L1864
.L1861:
	movl	-116(%rbp), %eax
	imull	-148(%rbp), %eax
	movslq	%eax, %rdx
	movl	-124(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rcx
	movq	-168(%rbp), %rax
	addq	%rcx, %rax
	movq	(%rax), %rcx
	movq	-64(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L1864:
	addl	$1, -124(%rbp)
.L1858:
	movl	-124(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jl	.L1865
.L1857:
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	new_defer_op
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-24(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, 32(%rax)
	movq	-24(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rdx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	-148(%rbp), %edx
	movl	%edx, 48(%rax)
	movq	-160(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	new_defer_component_ids
	movq	-176(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, (%rax)
	movl	$1, %eax
	jmp	.L1866
.L1854:
	movq	-144(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-144(%rbp), %rax
	movl	%edx, 8(%rax)
	movl	$0, %eax
.L1866:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE214:
	.size	flecs_defer_bulk_new, .-flecs_defer_bulk_new
	.globl	flecs_defer_new
	.type	flecs_defer_new, @function
flecs_defer_new:
.LFB215:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rcx, %r8
	movq	%rdx, %rcx
	movl	$0, %edx
	movq	%rax, %rdi
	call	defer_add_remove
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE215:
	.size	flecs_defer_new, .-flecs_defer_new
	.globl	flecs_defer_add
	.type	flecs_defer_add, @function
flecs_defer_add:
.LFB216:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rcx, %r8
	movq	%rdx, %rcx
	movl	$3, %edx
	movq	%rax, %rdi
	call	defer_add_remove
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE216:
	.size	flecs_defer_add, .-flecs_defer_add
	.globl	flecs_defer_remove
	.type	flecs_defer_remove, @function
flecs_defer_remove:
.LFB217:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rcx, %r8
	movq	%rdx, %rcx
	movl	$4, %edx
	movq	%rax, %rdi
	call	defer_add_remove
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE217:
	.size	flecs_defer_remove, .-flecs_defer_remove
	.globl	flecs_defer_set
	.type	flecs_defer_set, @function
flecs_defer_set:
.LFB218:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -96(%rbp)
	movq	%r8, -104(%rbp)
	movl	%r9d, -88(%rbp)
	movq	-80(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L1874
	movq	-72(%rbp), %rax
	movl	672(%rax), %eax
	leal	1(%rax), %edx
	movq	-72(%rbp), %rax
	movl	%edx, 672(%rax)
	cmpl	$0, -88(%rbp)
	jne	.L1875
	movq	-104(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_component_from_id
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9294, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC321(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L1876
	leaq	__PRETTY_FUNCTION__.10483(%rip), %rcx
	movl	$9294, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC322(%rip), %rdi
	call	__assert_fail@PLT
.L1876:
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -88(%rbp)
.L1875:
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	new_defer_op
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	-84(%rbp), %edx
	movl	%edx, (%rax)
	movq	-48(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-96(%rbp), %rdx
	movq	-48(%rbp), %rax
	movq	%rdx, 32(%rax)
	movq	-48(%rbp), %rax
	movl	-88(%rbp), %edx
	movl	%edx, 48(%rax)
	movq	16+ecs_os_api(%rip), %rdx
	movl	-88(%rbp), %eax
	movl	%eax, %edi
	call	*%rdx
	movq	-48(%rbp), %rdx
	movq	%rax, 40(%rdx)
	cmpq	$0, 16(%rbp)
	jne	.L1877
	movq	-96(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, 16(%rbp)
	cmpq	$0, 32(%rbp)
	je	.L1877
	cmpq	$0, 16(%rbp)
	sete	%dl
	movq	32(%rbp), %rax
	movb	%dl, (%rax)
.L1877:
	movq	$0, -64(%rbp)
	movq	-104(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_typeid
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L1878
	movq	-40(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_c_info
	movq	%rax, -64(%rbp)
.L1878:
	cmpq	$0, 16(%rbp)
	je	.L1879
	cmpq	$0, -64(%rbp)
	je	.L1880
	movq	-64(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L1880
	movq	-64(%rbp), %rax
	movq	32(%rax), %rbx
	movl	-88(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-48(%rbp), %rax
	movq	40(%rax), %r9
	movq	-64(%rbp), %rdx
	leaq	-96(%rbp), %r8
	leaq	-96(%rbp), %rcx
	movq	-104(%rbp), %rsi
	movq	-72(%rbp), %rax
	pushq	%rbx
	pushq	$1
	pushq	%rdi
	pushq	16(%rbp)
	movq	-24(%rbp), %r10
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L1882
.L1880:
	movl	-88(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	jmp	.L1882
.L1879:
	cmpq	$0, -64(%rbp)
	je	.L1882
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L1882
	movq	-64(%rbp), %rax
	movq	32(%rax), %rbx
	movl	-88(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-48(%rbp), %rax
	movq	40(%rax), %rcx
	leaq	-96(%rbp), %rdx
	movq	-104(%rbp), %rsi
	movq	-72(%rbp), %rax
	subq	$8, %rsp
	pushq	%rbx
	movq	-32(%rbp), %r10
	movl	$1, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
.L1882:
	cmpq	$0, 24(%rbp)
	je	.L1883
	movq	-48(%rbp), %rax
	movq	40(%rax), %rdx
	movq	24(%rbp), %rax
	movq	%rdx, (%rax)
.L1883:
	movl	$1, %eax
	jmp	.L1884
.L1874:
	movq	-80(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-80(%rbp), %rax
	movl	%edx, 8(%rax)
	movl	$0, %eax
.L1884:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE218:
	.size	flecs_defer_set, .-flecs_defer_set
	.globl	flecs_stage_merge_post_frame
	.type	flecs_stage_merge_post_frame, @function
flecs_stage_merge_post_frame:
.LFB219:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movq	-48(%rbp), %rax
	movq	48(%rax), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L1886
.L1887:
	movl	-24(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	addl	$1, -24(%rbp)
.L1886:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L1887
	movq	-48(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-48(%rbp), %rax
	movq	$0, 48(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE219:
	.size	flecs_stage_merge_post_frame, .-flecs_stage_merge_post_frame
	.globl	flecs_stage_init
	.type	flecs_stage_init, @function
flecs_stage_init:
.LFB220:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9364, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1889
	leaq	__PRETTY_FUNCTION__.10504(%rip), %rcx
	movl	$9364, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1889:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9365, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L1890
	leaq	__PRETTY_FUNCTION__.10504(%rip), %rcx
	movl	$9365, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L1890:
	movq	-16(%rbp), %rax
	movl	$88, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	movq	-16(%rbp), %rax
	movl	$1701016436, (%rax)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 32(%rax)
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 24(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 80(%rax)
	movq	-16(%rbp), %rax
	movb	$0, 81(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE220:
	.size	flecs_stage_init, .-flecs_stage_init
	.section	.rodata
	.align 8
.LC330:
	.string	"stage->magic == ECS_STAGE_MAGIC"
.LC331:
	.string	"stage->magic == (0x65637374)"
	.align 8
.LC332:
	.string	"ecs_vector_count(stage->defer_queue) == 0"
	.text
	.globl	flecs_stage_deinit
	.type	flecs_stage_deinit, @function
flecs_stage_deinit:
.LFB221:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9381, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L1892
	leaq	__PRETTY_FUNCTION__.10509(%rip), %rcx
	movl	$9381, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L1892:
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9382, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC330(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L1893
	leaq	__PRETTY_FUNCTION__.10509(%rip), %rcx
	movl	$9382, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC331(%rip), %rdi
	call	__assert_fail@PLT
.L1893:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9385, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC332(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	je	.L1894
	leaq	__PRETTY_FUNCTION__.10509(%rip), %rcx
	movl	$9385, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC332(%rip), %rdi
	call	__assert_fail@PLT
.L1894:
	movq	-16(%rbp), %rax
	movl	$0, (%rax)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE221:
	.size	flecs_stage_deinit, .-flecs_stage_deinit
	.section	.rodata
	.align 8
.LC333:
	.string	"stages[i].magic == ECS_STAGE_MAGIC"
	.align 8
.LC334:
	.string	"stages[i].magic == (0x65637374)"
.LC335:
	.string	"stages[i].thread == 0"
	.text
	.globl	ecs_set_stages
	.type	ecs_set_stages, @function
ecs_set_stages:
.LFB222:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9399, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1896
	leaq	__PRETTY_FUNCTION__.10514(%rip), %rcx
	movl	$9399, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1896:
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9400, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L1897
	leaq	__PRETTY_FUNCTION__.10514(%rip), %rcx
	movl	$9400, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L1897:
	movq	-40(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	je	.L1898
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.L1898
	movq	-40(%rbp), %rax
	movq	456(%rax), %rax
	movl	$16, %edx
	movl	$88, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L1899
.L1902:
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9412, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC333(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L1900
	leaq	__PRETTY_FUNCTION__.10514(%rip), %rcx
	movl	$9412, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC334(%rip), %rdi
	call	__assert_fail@PLT
.L1900:
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	40(%rax), %rax
	testq	%rax, %rax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9414, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC335(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	40(%rax), %rax
	testq	%rax, %rax
	je	.L1901
	leaq	__PRETTY_FUNCTION__.10514(%rip), %rcx
	movl	$9414, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC335(%rip), %rdi
	call	__assert_fail@PLT
.L1901:
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_stage_deinit
	addl	$1, -32(%rbp)
.L1899:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L1902
	movq	-40(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
.L1898:
	cmpl	$0, -44(%rbp)
	je	.L1903
	movl	-44(%rbp), %eax
	movl	%eax, %edx
	movl	$16, %esi
	movl	$88, %edi
	call	_ecs_vector_new
	movq	-40(%rbp), %rdx
	movq	%rax, 456(%rdx)
	movl	$0, -32(%rbp)
	jmp	.L1904
.L1905:
	movq	-40(%rbp), %rax
	addq	$456, %rax
	movl	$16, %edx
	movl	$88, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_stage_init
	movl	-32(%rbp), %eax
	leal	1(%rax), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	-16(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 24(%rax)
	addl	$1, -32(%rbp)
.L1904:
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L1905
	jmp	.L1906
.L1903:
	movq	-40(%rbp), %rax
	movq	$0, 456(%rax)
.L1906:
	movl	$0, -32(%rbp)
	jmp	.L1907
.L1908:
	movl	-32(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_get_stage
	movq	%rax, -8(%rbp)
	movq	-40(%rbp), %rax
	movzbl	448(%rax), %edx
	movq	-8(%rbp), %rax
	movb	%dl, 80(%rax)
	addl	$1, -32(%rbp)
.L1907:
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L1908
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE222:
	.size	ecs_set_stages, .-ecs_set_stages
	.globl	ecs_get_stage_count
	.type	ecs_get_stage_count, @function
ecs_get_stage_count:
.LFB223:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE223:
	.size	ecs_get_stage_count, .-ecs_get_stage_count
	.globl	ecs_get_stage_id
	.type	ecs_get_stage_id, @function
ecs_get_stage_id:
.LFB224:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9458, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1912
	leaq	__PRETTY_FUNCTION__.10535(%rip), %rcx
	movl	$9458, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1912:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	jne	.L1913
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	jmp	.L1914
.L1913:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	jne	.L1915
	movl	$0, %eax
	jmp	.L1914
.L1915:
	movl	$0, %ecx
	movl	$9468, %edx
	leaq	.LC74(%rip), %rsi
	movl	$7, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L1914:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE224:
	.size	ecs_get_stage_id, .-ecs_get_stage_id
	.section	.rodata
	.align 8
.LC336:
	.string	"ecs_vector_count(world->worker_stages) > stage_id"
	.text
	.globl	ecs_get_stage
	.type	ecs_get_stage, @function
ecs_get_stage:
.LFB225:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9476, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1917
	leaq	__PRETTY_FUNCTION__.10541(%rip), %rcx
	movl	$9476, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1917:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9477, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L1918
	leaq	__PRETTY_FUNCTION__.10541(%rip), %rcx
	movl	$9477, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L1918:
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -12(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9478, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC336(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -12(%rbp)
	jl	.L1919
	leaq	__PRETTY_FUNCTION__.10541(%rip), %rcx
	movl	$9478, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC336(%rip), %rdi
	call	__assert_fail@PLT
.L1919:
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movl	-12(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$88, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE225:
	.size	ecs_get_stage, .-ecs_get_stage
	.globl	ecs_staging_begin
	.type	ecs_staging_begin, @function
ecs_staging_begin:
.LFB226:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9488, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1922
	leaq	__PRETTY_FUNCTION__.10545(%rip), %rcx
	movl	$9488, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1922:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9489, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L1923
	leaq	__PRETTY_FUNCTION__.10545(%rip), %rcx
	movl	$9489, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L1923:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -4(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L1924
.L1925:
	movl	-8(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_get_stage
	movq	%rax, %rdi
	call	ecs_defer_begin
	addl	$1, -8(%rbp)
.L1924:
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jl	.L1925
	movq	-24(%rbp), %rax
	movzbl	681(%rax), %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movb	$1, 681(%rax)
	movzbl	-9(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE226:
	.size	ecs_staging_begin, .-ecs_staging_begin
	.section	.rodata
.LC337:
	.string	"world->is_readonly == true"
.LC338:
	.string	"world->is_readonly == 1"
	.text
	.globl	ecs_staging_end
	.type	ecs_staging_end, @function
ecs_staging_end:
.LFB227:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9508, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1928
	leaq	__PRETTY_FUNCTION__.10555(%rip), %rcx
	movl	$9508, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1928:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9509, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L1929
	leaq	__PRETTY_FUNCTION__.10555(%rip), %rcx
	movl	$9509, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L1929:
	movq	-8(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9510, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC337(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	681(%rax), %eax
	testb	%al, %al
	jne	.L1930
	leaq	__PRETTY_FUNCTION__.10555(%rip), %rcx
	movl	$9510, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC338(%rip), %rdi
	call	__assert_fail@PLT
.L1930:
	movq	-8(%rbp), %rax
	movb	$0, 681(%rax)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	do_auto_merge
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE227:
	.size	ecs_staging_end, .-ecs_staging_end
	.section	.rodata
	.align 8
.LC339:
	.string	"world->magic == ECS_WORLD_MAGIC || world->magic == ECS_STAGE_MAGIC"
	.align 8
.LC340:
	.string	"world->magic == (0x65637377) || world->magic == (0x65637374)"
	.text
	.globl	ecs_merge
	.type	ecs_merge, @function
ecs_merge:
.LFB228:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9521, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1932
	leaq	__PRETTY_FUNCTION__.10559(%rip), %rcx
	movl	$9521, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1932:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L1933
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	jne	.L1934
.L1933:
	movl	$1, %eax
	jmp	.L1935
.L1934:
	movl	$0, %eax
.L1935:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9522, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC339(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L1936
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L1936
	leaq	__PRETTY_FUNCTION__.10559(%rip), %rcx
	movl	$9522, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC340(%rip), %rdi
	call	__assert_fail@PLT
.L1936:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	do_manual_merge
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE228:
	.size	ecs_merge, .-ecs_merge
	.section	.rodata
	.align 8
.LC341:
	.string	"world->magic == ECS_STAGE_MAGIC"
.LC342:
	.string	"world->magic == (0x65637374)"
	.text
	.globl	ecs_set_automerge
	.type	ecs_set_automerge, @function
ecs_set_automerge:
.LFB229:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, %eax
	movb	%al, -44(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	jne	.L1938
	movq	-40(%rbp), %rax
	movzbl	-44(%rbp), %edx
	movb	%dl, 448(%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L1939
.L1940:
	movl	-24(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_get_stage
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	-44(%rbp), %edx
	movb	%dl, 80(%rax)
	addl	$1, -24(%rbp)
.L1939:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L1940
	jmp	.L1943
.L1938:
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9549, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC341(%rip), %rdx
	movl	$72, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L1942
	leaq	__PRETTY_FUNCTION__.10570(%rip), %rcx
	movl	$9549, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC342(%rip), %rdi
	call	__assert_fail@PLT
.L1942:
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movzbl	-44(%rbp), %edx
	movb	%dl, 80(%rax)
.L1943:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE229:
	.size	ecs_set_automerge, .-ecs_set_automerge
	.globl	ecs_stage_is_readonly
	.type	ecs_stage_is_readonly, @function
ecs_stage_is_readonly:
.LFB230:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	jne	.L1945
	movq	-24(%rbp), %rax
	movzbl	81(%rax), %eax
	testb	%al, %al
	je	.L1945
	movl	$0, %eax
	jmp	.L1946
.L1945:
	movq	-8(%rbp), %rax
	movzbl	681(%rax), %eax
	testb	%al, %al
	je	.L1947
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	jne	.L1948
	movl	$1, %eax
	jmp	.L1946
.L1947:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	jne	.L1948
	movl	$1, %eax
	jmp	.L1946
.L1948:
	movl	$0, %eax
.L1946:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE230:
	.size	ecs_stage_is_readonly, .-ecs_stage_is_readonly
	.globl	ecs_async_stage_new
	.type	ecs_async_stage_new, @function
ecs_async_stage_new:
.LFB231:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	32+ecs_os_api(%rip), %rax
	movl	$88, %edi
	call	*%rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_stage_init
	movq	-8(%rbp), %rax
	movl	$-1, 4(%rax)
	movq	-8(%rbp), %rax
	movb	$0, 80(%rax)
	movq	-8(%rbp), %rax
	movb	$1, 81(%rax)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_defer_begin
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE231:
	.size	ecs_async_stage_new, .-ecs_async_stage_new
	.section	.rodata
.LC343:
	.string	"stage->asynchronous == true"
.LC344:
	.string	"stage->asynchronous == 1"
	.text
	.globl	ecs_async_stage_free
	.type	ecs_async_stage_free, @function
ecs_async_stage_free:
.LFB232:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9599, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC341(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L1952
	leaq	__PRETTY_FUNCTION__.10583(%rip), %rcx
	movl	$9599, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC342(%rip), %rdi
	call	__assert_fail@PLT
.L1952:
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	81(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9601, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC343(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	81(%rax), %eax
	testb	%al, %al
	jne	.L1953
	leaq	__PRETTY_FUNCTION__.10583(%rip), %rcx
	movl	$9601, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC344(%rip), %rdi
	call	__assert_fail@PLT
.L1953:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_stage_deinit
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE232:
	.size	ecs_async_stage_free, .-ecs_async_stage_free
	.globl	ecs_stage_is_async
	.type	ecs_stage_is_async, @function
ecs_stage_is_async:
.LFB233:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L1955
	movl	$0, %eax
	jmp	.L1956
.L1955:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L1957
	movl	$0, %eax
	jmp	.L1956
.L1957:
	movq	-8(%rbp), %rax
	movzbl	81(%rax), %eax
.L1956:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE233:
	.size	ecs_stage_is_async, .-ecs_stage_is_async
	.globl	ecs_is_deferred
	.type	ecs_is_deferred, @function
ecs_is_deferred:
.LFB234:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9623, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L1959
	leaq	__PRETTY_FUNCTION__.10591(%rip), %rcx
	movl	$9623, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L1959:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_readonly_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	setne	%al
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE234:
	.size	ecs_is_deferred, .-ecs_is_deferred
	.section	.rodata
.LC345:
	.string	"result != NULL"
.LC346:
	.string	"result != ((void *)0)"
	.text
	.type	resize, @function
resize:
.LFB235:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, %eax
	movl	%edx, -32(%rbp)
	movw	%ax, -28(%rbp)
	movq	24+ecs_os_api(%rip), %rdx
	movswl	-28(%rbp), %ecx
	movl	-32(%rbp), %eax
	addl	%eax, %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9636, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1962
	leaq	__PRETTY_FUNCTION__.10599(%rip), %rcx
	movl	$9636, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L1962:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE235:
	.size	resize, .-resize
	.section	.rodata
.LC347:
	.string	"elem_size != 0"
	.text
	.globl	_ecs_vector_new
	.type	_ecs_vector_new, @function
_ecs_vector_new:
.LFB236:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	movl	%esi, %eax
	movl	%edx, -28(%rbp)
	movw	%ax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9647, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC347(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -20(%rbp)
	jne	.L1965
	leaq	__PRETTY_FUNCTION__.10605(%rip), %rcx
	movl	$9647, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC347(%rip), %rdi
	call	__assert_fail@PLT
.L1965:
	movq	16+ecs_os_api(%rip), %rax
	movswl	-24(%rbp), %ecx
	movl	-20(%rbp), %edx
	imull	-28(%rbp), %edx
	addl	%ecx, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9651, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1966
	leaq	__PRETTY_FUNCTION__.10605(%rip), %rcx
	movl	$9651, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L1966:
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	-28(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE236:
	.size	_ecs_vector_new, .-_ecs_vector_new
	.globl	_ecs_vector_from_array
	.type	_ecs_vector_from_array, @function
_ecs_vector_from_array:
.LFB237:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movl	%edi, -20(%rbp)
	movl	%esi, %eax
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movw	%ax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9667, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC347(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -20(%rbp)
	jne	.L1969
	leaq	__PRETTY_FUNCTION__.10613(%rip), %rcx
	movl	$9667, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC347(%rip), %rdi
	call	__assert_fail@PLT
.L1969:
	movq	16+ecs_os_api(%rip), %rax
	movswl	-24(%rbp), %ecx
	movl	-20(%rbp), %edx
	imull	-28(%rbp), %edx
	addl	%ecx, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9671, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L1970
	leaq	__PRETTY_FUNCTION__.10613(%rip), %rcx
	movl	$9671, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L1970:
	movl	-20(%rbp), %eax
	imull	-28(%rbp), %eax
	movslq	%eax, %rdx
	movswq	-24(%rbp), %rcx
	movq	-8(%rbp), %rax
	addq	%rcx, %rax
	movq	%rax, %rcx
	movq	-40(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	memcpy@PLT
	movq	-8(%rbp), %rax
	movl	-28(%rbp), %edx
	movl	%edx, (%rax)
	movq	-8(%rbp), %rax
	movl	-28(%rbp), %edx
	movl	%edx, 4(%rax)
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE237:
	.size	_ecs_vector_from_array, .-_ecs_vector_from_array
	.globl	ecs_vector_free
	.type	ecs_vector_free, @function
ecs_vector_free:
.LFB238:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE238:
	.size	ecs_vector_free, .-ecs_vector_free
	.globl	ecs_vector_clear
	.type	ecs_vector_clear, @function
ecs_vector_clear:
.LFB239:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1975
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
.L1975:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE239:
	.size	ecs_vector_clear, .-ecs_vector_clear
	.globl	_ecs_vector_zero
	.type	_ecs_vector_zero, @function
_ecs_vector_zero:
.LFB240:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movw	%ax, -32(%rbp)
	movswq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	imull	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE240:
	.size	_ecs_vector_zero, .-_ecs_vector_zero
	.section	.rodata
	.align 8
.LC348:
	.string	"vector->elem_size == elem_size"
	.text
	.globl	ecs_vector_assert_size
	.type	ecs_vector_assert_size, @function
ecs_vector_assert_size:
.LFB241:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1979
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9713, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L1979
	leaq	__PRETTY_FUNCTION__.10631(%rip), %rcx
	movl	$9713, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L1979:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE241:
	.size	ecs_vector_assert_size, .-ecs_vector_assert_size
	.section	.rodata
.LC349:
	.string	"array_inout != NULL"
.LC350:
	.string	"array_inout != ((void *)0)"
	.text
	.globl	_ecs_vector_addn
	.type	_ecs_vector_addn, @function
_ecs_vector_addn:
.LFB242:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movl	%edx, %eax
	movl	%ecx, -52(%rbp)
	movw	%ax, -48(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9723, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC349(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L1981
	leaq	__PRETTY_FUNCTION__.10638(%rip), %rcx
	movl	$9723, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC350(%rip), %rdi
	call	__assert_fail@PLT
.L1981:
	cmpl	$1, -52(%rbp)
	jne	.L1982
	movswl	-48(%rbp), %edx
	movl	-44(%rbp), %ecx
	movq	-40(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	jmp	.L1983
.L1982:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L1984
	movswl	-48(%rbp), %ecx
	movl	-44(%rbp), %eax
	movl	$1, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	%rax, -8(%rbp)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
.L1984:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-44(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9735, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-44(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L1985
	leaq	__PRETTY_FUNCTION__.10638(%rip), %rcx
	movl	$9735, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L1985:
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edx
	movl	-52(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.L1986
	cmpl	$0, -20(%rbp)
	jne	.L1989
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.L1988
.L1990:
	sall	-20(%rbp)
.L1989:
	movl	-20(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L1990
.L1988:
	movl	-20(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, %edx
	movswl	-48(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	resize
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	-20(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
.L1986:
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %edx
	movl	%edx, (%rax)
	movswl	-48(%rbp), %edx
	movl	-44(%rbp), %eax
	imull	-16(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
.L1983:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE242:
	.size	_ecs_vector_addn, .-_ecs_vector_addn
	.globl	_ecs_vector_add
	.type	_ecs_vector_add, @function
_ecs_vector_add:
.LFB243:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movw	%ax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L1992
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9769, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L1993
	leaq	__PRETTY_FUNCTION__.10654(%rip), %rcx
	movl	$9769, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L1993:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jl	.L1994
	sall	-16(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.L1995
	movl	$2, -16(%rbp)
.L1995:
	movl	-16(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, %edx
	movswl	-32(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	resize
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-8(%rbp), %rax
	movl	-16(%rbp), %edx
	movl	%edx, 4(%rax)
.L1994:
	movl	-12(%rbp), %eax
	leal	1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, (%rax)
	movswl	-32(%rbp), %edx
	movl	-28(%rbp), %eax
	imull	-12(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	jmp	.L1996
.L1992:
	movswl	-32(%rbp), %ecx
	movl	-28(%rbp), %eax
	movl	$2, %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-8(%rbp), %rax
	movl	$1, (%rax)
	movq	-8(%rbp), %rax
	movl	$2, 4(%rax)
	movswq	-32(%rbp), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
.L1996:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE243:
	.size	_ecs_vector_add, .-_ecs_vector_add
	.section	.rodata
	.align 8
.LC351:
	.string	"(*dst)->elem_size == elem_size"
.LC352:
	.string	"src->elem_size == elem_size"
	.text
	.globl	_ecs_vector_move_index
	.type	_ecs_vector_move_index, @function
_ecs_vector_move_index:
.LFB244:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, %eax
	movl	%r8d, -44(%rbp)
	movw	%ax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movl	-36(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9801, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC351(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movl	-36(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L1998
	leaq	__PRETTY_FUNCTION__.10662(%rip), %rcx
	movl	$9801, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC351(%rip), %rdi
	call	__assert_fail@PLT
.L1998:
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-36(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9802, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC352(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-36(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L1999
	leaq	__PRETTY_FUNCTION__.10662(%rip), %rcx
	movl	$9802, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC352(%rip), %rdi
	call	__assert_fail@PLT
.L1999:
	movswl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -16(%rbp)
	movswl	-40(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %esi
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -8(%rbp)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movswl	-40(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-36(%rbp), %esi
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_remove
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE244:
	.size	_ecs_vector_move_index, .-_ecs_vector_move_index
	.globl	ecs_vector_remove_last
	.type	ecs_vector_remove_last, @function
ecs_vector_remove_last:
.LFB245:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2003
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L2003
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	leal	-1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, (%rax)
.L2003:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE245:
	.size	ecs_vector_remove_last, .-ecs_vector_remove_last
	.globl	_ecs_vector_pop
	.type	_ecs_vector_pop, @function
_ecs_vector_pop:
.LFB246:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movq	%rcx, -40(%rbp)
	movw	%ax, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L2005
	movl	$0, %eax
	jmp	.L2006
.L2005:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9827, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L2007
	leaq	__PRETTY_FUNCTION__.10674(%rip), %rcx
	movl	$9827, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L2007:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.L2008
	movl	$0, %eax
	jmp	.L2006
.L2008:
	movswl	-32(%rbp), %edx
	movl	-12(%rbp), %eax
	subl	$1, %eax
	imull	-28(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L2009
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L2009:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_remove_last
	movl	$1, %eax
.L2006:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE246:
	.size	_ecs_vector_pop, .-_ecs_vector_pop
	.section	.rodata
.LC353:
	.string	"index < count"
	.text
	.globl	_ecs_vector_remove
	.type	_ecs_vector_remove, @function
_ecs_vector_remove:
.LFB247:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movl	%edx, %eax
	movl	%ecx, -52(%rbp)
	movw	%ax, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-44(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9851, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-44(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L2011
	leaq	__PRETTY_FUNCTION__.10683(%rip), %rcx
	movl	$9851, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L2011:
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movswq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movl	-52(%rbp), %eax
	imull	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movl	-52(%rbp), %eax
	cmpl	-28(%rbp), %eax
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9857, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC353(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-52(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L2012
	leaq	__PRETTY_FUNCTION__.10683(%rip), %rcx
	movl	$9857, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC353(%rip), %rdi
	call	__assert_fail@PLT
.L2012:
	subl	$1, -28(%rbp)
	movl	-52(%rbp), %eax
	cmpl	-28(%rbp), %eax
	je	.L2013
	movl	-44(%rbp), %eax
	imull	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L2013:
	movq	-40(%rbp), %rax
	movl	-28(%rbp), %edx
	movl	%edx, (%rax)
	movl	-28(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE247:
	.size	_ecs_vector_remove, .-_ecs_vector_remove
	.globl	_ecs_vector_reclaim
	.type	_ecs_vector_reclaim, @function
_ecs_vector_reclaim:
.LFB248:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movw	%ax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9877, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L2016
	leaq	__PRETTY_FUNCTION__.10694(%rip), %rcx
	movl	$9877, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L2016:
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.L2018
	movl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, %edx
	movswl	-32(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	resize
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	-16(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
.L2018:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE248:
	.size	_ecs_vector_reclaim, .-_ecs_vector_reclaim
	.globl	ecs_vector_count
	.type	ecs_vector_count, @function
ecs_vector_count:
.LFB249:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2020
	movl	$0, %eax
	jmp	.L2021
.L2020:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
.L2021:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE249:
	.size	ecs_vector_count, .-ecs_vector_count
	.globl	ecs_vector_size
	.type	ecs_vector_size, @function
ecs_vector_size:
.LFB250:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2023
	movl	$0, %eax
	jmp	.L2024
.L2023:
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
.L2024:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE250:
	.size	ecs_vector_size, .-ecs_vector_size
	.globl	_ecs_vector_set_size
	.type	_ecs_vector_set_size, @function
_ecs_vector_set_size:
.LFB251:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movl	%ecx, -36(%rbp)
	movw	%ax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2026
	movswl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	-24(%rbp), %rdx
	movq	%rax, (%rdx)
	movl	-36(%rbp), %eax
	jmp	.L2027
.L2026:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9920, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L2028
	leaq	__PRETTY_FUNCTION__.10710(%rip), %rcx
	movl	$9920, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L2028:
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -36(%rbp)
	jge	.L2029
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -36(%rbp)
.L2029:
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.L2030
	movl	-36(%rbp), %eax
	movl	%eax, %edi
	call	flecs_next_pow_of_2
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, %edx
	movswl	-32(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	resize
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	-36(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.L2030:
	movl	-12(%rbp), %eax
.L2027:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE251:
	.size	_ecs_vector_set_size, .-_ecs_vector_set_size
	.globl	_ecs_vector_grow
	.type	_ecs_vector_grow, @function
_ecs_vector_grow:
.LFB252:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movl	%ecx, -36(%rbp)
	movw	%ax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %edx
	movl	-36(%rbp), %eax
	leal	(%rdx,%rax), %ecx
	movswl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_size
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE252:
	.size	_ecs_vector_grow, .-_ecs_vector_grow
	.section	.rodata
	.align 8
.LC354:
	.string	"(*array_inout)->elem_size == elem_size"
	.text
	.globl	_ecs_vector_set_count
	.type	_ecs_vector_set_count, @function
_ecs_vector_set_count:
.LFB253:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movl	%ecx, -36(%rbp)
	movw	%ax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L2034
	movswl	-32(%rbp), %ecx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	-24(%rbp), %rdx
	movq	%rax, (%rdx)
.L2034:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9960, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC354(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L2035
	leaq	__PRETTY_FUNCTION__.10725(%rip), %rcx
	movl	$9960, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC354(%rip), %rdi
	call	__assert_fail@PLT
.L2035:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %edx
	movl	%edx, (%rax)
	movswl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_size
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE253:
	.size	_ecs_vector_set_count, .-_ecs_vector_set_count
	.section	.rodata
	.align 8
.LC355:
	.string	"!vector || vector->elem_size == elem_size"
	.text
	.globl	_ecs_vector_first
	.type	_ecs_vector_first, @function
_ecs_vector_first:
.LFB254:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, %eax
	movw	%ax, -16(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2038
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	jne	.L2039
.L2038:
	movl	$1, %eax
	jmp	.L2040
.L2039:
	movl	$0, %eax
.L2040:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9974, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC355(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	je	.L2041
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L2041
	leaq	__PRETTY_FUNCTION__.10732(%rip), %rcx
	movl	$9974, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC355(%rip), %rdi
	call	__assert_fail@PLT
.L2041:
	cmpq	$0, -8(%rbp)
	je	.L2042
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	je	.L2042
	movswq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	jmp	.L2043
.L2042:
	movl	$0, %eax
.L2043:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE254:
	.size	_ecs_vector_first, .-_ecs_vector_first
	.globl	_ecs_vector_get
	.type	_ecs_vector_get, @function
_ecs_vector_get:
.LFB255:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movl	%ecx, -36(%rbp)
	movw	%ax, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L2045
	movl	$0, %eax
	jmp	.L2046
.L2045:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9992, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L2047
	leaq	__PRETTY_FUNCTION__.10739(%rip), %rcx
	movl	$9992, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L2047:
	movl	-36(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$9993, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC300(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -36(%rbp)
	jns	.L2048
	leaq	__PRETTY_FUNCTION__.10739(%rip), %rcx
	movl	$9993, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC300(%rip), %rdi
	call	__assert_fail@PLT
.L2048:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jl	.L2049
	movl	$0, %eax
	jmp	.L2046
.L2049:
	movswl	-32(%rbp), %edx
	movl	-28(%rbp), %eax
	imull	-36(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
.L2046:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE255:
	.size	_ecs_vector_get, .-_ecs_vector_get
	.globl	_ecs_vector_last
	.type	_ecs_vector_last, @function
_ecs_vector_last:
.LFB256:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movw	%ax, -32(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L2051
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10010, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L2052
	leaq	__PRETTY_FUNCTION__.10746(%rip), %rcx
	movl	$10010, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L2052:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.L2053
	movl	$0, %eax
	jmp	.L2054
.L2053:
	movswl	-32(%rbp), %edx
	movl	-4(%rbp), %eax
	subl	$1, %eax
	imull	-28(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	jmp	.L2054
.L2051:
	movl	$0, %eax
.L2054:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE256:
	.size	_ecs_vector_last, .-_ecs_vector_last
	.globl	_ecs_vector_set_min_size
	.type	_ecs_vector_set_min_size, @function
_ecs_vector_set_min_size:
.LFB257:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, %eax
	movl	%ecx, -20(%rbp)
	movw	%ax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L2056
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -20(%rbp)
	jle	.L2057
.L2056:
	movswl	-16(%rbp), %edx
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %esi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_size
	jmp	.L2058
.L2057:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
.L2058:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE257:
	.size	_ecs_vector_set_min_size, .-_ecs_vector_set_min_size
	.globl	_ecs_vector_set_min_count
	.type	_ecs_vector_set_min_count, @function
_ecs_vector_set_min_count:
.LFB258:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movl	%ecx, -36(%rbp)
	movw	%ax, -32(%rbp)
	movswl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_min_size
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2060
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -36(%rbp)
	jle	.L2060
	movq	-8(%rbp), %rax
	movl	-36(%rbp), %edx
	movl	%edx, (%rax)
.L2060:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE258:
	.size	_ecs_vector_set_min_count, .-_ecs_vector_set_min_count
	.globl	_ecs_vector_sort
	.type	_ecs_vector_sort, @function
_ecs_vector_sort:
.LFB259:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movq	%rcx, -40(%rbp)
	movw	%ax, -32(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L2066
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10061, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-28(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L2065
	leaq	__PRETTY_FUNCTION__.10767(%rip), %rcx
	movl	$10061, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L2065:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movswq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	cmpl	$1, -12(%rbp)
	jle	.L2062
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movl	-12(%rbp), %eax
	movslq	%eax, %rsi
	movq	-40(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	qsort@PLT
	jmp	.L2062
.L2066:
	nop
.L2062:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE259:
	.size	_ecs_vector_sort, .-_ecs_vector_sort
	.globl	_ecs_vector_memory
	.type	_ecs_vector_memory, @function
_ecs_vector_memory:
.LFB260:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, %eax
	movq	%rcx, -24(%rbp)
	movq	%r8, -32(%rbp)
	movw	%ax, -16(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2072
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10082, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC348(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movl	-12(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	je	.L2070
	leaq	__PRETTY_FUNCTION__.10777(%rip), %rcx
	movl	$10082, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC348(%rip), %rdi
	call	__assert_fail@PLT
.L2070:
	cmpq	$0, -24(%rbp)
	je	.L2071
	movq	-24(%rbp), %rax
	movl	(%rax), %edx
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	imull	-12(%rbp), %eax
	movl	%eax, %ecx
	movswl	-16(%rbp), %eax
	addl	%ecx, %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, (%rax)
.L2071:
	cmpq	$0, -32(%rbp)
	je	.L2067
	movq	-32(%rbp), %rax
	movl	(%rax), %edx
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	imull	-12(%rbp), %eax
	addl	%eax, %edx
	movq	-32(%rbp), %rax
	movl	%edx, (%rax)
	jmp	.L2067
.L2072:
	nop
.L2067:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE260:
	.size	_ecs_vector_memory, .-_ecs_vector_memory
	.globl	_ecs_vector_copy
	.type	_ecs_vector_copy, @function
_ecs_vector_copy:
.LFB261:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movw	%ax, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L2074
	movl	$0, %eax
	jmp	.L2075
.L2074:
	movq	-24(%rbp), %rax
	movl	4(%rax), %edx
	movswl	-32(%rbp), %ecx
	movl	-28(%rbp), %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	%rax, -8(%rbp)
	movswl	-32(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	imull	-28(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-8(%rbp), %rax
.L2075:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE261:
	.size	_ecs_vector_copy, .-_ecs_vector_copy
	.section	.rodata
.LC356:
	.string	"chunks != NULL"
.LC357:
	.string	"chunks != ((void *)0)"
.LC358:
	.string	"result->sparse == NULL"
.LC359:
	.string	"result->sparse == ((void *)0)"
.LC360:
	.string	"result->data == NULL"
.LC361:
	.string	"result->data == ((void *)0)"
.LC362:
	.string	"result->sparse != NULL"
.LC363:
	.string	"result->sparse != ((void *)0)"
.LC364:
	.string	"result->data != NULL"
.LC365:
	.string	"result->data != ((void *)0)"
	.text
	.type	chunk_new, @function
chunk_new:
.LFB262:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jg	.L2077
	movl	-44(%rbp), %eax
	leal	1(%rax), %edx
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	subl	-20(%rbp), %eax
	sall	$4, %eax
	cltq
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rdx, %rcx
	salq	$4, %rcx
	movq	-16(%rbp), %rdx
	addq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	memset@PLT
	jmp	.L2078
.L2077:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
.L2078:
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10153, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC356(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L2079
	leaq	__PRETTY_FUNCTION__.10800(%rip), %rcx
	movl	$10153, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC357(%rip), %rdi
	call	__assert_fail@PLT
.L2079:
	movl	-44(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10156, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC358(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L2080
	leaq	__PRETTY_FUNCTION__.10800(%rip), %rcx
	movl	$10156, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC359(%rip), %rdi
	call	__assert_fail@PLT
.L2080:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10157, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC360(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L2081
	leaq	__PRETTY_FUNCTION__.10800(%rip), %rcx
	movl	$10157, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC361(%rip), %rdi
	call	__assert_fail@PLT
.L2081:
	movq	32+ecs_os_api(%rip), %rax
	movl	$16384, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	32+ecs_os_api(%rip), %rax
	movq	-40(%rbp), %rdx
	movl	16(%rdx), %edx
	sall	$12, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10170, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC362(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L2082
	leaq	__PRETTY_FUNCTION__.10800(%rip), %rcx
	movl	$10170, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC363(%rip), %rdi
	call	__assert_fail@PLT
.L2082:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10171, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC364(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L2083
	leaq	__PRETTY_FUNCTION__.10800(%rip), %rcx
	movl	$10171, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC365(%rip), %rdi
	call	__assert_fail@PLT
.L2083:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE262:
	.size	chunk_new, .-chunk_new
	.type	chunk_free, @function
chunk_free:
.LFB263:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE263:
	.size	chunk_free, .-chunk_free
	.section	.rodata
.LC366:
	.string	"chunk_index >= 0"
	.text
	.type	get_chunk, @function
get_chunk:
.LFB264:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-28(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10190, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC366(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -28(%rbp)
	jns	.L2087
	leaq	__PRETTY_FUNCTION__.10809(%rip), %rcx
	movl	$10190, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC366(%rip), %rdi
	call	__assert_fail@PLT
.L2087:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-28(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2088
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L2088
	movl	$0, %eax
	jmp	.L2089
.L2088:
	movq	-8(%rbp), %rax
.L2089:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE264:
	.size	get_chunk, .-get_chunk
	.type	get_or_create_chunk, @function
get_or_create_chunk:
.LFB265:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_chunk
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2091
	movq	-8(%rbp), %rax
	jmp	.L2092
.L2091:
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	chunk_new
.L2092:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE265:
	.size	get_or_create_chunk, .-get_or_create_chunk
	.type	grow_dense, @function
grow_dense:
.LFB266:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE266:
	.size	grow_dense, .-grow_dense
	.section	.rodata
	.align 8
.LC367:
	.string	"gen == (index & (0xFFFFFFFFull << 32))"
	.text
	.type	strip_generation, @function
strip_generation:
.LFB267:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movabsq	$281470681743360, %rax
	andq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	movabsq	$-4294967296, %rax
	andq	-16(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10226, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC367(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movabsq	$-4294967296, %rax
	andq	-16(%rbp), %rax
	cmpq	%rax, -8(%rbp)
	je	.L2095
	leaq	__PRETTY_FUNCTION__.10824(%rip), %rcx
	movl	$10226, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC367(%rip), %rdi
	call	__assert_fail@PLT
.L2095:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	subq	-8(%rbp), %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE267:
	.size	strip_generation, .-strip_generation
	.type	assign_index, @function
assign_index:
.LFB268:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rdx
	movslq	%edx, %rdx
	andl	$4095, %edx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	-28(%rbp), %eax
	movl	%eax, (%rdx)
	movl	-28(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rax, (%rdx)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE268:
	.size	assign_index, .-assign_index
	.type	inc_gen, @function
inc_gen:
.LFB269:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movabsq	$-281470681743361, %rax
	andq	-8(%rbp), %rax
	movq	-8(%rbp), %rdx
	shrq	$32, %rdx
	addq	$1, %rdx
	movq	%rdx, %rcx
	salq	$32, %rcx
	movabsq	$281470681743360, %rdx
	andq	%rcx, %rdx
	orq	%rdx, %rax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE269:
	.size	inc_gen, .-inc_gen
	.type	inc_id, @function
inc_id:
.LFB270:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	(%rax), %rdx
	addq	$1, %rdx
	movq	%rdx, (%rax)
	movq	(%rax), %rax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE270:
	.size	inc_id, .-inc_id
	.type	get_id, @function
get_id:
.LFB271:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	(%rax), %rax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE271:
	.size	get_id, .-get_id
	.type	set_id, @function
set_id:
.LFB272:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, (%rax)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE272:
	.size	set_id, .-set_id
	.section	.rodata
	.align 8
.LC368:
	.string	"chunk->sparse[OFFSET(index)] == 0"
	.align 8
.LC369:
	.string	"chunk->sparse[((int32_t)index & 0xFFF)] == 0"
	.text
	.type	create_id, @function
create_id:
.LFB273:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	inc_id
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	grow_dense
	movq	-24(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_or_create_chunk
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rdx
	movslq	%edx, %rdx
	andl	$4095, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10292, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC368(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rdx
	movslq	%edx, %rdx
	andl	$4095, %edx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L2106
	leaq	__PRETTY_FUNCTION__.10850(%rip), %rcx
	movl	$10292, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC369(%rip), %rdi
	call	__assert_fail@PLT
.L2106:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	-44(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	assign_index
	movq	-24(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE273:
	.size	create_id, .-create_id
	.section	.rodata
.LC370:
	.string	"count <= dense_count"
	.text
	.type	new_index, @function
new_index:
.LFB274:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	20(%rax), %eax
	leal	1(%rax), %ecx
	movq	-40(%rbp), %rdx
	movl	%ecx, 20(%rdx)
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10309, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC370(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.L2109
	leaq	__PRETTY_FUNCTION__.10858(%rip), %rcx
	movl	$10309, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC370(%rip), %rdi
	call	__assert_fail@PLT
.L2109:
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.L2110
	movq	-16(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	jmp	.L2111
.L2110:
	movl	-20(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	create_id
.L2111:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE274:
	.size	new_index, .-new_index
	.section	.rodata
	.align 8
.LC371:
	.string	"dense == chunk->sparse[offset]"
	.text
	.type	try_sparse_any, @function
try_sparse_any:
.LFB275:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strip_generation
	movq	-48(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_chunk
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2113
	movl	$0, %eax
	jmp	.L2114
.L2113:
	movq	-48(%rbp), %rax
	andl	$4095, %eax
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.L2115
	movq	-40(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jge	.L2115
	movl	$1, %eax
	jmp	.L2116
.L2115:
	movl	$0, %eax
.L2116:
	movb	%al, -17(%rbp)
	andb	$1, -17(%rbp)
	movzbl	-17(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L2117
	movl	$0, %eax
	jmp	.L2114
.L2117:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -12(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10341, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC371(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -12(%rbp)
	je	.L2118
	leaq	__PRETTY_FUNCTION__.10868(%rip), %rcx
	movl	$10341, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC371(%rip), %rdi
	call	__assert_fail@PLT
.L2118:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	imull	-16(%rbp), %eax
	cltq
	addq	%rdx, %rax
.L2114:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE275:
	.size	try_sparse_any, .-try_sparse_any
	.type	try_sparse, @function
try_sparse:
.LFB276:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_chunk
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L2120
	movl	$0, %eax
	jmp	.L2121
.L2120:
	movq	-64(%rbp), %rax
	andl	$4095, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	-40(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.L2122
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -36(%rbp)
	jge	.L2122
	movl	$1, %eax
	jmp	.L2123
.L2122:
	movl	$0, %eax
.L2123:
	movb	%al, -41(%rbp)
	andb	$1, -41(%rbp)
	movzbl	-41(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L2124
	movl	$0, %eax
	jmp	.L2121
.L2124:
	leaq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	strip_generation
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movabsq	$281470681743360, %rdx
	andq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.L2125
	movl	$0, %eax
	jmp	.L2121
.L2125:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	-40(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -36(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10371, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC371(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	-40(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -36(%rbp)
	je	.L2126
	leaq	__PRETTY_FUNCTION__.10880(%rip), %rcx
	movl	$10371, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC371(%rip), %rdi
	call	__assert_fail@PLT
.L2126:
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rax
	movl	16(%rax), %eax
	imull	-40(%rbp), %eax
	cltq
	addq	%rdx, %rax
.L2121:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE276:
	.size	try_sparse, .-try_sparse
	.section	.rodata
.LC372:
	.string	"chunk != NULL"
.LC373:
	.string	"chunk != ((void *)0)"
	.text
	.type	get_sparse, @function
get_sparse:
.LFB277:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -40(%rbp)
	leaq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	strip_generation
	movq	-40(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_chunk
	movq	%rax, -8(%rbp)
	movq	-40(%rbp), %rax
	andl	$4095, %eax
	movl	%eax, -12(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10387, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC372(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2128
	leaq	__PRETTY_FUNCTION__.10888(%rip), %rcx
	movl	$10387, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC373(%rip), %rdi
	call	__assert_fail@PLT
.L2128:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -28(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10388, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC371(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	%eax, -28(%rbp)
	je	.L2129
	leaq	__PRETTY_FUNCTION__.10888(%rip), %rcx
	movl	$10388, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC371(%rip), %rdi
	call	__assert_fail@PLT
.L2129:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	imull	-12(%rbp), %eax
	cltq
	addq	%rdx, %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE277:
	.size	get_sparse, .-get_sparse
	.section	.rodata
.LC374:
	.string	"a != b"
	.text
	.type	swap_dense, @function
swap_dense:
.LFB278:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -56(%rbp)
	movl	-52(%rbp), %eax
	cmpl	-56(%rbp), %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10403, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC374(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-52(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jne	.L2132
	leaq	__PRETTY_FUNCTION__.10895(%rip), %rcx
	movl	$10403, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC374(%rip), %rdi
	call	__assert_fail@PLT
.L2132:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movl	-52(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-56(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_or_create_chunk
	movq	%rax, -8(%rbp)
	movl	-56(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	assign_index
	movl	-52(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	assign_index
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE278:
	.size	swap_dense, .-swap_dense
	.globl	_flecs_sparse_new
	.type	_flecs_sparse_new, @function
_flecs_sparse_new:
.LFB279:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	movq	32+ecs_os_api(%rip), %rax
	movl	$40, %edi
	call	*%rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10417, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L2134
	leaq	__PRETTY_FUNCTION__.10904(%rip), %rcx
	movl	$10417, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L2134:
	movq	-16(%rbp), %rax
	movl	-20(%rbp), %edx
	movl	%edx, 16(%rax)
	movq	-16(%rbp), %rax
	movq	$-1, 24(%rax)
	movq	-16(%rbp), %rax
	leaq	24(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	movq	-16(%rbp), %rax
	movl	$1, 20(%rax)
	movq	-16(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE279:
	.size	_flecs_sparse_new, .-_flecs_sparse_new
	.section	.rodata
.LC375:
	.string	"sparse != NULL"
.LC376:
	.string	"sparse != ((void *)0)"
	.text
	.globl	flecs_sparse_set_id_source
	.type	flecs_sparse_set_id_source, @function
flecs_sparse_set_id_source:
.LFB280:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10436, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2137
	leaq	__PRETTY_FUNCTION__.10910(%rip), %rcx
	movl	$10436, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2137:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 32(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE280:
	.size	flecs_sparse_set_id_source, .-flecs_sparse_set_id_source
	.globl	flecs_sparse_clear
	.type	flecs_sparse_clear, @function
flecs_sparse_clear:
.LFB281:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10443, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L2139
	leaq	__PRETTY_FUNCTION__.10914(%rip), %rcx
	movl	$10443, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2139:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L2140
.L2141:
	movl	-24(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	chunk_free
	addl	$1, -24(%rbp)
.L2140:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L2141
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-40(%rbp), %rax
	movl	$1, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movq	-40(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movl	$1, 20(%rax)
	movq	-40(%rbp), %rax
	movq	$0, 24(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE281:
	.size	flecs_sparse_clear, .-flecs_sparse_clear
	.globl	flecs_sparse_free
	.type	flecs_sparse_free, @function
flecs_sparse_free:
.LFB282:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2144
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_sparse_clear
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L2144:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE282:
	.size	flecs_sparse_free, .-flecs_sparse_free
	.globl	flecs_sparse_new_id
	.type	flecs_sparse_new_id, @function
flecs_sparse_new_id:
.LFB283:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10470, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2146
	leaq	__PRETTY_FUNCTION__.10928(%rip), %rcx
	movl	$10470, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2146:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	new_index
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE283:
	.size	flecs_sparse_new_id, .-flecs_sparse_new_id
	.globl	flecs_sparse_new_ids
	.type	flecs_sparse_new_ids, @function
flecs_sparse_new_ids:
.LFB284:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movl	%esi, -60(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10478, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L2149
	leaq	__PRETTY_FUNCTION__.10933(%rip), %rcx
	movl	$10478, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2149:
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-60(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jle	.L2150
	movl	-32(%rbp), %edx
	movl	-20(%rbp), %eax
	addl	%eax, %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_sparse_set_size
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -36(%rbp)
	jmp	.L2151
.L2152:
	movl	-28(%rbp), %edx
	movl	-36(%rbp), %eax
	addl	%eax, %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	create_id
	movq	%rax, -8(%rbp)
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %eax
	addl	%edx, %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rax, %rdx
	movq	-8(%rbp), %rax
	movq	%rax, (%rdx)
	addl	$1, -36(%rbp)
.L2151:
	movl	-36(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L2152
.L2150:
	movq	-56(%rbp), %rax
	movl	20(%rax), %edx
	movl	-60(%rbp), %eax
	addl	%eax, %edx
	movq	-56(%rbp), %rax
	movl	%edx, 20(%rax)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE284:
	.size	flecs_sparse_new_ids, .-flecs_sparse_new_ids
	.section	.rodata
.LC377:
	.string	"!size || size == sparse->size"
	.text
	.globl	_flecs_sparse_add
	.type	_flecs_sparse_add, @function
_flecs_sparse_add:
.LFB285:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10503, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2155
	leaq	__PRETTY_FUNCTION__.10948(%rip), %rcx
	movl	$10503, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2155:
	cmpl	$0, -28(%rbp)
	je	.L2156
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jne	.L2157
.L2156:
	movl	$1, %eax
	jmp	.L2158
.L2157:
	movl	$0, %eax
.L2158:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10504, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC377(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -28(%rbp)
	je	.L2159
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -28(%rbp)
	je	.L2159
	leaq	__PRETTY_FUNCTION__.10948(%rip), %rcx
	movl	$10504, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC377(%rip), %rdi
	call	__assert_fail@PLT
.L2159:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	new_index
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_chunk
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10507, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC372(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2160
	leaq	__PRETTY_FUNCTION__.10948(%rip), %rcx
	movl	$10507, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC373(%rip), %rdi
	call	__assert_fail@PLT
.L2160:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	andl	$4095, %eax
	imull	-28(%rbp), %eax
	cltq
	addq	%rdx, %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE285:
	.size	_flecs_sparse_add, .-_flecs_sparse_add
	.globl	flecs_sparse_last_id
	.type	flecs_sparse_last_id, @function
flecs_sparse_last_id:
.LFB286:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10514, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2163
	leaq	__PRETTY_FUNCTION__.10954(%rip), %rcx
	movl	$10514, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2163:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	cltq
	salq	$3, %rax
	leaq	-8(%rax), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE286:
	.size	flecs_sparse_last_id, .-flecs_sparse_last_id
	.section	.rodata
	.align 8
.LC378:
	.string	"ecs_vector_count(sparse->dense) > 0"
	.align 8
.LC379:
	.string	"!gen || dense_array[dense] == (index | gen)"
	.text
	.globl	_flecs_sparse_ensure
	.type	_flecs_sparse_ensure, @function
_flecs_sparse_ensure:
.LFB287:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movl	%esi, -108(%rbp)
	movq	%rdx, -120(%rbp)
	cmpq	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10524, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -104(%rbp)
	jne	.L2166
	leaq	__PRETTY_FUNCTION__.10961(%rip), %rcx
	movl	$10524, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2166:
	cmpl	$0, -108(%rbp)
	je	.L2167
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -108(%rbp)
	jne	.L2168
.L2167:
	movl	$1, %eax
	jmp	.L2169
.L2168:
	movl	$0, %eax
.L2169:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10525, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC377(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -108(%rbp)
	je	.L2170
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -108(%rbp)
	je	.L2170
	leaq	__PRETTY_FUNCTION__.10961(%rip), %rcx
	movl	$10525, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC377(%rip), %rdi
	call	__assert_fail@PLT
.L2170:
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10526, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC378(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	jg	.L2171
	leaq	__PRETTY_FUNCTION__.10961(%rip), %rcx
	movl	$10526, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC378(%rip), %rdi
	call	__assert_fail@PLT
.L2171:
	leaq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	strip_generation
	movq	%rax, -64(%rbp)
	movq	-120(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-104(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_or_create_chunk
	movq	%rax, -56(%rbp)
	movq	-120(%rbp), %rax
	andl	$4095, %eax
	movl	%eax, -84(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	je	.L2172
	movq	-104(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	-80(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jne	.L2173
	movq	-104(%rbp), %rax
	movl	20(%rax), %eax
	leal	1(%rax), %edx
	movq	-104(%rbp), %rax
	movl	%edx, 20(%rax)
	jmp	.L2174
.L2173:
	movl	-80(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jle	.L2174
	movl	-68(%rbp), %ecx
	movl	-80(%rbp), %edx
	movq	-56(%rbp), %rsi
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	swap_dense
	movq	-104(%rbp), %rax
	movl	20(%rax), %eax
	leal	1(%rax), %edx
	movq	-104(%rbp), %rax
	movl	%edx, 20(%rax)
.L2174:
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L2175
	movl	-80(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-120(%rbp), %rax
	orq	-64(%rbp), %rax
	cmpq	%rax, %rdx
	jne	.L2176
.L2175:
	movl	$1, %eax
	jmp	.L2177
.L2176:
	movl	$0, %eax
.L2177:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10558, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC379(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	je	.L2178
	movl	-80(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-120(%rbp), %rax
	orq	-64(%rbp), %rax
	cmpq	%rax, %rdx
	je	.L2178
	leaq	__PRETTY_FUNCTION__.10961(%rip), %rcx
	movl	$10558, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC379(%rip), %rdi
	call	__assert_fail@PLT
.L2172:
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	grow_dense
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	movq	-104(%rbp), %rax
	movl	20(%rax), %eax
	leal	1(%rax), %ecx
	movq	-104(%rbp), %rdx
	movl	%ecx, 20(%rdx)
	movl	%eax, -72(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	get_id
	movq	-120(%rbp), %rdx
	cmpq	%rdx, %rax
	ja	.L2179
	movq	-120(%rbp), %rax
	leaq	1(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	set_id
.L2179:
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.L2180
	movl	-72(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-104(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_or_create_chunk
	movq	%rax, -24(%rbp)
	movl	-76(%rbp), %ecx
	movq	-32(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	assign_index
.L2180:
	movq	-120(%rbp), %rdx
	movl	-72(%rbp), %ecx
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	assign_index
	movl	-72(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-72(%rbp), %edx
	movslq	%edx, %rdx
	leaq	0(,%rdx,8), %rcx
	movq	-40(%rbp), %rdx
	addq	%rcx, %rdx
	orq	-64(%rbp), %rax
	movq	%rax, (%rdx)
.L2178:
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	imull	-84(%rbp), %eax
	cltq
	addq	%rdx, %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE287:
	.size	_flecs_sparse_ensure, .-_flecs_sparse_ensure
	.globl	_flecs_sparse_set
	.type	_flecs_sparse_set, @function
_flecs_sparse_set:
.LFB288:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-40(%rbp), %rdx
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_ensure
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE288:
	.size	_flecs_sparse_set, .-_flecs_sparse_set
	.globl	_flecs_sparse_remove_get
	.type	_flecs_sparse_remove_get, @function
_flecs_sparse_remove_get:
.LFB289:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movl	%esi, -60(%rbp)
	movq	%rdx, -72(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10606, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L2185
	leaq	__PRETTY_FUNCTION__.10987(%rip), %rcx
	movl	$10606, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2185:
	cmpl	$0, -60(%rbp)
	je	.L2186
	movq	-56(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -60(%rbp)
	jne	.L2187
.L2186:
	movl	$1, %eax
	jmp	.L2188
.L2187:
	movl	$0, %eax
.L2188:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10607, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC377(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -60(%rbp)
	je	.L2189
	movq	-56(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -60(%rbp)
	je	.L2189
	leaq	__PRETTY_FUNCTION__.10987(%rip), %rcx
	movl	$10607, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC377(%rip), %rdi
	call	__assert_fail@PLT
.L2189:
	movq	-72(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_or_create_chunk
	movq	%rax, -32(%rbp)
	leaq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	strip_generation
	movq	%rax, -24(%rbp)
	movq	-72(%rbp), %rax
	andl	$4095, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	-44(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.L2190
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movabsq	$281470681743360, %rdx
	andq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpq	-8(%rbp), %rax
	je	.L2191
	movl	$0, %eax
	jmp	.L2192
.L2191:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	inc_gen
	movq	-72(%rbp), %rcx
	movl	-40(%rbp), %edx
	movslq	%edx, %rdx
	leaq	0(,%rdx,8), %rsi
	movq	-16(%rbp), %rdx
	addq	%rsi, %rdx
	orq	%rcx, %rax
	movq	%rax, (%rdx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	cmpl	%eax, -40(%rbp)
	jne	.L2193
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	leal	-1(%rax), %edx
	movq	-56(%rbp), %rax
	movl	%edx, 20(%rax)
	jmp	.L2194
.L2193:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.L2195
	movl	-36(%rbp), %eax
	leal	-1(%rax), %ecx
	movl	-40(%rbp), %edx
	movq	-32(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	swap_dense
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	leal	-1(%rax), %edx
	movq	-56(%rbp), %rax
	movl	%edx, 20(%rax)
	jmp	.L2194
.L2195:
	movl	$0, %eax
	jmp	.L2192
.L2194:
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rax
	movl	16(%rax), %eax
	imull	-44(%rbp), %eax
	cltq
	addq	%rdx, %rax
	jmp	.L2192
.L2190:
	movl	$0, %eax
.L2192:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE289:
	.size	_flecs_sparse_remove_get, .-_flecs_sparse_remove_get
	.globl	flecs_sparse_remove
	.type	flecs_sparse_remove, @function
flecs_sparse_remove:
.LFB290:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_remove_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2198
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
.L2198:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE290:
	.size	flecs_sparse_remove, .-flecs_sparse_remove
	.globl	flecs_sparse_set_generation
	.type	flecs_sparse_set_generation, @function
flecs_sparse_set_generation:
.LFB291:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10662, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L2200
	leaq	__PRETTY_FUNCTION__.11004(%rip), %rcx
	movl	$10662, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2200:
	movq	-48(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_or_create_chunk
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -16(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strip_generation
	movq	-48(%rbp), %rax
	andl	$4095, %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	je	.L2202
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rax, %rdx
	movq	-16(%rbp), %rax
	movq	%rax, (%rdx)
.L2202:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE291:
	.size	flecs_sparse_set_generation, .-flecs_sparse_set_generation
	.globl	flecs_sparse_exists
	.type	flecs_sparse_exists, @function
flecs_sparse_exists:
.LFB292:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10683, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2204
	leaq	__PRETTY_FUNCTION__.11014(%rip), %rcx
	movl	$10683, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2204:
	movq	-32(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_chunk
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2205
	movl	$0, %eax
	jmp	.L2206
.L2205:
	leaq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	strip_generation
	movq	-32(%rbp), %rax
	andl	$4095, %eax
	movl	%eax, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -12(%rbp)
	setne	%al
.L2206:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE292:
	.size	flecs_sparse_exists, .-flecs_sparse_exists
	.section	.rodata
.LC380:
	.string	"dense_index < sparse->count"
	.text
	.globl	_flecs_sparse_get_dense
	.type	_flecs_sparse_get_dense, @function
_flecs_sparse_get_dense:
.LFB293:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10701, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2208
	leaq	__PRETTY_FUNCTION__.11023(%rip), %rcx
	movl	$10701, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2208:
	cmpl	$0, -28(%rbp)
	je	.L2209
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jne	.L2210
.L2209:
	movl	$1, %eax
	jmp	.L2211
.L2210:
	movl	$0, %eax
.L2211:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10702, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC377(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -28(%rbp)
	je	.L2212
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -28(%rbp)
	je	.L2212
	leaq	__PRETTY_FUNCTION__.11023(%rip), %rcx
	movl	$10702, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC377(%rip), %rdi
	call	__assert_fail@PLT
.L2212:
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -32(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10703, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC380(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -32(%rbp)
	jl	.L2213
	leaq	__PRETTY_FUNCTION__.11023(%rip), %rcx
	movl	$10703, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC380(%rip), %rdi
	call	__assert_fail@PLT
.L2213:
	addl	$1, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movl	-32(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	get_sparse
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE293:
	.size	_flecs_sparse_get_dense, .-_flecs_sparse_get_dense
	.globl	flecs_sparse_is_alive
	.type	flecs_sparse_is_alive, @function
flecs_sparse_is_alive:
.LFB294:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	try_sparse
	testq	%rax, %rax
	setne	%al
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE294:
	.size	flecs_sparse_is_alive, .-flecs_sparse_is_alive
	.globl	flecs_sparse_get_alive
	.type	flecs_sparse_get_alive, @function
flecs_sparse_get_alive:
.LFB295:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	shrl	$12, %eax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_chunk
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L2218
	movl	$0, %eax
	jmp	.L2219
.L2218:
	movq	-48(%rbp), %rax
	andl	$4095, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	-24(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
.L2219:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE295:
	.size	flecs_sparse_get_alive, .-flecs_sparse_get_alive
	.globl	_flecs_sparse_get
	.type	_flecs_sparse_get, @function
_flecs_sparse_get:
.LFB296:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10741, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2221
	leaq	__PRETTY_FUNCTION__.11042(%rip), %rcx
	movl	$10741, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2221:
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10742, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2222
	leaq	__PRETTY_FUNCTION__.11042(%rip), %rcx
	movl	$10742, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2222:
	cmpl	$0, -12(%rbp)
	je	.L2223
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jne	.L2224
.L2223:
	movl	$1, %eax
	jmp	.L2225
.L2224:
	movl	$0, %eax
.L2225:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10743, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC377(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -12(%rbp)
	je	.L2226
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -12(%rbp)
	je	.L2226
	leaq	__PRETTY_FUNCTION__.11042(%rip), %rcx
	movl	$10743, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC377(%rip), %rdi
	call	__assert_fail@PLT
.L2226:
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	try_sparse
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE296:
	.size	_flecs_sparse_get, .-_flecs_sparse_get
	.globl	_flecs_sparse_get_any
	.type	_flecs_sparse_get_any, @function
_flecs_sparse_get_any:
.LFB297:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10753, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2229
	leaq	__PRETTY_FUNCTION__.11048(%rip), %rcx
	movl	$10753, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2229:
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10754, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2230
	leaq	__PRETTY_FUNCTION__.11048(%rip), %rcx
	movl	$10754, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2230:
	cmpl	$0, -12(%rbp)
	je	.L2231
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jne	.L2232
.L2231:
	movl	$1, %eax
	jmp	.L2233
.L2232:
	movl	$0, %eax
.L2233:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10755, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC377(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -12(%rbp)
	je	.L2234
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -12(%rbp)
	je	.L2234
	leaq	__PRETTY_FUNCTION__.11048(%rip), %rcx
	movl	$10755, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC377(%rip), %rdi
	call	__assert_fail@PLT
.L2234:
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	try_sparse_any
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE297:
	.size	_flecs_sparse_get_any, .-_flecs_sparse_get_any
	.globl	flecs_sparse_count
	.type	flecs_sparse_count, @function
flecs_sparse_count:
.LFB298:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2237
	movl	$0, %eax
	jmp	.L2238
.L2237:
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	subl	$1, %eax
.L2238:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE298:
	.size	flecs_sparse_count, .-flecs_sparse_count
	.globl	flecs_sparse_size
	.type	flecs_sparse_size, @function
flecs_sparse_size:
.LFB299:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$8, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2240
	movl	$0, %eax
	jmp	.L2241
.L2240:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	subl	$1, %eax
.L2241:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE299:
	.size	flecs_sparse_size, .-flecs_sparse_size
	.globl	flecs_sparse_ids
	.type	flecs_sparse_ids, @function
flecs_sparse_ids:
.LFB300:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10783, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2243
	leaq	__PRETTY_FUNCTION__.11058(%rip), %rcx
	movl	$10783, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2243:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	addq	$8, %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE300:
	.size	flecs_sparse_ids, .-flecs_sparse_ids
	.globl	flecs_sparse_set_size
	.type	flecs_sparse_set_size, @function
flecs_sparse_set_size:
.LFB301:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10791, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC375(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2246
	leaq	__PRETTY_FUNCTION__.11063(%rip), %rcx
	movl	$10791, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC376(%rip), %rdi
	call	__assert_fail@PLT
.L2246:
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_set_size
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE301:
	.size	flecs_sparse_set_size, .-flecs_sparse_set_size
	.section	.rodata
.LC381:
	.string	"src->count == dst->count"
	.text
	.type	sparse_copy, @function
sparse_copy:
.LFB302:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_sparse_size
	movl	%eax, %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_sparse_set_size
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_sparse_ids
	movq	%rax, -32(%rbp)
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -44(%rbp)
	jmp	.L2248
.L2249:
	movl	-44(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdx
	movl	-40(%rbp), %ecx
	movq	-64(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rdx
	movl	-40(%rbp), %ecx
	movq	-56(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_ensure
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_set_generation
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	addl	$1, -44(%rbp)
.L2248:
	movl	-36(%rbp), %eax
	subl	$1, %eax
	cmpl	%eax, -44(%rbp)
	jl	.L2249
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	get_id
	movq	%rax, %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	set_id
	movq	-64(%rbp), %rax
	movl	20(%rax), %edx
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, %edx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10816, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC381(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rax
	movl	20(%rax), %edx
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, %edx
	je	.L2251
	leaq	__PRETTY_FUNCTION__.11078(%rip), %rcx
	movl	$10816, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC381(%rip), %rdi
	call	__assert_fail@PLT
.L2251:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE302:
	.size	sparse_copy, .-sparse_copy
	.globl	flecs_sparse_copy
	.type	flecs_sparse_copy, @function
flecs_sparse_copy:
.LFB303:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L2253
	movl	$0, %eax
	jmp	.L2254
.L2253:
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, %edi
	call	_flecs_sparse_new
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	sparse_copy
	movq	-8(%rbp), %rax
.L2254:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE303:
	.size	flecs_sparse_copy, .-flecs_sparse_copy
	.globl	flecs_sparse_restore
	.type	flecs_sparse_restore, @function
flecs_sparse_restore:
.LFB304:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$10836, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC147(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2256
	leaq	__PRETTY_FUNCTION__.11087(%rip), %rcx
	movl	$10836, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC148(%rip), %rdi
	call	__assert_fail@PLT
.L2256:
	movq	-8(%rbp), %rax
	movl	$1, 20(%rax)
	cmpq	$0, -16(%rbp)
	je	.L2258
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	sparse_copy
.L2258:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE304:
	.size	flecs_sparse_restore, .-flecs_sparse_restore
	.globl	flecs_sparse_memory
	.type	flecs_sparse_memory, @function
flecs_sparse_memory:
.LFB305:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE305:
	.size	flecs_sparse_memory, .-flecs_sparse_memory
	.globl	_ecs_sparse_new
	.type	_ecs_sparse_new, @function
_ecs_sparse_new:
.LFB306:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, %edi
	call	_flecs_sparse_new
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE306:
	.size	_ecs_sparse_new, .-_ecs_sparse_new
	.globl	_ecs_sparse_add
	.type	_ecs_sparse_add, @function
_ecs_sparse_add:
.LFB307:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_add
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE307:
	.size	_ecs_sparse_add, .-_ecs_sparse_add
	.globl	ecs_sparse_last_id
	.type	ecs_sparse_last_id, @function
ecs_sparse_last_id:
.LFB308:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_sparse_last_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE308:
	.size	ecs_sparse_last_id, .-ecs_sparse_last_id
	.globl	ecs_sparse_count
	.type	ecs_sparse_count, @function
ecs_sparse_count:
.LFB309:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$8, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE309:
	.size	ecs_sparse_count, .-ecs_sparse_count
	.globl	_ecs_sparse_get_dense
	.type	_ecs_sparse_get_dense, @function
_ecs_sparse_get_dense:
.LFB310:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE310:
	.size	_ecs_sparse_get_dense, .-_ecs_sparse_get_dense
	.globl	_ecs_sparse_get
	.type	_ecs_sparse_get, @function
_ecs_sparse_get:
.LFB311:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movl	-12(%rbp), %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE311:
	.size	_ecs_sparse_get, .-_ecs_sparse_get
	.globl	ecs_count_w_filter
	.type	ecs_count_w_filter, @function
ecs_count_w_filter:
.LFB312:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_count_filter
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE312:
	.size	ecs_count_w_filter, .-ecs_count_w_filter
	.globl	ecs_count_entity
	.type	ecs_count_entity, @function
ecs_count_entity:
.LFB313:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_count_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE313:
	.size	ecs_count_entity, .-ecs_count_entity
	.globl	ecs_set_component_actions_w_entity
	.type	ecs_set_component_actions_w_entity, @function
ecs_set_component_actions_w_entity:
.LFB314:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_component_actions_w_id
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE314:
	.size	ecs_set_component_actions_w_entity, .-ecs_set_component_actions_w_entity
	.globl	ecs_new_w_entity
	.type	ecs_new_w_entity, @function
ecs_new_w_entity:
.LFB315:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_new_w_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE315:
	.size	ecs_new_w_entity, .-ecs_new_w_entity
	.globl	ecs_bulk_new_w_entity
	.type	ecs_bulk_new_w_entity, @function
ecs_bulk_new_w_entity:
.LFB316:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %edx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_bulk_new_w_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE316:
	.size	ecs_bulk_new_w_entity, .-ecs_bulk_new_w_entity
	.globl	ecs_enable_component_w_entity
	.type	ecs_enable_component_w_entity, @function
ecs_enable_component_w_entity:
.LFB317:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, %eax
	movb	%al, -28(%rbp)
	movzbl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_enable_component_w_id
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE317:
	.size	ecs_enable_component_w_entity, .-ecs_enable_component_w_entity
	.globl	ecs_is_component_enabled_w_entity
	.type	ecs_is_component_enabled_w_entity, @function
ecs_is_component_enabled_w_entity:
.LFB318:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_is_component_enabled_w_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE318:
	.size	ecs_is_component_enabled_w_entity, .-ecs_is_component_enabled_w_entity
	.globl	ecs_get_w_id
	.type	ecs_get_w_id, @function
ecs_get_w_id:
.LFB319:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE319:
	.size	ecs_get_w_id, .-ecs_get_w_id
	.globl	ecs_get_w_entity
	.type	ecs_get_w_entity, @function
ecs_get_w_entity:
.LFB320:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE320:
	.size	ecs_get_w_entity, .-ecs_get_w_entity
	.globl	ecs_get_ref_w_entity
	.type	ecs_get_ref_w_entity, @function
ecs_get_ref_w_entity:
.LFB321:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_ref_w_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE321:
	.size	ecs_get_ref_w_entity, .-ecs_get_ref_w_entity
	.globl	ecs_get_mut_w_entity
	.type	ecs_get_mut_w_entity, @function
ecs_get_mut_w_entity:
.LFB322:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_mut_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE322:
	.size	ecs_get_mut_w_entity, .-ecs_get_mut_w_entity
	.globl	ecs_get_mut_w_id
	.type	ecs_get_mut_w_id, @function
ecs_get_mut_w_id:
.LFB323:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_mut_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE323:
	.size	ecs_get_mut_w_id, .-ecs_get_mut_w_id
	.globl	ecs_modified_w_entity
	.type	ecs_modified_w_entity, @function
ecs_modified_w_entity:
.LFB324:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_modified_id
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE324:
	.size	ecs_modified_w_entity, .-ecs_modified_w_entity
	.globl	ecs_modified_w_id
	.type	ecs_modified_w_id, @function
ecs_modified_w_id:
.LFB325:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_modified_id
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE325:
	.size	ecs_modified_w_id, .-ecs_modified_w_id
	.globl	ecs_set_ptr_w_entity
	.type	ecs_set_ptr_w_entity, @function
ecs_set_ptr_w_entity:
.LFB326:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	ecs_set_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE326:
	.size	ecs_set_ptr_w_entity, .-ecs_set_ptr_w_entity
	.globl	ecs_has_entity
	.type	ecs_has_entity, @function
ecs_has_entity:
.LFB327:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE327:
	.size	ecs_has_entity, .-ecs_has_entity
	.globl	ecs_entity_str
	.type	ecs_entity_str, @function
ecs_entity_str:
.LFB328:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_id_str
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE328:
	.size	ecs_entity_str, .-ecs_entity_str
	.globl	ecs_get_parent_w_entity
	.type	ecs_get_parent_w_entity, @function
ecs_get_parent_w_entity:
.LFB329:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	$276, %edx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_get_object
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE329:
	.size	ecs_get_parent_w_entity, .-ecs_get_parent_w_entity
	.globl	ecs_get_thread_index
	.type	ecs_get_thread_index, @function
ecs_get_thread_index:
.LFB330:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE330:
	.size	ecs_get_thread_index, .-ecs_get_thread_index
	.globl	ecs_add_entity
	.type	ecs_add_entity, @function
ecs_add_entity:
.LFB331:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE331:
	.size	ecs_add_entity, .-ecs_add_entity
	.globl	ecs_remove_entity
	.type	ecs_remove_entity, @function
ecs_remove_entity:
.LFB332:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_remove_id
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE332:
	.size	ecs_remove_entity, .-ecs_remove_entity
	.globl	ecs_dim_type
	.type	ecs_dim_type, @function
ecs_dim_type:
.LFB333:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -36(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11073, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2309
	leaq	__PRETTY_FUNCTION__.11228(%rip), %rcx
	movl	$11073, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2309:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11074, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L2310
	leaq	__PRETTY_FUNCTION__.11228(%rip), %rcx
	movl	$11074, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L2310:
	cmpq	$0, -32(%rbp)
	je	.L2313
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_table_from_type
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11077, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L2312
	leaq	__PRETTY_FUNCTION__.11228(%rip), %rcx
	movl	$11077, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L2312:
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -8(%rbp)
	movl	-36(%rbp), %ecx
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_set_size
.L2313:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE333:
	.size	ecs_dim_type, .-ecs_dim_type
	.globl	ecs_type_from_entity
	.type	ecs_type_from_entity, @function
ecs_type_from_entity:
.LFB334:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_type_from_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE334:
	.size	ecs_type_from_entity, .-ecs_type_from_entity
	.globl	ecs_type_to_entity
	.type	ecs_type_to_entity, @function
ecs_type_to_entity:
.LFB335:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_type_to_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE335:
	.size	ecs_type_to_entity, .-ecs_type_to_entity
	.globl	ecs_type_has_entity
	.type	ecs_type_has_entity, @function
ecs_type_has_entity:
.LFB336:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE336:
	.size	ecs_type_has_entity, .-ecs_type_has_entity
	.globl	ecs_type_owns_entity
	.type	ecs_type_owns_entity, @function
ecs_type_owns_entity:
.LFB337:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, %eax
	movb	%al, -28(%rbp)
	movzbl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_type_has_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE337:
	.size	ecs_type_owns_entity, .-ecs_type_owns_entity
	.section	.rodata
.LC382:
	.string	"index <= it->column_count"
.LC383:
	.string	"index > 0"
.LC384:
	.string	"it->types != NULL"
.LC385:
	.string	"it->types != ((void *)0)"
	.text
	.globl	ecs_column_type
	.type	ecs_column_type, @function
ecs_column_type:
.LFB338:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	%eax, -12(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11119, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC382(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jle	.L2323
	leaq	__PRETTY_FUNCTION__.11254(%rip), %rcx
	movl	$11119, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC382(%rip), %rdi
	call	__assert_fail@PLT
.L2323:
	cmpl	$0, -12(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11120, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC383(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -12(%rbp)
	jg	.L2324
	leaq	__PRETTY_FUNCTION__.11254(%rip), %rcx
	movl	$11120, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC383(%rip), %rdi
	call	__assert_fail@PLT
.L2324:
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11121, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC384(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	testq	%rax, %rax
	jne	.L2325
	leaq	__PRETTY_FUNCTION__.11254(%rip), %rcx
	movl	$11121, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC385(%rip), %rdi
	call	__assert_fail@PLT
.L2325:
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	subq	$8, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE338:
	.size	ecs_column_type, .-ecs_column_type
	.globl	ecs_column_index_from_name
	.type	ecs_column_index_from_name, @function
ecs_column_index_from_name:
.LFB339:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	120(%rax), %rax
	testq	%rax, %rax
	je	.L2328
	movq	-40(%rbp), %rax
	movq	120(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	120(%rax), %rax
	movl	8(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L2329
.L2332:
	movl	-24(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	176(%rax), %rax
	testq	%rax, %rax
	je	.L2330
	movq	-8(%rbp), %rax
	movq	176(%rax), %rdx
	movq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2330
	movl	-24(%rbp), %eax
	addl	$1, %eax
	jmp	.L2331
.L2330:
	addl	$1, -24(%rbp)
.L2329:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L2332
.L2328:
	movl	$0, %eax
.L2331:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE339:
	.size	ecs_column_index_from_name, .-ecs_column_index_from_name
	.globl	ecs_column_w_size
	.type	ecs_column_w_size, @function
ecs_column_w_size:
.LFB340:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %edx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_term_w_size
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE340:
	.size	ecs_column_w_size, .-ecs_column_w_size
	.globl	ecs_is_owned
	.type	ecs_is_owned, @function
ecs_is_owned:
.LFB341:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_term_is_owned
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE341:
	.size	ecs_is_owned, .-ecs_is_owned
	.globl	ecs_is_readonly
	.type	ecs_is_readonly, @function
ecs_is_readonly:
.LFB342:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_term_is_readonly
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE342:
	.size	ecs_is_readonly, .-ecs_is_readonly
	.globl	ecs_column_source
	.type	ecs_column_source, @function
ecs_column_source:
.LFB343:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_term_source
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE343:
	.size	ecs_column_source, .-ecs_column_source
	.globl	ecs_column_entity
	.type	ecs_column_entity, @function
ecs_column_entity:
.LFB344:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_term_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE344:
	.size	ecs_column_entity, .-ecs_column_entity
	.globl	ecs_column_size
	.type	ecs_column_size, @function
ecs_column_size:
.LFB345:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_term_size
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE345:
	.size	ecs_column_size, .-ecs_column_size
	.globl	ecs_table_component_index
	.type	ecs_table_component_index, @function
ecs_table_component_index:
.LFB346:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_iter_find_column
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE346:
	.size	ecs_table_component_index, .-ecs_table_component_index
	.globl	ecs_table_column
	.type	ecs_table_column, @function
ecs_table_column:
.LFB347:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_iter_column_w_size
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE347:
	.size	ecs_table_column, .-ecs_table_column
	.globl	ecs_table_column_size
	.type	ecs_table_column_size, @function
ecs_table_column_size:
.LFB348:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_iter_column_size
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE348:
	.size	ecs_table_column_size, .-ecs_table_column_size
	.globl	ecs_query_new
	.type	ecs_query_new, @function
ecs_query_new:
.LFB349:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$3200, %rsp
	movq	%rdi, -3192(%rbp)
	movq	%rsi, -3200(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-3184(%rbp), %rdx
	movl	$0, %eax
	movl	$396, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-3200(%rbp), %rax
	movq	%rax, -96(%rbp)
	leaq	-3184(%rbp), %rdx
	movq	-3192(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_init
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L2353
	call	__stack_chk_fail@PLT
.L2353:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE349:
	.size	ecs_query_new, .-ecs_query_new
	.globl	ecs_query_free
	.type	ecs_query_free, @function
ecs_query_free:
.LFB350:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_fini
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE350:
	.size	ecs_query_free, .-ecs_query_free
	.globl	ecs_subquery_new
	.type	ecs_subquery_new, @function
ecs_subquery_new:
.LFB351:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$3216, %rsp
	movq	%rdi, -3192(%rbp)
	movq	%rsi, -3200(%rbp)
	movq	%rdx, -3208(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-3184(%rbp), %rdx
	movl	$0, %eax
	movl	$396, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-3208(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-3200(%rbp), %rax
	movq	%rax, -32(%rbp)
	leaq	-3184(%rbp), %rdx
	movq	-3192(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_init
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L2357
	call	__stack_chk_fail@PLT
.L2357:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE351:
	.size	ecs_subquery_new, .-ecs_subquery_new
	.section	.rodata
.LC386:
	.string	"e != 0"
	.text
	.type	ensure_entity, @function
ensure_entity:
.LFB352:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$1, %r9d
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_lookup_path_w_sep
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2359
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_new_from_path_w_sep
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11251, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC386(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2359
	leaq	__PRETTY_FUNCTION__.11322(%rip), %rcx
	movl	$11251, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC386(%rip), %rdi
	call	__assert_fail@PLT
.L2359:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE352:
	.size	ensure_entity, .-ensure_entity
	.section	.rodata
	.align 8
.LC387:
	.string	"missing predicate in expression"
.LC388:
	.string	"missing subject in expression"
	.text
	.type	create_term, @function
create_term:
.LFB353:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movl	%r8d, -68(%rbp)
	movq	-48(%rbp), %rax
	addq	$16, %rax
	movq	%rax, %rdi
	call	ecs_term_id_is_set
	xorl	$1, %eax
	testb	%al, %al
	je	.L2362
	movl	-68(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	leaq	.LC387(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2362:
	movq	-48(%rbp), %rax
	addq	$64, %rax
	movq	%rax, %rdi
	call	ecs_term_id_is_set
	xorl	$1, %eax
	testb	%al, %al
	je	.L2363
	movl	-68(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	leaq	.LC388(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2363:
	movq	-48(%rbp), %rax
	movq	24(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ensure_entity
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movq	72(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ensure_entity
	movq	%rax, -8(%rbp)
	movq	$0, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$112, %rax
	movq	%rax, %rdi
	call	ecs_term_id_is_set
	testb	%al, %al
	je	.L2364
	movq	-48(%rbp), %rax
	movq	120(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ensure_entity
	movq	%rax, -24(%rbp)
.L2364:
	cmpq	$0, -24(%rbp)
	jne	.L2365
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	jmp	.L2366
.L2365:
	movq	-16(%rbp), %rax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-8(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L2366:
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE353:
	.size	create_term, .-create_term
	.globl	ecs_plecs_from_str
	.type	ecs_plecs_from_str, @function
ecs_plecs_from_str:
.LFB354:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$256, %rsp
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	%rdx, -248(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-248(%rbp), %rax
	movq	%rax, -216(%rbp)
	leaq	-208(%rbp), %rdx
	movl	$0, %eax
	movl	$24, %ecx
	movq	%rdx, %rdi
	rep stosq
	cmpq	$0, -248(%rbp)
	jne	.L2371
	movl	$0, %eax
	jmp	.L2376
.L2375:
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_is_initialized
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2378
	movq	-216(%rbp), %rax
	subq	-248(%rbp), %rax
	movl	%eax, %edi
	movq	-248(%rbp), %rcx
	movq	-240(%rbp), %rdx
	leaq	-208(%rbp), %rsi
	movq	-232(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	create_term
	testl	%eax, %eax
	je	.L2374
	movl	$-1, %eax
	jmp	.L2376
.L2374:
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_fini
	movq	-216(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$10, %al
	jne	.L2371
	addq	$1, -216(%rbp)
	movq	-216(%rbp), %rax
	movq	%rax, -248(%rbp)
.L2371:
	movq	-216(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L2373
	leaq	-208(%rbp), %rdi
	movq	-216(%rbp), %rcx
	movq	-248(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	-232(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	ecs_parse_term
	movq	%rax, -216(%rbp)
	cmpq	$0, -216(%rbp)
	jne	.L2375
	jmp	.L2373
.L2378:
	nop
.L2373:
	movl	$0, %eax
.L2376:
	movq	-8(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L2377
	call	__stack_chk_fail@PLT
.L2377:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE354:
	.size	ecs_plecs_from_str, .-ecs_plecs_from_str
	.section	.rodata
.LC389:
	.string	"r"
	.align 8
.LC390:
	.string	"%s: read zero bytes instead of %d"
	.text
	.globl	ecs_plecs_from_file
	.type	ecs_plecs_from_file, @function
ecs_plecs_from_file:
.LFB355:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	$0, -24(%rbp)
	movq	-64(%rbp), %rax
	leaq	.LC389(%rip), %rsi
	movq	%rax, %rdi
	call	fopen@PLT
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	jne	.L2380
	call	__errno_location@PLT
	movl	(%rax), %eax
	movl	%eax, %edi
	call	ecs_os_strerror
	movq	-64(%rbp), %rdx
	movq	%rdx, %r8
	movq	%rax, %rcx
	leaq	.LC36(%rip), %rdx
	movl	$11336, %esi
	leaq	.LC74(%rip), %rdi
	movl	$0, %eax
	call	_ecs_err
	jmp	.L2381
.L2380:
	movq	-32(%rbp), %rax
	movl	$2, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	fseek@PLT
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	ftell@PLT
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	je	.L2387
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	rewind@PLT
	movq	16+ecs_os_api(%rip), %rax
	movl	-40(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -24(%rbp)
	movl	-40(%rbp), %eax
	cltq
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	fread@PLT
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L2383
	cmpl	$0, -40(%rbp)
	je	.L2383
	movq	-16(%rbp), %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, %r8
	movq	%rax, %rcx
	leaq	.LC390(%rip), %rdx
	movl	$11352, %esi
	leaq	.LC74(%rip), %rdi
	movl	$0, %eax
	call	_ecs_err
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	$0, -24(%rbp)
	jmp	.L2381
.L2383:
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	fclose@PLT
	movq	-24(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_plecs_from_str
	movl	%eax, -36(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movl	-36(%rbp), %eax
	jmp	.L2385
.L2387:
	nop
.L2381:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movl	$-1, %eax
.L2385:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L2386
	call	__stack_chk_fail@PLT
.L2386:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE355:
	.size	ecs_plecs_from_file, .-ecs_plecs_from_file
	.globl	ecs_module_path_from_c
	.type	ecs_module_path_from_c, @function
ecs_module_path_from_c:
.LFB356:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1136, %rsp
	movq	%rdi, -1128(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-1104(%rbp), %rdx
	movl	$0, %eax
	movl	$136, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-1128(%rbp), %rax
	movq	%rax, -1112(%rbp)
	jmp	.L2389
.L2391:
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movzbl	-1113(%rbp), %edx
	movsbq	%dl, %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$256, %eax
	testl	%eax, %eax
	je	.L2390
	movzbl	-1113(%rbp), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	tolower@PLT
	cltq
	movq	%rax, %rdi
	call	flflecs_to_i8
	movb	%al, -1113(%rbp)
	movq	-1112(%rbp), %rax
	cmpq	-1128(%rbp), %rax
	je	.L2390
	leaq	-1104(%rbp), %rax
	movl	$1, %edx
	leaq	.LC264(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstrn
.L2390:
	leaq	-1113(%rbp), %rcx
	leaq	-1104(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstrn
	addq	$1, -1112(%rbp)
.L2389:
	movq	-1112(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -1113(%rbp)
	movzbl	-1113(%rbp), %eax
	testb	%al, %al
	jne	.L2391
	leaq	-1104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_get
	movq	-8(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L2393
	call	__stack_chk_fail@PLT
.L2393:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE356:
	.size	ecs_module_path_from_c, .-ecs_module_path_from_c
	.section	.rodata
.LC391:
	.string	"import %s"
	.text
	.globl	ecs_import
	.type	ecs_import, @function
ecs_import:
.LFB357:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	-56(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11403, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$70, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2395
	leaq	__PRETTY_FUNCTION__.11370(%rip), %rcx
	movl	$11403, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L2395:
	movq	-56(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_set_scope
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_module_path_from_c
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-56(%rbp), %rax
	movl	$1, %r9d
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_lookup_path_w_sep
	movq	%rax, -40(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	cmpq	$0, -40(%rbp)
	jne	.L2396
	movq	-72(%rbp), %rax
	movq	%rax, %r8
	leaq	.LC391(%rip), %rcx
	movl	$11413, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
	call	ecs_log_push
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rax, %rdi
	call	*%rdx
	movq	-72(%rbp), %rdx
	movq	-56(%rbp), %rax
	movl	$1, %r9d
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_lookup_path_w_sep
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movq	-72(%rbp), %rdx
	movq	%rdx, %r9
	movl	$11421, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC386(%rip), %rdx
	movl	$28, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L2397
	leaq	__PRETTY_FUNCTION__.11370(%rip), %rcx
	movl	$11421, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC386(%rip), %rdi
	call	__assert_fail@PLT
.L2397:
	call	ecs_log_pop
.L2396:
	cmpq	$0, -88(%rbp)
	je	.L2398
	cmpq	$0, -80(%rbp)
	je	.L2398
	movq	-40(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -8(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movslq	%eax, %rdx
	movq	-8(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L2398:
	movq	-32(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_set_scope
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, 464(%rax)
	movq	-40(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE357:
	.size	ecs_import, .-ecs_import
	.section	.rodata
.LC392:
	.string	"library_name != NULL"
.LC393:
	.string	"library_name != ((void *)0)"
	.align 8
.LC394:
	.string	"library loading not supported, set module_to_dl, dlopen, dlclose and dlproc os API callbacks first"
.LC395:
	.string	"import_func != NULL"
.LC396:
	.string	"import_func != ((void *)0)"
.LC397:
	.string	"module != NULL"
.LC398:
	.string	"module != ((void *)0)"
	.align 8
.LC399:
	.string	"failed to find library file for '%s'"
	.align 8
.LC400:
	.string	"found file '%s' for library '%s'"
	.align 8
.LC401:
	.string	"failed to load library '%s' ('%s')"
.LC402:
	.string	"library '%s' ('%s') loaded"
	.align 8
.LC403:
	.string	"failed to load import function %s from library %s"
	.align 8
.LC404:
	.string	"found import function '%s' in library '%s' for module '%s'"
	.text
	.globl	ecs_import_from_library
	.type	ecs_import_from_library, @function
ecs_import_from_library:
.LFB358:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	cmpq	$0, -112(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11444, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC392(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -112(%rbp)
	jne	.L2401
	leaq	__PRETTY_FUNCTION__.11381(%rip), %rcx
	movl	$11444, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC393(%rip), %rdi
	call	__assert_fail@PLT
.L2401:
	movq	-120(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -72(%rbp)
	call	ecs_os_has_modules
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2402
	call	ecs_os_has_dl
	xorl	$1, %eax
	testb	%al, %al
	je	.L2403
.L2402:
	leaq	.LC394(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	movl	$0, %eax
	jmp	.L2404
.L2403:
	cmpq	$0, -80(%rbp)
	jne	.L2405
	movq	16+ecs_os_api(%rip), %rbx
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	addl	$7, %eax
	movl	%eax, %edi
	call	*%rbx
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11460, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC395(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	jne	.L2406
	leaq	__PRETTY_FUNCTION__.11381(%rip), %rcx
	movl	$11460, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC396(%rip), %rdi
	call	__assert_fail@PLT
.L2406:
	movq	-80(%rbp), %rax
	movq	%rax, -56(%rbp)
	movb	$1, -82(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -64(%rbp)
	jmp	.L2407
.L2411:
	cmpb	$46, -81(%rbp)
	jne	.L2408
	movb	$1, -82(%rbp)
	jmp	.L2409
.L2408:
	cmpb	$0, -82(%rbp)
	je	.L2410
	movsbl	-81(%rbp), %eax
	movl	%eax, %edi
	call	toupper@PLT
	cltq
	movq	%rax, %rdi
	call	flflecs_to_i8
	movq	-56(%rbp), %rdx
	movb	%al, (%rdx)
	addq	$1, -56(%rbp)
	movb	$0, -82(%rbp)
	jmp	.L2409
.L2410:
	movsbl	-81(%rbp), %eax
	movl	%eax, %edi
	call	tolower@PLT
	cltq
	movq	%rax, %rdi
	call	flflecs_to_i8
	movq	-56(%rbp), %rdx
	movb	%al, (%rdx)
	addq	$1, -56(%rbp)
.L2409:
	addq	$1, -64(%rbp)
.L2407:
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -81(%rbp)
	cmpb	$0, -81(%rbp)
	jne	.L2411
	movq	-56(%rbp), %rax
	movb	$0, (%rax)
	movq	48+ecs_os_api(%rip), %rdx
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11483, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC397(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L2412
	leaq	__PRETTY_FUNCTION__.11381(%rip), %rcx
	movl	$11483, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC398(%rip), %rdi
	call	__assert_fail@PLT
.L2412:
	movq	-56(%rbp), %rax
	movq	$-1, %rcx
	movq	%rax, %rdx
	movl	$0, %eax
	movq	%rdx, %rdi
	repnz scasb
	movq	%rcx, %rax
	notq	%rax
	leaq	-1(%rax), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movl	$1869638985, (%rax)
	movw	$29810, 4(%rax)
	movb	$0, 6(%rax)
.L2405:
	movq	240+ecs_os_api(%rip), %rdx
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	.L2413
	movq	-112(%rbp), %rax
	movq	%rax, %rsi
	leaq	.LC399(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	movq	-72(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.L2414
	movq	40+ecs_os_api(%rip), %rdx
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L2414:
	movl	$0, %eax
	jmp	.L2404
.L2413:
	movq	-112(%rbp), %rdx
	movq	-48(%rbp), %rax
	movq	%rdx, %r9
	movq	%rax, %r8
	leaq	.LC400(%rip), %rcx
	movl	$11496, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
	movq	216+ecs_os_api(%rip), %rdx
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L2415
	movq	-48(%rbp), %rdx
	movq	-112(%rbp), %rax
	movq	%rax, %rsi
	leaq	.LC401(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	movq	40+ecs_os_api(%rip), %rdx
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-72(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.L2416
	movq	40+ecs_os_api(%rip), %rdx
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L2416:
	movl	$0, %eax
	jmp	.L2404
.L2415:
	movq	-48(%rbp), %rdx
	movq	-112(%rbp), %rax
	movq	%rdx, %r9
	movq	%rax, %r8
	leaq	.LC402(%rip), %rcx
	movl	$11513, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
	movq	224+ecs_os_api(%rip), %rcx
	movq	-80(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L2417
	movq	-112(%rbp), %rdx
	movq	-80(%rbp), %rax
	movq	%rax, %rsi
	leaq	.LC403(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
	movq	40+ecs_os_api(%rip), %rdx
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	232+ecs_os_api(%rip), %rdx
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movl	$0, %eax
	jmp	.L2404
.L2417:
	movq	-112(%rbp), %rdx
	movq	-80(%rbp), %rax
	subq	$8, %rsp
	pushq	-72(%rbp)
	movq	%rdx, %r9
	movq	%rax, %r8
	leaq	.LC404(%rip), %rcx
	movl	$11526, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
	addq	$16, %rsp
	movq	-72(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-104(%rbp), %rax
	movl	$0, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_import
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.L2418
	movq	40+ecs_os_api(%rip), %rdx
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L2418:
	movq	-72(%rbp), %rax
	cmpq	-120(%rbp), %rax
	je	.L2419
	movq	40+ecs_os_api(%rip), %rdx
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L2419:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-24(%rbp), %rax
.L2404:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE358:
	.size	ecs_import_from_library, .-ecs_import_from_library
	.section	.rodata
.LC405:
	.string	"module != 0"
.LC406:
	.string	"pair != NULL"
.LC407:
	.string	"pair != ((void *)0)"
	.text
	.globl	ecs_add_module_tag
	.type	ecs_add_module_tag, @function
ecs_add_module_tag:
.LFB359:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11550, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L2421
	leaq	__PRETTY_FUNCTION__.11399(%rip), %rcx
	movl	$11550, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2421:
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11551, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC405(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L2422
	leaq	__PRETTY_FUNCTION__.11399(%rip), %rcx
	movl	$11551, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC405(%rip), %rdi
	call	__assert_fail@PLT
.L2422:
	movq	-48(%rbp), %rax
	movq	%rax, -24(%rbp)
.L2426:
	movl	$259, %edx
	movq	-24(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movq	-24(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_type
	movq	%rax, -16(%rbp)
	movl	$276, %eax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-16(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -28(%rbp)
	cmpl	$-1, -28(%rbp)
	je	.L2428
	movl	-28(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11564, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC406(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2425
	leaq	__PRETTY_FUNCTION__.11399(%rip), %rcx
	movl	$11564, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC407(%rip), %rdi
	call	__assert_fail@PLT
.L2425:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -24(%rbp)
	jmp	.L2426
.L2428:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE359:
	.size	ecs_add_module_tag, .-ecs_add_module_tag
	.section	.rodata
.LC408:
	.string	"result == e"
	.text
	.globl	ecs_module_init
	.type	ecs_module_init, @function
ecs_module_init:
.LFB360:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$656, %rsp
	movq	%rdi, -648(%rbp)
	movq	%rsi, -656(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -648(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11573, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -648(%rbp)
	jne	.L2430
	leaq	__PRETTY_FUNCTION__.11409(%rip), %rcx
	movl	$11573, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2430:
	cmpq	$0, -656(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11574, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC262(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -656(%rbp)
	jne	.L2431
	leaq	__PRETTY_FUNCTION__.11409(%rip), %rcx
	movl	$11574, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC263(%rip), %rdi
	call	__assert_fail@PLT
.L2431:
	movq	-648(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11575, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-648(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L2432
	leaq	__PRETTY_FUNCTION__.11409(%rip), %rcx
	movl	$11575, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L2432:
	movq	-656(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -640(%rbp)
	movq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_module_path_from_c
	movq	%rax, -632(%rbp)
	movq	-632(%rbp), %rdx
	movq	-648(%rbp), %rax
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_new_from_path_w_sep
	movq	%rax, -624(%rbp)
	movq	-632(%rbp), %rdx
	movq	-624(%rbp), %rcx
	movq	-648(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movq	40+ecs_os_api(%rip), %rdx
	movq	-632(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-656(%rbp), %rdx
	leaq	-608(%rbp), %rax
	movq	%rdx, %rsi
	movl	$74, %edx
	movq	%rax, %rdi
	movq	%rdx, %rcx
	rep movsq
	movq	-624(%rbp), %rax
	movq	%rax, -608(%rbp)
	movq	$0, -600(%rbp)
	leaq	-608(%rbp), %rdx
	movq	-648(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_component_init
	movq	%rax, -616(%rbp)
	cmpq	$0, -616(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11589, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC270(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -616(%rbp)
	jne	.L2433
	leaq	__PRETTY_FUNCTION__.11409(%rip), %rcx
	movl	$11589, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC270(%rip), %rdi
	call	__assert_fail@PLT
.L2433:
	movq	-616(%rbp), %rax
	cmpq	-624(%rbp), %rax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11590, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC408(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-616(%rbp), %rax
	cmpq	-624(%rbp), %rax
	je	.L2434
	leaq	__PRETTY_FUNCTION__.11409(%rip), %rcx
	movl	$11590, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC408(%rip), %rdi
	call	__assert_fail@PLT
.L2434:
	movq	-616(%rbp), %rdx
	movq	-648(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_add_module_tag
	movq	-656(%rbp), %rax
	movq	576(%rax), %rcx
	movq	-616(%rbp), %rdx
	movq	-616(%rbp), %rsi
	movq	-648(%rbp), %rax
	movl	$0, %r8d
	movq	%rax, %rdi
	call	ecs_set_id
	movq	-616(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L2436
	call	__stack_chk_fail@PLT
.L2436:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE360:
	.size	ecs_module_init, .-ecs_module_init
	.globl	_ecs_queue_new
	.type	_ecs_queue_new, @function
_ecs_queue_new:
.LFB361:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	movl	%esi, %eax
	movl	%edx, -28(%rbp)
	movw	%ax, -24(%rbp)
	movq	16+ecs_os_api(%rip), %rax
	movl	$16, %edi
	call	*%rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11617, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2438
	leaq	__PRETTY_FUNCTION__.11423(%rip), %rcx
	movl	$11617, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L2438:
	movswl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	movl	-20(%rbp), %eax
	movl	%ecx, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	-8(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE361:
	.size	_ecs_queue_new, .-_ecs_queue_new
	.globl	_ecs_queue_from_array
	.type	_ecs_queue_from_array, @function
_ecs_queue_from_array:
.LFB362:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movl	%edi, -20(%rbp)
	movl	%esi, %eax
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movw	%ax, -24(%rbp)
	movq	16+ecs_os_api(%rip), %rax
	movl	$16, %edi
	call	*%rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11631, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2441
	leaq	__PRETTY_FUNCTION__.11431(%rip), %rcx
	movl	$11631, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L2441:
	movswl	-24(%rbp), %esi
	movq	-40(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	-20(%rbp), %eax
	movl	%eax, %edi
	call	_ecs_vector_from_array
	movq	-8(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE362:
	.size	_ecs_queue_from_array, .-_ecs_queue_from_array
	.globl	_ecs_queue_push
	.type	_ecs_queue_push, @function
_ecs_queue_push:
.LFB363:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movw	%ax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jne	.L2444
	movswl	-32(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -8(%rbp)
	jmp	.L2445
.L2444:
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	movswl	-32(%rbp), %edx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -8(%rbp)
.L2445:
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-16(%rbp)
	movq	-24(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE363:
	.size	_ecs_queue_push, .-_ecs_queue_push
	.globl	ecs_queue_free
	.type	ecs_queue_free, @function
ecs_queue_free:
.LFB364:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE364:
	.size	ecs_queue_free, .-ecs_queue_free
	.globl	_ecs_queue_get
	.type	_ecs_queue_get, @function
_ecs_queue_get:
.LFB365:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movl	%ecx, -36(%rbp)
	movw	%ax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	subl	-8(%rbp), %eax
	movl	%eax, %edx
	movl	-4(%rbp), %eax
	addl	%eax, %edx
	movl	-36(%rbp), %eax
	addl	%edx, %eax
	cltd
	idivl	-4(%rbp)
	movl	%edx, -36(%rbp)
	movswl	-32(%rbp), %edx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	movl	-28(%rbp), %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE365:
	.size	_ecs_queue_get, .-_ecs_queue_get
	.globl	_ecs_queue_last
	.type	_ecs_queue_last, @function
_ecs_queue_last:
.LFB366:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movw	%ax, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.L2451
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_size
	movl	%eax, -4(%rbp)
.L2451:
	movl	-4(%rbp), %eax
	leal	-1(%rax), %ecx
	movswl	-32(%rbp), %edx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE366:
	.size	_ecs_queue_last, .-_ecs_queue_last
	.globl	ecs_queue_index
	.type	ecs_queue_index, @function
ecs_queue_index:
.LFB367:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE367:
	.size	ecs_queue_index, .-ecs_queue_index
	.globl	ecs_queue_count
	.type	ecs_queue_count, @function
ecs_queue_count:
.LFB368:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$8, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE368:
	.size	ecs_queue_count, .-ecs_queue_count
	.type	t_next, @function
t_next:
.LFB369:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rdx
	imulq	$-2004318071, %rdx, %rdx
	shrq	$32, %rdx
	addl	%eax, %edx
	movl	%edx, %ecx
	sarl	$5, %ecx
	cltd
	subl	%edx, %ecx
	movl	%ecx, %edx
	imull	$60, %edx, %edx
	subl	%edx, %eax
	movl	%eax, %edx
	movl	%edx, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE369:
	.size	t_next, .-t_next
	.type	t_prev, @function
t_prev:
.LFB370:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	addl	$59, %eax
	movslq	%eax, %rdx
	imulq	$-2004318071, %rdx, %rdx
	shrq	$32, %rdx
	addl	%eax, %edx
	movl	%edx, %ecx
	sarl	$5, %ecx
	cltd
	subl	%edx, %ecx
	movl	%ecx, %edx
	imull	$60, %edx, %edx
	subl	%edx, %eax
	movl	%eax, %edx
	movl	%edx, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE370:
	.size	t_prev, .-t_prev
	.type	_record_gauge, @function
_record_gauge:
.LFB371:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movss	%xmm0, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movss	-16(%rbp), %xmm0
	movss	%xmm0, (%rax,%rdx,4)
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	addq	$60, %rdx
	movss	-16(%rbp), %xmm0
	movss	%xmm0, (%rax,%rdx,4)
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	addq	$120, %rdx
	movss	-16(%rbp), %xmm0
	movss	%xmm0, (%rax,%rdx,4)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE371:
	.size	_record_gauge, .-_record_gauge
	.type	_record_counter, @function
_record_counter:
.LFB372:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movss	%xmm0, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, %edi
	call	t_prev
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	-8(%rbp), %edx
	movslq	%edx, %rdx
	addq	$180, %rdx
	movss	(%rax,%rdx,4), %xmm0
	movss	%xmm0, -4(%rbp)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$180, %rdx
	movss	-32(%rbp), %xmm0
	movss	%xmm0, (%rax,%rdx,4)
	movss	-32(%rbp), %xmm0
	subss	-4(%rbp), %xmm0
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	_record_gauge
	movss	-32(%rbp), %xmm0
	subss	-4(%rbp), %xmm0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE372:
	.size	_record_counter, .-_record_counter
	.section	.rodata
.LC409:
	.string	"%s: %*s %.2f\n"
	.text
	.type	print_value, @function
print_value:
.LFB373:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movss	%xmm0, -28(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, -4(%rbp)
	cvtss2sd	-28(%rbp), %xmm0
	movl	$32, %eax
	subl	-4(%rbp), %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	leaq	.LC34(%rip), %rcx
	movq	%rax, %rsi
	leaq	.LC409(%rip), %rdi
	movl	$1, %eax
	call	printf@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE373:
	.size	print_value, .-print_value
	.type	print_gauge, @function
print_gauge:
.LFB374:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rax,%rdx,4), %edx
	movq	-8(%rbp), %rax
	movd	%edx, %xmm0
	movq	%rax, %rdi
	call	print_value
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE374:
	.size	print_gauge, .-print_gauge
	.type	print_counter, @function
print_counter:
.LFB375:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rax,%rdx,4), %edx
	movq	-8(%rbp), %rax
	movd	%edx, %xmm0
	movq	%rax, %rdi
	call	print_value
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE375:
	.size	print_counter, .-print_counter
	.globl	ecs_gauge_reduce
	.type	ecs_gauge_reduce, @function
ecs_gauge_reduce:
.LFB376:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11905, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC147(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2468
	leaq	__PRETTY_FUNCTION__.11560(%rip), %rcx
	movl	$11905, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC148(%rip), %rdi
	call	__assert_fail@PLT
.L2468:
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11906, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC149(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L2469
	leaq	__PRETTY_FUNCTION__.11560(%rip), %rcx
	movl	$11906, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC150(%rip), %rdi
	call	__assert_fail@PLT
.L2469:
	movb	$0, -9(%rbp)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$60, %rdx
	pxor	%xmm0, %xmm0
	movss	%xmm0, (%rax,%rdx,4)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	pxor	%xmm0, %xmm0
	movss	%xmm0, (%rax,%rdx,4)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$120, %rdx
	pxor	%xmm0, %xmm0
	movss	%xmm0, (%rax,%rdx,4)
	movl	$0, -8(%rbp)
	jmp	.L2470
.L2476:
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	addl	%edx, %eax
	movslq	%eax, %rdx
	imulq	$-2004318071, %rdx, %rdx
	shrq	$32, %rdx
	addl	%eax, %edx
	movl	%edx, %ecx
	sarl	$5, %ecx
	cltd
	subl	%edx, %ecx
	movl	%ecx, %edx
	movl	%edx, -4(%rbp)
	movl	-4(%rbp), %edx
	imull	$60, %edx, %edx
	subl	%edx, %eax
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movss	(%rax,%rdx,4), %xmm1
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movss	(%rax,%rdx,4), %xmm0
	movss	.LC411(%rip), %xmm2
	divss	%xmm2, %xmm0
	addss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movss	%xmm0, (%rax,%rdx,4)
	movzbl	-9(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2471
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	addq	$60, %rdx
	movss	(%rax,%rdx,4), %xmm1
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$60, %rdx
	movss	(%rax,%rdx,4), %xmm0
	comiss	%xmm1, %xmm0
	jbe	.L2472
.L2471:
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	addq	$60, %rdx
	movss	(%rax,%rdx,4), %xmm0
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$60, %rdx
	movss	%xmm0, (%rax,%rdx,4)
	movb	$1, -9(%rbp)
.L2472:
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	addq	$120, %rdx
	movss	(%rax,%rdx,4), %xmm0
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$120, %rdx
	movss	(%rax,%rdx,4), %xmm1
	comiss	%xmm1, %xmm0
	jbe	.L2474
	movq	-40(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	addq	$120, %rdx
	movss	(%rax,%rdx,4), %xmm0
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$120, %rdx
	movss	%xmm0, (%rax,%rdx,4)
.L2474:
	addl	$1, -8(%rbp)
.L2470:
	cmpl	$59, -8(%rbp)
	jle	.L2476
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE376:
	.size	ecs_gauge_reduce, .-ecs_gauge_reduce
	.section	.rodata
.LC412:
	.string	"s != NULL"
.LC413:
	.string	"s != ((void *)0)"
	.text
	.globl	ecs_get_world_stats
	.type	ecs_get_world_stats, @function
ecs_get_world_stats:
.LFB377:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11931, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L2479
	leaq	__PRETTY_FUNCTION__.11571(%rip), %rcx
	movl	$11931, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2479:
	cmpq	$0, -96(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$11932, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC412(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -96(%rbp)
	jne	.L2480
	leaq	__PRETTY_FUNCTION__.11571(%rip), %rcx
	movl	$11932, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC413(%rip), %rdi
	call	__assert_fail@PLT
.L2480:
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -88(%rbp)
	movq	-96(%rbp), %rax
	movl	24244(%rax), %eax
	movl	%eax, %edi
	call	t_next
	movq	-96(%rbp), %rdx
	movl	%eax, 24244(%rdx)
	movq	-96(%rbp), %rax
	movl	24244(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-88(%rbp), %rax
	movl	592(%rax), %edx
	movq	-96(%rbp), %rax
	leaq	14164(%rax), %rcx
	movl	-48(%rbp), %eax
	movd	%edx, %xmm0
	movl	%eax, %esi
	movq	%rcx, %rdi
	call	_record_counter
	movd	%xmm0, %eax
	movl	%eax, -44(%rbp)
	movq	-88(%rbp), %rax
	movl	588(%rax), %edx
	movq	-96(%rbp), %rax
	leaq	15124(%rax), %rcx
	movl	-48(%rbp), %eax
	movd	%edx, %xmm0
	movl	%eax, %esi
	movq	%rcx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	576(%rax), %edx
	movq	-96(%rbp), %rax
	leaq	16084(%rax), %rcx
	movl	-48(%rbp), %eax
	movd	%edx, %xmm0
	movl	%eax, %esi
	movq	%rcx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	580(%rax), %edx
	movq	-96(%rbp), %rax
	leaq	17044(%rax), %rcx
	movl	-48(%rbp), %eax
	movd	%edx, %xmm0
	movl	%eax, %esi
	movq	%rcx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	584(%rax), %edx
	movq	-96(%rbp), %rax
	leaq	18004(%rax), %rcx
	movl	-48(%rbp), %eax
	movd	%edx, %xmm0
	movl	%eax, %esi
	movq	%rcx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	596(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	20404(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movd	%xmm0, %eax
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movl	600(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	21364(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	604(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	22324(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	608(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	23284(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	pxor	%xmm0, %xmm0
	ucomiss	-44(%rbp), %xmm0
	jp	.L2490
	pxor	%xmm0, %xmm0
	ucomiss	-44(%rbp), %xmm0
	je	.L2481
.L2490:
	pxor	%xmm0, %xmm0
	ucomiss	-40(%rbp), %xmm0
	jp	.L2491
	pxor	%xmm0, %xmm0
	ucomiss	-40(%rbp), %xmm0
	je	.L2481
.L2491:
	movss	-44(%rbp), %xmm0
	movaps	%xmm0, %xmm1
	divss	-40(%rbp), %xmm1
	movss	.LC414(%rip), %xmm0
	divss	%xmm1, %xmm0
	movq	-96(%rbp), %rax
	leaq	18964(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	jmp	.L2484
.L2481:
	movq	-96(%rbp), %rax
	leaq	18964(%rax), %rdx
	movl	-48(%rbp), %eax
	pxor	%xmm0, %xmm0
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
.L2484:
	movq	-88(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	4(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	movq	-88(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ecs_count_id
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	724(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	movq	-88(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	1444(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	movq	-88(%rbp), %rax
	movl	$10, %esi
	movq	%rax, %rdi
	call	ecs_count_id
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	2164(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	movq	-88(%rbp), %rax
	movl	648(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	6484(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	652(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	7444(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	656(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	8404(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	660(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	9364(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	664(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	10324(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	668(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	11284(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	672(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	12244(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movq	-88(%rbp), %rax
	movl	676(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-96(%rbp), %rax
	leaq	13204(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -56(%rbp)
	movq	-88(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -36(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L2485
.L2489:
	movq	-88(%rbp), %rax
	movq	48(%rax), %rax
	movl	-52(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movl	%eax, -32(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.L2486
	addl	$1, -68(%rbp)
.L2486:
	cmpl	$1, -32(%rbp)
	jne	.L2487
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-88(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	je	.L2487
	addl	$1, -64(%rbp)
.L2487:
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	je	.L2488
	cmpl	$0, -32(%rbp)
	je	.L2488
	addl	$1, -60(%rbp)
	movl	-32(%rbp), %eax
	addl	%eax, -56(%rbp)
.L2488:
	addl	$1, -52(%rbp)
.L2485:
	movl	-52(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L2489
	cvtsi2ssl	-60(%rbp), %xmm0
	movq	-96(%rbp), %rax
	leaq	5764(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	cvtsi2ssl	-56(%rbp), %xmm0
	movq	-96(%rbp), %rax
	leaq	5044(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	cvtsi2ssl	-36(%rbp), %xmm0
	movq	-96(%rbp), %rax
	leaq	2884(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	cvtsi2ssl	-68(%rbp), %xmm0
	movq	-96(%rbp), %rax
	leaq	3604(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	cvtsi2ssl	-64(%rbp), %xmm0
	movq	-96(%rbp), %rax
	leaq	4324(%rax), %rdx
	movl	-48(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE377:
	.size	ecs_get_world_stats, .-ecs_get_world_stats
	.globl	ecs_get_query_stats
	.type	ecs_get_query_stats, @function
ecs_get_query_stats:
.LFB378:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12017, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L2493
	leaq	__PRETTY_FUNCTION__.11594(%rip), %rcx
	movl	$12017, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2493:
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12018, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L2494
	leaq	__PRETTY_FUNCTION__.11594(%rip), %rcx
	movl	$12018, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L2494:
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12019, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC412(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L2495
	leaq	__PRETTY_FUNCTION__.11594(%rip), %rcx
	movl	$12019, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC413(%rip), %rdi
	call	__assert_fail@PLT
.L2495:
	movq	-56(%rbp), %rax
	movl	2160(%rax), %eax
	movl	%eax, %edi
	call	t_next
	movq	-56(%rbp), %rdx
	movl	%eax, 2160(%rdx)
	movq	-56(%rbp), %rax
	movl	2160(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -28(%rbp)
	movq	-48(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movq	-48(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L2496
.L2498:
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L2497
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	addl	%eax, -28(%rbp)
.L2497:
	addl	$1, -32(%rbp)
.L2496:
	movl	-32(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L2498
	cvtsi2ssl	-20(%rbp), %xmm0
	movq	-56(%rbp), %rax
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	_record_gauge
	movq	-48(%rbp), %rax
	movq	1616(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cvtsi2ssl	%eax, %xmm0
	movq	-56(%rbp), %rax
	leaq	720(%rax), %rdx
	movl	-24(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	cvtsi2ssl	-28(%rbp), %xmm0
	movq	-56(%rbp), %rax
	leaq	1440(%rax), %rdx
	movl	-24(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_gauge
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE378:
	.size	ecs_get_query_stats, .-ecs_get_query_stats
	.globl	ecs_get_system_stats
	.type	ecs_get_system_stats, @function
ecs_get_system_stats:
.LFB379:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12046, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2500
	leaq	__PRETTY_FUNCTION__.11609(%rip), %rcx
	movl	$12046, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2500:
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12047, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC412(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L2501
	leaq	__PRETTY_FUNCTION__.11609(%rip), %rcx
	movl	$12047, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC413(%rip), %rdi
	call	__assert_fail@PLT
.L2501:
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12048, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC248(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L2502
	leaq	__PRETTY_FUNCTION__.11609(%rip), %rcx
	movl	$12048, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC248(%rip), %rdi
	call	__assert_fail@PLT
.L2502:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$10, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2503
	movl	$0, %eax
	jmp	.L2504
.L2503:
	movq	-40(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_query_stats
	movq	-40(%rbp), %rax
	movl	2160(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	52(%rax), %edx
	movq	-40(%rbp), %rax
	leaq	2164(%rax), %rcx
	movl	-12(%rbp), %eax
	movd	%edx, %xmm0
	movl	%eax, %esi
	movq	%rcx, %rdi
	call	_record_counter
	movq	-8(%rbp), %rax
	movl	48(%rax), %eax
	cvtsi2ssl	%eax, %xmm0
	movq	-40(%rbp), %rax
	leaq	3124(%rax), %rdx
	movl	-12(%rbp), %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	call	_record_counter
	movl	$319, %edx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	xorl	$1, %eax
	testb	%al, %al
	je	.L2505
	movl	.LC414(%rip), %eax
	jmp	.L2506
.L2505:
	movl	.LC410(%rip), %eax
.L2506:
	movq	-40(%rbp), %rdx
	leaq	4084(%rdx), %rcx
	movl	-12(%rbp), %edx
	movd	%eax, %xmm0
	movl	%edx, %esi
	movq	%rcx, %rdi
	call	_record_gauge
	movl	$261, %edx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	xorl	$1, %eax
	testb	%al, %al
	je	.L2507
	movl	.LC414(%rip), %eax
	jmp	.L2508
.L2507:
	movl	.LC410(%rip), %eax
.L2508:
	movq	-40(%rbp), %rdx
	leaq	4804(%rdx), %rcx
	movl	-12(%rbp), %edx
	movd	%eax, %xmm0
	movl	%edx, %esi
	movq	%rcx, %rdi
	call	_record_gauge
	movl	$1, %eax
.L2504:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE379:
	.size	ecs_get_system_stats, .-ecs_get_system_stats
	.section	.rodata
.LC415:
	.string	"systems != NULL"
.LC416:
	.string	"systems != ((void *)0)"
	.text
	.type	get_system_stats, @function
get_system_stats:
.LFB380:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$4096, %rsp
	orq	$0, (%rsp)
	subq	$1472, %rsp
	movq	%rdi, -5560(%rbp)
	movq	%rsi, -5568(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -5560(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12076, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC415(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -5560(%rbp)
	jne	.L2510
	leaq	__PRETTY_FUNCTION__.11616(%rip), %rcx
	movl	$12076, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC416(%rip), %rdi
	call	__assert_fail@PLT
.L2510:
	cmpq	$0, -5568(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12077, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC248(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -5568(%rbp)
	jne	.L2511
	leaq	__PRETTY_FUNCTION__.11616(%rip), %rcx
	movl	$12077, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC248(%rip), %rdi
	call	__assert_fail@PLT
.L2511:
	movq	-5568(%rbp), %rdx
	movq	-5560(%rbp), %rax
	movl	$5524, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -5544(%rbp)
	cmpq	$0, -5544(%rbp)
	jne	.L2512
	leaq	-5536(%rbp), %rax
	movl	$5524, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	leaq	-5536(%rbp), %rcx
	movq	-5568(%rbp), %rdx
	movq	-5560(%rbp), %rax
	movl	$5524, %esi
	movq	%rax, %rdi
	call	_ecs_map_set
	movq	-5568(%rbp), %rdx
	movq	-5560(%rbp), %rax
	movl	$5524, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -5544(%rbp)
	cmpq	$0, -5544(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12085, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC412(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -5544(%rbp)
	jne	.L2512
	leaq	__PRETTY_FUNCTION__.11616(%rip), %rcx
	movl	$12085, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC413(%rip), %rdi
	call	__assert_fail@PLT
.L2512:
	movq	-5544(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L2515
	call	__stack_chk_fail@PLT
.L2515:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE380:
	.size	get_system_stats, .-get_system_stats
	.section	.rodata
.LC417:
	.string	"pipeline != 0"
.LC418:
	.string	"i_system == (count - 1)"
	.text
	.globl	ecs_get_pipeline_stats
	.type	ecs_get_pipeline_stats, @function
ecs_get_pipeline_stats:
.LFB381:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$4096, %rsp
	orq	$0, (%rsp)
	subq	$592, %rsp
	movq	%rdi, -2376(%rbp)
	movq	%rsi, -2384(%rbp)
	movq	%rdx, -2392(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -2376(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12096, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2376(%rbp)
	jne	.L2517
	leaq	__PRETTY_FUNCTION__.11624(%rip), %rcx
	movl	$12096, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2517:
	cmpq	$0, -2392(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12097, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC412(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2392(%rbp)
	jne	.L2518
	leaq	__PRETTY_FUNCTION__.11624(%rip), %rcx
	movl	$12097, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC413(%rip), %rdi
	call	__assert_fail@PLT
.L2518:
	cmpq	$0, -2384(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12098, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC417(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2384(%rbp)
	jne	.L2519
	leaq	__PRETTY_FUNCTION__.11624(%rip), %rcx
	movl	$12098, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC417(%rip), %rdi
	call	__assert_fail@PLT
.L2519:
	movq	-2376(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -2376(%rbp)
	movq	-2384(%rbp), %rcx
	movq	-2376(%rbp), %rax
	movl	$12, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -2344(%rbp)
	cmpq	$0, -2344(%rbp)
	jne	.L2520
	movl	$0, %eax
	jmp	.L2531
.L2520:
	movq	-2344(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-2304(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_iter
	movl	$0, -2368(%rbp)
	jmp	.L2522
.L2523:
	movl	-2100(%rbp), %eax
	addl	%eax, -2368(%rbp)
.L2522:
	leaq	-2304(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_next
	testb	%al, %al
	jne	.L2523
	movq	-2392(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L2524
	movl	-2368(%rbp), %eax
	movl	%eax, %edx
	movl	$4, %esi
	movl	$5524, %edi
	call	_ecs_map_new
	movq	-2392(%rbp), %rdx
	movq	%rax, 8(%rdx)
.L2524:
	movq	-2344(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -2336(%rbp)
	movq	-2336(%rbp), %rax
	movl	$16, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -2352(%rbp)
	movq	-2336(%rbp), %rax
	movl	$16, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	_ecs_vector_last
	movq	%rax, -2328(%rbp)
	movq	-2336(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	addl	%eax, -2368(%rbp)
	movl	-2368(%rbp), %eax
	leal	-1(%rax), %edx
	movq	-2392(%rbp), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movq	-2392(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -2320(%rbp)
	movq	-2344(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-4688(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_iter
	leaq	-2304(%rbp), %rax
	leaq	-4688(%rbp), %rdx
	movl	$286, %ecx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	rep movsq
	movl	$0, -2364(%rbp)
	movl	$0, -2360(%rbp)
	jmp	.L2525
.L2529:
	movl	$0, -2356(%rbp)
	jmp	.L2526
.L2528:
	movq	-2152(%rbp), %rax
	movl	-2356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	leaq	(%rax,%rdx), %rcx
	movl	-2364(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -2364(%rbp)
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-2320(%rbp), %rax
	addq	%rax, %rdx
	movq	(%rcx), %rax
	movq	%rax, (%rdx)
	addl	$1, -2360(%rbp)
	movq	-2352(%rbp), %rax
	cmpq	-2328(%rbp), %rax
	je	.L2527
	movq	-2352(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -2360(%rbp)
	jne	.L2527
	movl	$0, -2360(%rbp)
	addq	$4, -2352(%rbp)
	movl	-2364(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -2364(%rbp)
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-2320(%rbp), %rax
	addq	%rdx, %rax
	movq	$0, (%rax)
.L2527:
	movq	-2152(%rbp), %rax
	movl	-2356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-2392(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_system_stats
	movq	%rax, -2312(%rbp)
	movq	-2152(%rbp), %rax
	movl	-2356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rcx
	movq	-2312(%rbp), %rdx
	movq	-2376(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_system_stats
	addl	$1, -2356(%rbp)
.L2526:
	movl	-2100(%rbp), %eax
	cmpl	%eax, -2356(%rbp)
	jl	.L2528
.L2525:
	leaq	-2304(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_next
	testb	%al, %al
	jne	.L2529
	movl	-2368(%rbp), %eax
	subl	$1, %eax
	cmpl	%eax, -2364(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12148, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC418(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-2368(%rbp), %eax
	subl	$1, %eax
	cmpl	%eax, -2364(%rbp)
	je	.L2530
	leaq	__PRETTY_FUNCTION__.11624(%rip), %rcx
	movl	$12148, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC418(%rip), %rdi
	call	__assert_fail@PLT
.L2530:
	movl	$1, %eax
.L2531:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L2532
	call	__stack_chk_fail@PLT
.L2532:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE381:
	.size	ecs_get_pipeline_stats, .-ecs_get_pipeline_stats
	.section	.rodata
.LC419:
	.string	"Frame"
	.align 8
.LC420:
	.string	"-------------------------------------"
.LC421:
	.string	"pipeline rebuilds"
.LC422:
	.string	"systems ran last frame"
.LC423:
	.string	"target FPS"
.LC424:
	.string	"time scale"
.LC425:
	.string	"actual FPS"
.LC426:
	.string	"frame time"
.LC427:
	.string	"system time"
.LC428:
	.string	"merge time"
.LC429:
	.string	"simulation time elapsed"
.LC430:
	.string	"entity count"
.LC431:
	.string	"component count"
.LC432:
	.string	"query count"
.LC433:
	.string	"system count"
.LC434:
	.string	"table count"
.LC435:
	.string	"singleton table count"
.LC436:
	.string	"empty table count"
.LC437:
	.string	"deferred new operations"
.LC438:
	.string	"deferred bulk_new operations"
.LC439:
	.string	"deferred delete operations"
.LC440:
	.string	"deferred clear operations"
.LC441:
	.string	"deferred add operations"
.LC442:
	.string	"deferred remove operations"
.LC443:
	.string	"deferred set operations"
.LC444:
	.string	"discarded operations"
	.text
	.globl	ecs_dump_world_stats
	.type	ecs_dump_world_stats, @function
ecs_dump_world_stats:
.LFB382:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	24244(%rax), %eax
	movl	%eax, -4(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12160, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2534
	leaq	__PRETTY_FUNCTION__.11650(%rip), %rcx
	movl	$12160, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2534:
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12161, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC412(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L2535
	leaq	__PRETTY_FUNCTION__.11650(%rip), %rcx
	movl	$12161, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC413(%rip), %rdi
	call	__assert_fail@PLT
.L2535:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	leaq	20404(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC419(%rip), %rdi
	call	print_counter
	leaq	.LC420(%rip), %rdi
	call	puts@PLT
	movq	-32(%rbp), %rax
	leaq	22324(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC421(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	23284(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC422(%rip), %rdi
	call	print_counter
	movl	$10, %edi
	call	putchar@PLT
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movd	%eax, %xmm0
	leaq	.LC423(%rip), %rdi
	call	print_value
	movq	-24(%rbp), %rax
	movl	568(%rax), %eax
	movd	%eax, %xmm0
	leaq	.LC424(%rip), %rdi
	call	print_value
	movl	$10, %edi
	call	putchar@PLT
	movq	-32(%rbp), %rax
	leaq	18964(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC425(%rip), %rdi
	call	print_gauge
	movq	-32(%rbp), %rax
	leaq	16084(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC426(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	17044(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC427(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	18004(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC428(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	15124(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC429(%rip), %rdi
	call	print_counter
	movl	$10, %edi
	call	putchar@PLT
	movq	-32(%rbp), %rax
	leaq	4(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC430(%rip), %rdi
	call	print_gauge
	movq	-32(%rbp), %rax
	leaq	724(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC431(%rip), %rdi
	call	print_gauge
	movq	-32(%rbp), %rax
	leaq	1444(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC432(%rip), %rdi
	call	print_gauge
	movq	-32(%rbp), %rax
	leaq	2164(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC433(%rip), %rdi
	call	print_gauge
	movq	-32(%rbp), %rax
	leaq	2884(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC434(%rip), %rdi
	call	print_gauge
	movq	-32(%rbp), %rax
	leaq	4324(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC435(%rip), %rdi
	call	print_gauge
	movq	-32(%rbp), %rax
	leaq	3604(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC436(%rip), %rdi
	call	print_gauge
	movl	$10, %edi
	call	putchar@PLT
	movq	-32(%rbp), %rax
	leaq	6484(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC437(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	7444(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC438(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	8404(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC439(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	9364(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC440(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	10324(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC441(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	11284(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC442(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	12244(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC443(%rip), %rdi
	call	print_counter
	movq	-32(%rbp), %rax
	leaq	13204(%rax), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	leaq	.LC444(%rip), %rdi
	call	print_counter
	movl	$10, %edi
	call	putchar@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE382:
	.size	ecs_dump_world_stats, .-ecs_dump_world_stats
	.type	duplicate_data, @function
duplicate_data:
.LFB383:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$160, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	32+ecs_os_api(%rip), %rax
	movl	$40, %edi
	call	*%rax
	movq	%rax, -96(%rbp)
	movq	-144(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -112(%rbp)
	movq	-144(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -88(%rbp)
	movl	-112(%rbp), %eax
	sall	$4, %eax
	movl	%eax, %edx
	movq	-152(%rbp), %rax
	movq	16(%rax), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_os_memdup
	movq	-96(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_copy
	movq	-96(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -80(%rbp)
	movq	-152(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_copy
	movq	-96(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movl	$0, -116(%rbp)
	jmp	.L2537
.L2541:
	movl	-116(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-96(%rbp), %rax
	movq	16(%rax), %rax
	movl	-116(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -64(%rbp)
	movq	-72(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_typeid
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_c_info
	movq	%rax, -56(%rbp)
	movq	-64(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -120(%rbp)
	movq	-64(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -118(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L2538
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L2538
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -108(%rbp)
	movl	$16, %eax
	cmpw	$16, -118(%rbp)
	cmovge	-118(%rbp), %ax
	movswl	%ax, %ecx
	movswl	-120(%rbp), %eax
	movl	-108(%rbp), %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	%rax, -104(%rbp)
	movl	$16, %eax
	cmpw	$16, -118(%rbp)
	cmovge	-118(%rbp), %ax
	movswl	%ax, %edx
	movswl	-120(%rbp), %esi
	movl	-108(%rbp), %ecx
	leaq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movl	$16, %eax
	cmpw	$16, -118(%rbp)
	cmovge	-118(%rbp), %ax
	movswl	%ax, %edx
	movswl	-120(%rbp), %ecx
	movq	-104(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movq	-56(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L2539
	movswq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movl	-108(%rbp), %r8d
	movq	-40(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	movq	-136(%rbp), %rax
	subq	$8, %rsp
	pushq	-32(%rbp)
	movq	-24(%rbp), %r10
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
.L2539:
	movl	$16, %eax
	cmpw	$16, -118(%rbp)
	cmovge	-118(%rbp), %ax
	movswl	%ax, %edx
	movswl	-120(%rbp), %ecx
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movswq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-16(%rbp), %r9
	movq	-40(%rbp), %r11
	movq	-80(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rsi
	movq	-136(%rbp), %rax
	subq	$8, %rsp
	pushq	-32(%rbp)
	movl	-108(%rbp), %r8d
	pushq	%r8
	pushq	%rdi
	movq	-48(%rbp), %r10
	movq	%r11, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	movq	-104(%rbp), %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, (%rax)
	jmp	.L2540
.L2538:
	movl	$16, %eax
	cmpw	$16, -118(%rbp)
	cmovge	-118(%rbp), %ax
	movswl	%ax, %edx
	movswl	-120(%rbp), %ecx
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_copy
	movq	-64(%rbp), %rdx
	movq	%rax, (%rdx)
.L2540:
	addl	$1, -116(%rbp)
.L2537:
	movl	-116(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.L2541
	movq	-96(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L2543
	call	__stack_chk_fail@PLT
.L2543:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE383:
	.size	duplicate_data, .-duplicate_data
	.type	snapshot_create, @function
snapshot_create:
.LFB384:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$4096, %rsp
	orq	$0, (%rsp)
	subq	$560, %rsp
	movq	%rdi, -2344(%rbp)
	movq	%rsi, -2352(%rbp)
	movq	%rdx, -2360(%rbp)
	movq	%rcx, -2368(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	32+ecs_os_api(%rip), %rax
	movl	$1632, %edi
	call	*%rax
	movq	%rax, -2336(%rbp)
	cmpq	$0, -2336(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12279, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2336(%rbp)
	jne	.L2545
	leaq	__PRETTY_FUNCTION__.11688(%rip), %rcx
	movl	$12279, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L2545:
	movq	-2336(%rbp), %rax
	movq	-2344(%rbp), %rdx
	movq	%rdx, (%rax)
	cmpq	$0, -2360(%rbp)
	jne	.L2546
	cmpq	$0, -2352(%rbp)
	je	.L2546
	movq	-2352(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_sparse_copy
	movq	-2336(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movl	$0, %edx
	movl	$16, %esi
	movl	$24, %edi
	call	_ecs_vector_new
	movq	-2336(%rbp), %rdx
	movq	%rax, 16(%rdx)
.L2546:
	cmpq	$0, -2360(%rbp)
	jne	.L2547
	leaq	-4656(%rbp), %rax
	movq	-2344(%rbp), %rcx
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_filter_iter
	leaq	-2304(%rbp), %rax
	leaq	-4656(%rbp), %rdx
	movl	$286, %ecx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	rep movsq
	leaq	-2304(%rbp), %rax
	movq	%rax, -2360(%rbp)
	leaq	ecs_filter_next(%rip), %rax
	movq	%rax, -2368(%rbp)
	jmp	.L2549
.L2547:
	movq	-2336(%rbp), %rax
	movq	$0, 8(%rax)
	jmp	.L2549
.L2553:
	movq	-2360(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -2328(%rbp)
	movq	-2328(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2550
	jmp	.L2549
.L2550:
	movq	-2328(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -2320(%rbp)
	cmpq	$0, -2320(%rbp)
	je	.L2549
	movq	-2320(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L2549
	movq	-2320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	jne	.L2552
	jmp	.L2549
.L2552:
	movq	-2336(%rbp), %rax
	addq	$16, %rax
	movl	$16, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -2312(%rbp)
	movq	-2312(%rbp), %rax
	movq	-2328(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-2328(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-2312(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-2320(%rbp), %rdx
	movq	-2328(%rbp), %rcx
	movq	-2344(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	duplicate_data
	movq	-2312(%rbp), %rdx
	movq	%rax, 16(%rdx)
.L2549:
	movq	-2360(%rbp), %rax
	movq	-2368(%rbp), %rdx
	movq	%rax, %rdi
	call	*%rdx
	testb	%al, %al
	jne	.L2553
	movq	-2336(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L2555
	call	__stack_chk_fail@PLT
.L2555:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE384:
	.size	snapshot_create, .-snapshot_create
	.globl	ecs_snapshot_take
	.type	ecs_snapshot_take, @function
ecs_snapshot_take:
.LFB385:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	40(%rax), %rsi
	movq	-24(%rbp), %rax
	movl	$0, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	snapshot_create
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	536(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 24(%rax)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE385:
	.size	ecs_snapshot_take, .-ecs_snapshot_take
	.globl	ecs_snapshot_take_w_iter
	.type	ecs_snapshot_take_w_iter, @function
ecs_snapshot_take_w_iter:
.LFB386:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12348, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L2559
	leaq	__PRETTY_FUNCTION__.11705(%rip), %rcx
	movl	$12348, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2559:
	movq	-16(%rbp), %rax
	movq	40(%rax), %rsi
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	snapshot_create
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	536(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 24(%rax)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE386:
	.size	ecs_snapshot_take_w_iter, .-ecs_snapshot_take_w_iter
	.globl	ecs_snapshot_restore
	.type	ecs_snapshot_restore, @function
ecs_snapshot_restore:
.LFB387:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$160, %rsp
	movq	%rdi, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movb	$1, -129(%rbp)
	movq	-160(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L2562
	movq	-160(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-152(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_restore
	movq	-160(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_free
	movb	$0, -129(%rbp)
.L2562:
	movzbl	-129(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L2563
	movq	-160(%rbp), %rax
	movq	24(%rax), %rdx
	movq	-152(%rbp), %rax
	movq	%rdx, 536(%rax)
.L2563:
	movq	-160(%rbp), %rax
	movq	16(%rax), %rax
	movl	$16, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -80(%rbp)
	movl	$0, -128(%rbp)
	movq	-160(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -116(%rbp)
	movq	-152(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -112(%rbp)
	movl	$0, -124(%rbp)
	jmp	.L2564
.L2577:
	movq	-152(%rbp), %rax
	movq	48(%rax), %rax
	movl	-124(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2584
	movq	$0, -88(%rbp)
	movl	-128(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.L2567
	movl	-128(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -88(%rbp)
.L2567:
	cmpq	$0, -88(%rbp)
	je	.L2568
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -56(%rbp)
	jne	.L2568
	cmpb	$0, -129(%rbp)
	je	.L2569
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -104(%rbp)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	movl	$0, -120(%rbp)
	jmp	.L2570
.L2574:
	movl	-120(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-152(%rbp), %rax
	movq	40(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L2571
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L2571
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12407, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L2572
	leaq	__PRETTY_FUNCTION__.11726(%rip), %rcx
	movl	$12407, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L2572:
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	leaq	-130(%rbp), %rdx
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	flecs_record_to_row
	movl	%eax, -92(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rsi
	movl	-92(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movq	-152(%rbp), %rax
	movl	$1, %r8d
	movq	%rax, %rdi
	call	flecs_table_delete
	jmp	.L2573
.L2571:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-152(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_set_generation
.L2573:
	addl	$1, -120(%rbp)
.L2570:
	movl	-120(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.L2574
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movl	%eax, -100(%rbp)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	flecs_table_data_count
	movl	%eax, -96(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -40(%rbp)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rdi
	movq	-40(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	-152(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	flecs_table_merge
	movq	%rax, -40(%rbp)
	movl	-100(%rbp), %edi
	movq	-40(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-152(%rbp), %rax
	pushq	$1
	movl	-96(%rbp), %esi
	pushq	%rsi
	movl	%edi, %r9d
	movl	$0, %r8d
	movl	$0, %esi
	movq	%rax, %rdi
	call	flecs_run_set_systems
	addq	$16, %rsp
	movq	40+ecs_os_api(%rip), %rdx
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	jmp	.L2575
.L2569:
	movq	-88(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-56(%rbp), %rcx
	movq	-152(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_replace_data
.L2575:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	addl	$1, -128(%rbp)
	jmp	.L2576
.L2568:
	movzbl	-129(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L2576
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, %rdx
	movq	-56(%rbp), %rcx
	movq	-152(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_clear_data
.L2576:
	movq	-56(%rbp), %rax
	movl	112(%rax), %eax
	leal	1(%rax), %edx
	movq	-56(%rbp), %rax
	movl	%edx, 112(%rax)
	jmp	.L2566
.L2584:
	nop
.L2566:
	addl	$1, -124(%rbp)
.L2564:
	movl	-124(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.L2577
	movzbl	-129(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L2578
	movl	$0, -124(%rbp)
	jmp	.L2579
.L2582:
	movq	-152(%rbp), %rax
	movq	48(%rax), %rax
	movl	-124(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2585
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_data_count
	movl	%eax, -108(%rbp)
	movq	-64(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-152(%rbp), %rax
	pushq	$1
	movl	-108(%rbp), %esi
	pushq	%rsi
	movl	$0, %r9d
	movl	$0, %r8d
	movl	$0, %esi
	movq	%rax, %rdi
	call	flecs_run_set_systems
	addq	$16, %rsp
	jmp	.L2581
.L2585:
	nop
.L2581:
	addl	$1, -124(%rbp)
.L2579:
	movl	-124(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.L2582
.L2578:
	movq	-160(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	40+ecs_os_api(%rip), %rdx
	movq	-160(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L2583
	call	__stack_chk_fail@PLT
.L2583:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE387:
	.size	ecs_snapshot_restore, .-ecs_snapshot_restore
	.globl	ecs_snapshot_iter
	.type	ecs_snapshot_iter, @function
ecs_snapshot_iter:
.LFB388:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$3944, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -3928(%rbp)
	movq	%rsi, -3936(%rbp)
	movq	%rdx, -3944(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -3944(%rbp)
	je	.L2587
	movq	-3944(%rbp), %rdx
	leaq	-2320(%rbp), %rax
	movq	%rdx, %rsi
	movl	$200, %edx
	movq	%rax, %rdi
	movq	%rdx, %rcx
	rep movsq
	jmp	.L2588
.L2587:
	leaq	-3920(%rbp), %rdx
	movl	$0, %eax
	movl	$200, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	-2320(%rbp), %rax
	leaq	-3920(%rbp), %rdx
	movl	$200, %ecx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	rep movsq
.L2588:
	movq	-3936(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -720(%rbp)
	movl	$0, -712(%rbp)
	movq	-3936(%rbp), %rax
	movq	(%rax), %rbx
	movq	-3936(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %r8d
	movq	-3928(%rbp), %rax
	movq	%rax, %rsi
	movl	$0, %eax
	movl	$286, %edx
	movq	%rsi, %rdi
	movq	%rdx, %rcx
	rep stosq
	movq	-3928(%rbp), %rax
	movq	%rbx, (%rax)
	movq	-3928(%rbp), %rax
	movl	%r8d, 128(%rax)
	movq	-3928(%rbp), %rax
	leaq	232(%rax), %rdx
	leaq	-2320(%rbp), %rax
	movl	$202, %ecx
	movq	%rdx, %rdi
	movq	%rax, %rsi
	rep movsq
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L2590
	call	__stack_chk_fail@PLT
.L2590:
	movq	-3928(%rbp), %rax
	addq	$3944, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE388:
	.size	ecs_snapshot_iter, .-ecs_snapshot_iter
	.globl	ecs_snapshot_next
	.type	ecs_snapshot_next, @function
ecs_snapshot_next:
.LFB389:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rax
	addq	$232, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	1600(%rax), %rax
	movl	$16, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	1600(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rax
	movl	1608(%rax), %eax
	movl	%eax, -40(%rbp)
	jmp	.L2592
.L2597:
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12504, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L2593
	leaq	__PRETTY_FUNCTION__.11760(%rip), %rcx
	movl	$12504, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L2593:
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	16(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12509, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2594
	leaq	__PRETTY_FUNCTION__.11760(%rip), %rcx
	movl	$12509, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L2594:
	movq	-32(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_match_filter
	xorl	$1, %eax
	testb	%al, %al
	je	.L2595
	addl	$1, -40(%rbp)
	jmp	.L2592
.L2595:
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 48(%rax)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, 144(%rax)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_data_count
	movq	-56(%rbp), %rdx
	movl	%eax, 204(%rdx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	-56(%rbp), %rdx
	movq	%rax, 152(%rdx)
	movq	-56(%rbp), %rax
	movb	$1, 212(%rax)
	movl	-40(%rbp), %eax
	leal	1(%rax), %edx
	movq	-32(%rbp), %rax
	movl	%edx, 1608(%rax)
	nop
.L2596:
	endbr64
	movq	-56(%rbp), %rax
	movb	$1, 212(%rax)
	movl	$1, %eax
	jmp	.L2598
.L2592:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L2597
	movq	-56(%rbp), %rax
	movb	$0, 212(%rax)
	movl	$0, %eax
.L2598:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE389:
	.size	ecs_snapshot_next, .-ecs_snapshot_next
	.globl	ecs_snapshot_free
	.type	ecs_snapshot_free, @function
ecs_snapshot_free:
.LFB390:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_free
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movl	$16, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L2600
.L2601:
	movl	-24(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_clear_data
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	addl	$1, -24(%rbp)
.L2600:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L2601
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	40+ecs_os_api(%rip), %rdx
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE390:
	.size	ecs_snapshot_free, .-ecs_snapshot_free
	.section	.rodata
.LC445:
	.string	"stage == &world->stage"
	.text
	.type	bulk_delete, @function
bulk_delete:
.LFB391:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, %eax
	movb	%al, -52(%rbp)
	movq	-40(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12561, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	testq	%rax, %rax
	jne	.L2603
	leaq	__PRETTY_FUNCTION__.11782(%rip), %rcx
	movl	$12561, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2603:
	leaq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -24(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12563, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC445(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -24(%rbp)
	je	.L2604
	leaq	__PRETTY_FUNCTION__.11782(%rip), %rcx
	movl	$12563, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC445(%rip), %rdi
	call	__assert_fail@PLT
.L2604:
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -28(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L2605
.L2611:
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movl	-32(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2612
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_match_filter
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2613
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2614
	cmpb	$0, -52(%rbp)
	je	.L2610
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_delete_entities
	jmp	.L2607
.L2610:
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_clear_entities_silent
	jmp	.L2607
.L2612:
	nop
	jmp	.L2607
.L2613:
	nop
	jmp	.L2607
.L2614:
	nop
.L2607:
	addl	$1, -32(%rbp)
.L2605:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L2611
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE391:
	.size	bulk_delete, .-bulk_delete
	.type	merge_table, @function
merge_table:
.LFB392:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L2616
	movq	-56(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_clear_entities
	jmp	.L2619
.L2616:
	movq	-48(%rbp), %rax
	cmpq	-56(%rbp), %rax
	je	.L2619
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movl	%eax, -24(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movl	%eax, -20(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L2618
	movq	-72(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L2618
	cmpq	$0, -16(%rbp)
	je	.L2618
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rdi, %r9
	movl	%ecx, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_run_remove_actions
.L2618:
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	flecs_table_merge
	movq	%rax, -8(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L2619
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L2619
	cmpq	$0, -8(%rbp)
	je	.L2619
	movq	-64(%rbp), %r8
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %ecx
	movq	-8(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	pushq	$1
	pushq	$0
	movq	%r8, %r9
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	flecs_run_add_actions
	addq	$16, %rsp
.L2619:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE392:
	.size	merge_table, .-merge_table
	.globl	ecs_bulk_delete
	.type	ecs_bulk_delete, @function
ecs_bulk_delete:
.LFB393:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	bulk_delete
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE393:
	.size	ecs_bulk_delete, .-ecs_bulk_delete
	.section	.rodata
	.align 8
.LC446:
	.string	"removed.count <= to_remove_array.count"
	.align 8
.LC447:
	.string	"added.count <= to_add_array.count"
	.text
	.globl	ecs_bulk_add_remove_type
	.type	ecs_bulk_add_remove_type, @function
ecs_bulk_add_remove_type:
.LFB394:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$144, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movq	%rdx, -136(%rbp)
	movq	%rcx, -144(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-120(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12645, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-120(%rbp), %rax
	testq	%rax, %rax
	jne	.L2622
	leaq	__PRETTY_FUNCTION__.11813(%rip), %rcx
	movl	$12645, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2622:
	leaq	-120(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -104(%rbp)
	movq	-120(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -104(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12647, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC445(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-120(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -104(%rbp)
	je	.L2623
	leaq	__PRETTY_FUNCTION__.11813(%rip), %rcx
	movl	$12647, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC445(%rip), %rdi
	call	__assert_fail@PLT
.L2623:
	movq	-128(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movl	-72(%rbp), %eax
	sall	$3, %eax
	cltq
	leaq	8(%rax), %rdx
	movl	$16, %eax
	subq	$1, %rax
	addq	%rdx, %rax
	movl	$16, %edi
	movl	$0, %edx
	divq	%rdi
	imulq	$16, %rax, %rax
	movq	%rax, %rdx
	andq	$-4096, %rdx
	movq	%rsp, %rcx
	subq	%rdx, %rcx
	movq	%rcx, %rdx
.L2624:
	cmpq	%rdx, %rsp
	je	.L2625
	subq	$4096, %rsp
	orq	$0, 4088(%rsp)
	jmp	.L2624
.L2625:
	movq	%rax, %rdx
	andl	$4095, %edx
	subq	%rdx, %rsp
	movq	%rax, %rdx
	andl	$4095, %edx
	testq	%rdx, %rdx
	je	.L2626
	andl	$4095, %eax
	subq	$8, %rax
	addq	%rsp, %rax
	orq	$0, (%rax)
.L2626:
	movq	%rsp, %rax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	movq	%rax, -48(%rbp)
	movl	$0, -40(%rbp)
	movl	-56(%rbp), %eax
	sall	$3, %eax
	cltq
	leaq	8(%rax), %rdx
	movl	$16, %eax
	subq	$1, %rax
	addq	%rdx, %rax
	movl	$16, %edi
	movl	$0, %edx
	divq	%rdi
	imulq	$16, %rax, %rax
	movq	%rax, %rdx
	andq	$-4096, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rdx
.L2627:
	cmpq	%rdx, %rsp
	je	.L2628
	subq	$4096, %rsp
	orq	$0, 4088(%rsp)
	jmp	.L2627
.L2628:
	movq	%rax, %rdx
	andl	$4095, %edx
	subq	%rdx, %rsp
	movq	%rax, %rdx
	andl	$4095, %edx
	testq	%rdx, %rdx
	je	.L2629
	andl	$4095, %eax
	subq	$8, %rax
	addq	%rsp, %rax
	orq	$0, (%rax)
.L2629:
	movq	%rsp, %rax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -24(%rbp)
	movq	-120(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -108(%rbp)
	movl	$0, -112(%rbp)
	jmp	.L2630
.L2639:
	movq	-120(%rbp), %rax
	movq	48(%rax), %rax
	movl	-112(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2641
	movq	-120(%rbp), %rax
	movq	-144(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_match_filter
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2642
	movq	-120(%rbp), %rax
	leaq	-32(%rbp), %rcx
	leaq	-64(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -88(%rbp)
	movq	-120(%rbp), %rax
	leaq	-48(%rbp), %rcx
	leaq	-80(%rbp), %rdx
	movq	-88(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -88(%rbp)
	movl	-24(%rbp), %edx
	movl	-56(%rbp), %eax
	cmpl	%eax, %edx
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12681, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC446(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-24(%rbp), %edx
	movl	-56(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L2634
	leaq	__PRETTY_FUNCTION__.11813(%rip), %rcx
	movl	$12681, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC446(%rip), %rdi
	call	__assert_fail@PLT
.L2634:
	movl	-40(%rbp), %edx
	movl	-72(%rbp), %eax
	cmpl	%eax, %edx
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12682, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC447(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-40(%rbp), %edx
	movl	-72(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L2635
	leaq	__PRETTY_FUNCTION__.11813(%rip), %rcx
	movl	$12682, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC447(%rip), %rdi
	call	__assert_fail@PLT
.L2635:
	movq	-96(%rbp), %rax
	cmpq	-88(%rbp), %rax
	je	.L2643
	movl	-40(%rbp), %eax
	testl	%eax, %eax
	jne	.L2637
	movl	-24(%rbp), %eax
	testl	%eax, %eax
	je	.L2643
.L2637:
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12688, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC218(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L2638
	leaq	__PRETTY_FUNCTION__.11813(%rip), %rcx
	movl	$12688, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC219(%rip), %rdi
	call	__assert_fail@PLT
.L2638:
	movq	-120(%rbp), %rax
	leaq	-32(%rbp), %rdi
	leaq	-48(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rsi
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	merge_table
	movl	$0, -40(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L2632
.L2641:
	nop
	jmp	.L2632
.L2642:
	nop
	jmp	.L2632
.L2643:
	nop
.L2632:
	addl	$1, -112(%rbp)
.L2630:
	movl	-112(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jl	.L2639
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L2640
	call	__stack_chk_fail@PLT
.L2640:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE394:
	.size	ecs_bulk_add_remove_type, .-ecs_bulk_add_remove_type
	.section	.rodata
.LC448:
	.string	"to_add != NULL"
.LC449:
	.string	"to_add != ((void *)0)"
	.text
	.globl	ecs_bulk_add_type
	.type	ecs_bulk_add_type, @function
ecs_bulk_add_type:
.LFB395:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12701, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	jne	.L2645
	leaq	__PRETTY_FUNCTION__.11832(%rip), %rcx
	movl	$12701, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2645:
	cmpq	$0, -96(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12702, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC448(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -96(%rbp)
	jne	.L2646
	leaq	__PRETTY_FUNCTION__.11832(%rip), %rcx
	movl	$12702, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC449(%rip), %rdi
	call	__assert_fail@PLT
.L2646:
	leaq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -72(%rbp)
	movq	-88(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -72(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12705, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC445(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -72(%rbp)
	je	.L2647
	leaq	__PRETTY_FUNCTION__.11832(%rip), %rcx
	movl	$12705, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC445(%rip), %rdi
	call	__assert_fail@PLT
.L2647:
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-40(%rbp), %eax
	sall	$3, %eax
	cltq
	leaq	8(%rax), %rdx
	movl	$16, %eax
	subq	$1, %rax
	addq	%rdx, %rax
	movl	$16, %edi
	movl	$0, %edx
	divq	%rdi
	imulq	$16, %rax, %rax
	movq	%rax, %rdx
	andq	$-4096, %rdx
	movq	%rsp, %rcx
	subq	%rdx, %rcx
	movq	%rcx, %rdx
.L2648:
	cmpq	%rdx, %rsp
	je	.L2649
	subq	$4096, %rsp
	orq	$0, 4088(%rsp)
	jmp	.L2648
.L2649:
	movq	%rax, %rdx
	andl	$4095, %edx
	subq	%rdx, %rsp
	movq	%rax, %rdx
	andl	$4095, %edx
	testq	%rdx, %rdx
	je	.L2650
	andl	$4095, %eax
	subq	$8, %rax
	addq	%rsp, %rax
	orq	$0, (%rax)
.L2650:
	movq	%rsp, %rax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -24(%rbp)
	movq	-88(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -76(%rbp)
	movl	$0, -80(%rbp)
	jmp	.L2651
.L2658:
	movq	-88(%rbp), %rax
	movq	48(%rax), %rax
	movl	-80(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2660
	movq	-88(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_match_filter
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2661
	movq	-88(%rbp), %rax
	leaq	-32(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %eax
	cmpl	%eax, %edx
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12729, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC447(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L2655
	leaq	__PRETTY_FUNCTION__.11832(%rip), %rcx
	movl	$12729, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC447(%rip), %rdi
	call	__assert_fail@PLT
.L2655:
	movl	-24(%rbp), %eax
	testl	%eax, %eax
	je	.L2662
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12735, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC218(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L2657
	leaq	__PRETTY_FUNCTION__.11832(%rip), %rcx
	movl	$12735, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC219(%rip), %rdi
	call	__assert_fail@PLT
.L2657:
	movq	-88(%rbp), %rax
	leaq	-32(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	$0, %r8d
	movq	%rax, %rdi
	call	merge_table
	movl	$0, -24(%rbp)
	jmp	.L2653
.L2660:
	nop
	jmp	.L2653
.L2661:
	nop
	jmp	.L2653
.L2662:
	nop
.L2653:
	addl	$1, -80(%rbp)
.L2651:
	movl	-80(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L2658
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L2659
	call	__stack_chk_fail@PLT
.L2659:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE395:
	.size	ecs_bulk_add_type, .-ecs_bulk_add_type
	.section	.rodata
.LC450:
	.string	"to_add != 0"
	.text
	.globl	ecs_bulk_add_entity
	.type	ecs_bulk_add_entity, @function
ecs_bulk_add_entity:
.LFB396:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12746, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	jne	.L2664
	leaq	__PRETTY_FUNCTION__.11849(%rip), %rcx
	movl	$12746, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2664:
	movq	-112(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12747, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC450(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-112(%rbp), %rax
	testq	%rax, %rax
	jne	.L2665
	leaq	__PRETTY_FUNCTION__.11849(%rip), %rcx
	movl	$12747, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC450(%rip), %rdi
	call	__assert_fail@PLT
.L2665:
	leaq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -72(%rbp)
	movq	-104(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -72(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12750, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC445(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -72(%rbp)
	je	.L2666
	leaq	__PRETTY_FUNCTION__.11849(%rip), %rcx
	movl	$12750, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC445(%rip), %rdi
	call	__assert_fail@PLT
.L2666:
	leaq	-112(%rbp), %rax
	movq	%rax, -48(%rbp)
	movl	$1, -40(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$0, -24(%rbp)
	movq	-104(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -84(%rbp)
	movl	$0, -88(%rbp)
	jmp	.L2667
.L2674:
	movq	-104(%rbp), %rax
	movq	48(%rax), %rax
	movl	-88(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2676
	movq	-104(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_match_filter
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2677
	movq	-104(%rbp), %rax
	leaq	-32(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %eax
	cmpl	%eax, %edx
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12776, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC447(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L2671
	leaq	__PRETTY_FUNCTION__.11849(%rip), %rcx
	movl	$12776, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC447(%rip), %rdi
	call	__assert_fail@PLT
.L2671:
	movl	-24(%rbp), %eax
	testl	%eax, %eax
	je	.L2678
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12782, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC218(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L2673
	leaq	__PRETTY_FUNCTION__.11849(%rip), %rcx
	movl	$12782, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC219(%rip), %rdi
	call	__assert_fail@PLT
.L2673:
	movq	-104(%rbp), %rax
	leaq	-32(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	$0, %r8d
	movq	%rax, %rdi
	call	merge_table
	movl	$0, -24(%rbp)
	jmp	.L2669
.L2676:
	nop
	jmp	.L2669
.L2677:
	nop
	jmp	.L2669
.L2678:
	nop
.L2669:
	addl	$1, -88(%rbp)
.L2667:
	movl	-88(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jl	.L2674
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L2675
	call	__stack_chk_fail@PLT
.L2675:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE396:
	.size	ecs_bulk_add_entity, .-ecs_bulk_add_entity
	.section	.rodata
.LC451:
	.string	"to_remove != NULL"
.LC452:
	.string	"to_remove != ((void *)0)"
	.text
	.globl	ecs_bulk_remove_type
	.type	ecs_bulk_remove_type, @function
ecs_bulk_remove_type:
.LFB397:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12793, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	jne	.L2680
	leaq	__PRETTY_FUNCTION__.11867(%rip), %rcx
	movl	$12793, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2680:
	cmpq	$0, -96(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12794, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC451(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -96(%rbp)
	jne	.L2681
	leaq	__PRETTY_FUNCTION__.11867(%rip), %rcx
	movl	$12794, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC452(%rip), %rdi
	call	__assert_fail@PLT
.L2681:
	leaq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -72(%rbp)
	movq	-88(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -72(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12797, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC445(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -72(%rbp)
	je	.L2682
	leaq	__PRETTY_FUNCTION__.11867(%rip), %rcx
	movl	$12797, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC445(%rip), %rdi
	call	__assert_fail@PLT
.L2682:
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	-40(%rbp), %eax
	sall	$3, %eax
	cltq
	leaq	8(%rax), %rdx
	movl	$16, %eax
	subq	$1, %rax
	addq	%rdx, %rax
	movl	$16, %edi
	movl	$0, %edx
	divq	%rdi
	imulq	$16, %rax, %rax
	movq	%rax, %rdx
	andq	$-4096, %rdx
	movq	%rsp, %rcx
	subq	%rdx, %rcx
	movq	%rcx, %rdx
.L2683:
	cmpq	%rdx, %rsp
	je	.L2684
	subq	$4096, %rsp
	orq	$0, 4088(%rsp)
	jmp	.L2683
.L2684:
	movq	%rax, %rdx
	andl	$4095, %edx
	subq	%rdx, %rsp
	movq	%rax, %rdx
	andl	$4095, %edx
	testq	%rdx, %rdx
	je	.L2685
	andl	$4095, %eax
	subq	$8, %rax
	addq	%rsp, %rax
	orq	$0, (%rax)
.L2685:
	movq	%rsp, %rax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -24(%rbp)
	movq	-88(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -76(%rbp)
	movl	$0, -80(%rbp)
	jmp	.L2686
.L2693:
	movq	-88(%rbp), %rax
	movq	48(%rax), %rax
	movl	-80(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2695
	movq	-88(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_match_filter
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2696
	movq	-88(%rbp), %rax
	leaq	-32(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %eax
	cmpl	%eax, %edx
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12821, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC446(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L2690
	leaq	__PRETTY_FUNCTION__.11867(%rip), %rcx
	movl	$12821, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC446(%rip), %rdi
	call	__assert_fail@PLT
.L2690:
	movl	-24(%rbp), %eax
	testl	%eax, %eax
	je	.L2697
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12827, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC218(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L2692
	leaq	__PRETTY_FUNCTION__.11867(%rip), %rcx
	movl	$12827, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC219(%rip), %rdi
	call	__assert_fail@PLT
.L2692:
	movq	-88(%rbp), %rax
	leaq	-32(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	%rcx, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	merge_table
	movl	$0, -24(%rbp)
	jmp	.L2688
.L2695:
	nop
	jmp	.L2688
.L2696:
	nop
	jmp	.L2688
.L2697:
	nop
.L2688:
	addl	$1, -80(%rbp)
.L2686:
	movl	-80(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L2693
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L2694
	call	__stack_chk_fail@PLT
.L2694:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE397:
	.size	ecs_bulk_remove_type, .-ecs_bulk_remove_type
	.section	.rodata
.LC453:
	.string	"to_remove != 0"
	.text
	.globl	ecs_bulk_remove_entity
	.type	ecs_bulk_remove_entity, @function
ecs_bulk_remove_entity:
.LFB398:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12838, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	jne	.L2699
	leaq	__PRETTY_FUNCTION__.11884(%rip), %rcx
	movl	$12838, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2699:
	movq	-112(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12839, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC453(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-112(%rbp), %rax
	testq	%rax, %rax
	jne	.L2700
	leaq	__PRETTY_FUNCTION__.11884(%rip), %rcx
	movl	$12839, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC453(%rip), %rdi
	call	__assert_fail@PLT
.L2700:
	leaq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -72(%rbp)
	movq	-104(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -72(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12842, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC445(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	addq	$368, %rax
	cmpq	%rax, -72(%rbp)
	je	.L2701
	leaq	__PRETTY_FUNCTION__.11884(%rip), %rcx
	movl	$12842, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC445(%rip), %rdi
	call	__assert_fail@PLT
.L2701:
	leaq	-112(%rbp), %rax
	movq	%rax, -48(%rbp)
	movl	$1, -40(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$0, -24(%rbp)
	movq	-104(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -84(%rbp)
	movl	$0, -88(%rbp)
	jmp	.L2702
.L2709:
	movq	-104(%rbp), %rax
	movq	48(%rax), %rax
	movl	-88(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L2711
	movq	-104(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_match_filter
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2712
	movq	-104(%rbp), %rax
	leaq	-32(%rbp), %rcx
	leaq	-48(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %eax
	cmpl	%eax, %edx
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12868, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC446(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-24(%rbp), %edx
	movl	-40(%rbp), %eax
	cmpl	%eax, %edx
	jle	.L2706
	leaq	__PRETTY_FUNCTION__.11884(%rip), %rcx
	movl	$12868, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC446(%rip), %rdi
	call	__assert_fail@PLT
.L2706:
	movl	-24(%rbp), %eax
	testl	%eax, %eax
	je	.L2713
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$12874, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC218(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L2708
	leaq	__PRETTY_FUNCTION__.11884(%rip), %rcx
	movl	$12874, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC219(%rip), %rdi
	call	__assert_fail@PLT
.L2708:
	movq	-104(%rbp), %rax
	leaq	-32(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	%rcx, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	merge_table
	movl	$0, -24(%rbp)
	jmp	.L2704
.L2711:
	nop
	jmp	.L2704
.L2712:
	nop
	jmp	.L2704
.L2713:
	nop
.L2704:
	addl	$1, -88(%rbp)
.L2702:
	movl	-88(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jl	.L2709
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L2710
	call	__stack_chk_fail@PLT
.L2710:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE398:
	.size	ecs_bulk_remove_entity, .-ecs_bulk_remove_entity
	.type	skip_newline_and_space, @function
skip_newline_and_space:
.LFB399:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	jmp	.L2715
.L2716:
	addq	$1, -8(%rbp)
.L2715:
	call	__ctype_b_loc@PLT
	movq	(%rax), %rdx
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	movsbq	%al, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$8192, %eax
	testl	%eax, %eax
	jne	.L2716
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE399:
	.size	skip_newline_and_space, .-skip_newline_and_space
	.type	skip_space, @function
skip_space:
.LFB400:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	jmp	.L2719
.L2721:
	addq	$1, -8(%rbp)
.L2719:
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$10, %al
	je	.L2720
	call	__ctype_b_loc@PLT
	movq	(%rax), %rdx
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	movsbq	%al, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$8192, %eax
	testl	%eax, %eax
	jne	.L2721
.L2720:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE400:
	.size	skip_space, .-skip_space
	.type	valid_token_start_char, @function
valid_token_start_char:
.LFB401:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, %eax
	movb	%al, -4(%rbp)
	cmpb	$0, -4(%rbp)
	je	.L2724
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-4(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$1024, %eax
	testl	%eax, %eax
	jne	.L2725
	cmpb	$46, -4(%rbp)
	je	.L2725
	cmpb	$95, -4(%rbp)
	je	.L2725
	cmpb	$42, -4(%rbp)
	je	.L2725
	cmpb	$48, -4(%rbp)
	je	.L2725
	cmpb	$92, -4(%rbp)
	je	.L2725
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-4(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	je	.L2724
.L2725:
	movl	$1, %eax
	jmp	.L2726
.L2724:
	movl	$0, %eax
.L2726:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE401:
	.size	valid_token_start_char, .-valid_token_start_char
	.type	valid_token_char, @function
valid_token_char:
.LFB402:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, %eax
	movb	%al, -4(%rbp)
	cmpb	$0, -4(%rbp)
	je	.L2728
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-4(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$1024, %eax
	testl	%eax, %eax
	jne	.L2729
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-4(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	jne	.L2729
	cmpb	$95, -4(%rbp)
	je	.L2729
	cmpb	$46, -4(%rbp)
	jne	.L2728
.L2729:
	movl	$1, %eax
	jmp	.L2730
.L2728:
	movl	$0, %eax
.L2730:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE402:
	.size	valid_token_char, .-valid_token_char
	.type	valid_operator_char, @function
valid_operator_char:
.LFB403:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, %eax
	movb	%al, -4(%rbp)
	cmpb	$63, -4(%rbp)
	je	.L2732
	cmpb	$33, -4(%rbp)
	jne	.L2733
.L2732:
	movl	$1, %eax
	jmp	.L2734
.L2733:
	movl	$0, %eax
.L2734:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE403:
	.size	valid_operator_char, .-valid_operator_char
	.section	.rodata
.LC454:
	.string	"invalid start of number '%s'"
	.text
	.type	parse_digit, @function
parse_digit:
.LFB404:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-48(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -9(%rbp)
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-9(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	jne	.L2736
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC454(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2736:
	movq	-8(%rbp), %rax
	movzbl	-9(%rbp), %edx
	movb	%dl, (%rax)
	addq	$1, -8(%rbp)
	addq	$1, -48(%rbp)
	jmp	.L2737
.L2740:
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-9(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	je	.L2742
	movq	-8(%rbp), %rax
	movzbl	-9(%rbp), %edx
	movb	%dl, (%rax)
	addq	$1, -8(%rbp)
	addq	$1, -48(%rbp)
.L2737:
	movq	-48(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.L2740
	jmp	.L2739
.L2742:
	nop
.L2739:
	movq	-8(%rbp), %rax
	movb	$0, (%rax)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE404:
	.size	parse_digit, .-parse_digit
	.section	.rodata
	.align 8
.LC455:
	.string	"invalid start of identifier '%s'"
	.align 8
.LC456:
	.string	"identifier '%s' has mismatching < > pairs"
	.text
	.type	parse_token, @function
parse_token:
.LFB405:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-48(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -13(%rbp)
	movsbl	-13(%rbp), %eax
	movl	%eax, %edi
	call	valid_token_start_char
	xorl	$1, %eax
	testb	%al, %al
	je	.L2744
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC455(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2744:
	movq	-8(%rbp), %rax
	movzbl	-13(%rbp), %edx
	movb	%dl, (%rax)
	addq	$1, -8(%rbp)
	addq	$1, -48(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L2745
.L2751:
	cmpb	$60, -13(%rbp)
	jne	.L2746
	addl	$1, -12(%rbp)
	jmp	.L2747
.L2746:
	cmpb	$62, -13(%rbp)
	jne	.L2748
	cmpl	$0, -12(%rbp)
	je	.L2754
	subl	$1, -12(%rbp)
	jmp	.L2747
.L2748:
	movsbl	-13(%rbp), %eax
	movl	%eax, %edi
	call	valid_token_char
	xorl	$1, %eax
	testb	%al, %al
	jne	.L2755
.L2747:
	movq	-8(%rbp), %rax
	movzbl	-13(%rbp), %edx
	movb	%dl, (%rax)
	addq	$1, -8(%rbp)
	addq	$1, -48(%rbp)
.L2745:
	movq	-48(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -13(%rbp)
	cmpb	$0, -13(%rbp)
	jne	.L2751
	jmp	.L2750
.L2754:
	nop
	jmp	.L2750
.L2755:
	nop
.L2750:
	movq	-8(%rbp), %rax
	movb	$0, (%rax)
	cmpl	$0, -12(%rbp)
	je	.L2752
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC456(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2752:
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE405:
	.size	parse_token, .-parse_token
	.type	parse_identifier, @function
parse_identifier:
.LFB406:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -9(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpb	$92, -9(%rbp)
	jne	.L2757
	addq	$1, -8(%rbp)
.L2757:
	movq	48+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-32(%rbp), %rdx
	movq	%rax, 8(%rdx)
	cmpb	$92, -9(%rbp)
	jne	.L2758
	movq	-32(%rbp), %rax
	movl	$1, 16(%rax)
	jmp	.L2759
.L2758:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_identifier_is_var
	testb	%al, %al
	je	.L2759
	movq	-32(%rbp), %rax
	movl	$2, 16(%rax)
.L2759:
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE406:
	.size	parse_identifier, .-parse_identifier
	.section	.rodata
.LC457:
	.string	"invalid role '%s'"
	.text
	.type	parse_role, @function
parse_role:
.LFB407:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rax
	leaq	.LC307(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2762
	movabsq	$-432345564227567616, %rax
	jmp	.L2763
.L2762:
	movq	-32(%rbp), %rax
	leaq	.LC311(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2764
	movabsq	$-504403158265495552, %rax
	jmp	.L2763
.L2764:
	movq	-32(%rbp), %rax
	leaq	.LC310(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2765
	movabsq	$-576460752303423488, %rax
	jmp	.L2763
.L2765:
	movq	-32(%rbp), %rax
	leaq	.LC309(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2766
	movabsq	$-648518346341351424, %rax
	jmp	.L2763
.L2766:
	movq	-32(%rbp), %rax
	leaq	.LC312(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2767
	movabsq	$-720575940379279360, %rax
	jmp	.L2763
.L2767:
	movq	-32(%rbp), %rax
	leaq	.LC313(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2768
	movabsq	$-360287970189639680, %rax
	jmp	.L2763
.L2768:
	movq	-32(%rbp), %rax
	leaq	.LC314(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2769
	movabsq	$-288230376151711744, %rax
	jmp	.L2763
.L2769:
	movq	-32(%rbp), %rax
	leaq	.LC315(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2770
	movabsq	$-792633534417207296, %rax
	jmp	.L2763
.L2770:
	movq	-32(%rbp), %rax
	leaq	.LC308(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2771
	movabsq	$-864691128455135232, %rax
	jmp	.L2763
.L2771:
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC457(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2763:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE407:
	.size	parse_role, .-parse_role
	.type	parse_operator, @function
parse_operator:
.LFB408:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, %eax
	movb	%al, -4(%rbp)
	cmpb	$63, -4(%rbp)
	jne	.L2773
	movl	$3, %eax
	jmp	.L2774
.L2773:
	cmpb	$33, -4(%rbp)
	jne	.L2775
	movl	$2, %eax
	jmp	.L2774
.L2775:
	movl	$0, %ecx
	movl	$13146, %edx
	leaq	.LC74(%rip), %rsi
	movl	$7, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L2774:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE408:
	.size	parse_operator, .-parse_operator
	.section	.rodata
.LC458:
	.string	"in"
.LC459:
	.string	"out"
.LC460:
	.string	"inout"
.LC461:
	.string	"expected ]"
	.text
	.type	parse_annotation, @function
parse_annotation:
.LFB409:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$320, %rsp
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	%rdx, -296(%rbp)
	movq	%rcx, -304(%rbp)
	movq	%r8, -312(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-272(%rbp), %rdi
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rdx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -304(%rbp)
	cmpq	$0, -304(%rbp)
	jne	.L2777
	movl	$0, %eax
	jmp	.L2783
.L2777:
	leaq	-272(%rbp), %rax
	leaq	.LC458(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2779
	movq	-312(%rbp), %rax
	movl	$2, (%rax)
	jmp	.L2780
.L2779:
	leaq	-272(%rbp), %rax
	leaq	.LC459(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2781
	movq	-312(%rbp), %rax
	movl	$3, (%rax)
	jmp	.L2780
.L2781:
	leaq	-272(%rbp), %rax
	leaq	.LC460(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2780
	movq	-312(%rbp), %rax
	movl	$1, (%rax)
.L2780:
	movq	-304(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -304(%rbp)
	movq	-304(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$93, %al
	je	.L2782
	movq	-296(%rbp), %rdx
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rax
	leaq	.LC461(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2782:
	movq	-304(%rbp), %rax
	addq	$1, %rax
.L2783:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L2784
	call	__stack_chk_fail@PLT
.L2784:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE409:
	.size	parse_annotation, .-parse_annotation
	.section	.rodata
.LC462:
	.string	"self"
.LC463:
	.string	"superset"
.LC464:
	.string	"subset"
.LC465:
	.string	"cascade"
.LC466:
	.string	"all"
	.text
	.type	parse_set_token, @function
parse_set_token:
.LFB410:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	.LC462(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2786
	movl	$1, %eax
	jmp	.L2787
.L2786:
	movq	-8(%rbp), %rax
	leaq	.LC463(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2788
	movl	$2, %eax
	jmp	.L2787
.L2788:
	movq	-8(%rbp), %rax
	leaq	.LC464(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2789
	movl	$4, %eax
	jmp	.L2787
.L2789:
	movq	-8(%rbp), %rax
	leaq	.LC465(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2790
	movl	$8, %eax
	jmp	.L2787
.L2790:
	movq	-8(%rbp), %rax
	leaq	.LC466(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2791
	movl	$16, %eax
	jmp	.L2787
.L2791:
	movl	$0, %eax
.L2787:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE410:
	.size	parse_set_token, .-parse_set_token
	.section	.rodata
.LC467:
	.string	"invalid set token '%s'"
.LC468:
	.string	"duplicate set token '%s'"
	.align 8
.LC469:
	.string	"cannot mix superset and subset"
.LC470:
	.string	"unresolved identifier '%s'"
.LC471:
	.string	"expected ',' or ')'"
.LC472:
	.string	"invalid negative depth"
.LC473:
	.string	"expected ')'"
.LC474:
	.string	"expected end of set expr"
	.align 8
.LC475:
	.string	"min_depth must be zero for set expression with 'self'"
	.text
	.type	parse_set_expr, @function
parse_set_expr:
.LFB411:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -64(%rbp)
.L2813:
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	parse_set_token
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.L2793
	movq	-64(%rbp), %rcx
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC467(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2793:
	movq	16(%rbp), %rax
	movzbl	32(%rax), %eax
	andb	-9(%rbp), %al
	testb	%al, %al
	je	.L2794
	movq	-64(%rbp), %rcx
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC468(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2794:
	cmpb	$4, -9(%rbp)
	jne	.L2795
	movq	16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$2, %eax
	testl	%eax, %eax
	jne	.L2796
.L2795:
	cmpb	$2, -9(%rbp)
	jne	.L2797
	movq	16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$4, %eax
	testl	%eax, %eax
	je	.L2797
.L2796:
	movq	-64(%rbp), %rcx
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC469(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2797:
	movq	16(%rbp), %rax
	movzbl	32(%rax), %eax
	orb	-9(%rbp), %al
	movl	%eax, %edx
	movq	16(%rbp), %rax
	movb	%dl, 32(%rax)
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$40, %al
	jne	.L2798
	addq	$1, -56(%rbp)
	call	__ctype_b_loc@PLT
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	movsbq	%al, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	jne	.L2799
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_token_start_char
	testb	%al, %al
	je	.L2799
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rcx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L2800
	movl	$0, %eax
	jmp	.L2801
.L2800:
	movq	-64(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$1, %r9d
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_lookup_path_w_sep
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2802
	movq	-64(%rbp), %rcx
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC470(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2802:
	movq	16(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 24(%rax)
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$44, %al
	jne	.L2803
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -56(%rbp)
	jmp	.L2799
.L2803:
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$41, %al
	je	.L2799
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	leaq	.LC471(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2799:
	call	__ctype_b_loc@PLT
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	movsbq	%al, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	je	.L2804
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rcx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_digit
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L2805
	movl	$0, %eax
	jmp	.L2801
.L2805:
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	atoi@PLT
	movq	16(%rbp), %rdx
	movl	%eax, 40(%rdx)
	movq	16(%rbp), %rax
	movl	40(%rax), %eax
	testl	%eax, %eax
	jns	.L2806
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	leaq	.LC472(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2806:
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$44, %al
	jne	.L2804
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -56(%rbp)
.L2804:
	call	__ctype_b_loc@PLT
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	movsbq	%al, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	je	.L2807
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rcx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_digit
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L2808
	movl	$0, %eax
	jmp	.L2801
.L2808:
	movq	16(%rbp), %rax
	movl	40(%rax), %edx
	movq	16(%rbp), %rax
	movl	%edx, 36(%rax)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	atoi@PLT
	movq	16(%rbp), %rdx
	movl	%eax, 40(%rdx)
	movq	16(%rbp), %rax
	movl	40(%rax), %eax
	testl	%eax, %eax
	jns	.L2807
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	leaq	.LC472(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2807:
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$41, %al
	je	.L2809
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	leaq	.LC473(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2809:
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$41, %al
	je	.L2798
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$44, %al
	je	.L2798
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	leaq	.LC474(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2798:
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$124, %al
	jne	.L2810
	addq	$1, -56(%rbp)
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_token_start_char
	testb	%al, %al
	je	.L2813
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rcx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L2813
	movl	$0, %eax
	jmp	.L2801
.L2810:
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$41, %al
	je	.L2812
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$44, %al
	je	.L2812
	jmp	.L2813
.L2812:
	movq	16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	je	.L2814
	movq	16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$2, %eax
	testl	%eax, %eax
	jne	.L2814
	movq	16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$4, %eax
	testl	%eax, %eax
	jne	.L2814
	movq	16(%rbp), %rax
	movzbl	32(%rax), %eax
	orl	$2, %eax
	movl	%eax, %edx
	movq	16(%rbp), %rax
	movb	%dl, 32(%rax)
.L2814:
	movq	16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$1, %eax
	testl	%eax, %eax
	je	.L2815
	movq	16(%rbp), %rax
	movl	36(%rax), %eax
	testl	%eax, %eax
	je	.L2815
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	leaq	.LC475(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2815:
	movq	-56(%rbp), %rax
.L2801:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE411:
	.size	parse_set_expr, .-parse_set_expr
	.section	.rodata
.LC476:
	.string	"too many arguments in term"
.LC477:
	.string	"invalid identifier '%s'"
	.align 8
.LC478:
	.string	"expected identifier or set expression"
	.text
	.type	parse_arguments, @function
parse_arguments:
.LFB412:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -64(%rbp)
	movl	$0, -4(%rbp)
.L2829:
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_token_start_char
	testb	%al, %al
	je	.L2817
	cmpl	$2, -4(%rbp)
	jne	.L2818
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	leaq	.LC476(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2818:
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rcx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L2819
	movl	$0, %eax
	jmp	.L2820
.L2819:
	movq	-64(%rbp), %rax
	leaq	.LC466(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	je	.L2821
	movq	-64(%rbp), %rax
	leaq	.LC465(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	je	.L2821
	movq	-64(%rbp), %rax
	leaq	.LC462(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	je	.L2821
	movq	-64(%rbp), %rax
	leaq	.LC463(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	je	.L2821
	movq	-64(%rbp), %rax
	leaq	.LC464(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2822
.L2821:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$4, %rax
	leaq	64(%rax), %rdx
	movq	16(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, %rcx
	movq	-64(%rbp), %r9
	movq	-56(%rbp), %r8
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	subq	$8, %rsp
	pushq	%rdi
	movq	%rax, %rdi
	call	parse_set_expr
	addq	$16, %rsp
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L2824
	movl	$0, %eax
	jmp	.L2820
.L2822:
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$4, %rax
	leaq	64(%rax), %rdx
	movq	16(%rbp), %rax
	addq	%rax, %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	parse_identifier
	testl	%eax, %eax
	je	.L2824
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rcx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC477(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2824:
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$44, %al
	jne	.L2825
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -56(%rbp)
	jmp	.L2830
.L2825:
	movq	-56(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$41, %al
	jne	.L2827
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -56(%rbp)
	nop
	movq	-56(%rbp), %rax
	jmp	.L2820
.L2827:
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	leaq	.LC471(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2817:
	movq	-56(%rbp), %rax
	subq	-40(%rbp), %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	leaq	.LC478(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2830:
	addl	$1, -4(%rbp)
	jmp	.L2829
.L2820:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE412:
	.size	parse_arguments, .-parse_arguments
	.section	.rodata
	.align 8
.LC479:
	.string	"expected identifier after singleton operator"
.LC480:
	.string	"unexpected character '%c'"
	.align 8
.LC481:
	.string	"expected identifier after source operator"
.LC482:
	.string	"PARENT"
.LC483:
	.string	"SYSTEM"
.LC484:
	.string	"ANY"
.LC485:
	.string	"SHARED"
.LC486:
	.string	"CASCADE"
	.align 8
.LC487:
	.string	"expected identifier after source"
	.align 8
.LC488:
	.string	"expected identifier after role"
	.text
	.type	parse_term, @function
parse_term:
.LFB413:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$520, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -504(%rbp)
	movq	%rsi, -512(%rbp)
	movq	%rdx, -520(%rbp)
	movq	%rcx, -528(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-520(%rbp), %rax
	movq	%rax, -488(%rbp)
	movq	$0, -288(%rbp)
	movq	$0, -280(%rbp)
	movq	$0, -272(%rbp)
	movq	$0, -264(%rbp)
	movq	$0, -256(%rbp)
	movq	$0, -248(%rbp)
	movq	$0, -240(%rbp)
	movq	$0, -232(%rbp)
	movq	$0, -224(%rbp)
	movq	$0, -216(%rbp)
	movq	$0, -208(%rbp)
	movq	$0, -200(%rbp)
	movq	$0, -192(%rbp)
	movq	$0, -184(%rbp)
	movq	$0, -176(%rbp)
	movq	$0, -168(%rbp)
	movq	$0, -160(%rbp)
	movq	$0, -152(%rbp)
	movq	$0, -144(%rbp)
	movq	$0, -136(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -112(%rbp)
	movq	$0, -104(%rbp)
	movq	$0, -96(%rbp)
	movq	$0, -88(%rbp)
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	leaq	-480(%rbp), %rdx
	movl	$0, %eax
	movl	$24, %ecx
	movq	%rdx, %rdi
	rep stosq
	movb	$1, -292(%rbp)
	movq	-488(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$91, %al
	jne	.L2832
	movq	-488(%rbp), %rax
	leaq	1(%rax), %rcx
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-480(%rbp), %rax
	leaq	8(%rax), %rdi
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_annotation
	movq	%rax, -488(%rbp)
	cmpq	$0, -488(%rbp)
	jne	.L2833
	movl	$0, %eax
	jmp	.L2886
.L2833:
	movq	-488(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
.L2832:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_operator_char
	testb	%al, %al
	je	.L2835
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	parse_operator
	movl	%eax, -320(%rbp)
	movq	-488(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
.L2835:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_token_start_char
	testb	%al, %al
	je	.L2836
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rdi
	movq	-488(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -488(%rbp)
	cmpq	$0, -488(%rbp)
	jne	.L2837
	movl	$0, %eax
	jmp	.L2886
.L2837:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$58, %al
	jne	.L2838
	addq	$1, -488(%rbp)
	nop
.L2839:
	endbr64
	leaq	-288(%rbp), %rax
	leaq	.LC482(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2854
	jmp	.L2888
.L2838:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$124, %al
	jne	.L2840
	movq	-488(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	cmpb	$124, %al
	je	.L2840
	addq	$1, -488(%rbp)
	jmp	.L2841
.L2840:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$40, %al
	jmp	.L2843
.L2836:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$58, %al
	je	.L2891
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$36, %al
	jne	.L2846
	addq	$1, -488(%rbp)
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_token_start_char
	testb	%al, %al
	je	.L2847
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rdi
	movq	-488(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -488(%rbp)
	cmpq	$0, -488(%rbp)
	jne	.L2892
	movl	$0, %eax
	jmp	.L2886
.L2847:
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	leaq	.LC479(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2846:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$40, %al
	je	.L2893
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %ecx
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movl	%ecx, %r8d
	leaq	.LC480(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2891:
	nop
.L2845:
	endbr64
	movb	$32, -384(%rbp)
	movq	-488(%rbp), %rax
	addq	$1, %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_token_start_char
	testb	%al, %al
	je	.L2852
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rdi
	movq	-488(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -488(%rbp)
	cmpq	$0, -488(%rbp)
	jne	.L2894
	movl	$0, %eax
	jmp	.L2886
.L2852:
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	leaq	.LC481(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2888:
	movb	$2, -384(%rbp)
	movl	$276, %eax
	movq	%rax, -392(%rbp)
	movl	$1, -376(%rbp)
	jmp	.L2855
.L2854:
	leaq	-288(%rbp), %rax
	leaq	.LC483(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2856
	movq	48+ecs_os_api(%rip), %rdx
	movq	-512(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -408(%rbp)
	jmp	.L2855
.L2856:
	leaq	-288(%rbp), %rax
	leaq	.LC484(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2857
	movb	$3, -384(%rbp)
	movl	$277, %eax
	movq	%rax, -392(%rbp)
	movl	$267, %eax
	movq	%rax, -416(%rbp)
	jmp	.L2855
.L2857:
	leaq	-288(%rbp), %rax
	leaq	.LC315(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2858
	movb	$1, -384(%rbp)
	movl	$267, %eax
	movq	%rax, -416(%rbp)
	jmp	.L2855
.L2858:
	leaq	-288(%rbp), %rax
	leaq	.LC485(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2859
	movb	$2, -384(%rbp)
	movl	$277, %eax
	movq	%rax, -392(%rbp)
	movl	$267, %eax
	movq	%rax, -416(%rbp)
	jmp	.L2855
.L2859:
	leaq	-288(%rbp), %rax
	leaq	.LC486(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2860
	movb	$10, -384(%rbp)
	movl	$276, %eax
	movq	%rax, -392(%rbp)
	movl	$267, %eax
	movq	%rax, -416(%rbp)
	movl	$3, -320(%rbp)
	jmp	.L2855
.L2860:
	leaq	-480(%rbp), %rax
	leaq	64(%rax), %rdx
	leaq	-288(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	parse_identifier
	testl	%eax, %eax
	je	.L2855
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC477(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2855:
	movq	-488(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_token_start_char
	testb	%al, %al
	je	.L2861
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rdi
	movq	-488(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -488(%rbp)
	cmpq	$0, -488(%rbp)
	jne	.L2862
	movl	$0, %eax
	jmp	.L2886
.L2862:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$124, %al
	jne	.L2895
	movq	-488(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	cmpb	$124, %al
	je	.L2895
	addq	$1, -488(%rbp)
	jmp	.L2841
.L2861:
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	leaq	.LC487(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2841:
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rax, %rdi
	call	parse_role
	movq	%rax, -312(%rbp)
	movq	-312(%rbp), %rax
	testq	%rax, %rax
	jne	.L2864
	movl	$0, %eax
	jmp	.L2886
.L2864:
	movq	-488(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_token_start_char
	testb	%al, %al
	je	.L2865
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rdi
	movq	-488(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -488(%rbp)
	cmpq	$0, -488(%rbp)
	jne	.L2896
	movl	$0, %eax
	jmp	.L2886
.L2865:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$40, %al
	je	.L2897
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	leaq	.LC488(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2894:
	nop
	jmp	.L2843
.L2895:
	nop
	jmp	.L2843
.L2896:
	nop
.L2843:
	leaq	-480(%rbp), %rax
	leaq	16(%rax), %rdx
	leaq	-288(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	parse_identifier
	testl	%eax, %eax
	je	.L2868
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC477(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2868:
	movq	-488(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$40, %al
	jne	.L2869
	addq	$1, -488(%rbp)
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$41, %al
	jne	.L2870
	movb	$32, -384(%rbp)
	addq	$1, -488(%rbp)
	movq	-488(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
	jmp	.L2872
.L2870:
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rcx
	leaq	-288(%rbp), %r9
	movq	-488(%rbp), %r8
	movq	-520(%rbp), %rdx
	movq	-512(%rbp), %rsi
	movq	-504(%rbp), %rax
	subq	$8, %rsp
	leaq	-480(%rbp), %rdi
	pushq	%rdi
	movq	%rax, %rdi
	call	parse_arguments
	addq	$16, %rsp
	movq	%rax, -488(%rbp)
	jmp	.L2872
.L2869:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_token_start_char
	testb	%al, %al
	je	.L2898
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rdi
	movq	-488(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -488(%rbp)
	cmpq	$0, -488(%rbp)
	jne	.L2899
	movl	$0, %eax
	jmp	.L2886
.L2893:
	nop
	jmp	.L2851
.L2897:
	nop
.L2851:
	movq	-488(%rbp), %rax
	leaq	1(%rax), %rcx
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rdi
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -488(%rbp)
	cmpq	$0, -488(%rbp)
	jne	.L2876
	movl	$0, %eax
	jmp	.L2886
.L2876:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$44, %al
	jne	.L2877
	addq	$1, -488(%rbp)
	movl	$267, %eax
	movq	%rax, -416(%rbp)
	nop
.L2878:
	endbr64
	leaq	-480(%rbp), %rax
	leaq	16(%rax), %rdx
	leaq	-288(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	parse_identifier
	testl	%eax, %eax
	je	.L2879
	jmp	.L2890
.L2877:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %ecx
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movl	%ecx, %r8d
	leaq	.LC480(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2890:
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC477(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2879:
	movq	-488(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %eax
	movl	%eax, %edi
	call	valid_token_start_char
	testb	%al, %al
	je	.L2880
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rdi
	movq	-488(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	parse_token
	movq	%rax, -488(%rbp)
	cmpq	$0, -488(%rbp)
	jne	.L2881
	movl	$0, %eax
	jmp	.L2886
.L2881:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$41, %al
	jne	.L2882
	addq	$1, -488(%rbp)
	jmp	.L2883
.L2882:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	movsbl	%al, %ecx
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movl	%ecx, %r8d
	leaq	.LC480(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2880:
	movq	-488(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$41, %al
	je	.L2900
	nop
.L2883:
	leaq	-480(%rbp), %rax
	leaq	112(%rax), %rdx
	leaq	-288(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	parse_identifier
	testl	%eax, %eax
	je	.L2884
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC477(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2884:
	movq	-488(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
	jmp	.L2872
.L2892:
	nop
.L2849:
	endbr64
	leaq	-480(%rbp), %rax
	leaq	16(%rax), %rdx
	leaq	-288(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	parse_identifier
	testl	%eax, %eax
	je	.L2885
	movq	-488(%rbp), %rax
	subq	-520(%rbp), %rax
	movq	%rax, %rdx
	leaq	-288(%rbp), %rcx
	movq	-520(%rbp), %rsi
	movq	-512(%rbp), %rax
	movq	%rcx, %r8
	leaq	.LC477(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2885:
	leaq	-480(%rbp), %rax
	leaq	64(%rax), %rdx
	leaq	-288(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	parse_identifier
	jmp	.L2872
.L2899:
	nop
.L2875:
	endbr64
	movq	48+ecs_os_api(%rip), %rdx
	leaq	-288(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -304(%rbp)
	movq	-488(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -488(%rbp)
	jmp	.L2872
.L2898:
	nop
	jmp	.L2872
.L2900:
	nop
.L2872:
	movq	-528(%rbp), %rax
	movq	-480(%rbp), %rcx
	movq	-472(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-464(%rbp), %rcx
	movq	-456(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-448(%rbp), %rcx
	movq	-440(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-432(%rbp), %rcx
	movq	-424(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-416(%rbp), %rcx
	movq	-408(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-400(%rbp), %rcx
	movq	-392(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	movq	-384(%rbp), %rcx
	movq	-376(%rbp), %rbx
	movq	%rcx, 96(%rax)
	movq	%rbx, 104(%rax)
	movq	-368(%rbp), %rcx
	movq	-360(%rbp), %rbx
	movq	%rcx, 112(%rax)
	movq	%rbx, 120(%rax)
	movq	-352(%rbp), %rcx
	movq	-344(%rbp), %rbx
	movq	%rcx, 128(%rax)
	movq	%rbx, 136(%rax)
	movq	-336(%rbp), %rcx
	movq	-328(%rbp), %rbx
	movq	%rcx, 144(%rax)
	movq	%rbx, 152(%rax)
	movq	-320(%rbp), %rcx
	movq	-312(%rbp), %rbx
	movq	%rcx, 160(%rax)
	movq	%rbx, 168(%rax)
	movq	-304(%rbp), %rcx
	movq	-296(%rbp), %rbx
	movq	%rcx, 176(%rax)
	movq	%rbx, 184(%rax)
	movq	-488(%rbp), %rax
.L2886:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L2887
	call	__stack_chk_fail@PLT
.L2887:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE413:
	.size	parse_term, .-parse_term
	.section	.rodata
.LC489:
	.string	"term != NULL"
.LC490:
	.string	"term != ((void *)0)"
.LC491:
	.string	"invalid preceding token"
.LC492:
	.string	"||"
	.align 8
.LC493:
	.string	"cannot combine || with other operators"
	.align 8
.LC494:
	.string	"expected end of expression or next term"
.LC495:
	.string	"unexpected term after 0"
	.align 8
.LC496:
	.string	"invalid operator for empty source"
	.align 8
.LC497:
	.string	"cannot combine different sources in OR expression"
	.text
	.globl	ecs_parse_term
	.type	ecs_parse_term, @function
ecs_parse_term:
.LFB414:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13714, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L2902
	leaq	__PRETTY_FUNCTION__.12021(%rip), %rcx
	movl	$13714, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L2902:
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13715, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC98(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L2903
	leaq	__PRETTY_FUNCTION__.12021(%rip), %rcx
	movl	$13715, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC99(%rip), %rdi
	call	__assert_fail@PLT
.L2903:
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13716, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC489(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L2904
	leaq	__PRETTY_FUNCTION__.12021(%rip), %rcx
	movl	$13716, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC490(%rip), %rdi
	call	__assert_fail@PLT
.L2904:
	movq	-72(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -8(%rbp)
	movb	$0, -22(%rbp)
	movq	-64(%rbp), %rax
	cmpq	-56(%rbp), %rax
	je	.L2905
	movq	-64(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -16(%rbp)
.L2907:
	movq	-16(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -21(%rbp)
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-21(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$8192, %eax
	testl	%eax, %eax
	je	.L2906
	subq	$1, -16(%rbp)
	jmp	.L2907
.L2906:
	cmpb	$44, -21(%rbp)
	je	.L2930
	movl	$124, %eax
	cmpb	%al, -21(%rbp)
	jne	.L2909
	movb	$1, -22(%rbp)
	jmp	.L2905
.L2909:
	movq	-64(%rbp), %rax
	subq	-56(%rbp), %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rsi
	movq	-48(%rbp), %rax
	leaq	.LC491(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2930:
	nop
.L2905:
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	skip_newline_and_space
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L2910
	movq	-64(%rbp), %rax
	jmp	.L2911
.L2910:
	movq	-64(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jne	.L2912
	movq	-56(%rbp), %rax
	leaq	.LC293(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2912
	movq	-64(%rbp), %rax
	addq	$1, %rax
	jmp	.L2911
.L2912:
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	parse_term
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	jne	.L2913
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_fini
	movl	$0, %eax
	jmp	.L2911
.L2913:
	movq	-64(%rbp), %rax
	movl	$2, %edx
	leaq	.LC492(%rip), %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	je	.L2914
	cmpb	$0, -22(%rbp)
	je	.L2915
.L2914:
	movq	-72(%rbp), %rax
	movl	160(%rax), %eax
	testl	%eax, %eax
	je	.L2916
	movq	-64(%rbp), %rax
	subq	-56(%rbp), %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rsi
	movq	-48(%rbp), %rax
	leaq	.LC493(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2916:
	movq	-72(%rbp), %rax
	movl	$1, 160(%rax)
.L2915:
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$44, %al
	je	.L2917
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	movl	$124, %edx
	cmpb	%dl, %al
	je	.L2917
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$10, %al
	je	.L2917
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L2917
	movq	-64(%rbp), %rax
	subq	-56(%rbp), %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rsi
	movq	-48(%rbp), %rax
	leaq	.LC494(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2917:
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	leaq	.LC293(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2918
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L2919
	movq	-64(%rbp), %rax
	subq	-56(%rbp), %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rsi
	movq	-48(%rbp), %rax
	leaq	.LC495(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2919:
	movq	-8(%rbp), %rax
	movb	$32, 32(%rax)
.L2918:
	movq	-72(%rbp), %rax
	movl	160(%rax), %eax
	testl	%eax, %eax
	je	.L2920
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	cmpb	$32, %al
	jne	.L2920
	movq	-64(%rbp), %rax
	subq	-56(%rbp), %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rsi
	movq	-48(%rbp), %rax
	leaq	.LC496(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2920:
	cmpb	$0, -22(%rbp)
	je	.L2921
	movq	-72(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	jne	.L2921
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	cmpl	%eax, -20(%rbp)
	je	.L2922
	movq	-64(%rbp), %rax
	subq	-56(%rbp), %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rsi
	movq	-48(%rbp), %rax
	leaq	.LC497(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L2922:
	movq	-72(%rbp), %rax
	movl	$1, 160(%rax)
.L2921:
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	cmpb	$32, %al
	je	.L2923
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L2923
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L2923
	movl	$267, %edx
	movq	-8(%rbp), %rax
	movq	%rdx, (%rax)
.L2923:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L2924
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	leaq	.LC293(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L2924
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	movq	-8(%rbp), %rax
	movb	$32, 32(%rax)
.L2924:
	movq	-72(%rbp), %rax
	movq	168(%rax), %rax
	movabsq	$-504403158265495552, %rdx
	cmpq	%rdx, %rax
	jne	.L2925
	movq	-72(%rbp), %rax
	movl	$4, 160(%rax)
	movq	-72(%rbp), %rax
	movq	$0, 168(%rax)
	jmp	.L2926
.L2925:
	movq	-72(%rbp), %rax
	movq	168(%rax), %rax
	movabsq	$-576460752303423488, %rdx
	cmpq	%rdx, %rax
	jne	.L2927
	movq	-72(%rbp), %rax
	movl	$5, 160(%rax)
	movq	-72(%rbp), %rax
	movq	$0, 168(%rax)
	jmp	.L2926
.L2927:
	movq	-72(%rbp), %rax
	movq	168(%rax), %rax
	movabsq	$-720575940379279360, %rdx
	cmpq	%rdx, %rax
	jne	.L2926
	movq	-72(%rbp), %rax
	movl	$6, 160(%rax)
	movq	-72(%rbp), %rax
	movq	$0, 168(%rax)
.L2926:
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L2928
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$44, %al
	jne	.L2929
	addq	$1, -64(%rbp)
	jmp	.L2928
.L2929:
	movq	-64(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$124, %al
	jne	.L2928
	addq	$2, -64(%rbp)
.L2928:
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	skip_space
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
.L2911:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE414:
	.size	ecs_parse_term, .-ecs_parse_term
	.section	.rodata
.LC498:
	.string	"column <= table->column_count"
	.text
	.type	da_get_column, @function
da_get_column:
.LFB415:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13876, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2932
	leaq	__PRETTY_FUNCTION__.12034(%rip), %rcx
	movl	$13876, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L2932:
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -28(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13877, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC498(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jle	.L2933
	leaq	__PRETTY_FUNCTION__.12034(%rip), %rcx
	movl	$13877, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC498(%rip), %rdi
	call	__assert_fail@PLT
.L2933:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2934
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L2934
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	16(%rax), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	jmp	.L2935
.L2934:
	movl	$0, %eax
.L2935:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE415:
	.size	da_get_column, .-da_get_column
	.section	.rodata
.LC499:
	.string	"c != NULL"
.LC500:
	.string	"c != ((void *)0)"
	.text
	.type	da_get_or_create_column, @function
da_get_or_create_column:
.LFB416:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movl	-36(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	da_get_column
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L2937
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L2938
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L2937
.L2938:
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_init_data
	movl	-36(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	da_get_column
	movq	%rax, -16(%rbp)
.L2937:
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13898, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC499(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L2939
	leaq	__PRETTY_FUNCTION__.12043(%rip), %rcx
	movl	$13898, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC500(%rip), %rdi
	call	__assert_fail@PLT
.L2939:
	movq	-16(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE416:
	.size	da_get_or_create_column, .-da_get_or_create_column
	.section	.rodata
.LC501:
	.string	"table->data != NULL"
.LC502:
	.string	"table->data != ((void *)0)"
.LC503:
	.string	"table->data->entities != NULL"
	.align 8
.LC504:
	.string	"table->data->entities != ((void *)0)"
	.text
	.type	get_entity_array, @function
get_entity_array:
.LFB417:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13907, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2942
	leaq	__PRETTY_FUNCTION__.12048(%rip), %rcx
	movl	$13907, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L2942:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13908, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC501(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	jne	.L2943
	leaq	__PRETTY_FUNCTION__.12048(%rip), %rcx
	movl	$13908, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC502(%rip), %rdi
	call	__assert_fail@PLT
.L2943:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13909, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC503(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L2944
	leaq	__PRETTY_FUNCTION__.12048(%rip), %rcx
	movl	$13909, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC504(%rip), %rdi
	call	__assert_fail@PLT
.L2944:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE417:
	.size	get_entity_array, .-get_entity_array
	.globl	ecs_table_get_type
	.type	ecs_table_get_type, @function
ecs_table_get_type:
.LFB418:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE418:
	.size	ecs_table_get_type, .-ecs_table_get_type
	.globl	ecs_record_find
	.type	ecs_record_find, @function
ecs_record_find:
.LFB419:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movq	-32(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2949
	movq	-8(%rbp), %rax
	jmp	.L2950
.L2949:
	movl	$0, %eax
.L2950:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE419:
	.size	ecs_record_find, .-ecs_record_find
	.globl	ecs_record_ensure
	.type	ecs_record_ensure, @function
ecs_record_ensure:
.LFB420:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	movq	-32(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_ensure
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13939, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC124(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2952
	leaq	__PRETTY_FUNCTION__.12063(%rip), %rcx
	movl	$13939, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC125(%rip), %rdi
	call	__assert_fail@PLT
.L2952:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE420:
	.size	ecs_record_ensure, .-ecs_record_ensure
	.globl	ecs_table_insert
	.type	ecs_table_insert, @function
ecs_table_insert:
.LFB421:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r13
	pushq	%r12
	subq	$48, %rsp
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -24(%rbp)
	movq	-64(%rbp), %rdi
	movq	-56(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$1, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	flecs_table_append
	movl	%eax, -28(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L2955
	movq	-64(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movl	-28(%rbp), %eax
	leal	1(%rax), %edx
	movq	-64(%rbp), %rax
	movl	%edx, 8(%rax)
.L2955:
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movq	-48(%rbp), %r12
	movl	%eax, %edx
	movq	%r13, %rcx
	movabsq	$-4294967296, %rax
	andq	%rcx, %rax
	orq	%rdx, %rax
	movq	%rax, %r13
	movq	%r12, %rax
	movq	%r13, %rdx
	addq	$48, %rsp
	popq	%r12
	popq	%r13
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE421:
	.size	ecs_table_insert, .-ecs_table_insert
	.globl	ecs_table_find_column
	.type	ecs_table_find_column, @function
ecs_table_find_column:
.LFB422:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13962, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L2958
	leaq	__PRETTY_FUNCTION__.12077(%rip), %rcx
	movl	$13962, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L2958:
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$13963, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC193(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L2959
	leaq	__PRETTY_FUNCTION__.12077(%rip), %rcx
	movl	$13963, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC193(%rip), %rdi
	call	__assert_fail@PLT
.L2959:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE422:
	.size	ecs_table_find_column, .-ecs_table_find_column
	.globl	ecs_table_get_column
	.type	ecs_table_get_column, @function
ecs_table_get_column:
.LFB423:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	da_get_column
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2962
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	jmp	.L2964
.L2962:
	movl	$0, %eax
.L2964:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE423:
	.size	ecs_table_get_column, .-ecs_table_get_column
	.globl	ecs_table_set_column
	.type	ecs_table_set_column, @function
ecs_table_set_column:
.LFB424:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	movq	%rcx, -64(%rbp)
	movl	-52(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	da_get_or_create_column
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	testq	%rax, %rax
	je	.L2966
	movq	-16(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %edx
	movq	-64(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_vector_assert_size
	jmp	.L2967
.L2966:
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_get_entities
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L2967
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movl	-52(%rbp), %edx
	movq	-48(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_table_get_column
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	testq	%rax, %rax
	jne	.L2968
	movq	-16(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %ecx
	movq	-16(%rbp), %rax
	movzwl	8(%rax), %eax
	cwtl
	movl	-20(%rbp), %edx
	movl	%ecx, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	%rax, -64(%rbp)
	jmp	.L2967
.L2968:
	movq	-16(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-16(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %esi
	movl	-20(%rbp), %ecx
	leaq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	_ecs_vector_set_count
.L2967:
	movq	-64(%rbp), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-64(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE424:
	.size	ecs_table_set_column, .-ecs_table_set_column
	.globl	ecs_table_get_entities
	.type	ecs_table_get_entities, @function
ecs_table_get_entities:
.LFB425:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2971
	movl	$0, %eax
	jmp	.L2972
.L2971:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
.L2972:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE425:
	.size	ecs_table_get_entities, .-ecs_table_get_entities
	.globl	ecs_table_get_records
	.type	ecs_table_get_records, @function
ecs_table_get_records:
.LFB426:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L2974
	movl	$0, %eax
	jmp	.L2975
.L2974:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
.L2975:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE426:
	.size	ecs_table_get_records, .-ecs_table_get_records
	.section	.rodata
	.align 8
.LC505:
	.string	"ecs_vector_count(entities) == ecs_vector_count(records)"
	.text
	.globl	ecs_table_set_entities
	.type	ecs_table_set_entities, @function
ecs_table_set_entities:
.LFB427:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-48(%rbp), %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	ecs_vector_assert_size
	movq	-56(%rbp), %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	ecs_vector_assert_size
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %ebx
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14030, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC505(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %ebx
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	je	.L2977
	leaq	__PRETTY_FUNCTION__.12105(%rip), %rcx
	movl	$14030, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC505(%rip), %rdi
	call	__assert_fail@PLT
.L2977:
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L2978
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14036, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L2978
	leaq	__PRETTY_FUNCTION__.12105(%rip), %rcx
	movl	$14036, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L2978:
	movq	-24(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-24(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, 8(%rax)
	nop
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE427:
	.size	ecs_table_set_entities, .-ecs_table_set_entities
	.globl	ecs_records_clear
	.type	ecs_records_clear, @function
ecs_records_clear:
.LFB428:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L2980
.L2983:
	movl	-16(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	$0, (%rax)
	movl	-16(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jns	.L2981
	movl	-16(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	$-1, 8(%rax)
	jmp	.L2982
.L2981:
	movl	-16(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	$0, 8(%rax)
.L2982:
	addl	$1, -16(%rbp)
.L2980:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L2983
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE428:
	.size	ecs_records_clear, .-ecs_records_clear
	.section	.rodata
.LC506:
	.string	"r[i] != NULL"
.LC507:
	.string	"r[i] != ((void *)0)"
	.text
	.globl	ecs_records_update
	.type	ecs_records_update, @function
ecs_records_update:
.LFB429:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -36(%rbp)
	movq	-64(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movq	-72(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	$0, -40(%rbp)
	jmp	.L2985
.L2987:
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rcx
	movq	-24(%rbp), %rax
	leaq	(%rcx,%rax), %rbx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_record_ensure
	movq	%rax, (%rbx)
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14071, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC506(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L2986
	leaq	__PRETTY_FUNCTION__.12126(%rip), %rcx
	movl	$14071, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC507(%rip), %rdi
	call	__assert_fail@PLT
.L2986:
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	-80(%rbp), %rdx
	movq	%rdx, (%rax)
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	-40(%rbp), %edx
	addl	$1, %edx
	movl	%edx, 8(%rax)
	addl	$1, -40(%rbp)
.L2985:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L2987
	nop
	nop
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE429:
	.size	ecs_records_update, .-ecs_records_update
	.section	.rodata
.LC508:
	.string	"table->data->columns != NULL"
	.align 8
.LC509:
	.string	"table->data->columns != ((void *)0)"
	.text
	.globl	ecs_table_delete_column
	.type	ecs_table_delete_column, @function
ecs_table_delete_column:
.LFB430:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -96(%rbp)
	cmpq	$0, -96(%rbp)
	jne	.L2989
	movl	-84(%rbp), %edx
	movq	-80(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_table_get_column
	movq	%rax, -96(%rbp)
	cmpq	$0, -96(%rbp)
	je	.L2996
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14090, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC501(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	jne	.L2992
	leaq	__PRETTY_FUNCTION__.12136(%rip), %rcx
	movl	$14090, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC502(%rip), %rdi
	call	__assert_fail@PLT
.L2992:
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14091, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC508(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L2993
	leaq	__PRETTY_FUNCTION__.12136(%rip), %rcx
	movl	$14091, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC509(%rip), %rdi
	call	__assert_fail@PLT
.L2993:
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	16(%rax), %rax
	movl	-84(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	$0, (%rax)
.L2989:
	movl	-84(%rbp), %edx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	da_get_or_create_column
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %edx
	movq	-96(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_vector_assert_size
	movq	-80(%rbp), %rax
	movq	32(%rax), %rax
	movl	-84(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L2994
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L2994
	movq	-80(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	get_entity_array
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -62(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -60(%rbp)
	movl	$16, %eax
	cmpw	$16, -62(%rbp)
	cmovge	-62(%rbp), %ax
	movswl	%ax, %edx
	movq	-56(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %ecx
	movq	-96(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movq	32(%rax), %rbx
	movq	-56(%rbp), %rax
	movzwl	8(%rax), %eax
	movswq	%ax, %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rdi
	movq	-48(%rbp), %rax
	movq	80(%rax), %rsi
	movl	-60(%rbp), %r8d
	movq	-24(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-72(%rbp), %rax
	subq	$8, %rsp
	pushq	%rbx
	movq	-40(%rbp), %r10
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
.L2994:
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -96(%rbp)
	jne	.L2995
	movq	-56(%rbp), %rax
	movq	$0, (%rax)
.L2995:
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	jmp	.L2988
.L2996:
	nop
.L2988:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE430:
	.size	ecs_table_delete_column, .-ecs_table_delete_column
	.section	.rodata
	.align 8
.LC510:
	.string	"!flecs_from_size_t(c_size) || flecs_from_size_t(c_size) == c->size"
	.text
	.globl	ecs_record_get_column
	.type	ecs_record_get_column, @function
ecs_record_get_column:
.LFB431:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movl	%esi, -60(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	-60(%rbp), %edx
	movq	-32(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	da_get_column
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L2998
	movl	$0, %eax
	jmp	.L3004
.L2998:
	movq	-24(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -38(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	testl	%eax, %eax
	je	.L3000
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movq	-24(%rbp), %rdx
	movzwl	8(%rdx), %edx
	movswl	%dx, %edx
	cmpl	%edx, %eax
	jne	.L3001
.L3000:
	movl	$1, %eax
	jmp	.L3002
.L3001:
	movl	$0, %eax
.L3002:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14130, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC510(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	testl	%eax, %eax
	je	.L3003
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movq	-24(%rbp), %rdx
	movzwl	8(%rdx), %edx
	movswl	%dx, %edx
	cmpl	%edx, %eax
	je	.L3003
	leaq	__PRETTY_FUNCTION__.12152(%rip), %rcx
	movl	$14130, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC510(%rip), %rdi
	call	__assert_fail@PLT
.L3003:
	movq	-24(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-24(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %ecx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	leaq	-39(%rbp), %rdx
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	flecs_record_to_row
	movl	%eax, -36(%rbp)
	movswl	-38(%rbp), %eax
	imull	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
.L3004:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L3005
	call	__stack_chk_fail@PLT
.L3005:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE431:
	.size	ecs_record_get_column, .-ecs_record_get_column
	.section	.rodata
.LC511:
	.string	"c_size != 0"
.LC512:
	.string	"value != NULL"
.LC513:
	.string	"value != ((void *)0)"
	.text
	.globl	ecs_record_copy_to
	.type	ecs_record_copy_to, @function
ecs_record_copy_to:
.LFB432:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movl	%edx, -100(%rbp)
	movq	%rcx, -112(%rbp)
	movq	%r8, -120(%rbp)
	movl	%r9d, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14147, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L3007
	leaq	__PRETTY_FUNCTION__.12164(%rip), %rcx
	movl	$14147, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3007:
	cmpq	$0, -96(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14148, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC124(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -96(%rbp)
	jne	.L3008
	leaq	__PRETTY_FUNCTION__.12164(%rip), %rcx
	movl	$14148, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC125(%rip), %rdi
	call	__assert_fail@PLT
.L3008:
	cmpq	$0, -112(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14149, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC511(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -112(%rbp)
	jne	.L3009
	leaq	__PRETTY_FUNCTION__.12164(%rip), %rcx
	movl	$14149, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC511(%rip), %rdi
	call	__assert_fail@PLT
.L3009:
	cmpq	$0, -120(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14150, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC512(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -120(%rbp)
	jne	.L3010
	leaq	__PRETTY_FUNCTION__.12164(%rip), %rcx
	movl	$14150, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC513(%rip), %rdi
	call	__assert_fail@PLT
.L3010:
	cmpl	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14151, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC188(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -104(%rbp)
	jne	.L3011
	leaq	__PRETTY_FUNCTION__.12164(%rip), %rcx
	movl	$14151, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC188(%rip), %rdi
	call	__assert_fail@PLT
.L3011:
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-100(%rbp), %edx
	movq	-56(%rbp), %rcx
	movq	-88(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	da_get_or_create_column
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -64(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	testl	%eax, %eax
	je	.L3012
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movq	-48(%rbp), %rdx
	movzwl	8(%rdx), %edx
	movswl	%dx, %edx
	cmpl	%edx, %eax
	jne	.L3013
.L3012:
	movl	$1, %eax
	jmp	.L3014
.L3013:
	movl	$0, %eax
.L3014:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14156, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC510(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	testl	%eax, %eax
	je	.L3015
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movq	-48(%rbp), %rdx
	movzwl	8(%rdx), %edx
	movswl	%dx, %edx
	cmpl	%edx, %eax
	je	.L3015
	leaq	__PRETTY_FUNCTION__.12164(%rip), %rcx
	movl	$14156, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC510(%rip), %rdi
	call	__assert_fail@PLT
.L3015:
	movq	-48(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -62(%rbp)
	movq	-96(%rbp), %rax
	movl	8(%rax), %eax
	leaq	-65(%rbp), %rdx
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	flecs_record_to_row
	movl	%eax, -60(%rbp)
	movl	$16, %eax
	cmpw	$16, -62(%rbp)
	cmovge	-62(%rbp), %ax
	movswl	%ax, %edx
	movswl	-64(%rbp), %esi
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	-60(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14163, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC98(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L3016
	leaq	__PRETTY_FUNCTION__.12164(%rip), %rcx
	movl	$14163, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC99(%rip), %rdi
	call	__assert_fail@PLT
.L3016:
	movq	-56(%rbp), %rax
	movq	32(%rax), %rax
	movl	-100(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L3017
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L3017
	movl	-60(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_entity_array
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	80(%rax), %rsi
	movq	-120(%rbp), %r9
	movq	-40(%rbp), %r8
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	-88(%rbp), %rax
	subq	$8, %rsp
	pushq	%rdi
	movl	-104(%rbp), %edi
	pushq	%rdi
	pushq	-112(%rbp)
	movq	-24(%rbp), %r10
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L3018
.L3017:
	movswl	-64(%rbp), %eax
	imull	-104(%rbp), %eax
	movslq	%eax, %rdx
	movq	-120(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L3018:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3019
	call	__stack_chk_fail@PLT
.L3019:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE432:
	.size	ecs_record_copy_to, .-ecs_record_copy_to
	.globl	ecs_record_copy_pod_to
	.type	ecs_record_copy_pod_to, @function
ecs_record_copy_pod_to:
.LFB433:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movl	%r9d, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14184, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L3021
	leaq	__PRETTY_FUNCTION__.12183(%rip), %rcx
	movl	$14184, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3021:
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14185, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC124(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L3022
	leaq	__PRETTY_FUNCTION__.12183(%rip), %rcx
	movl	$14185, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC125(%rip), %rdi
	call	__assert_fail@PLT
.L3022:
	cmpq	$0, -80(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14186, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC511(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	jne	.L3023
	leaq	__PRETTY_FUNCTION__.12183(%rip), %rcx
	movl	$14186, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC511(%rip), %rdi
	call	__assert_fail@PLT
.L3023:
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14187, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC512(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L3024
	leaq	__PRETTY_FUNCTION__.12183(%rip), %rcx
	movl	$14187, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC513(%rip), %rdi
	call	__assert_fail@PLT
.L3024:
	cmpl	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14188, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC188(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -72(%rbp)
	jne	.L3025
	leaq	__PRETTY_FUNCTION__.12183(%rip), %rcx
	movl	$14188, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC188(%rip), %rdi
	call	__assert_fail@PLT
.L3025:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	-68(%rbp), %edx
	movq	-32(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	da_get_or_create_column
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -40(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	testl	%eax, %eax
	je	.L3026
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movq	-24(%rbp), %rdx
	movzwl	8(%rdx), %edx
	movswl	%dx, %edx
	cmpl	%edx, %eax
	jne	.L3027
.L3026:
	movl	$1, %eax
	jmp	.L3028
.L3027:
	movl	$0, %eax
.L3028:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14194, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC510(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	testl	%eax, %eax
	je	.L3029
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movq	-24(%rbp), %rdx
	movzwl	8(%rdx), %edx
	movswl	%dx, %edx
	cmpl	%edx, %eax
	je	.L3029
	leaq	__PRETTY_FUNCTION__.12183(%rip), %rcx
	movl	$14194, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC510(%rip), %rdi
	call	__assert_fail@PLT
.L3029:
	movq	-24(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -38(%rbp)
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	leaq	-41(%rbp), %rdx
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	flecs_record_to_row
	movl	%eax, -36(%rbp)
	movl	$16, %eax
	cmpw	$16, -38(%rbp)
	cmovge	-38(%rbp), %ax
	movswl	%ax, %edx
	movswl	-40(%rbp), %esi
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14201, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC98(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L3030
	leaq	__PRETTY_FUNCTION__.12183(%rip), %rcx
	movl	$14201, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC99(%rip), %rdi
	call	__assert_fail@PLT
.L3030:
	movswl	-40(%rbp), %eax
	imull	-72(%rbp), %eax
	movslq	%eax, %rdx
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3031
	call	__stack_chk_fail@PLT
.L3031:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE433:
	.size	ecs_record_copy_pod_to, .-ecs_record_copy_pod_to
	.globl	ecs_record_move_to
	.type	ecs_record_move_to, @function
ecs_record_move_to:
.LFB434:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movl	%edx, -100(%rbp)
	movq	%rcx, -112(%rbp)
	movq	%r8, -120(%rbp)
	movl	%r9d, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14214, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L3033
	leaq	__PRETTY_FUNCTION__.12199(%rip), %rcx
	movl	$14214, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3033:
	cmpq	$0, -96(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14215, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC124(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -96(%rbp)
	jne	.L3034
	leaq	__PRETTY_FUNCTION__.12199(%rip), %rcx
	movl	$14215, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC125(%rip), %rdi
	call	__assert_fail@PLT
.L3034:
	cmpq	$0, -112(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14216, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC511(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -112(%rbp)
	jne	.L3035
	leaq	__PRETTY_FUNCTION__.12199(%rip), %rcx
	movl	$14216, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC511(%rip), %rdi
	call	__assert_fail@PLT
.L3035:
	cmpq	$0, -120(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14217, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC512(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -120(%rbp)
	jne	.L3036
	leaq	__PRETTY_FUNCTION__.12199(%rip), %rcx
	movl	$14217, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC513(%rip), %rdi
	call	__assert_fail@PLT
.L3036:
	cmpl	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14218, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC188(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -104(%rbp)
	jne	.L3037
	leaq	__PRETTY_FUNCTION__.12199(%rip), %rcx
	movl	$14218, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC188(%rip), %rdi
	call	__assert_fail@PLT
.L3037:
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-100(%rbp), %edx
	movq	-56(%rbp), %rcx
	movq	-88(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	da_get_or_create_column
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -64(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	testl	%eax, %eax
	je	.L3038
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movq	-48(%rbp), %rdx
	movzwl	8(%rdx), %edx
	movswl	%dx, %edx
	cmpl	%edx, %eax
	jne	.L3039
.L3038:
	movl	$1, %eax
	jmp	.L3040
.L3039:
	movl	$0, %eax
.L3040:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14223, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC510(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	testl	%eax, %eax
	je	.L3041
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	movq	-48(%rbp), %rdx
	movzwl	8(%rdx), %edx
	movswl	%dx, %edx
	cmpl	%edx, %eax
	je	.L3041
	leaq	__PRETTY_FUNCTION__.12199(%rip), %rcx
	movl	$14223, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC510(%rip), %rdi
	call	__assert_fail@PLT
.L3041:
	movq	-48(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -62(%rbp)
	movq	-96(%rbp), %rax
	movl	8(%rax), %eax
	leaq	-65(%rbp), %rdx
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	flecs_record_to_row
	movl	%eax, -60(%rbp)
	movl	$16, %eax
	cmpw	$16, -62(%rbp)
	cmovge	-62(%rbp), %ax
	movswl	%ax, %edx
	movswl	-64(%rbp), %esi
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	-60(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14230, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC98(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L3042
	leaq	__PRETTY_FUNCTION__.12199(%rip), %rcx
	movl	$14230, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC99(%rip), %rdi
	call	__assert_fail@PLT
.L3042:
	movq	-56(%rbp), %rax
	movq	32(%rax), %rax
	movl	-100(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L3043
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L3043
	movl	-60(%rbp), %edx
	movq	-56(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	get_entity_array
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rdi
	movq	-32(%rbp), %rax
	movq	80(%rax), %rsi
	movq	-120(%rbp), %r9
	movq	-40(%rbp), %r8
	movq	-16(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	-88(%rbp), %rax
	subq	$8, %rsp
	pushq	%rdi
	movl	-104(%rbp), %edi
	pushq	%rdi
	pushq	-112(%rbp)
	movq	-24(%rbp), %r10
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	jmp	.L3044
.L3043:
	movswl	-64(%rbp), %eax
	imull	-104(%rbp), %eax
	movslq	%eax, %rdx
	movq	-120(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L3044:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3045
	call	__stack_chk_fail@PLT
.L3045:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE434:
	.size	ecs_record_move_to, .-ecs_record_move_to
	.globl	ECS_CASE
	.section	.rodata
	.align 8
	.type	ECS_CASE, @object
	.size	ECS_CASE, 8
ECS_CASE:
	.quad	-288230376151711744
	.globl	ECS_SWITCH
	.align 8
	.type	ECS_SWITCH, @object
	.size	ECS_SWITCH, 8
ECS_SWITCH:
	.quad	-360287970189639680
	.globl	ECS_PAIR
	.align 8
	.type	ECS_PAIR, @object
	.size	ECS_PAIR, 8
ECS_PAIR:
	.quad	-432345564227567616
	.globl	ECS_OWNED
	.align 8
	.type	ECS_OWNED, @object
	.size	ECS_OWNED, 8
ECS_OWNED:
	.quad	-792633534417207296
	.globl	ECS_DISABLED
	.align 8
	.type	ECS_DISABLED, @object
	.size	ECS_DISABLED, 8
ECS_DISABLED:
	.quad	-864691128455135232
	.globl	EcsWorld
	.align 8
	.type	EcsWorld, @object
	.size	EcsWorld, 8
EcsWorld:
	.quad	256
	.globl	EcsFlecs
	.align 8
	.type	EcsFlecs, @object
	.size	EcsFlecs, 8
EcsFlecs:
	.quad	257
	.globl	EcsFlecsCore
	.align 8
	.type	EcsFlecsCore, @object
	.size	EcsFlecsCore, 8
EcsFlecsCore:
	.quad	258
	.globl	EcsModule
	.align 8
	.type	EcsModule, @object
	.size	EcsModule, 8
EcsModule:
	.quad	259
	.globl	EcsPrefab
	.align 8
	.type	EcsPrefab, @object
	.size	EcsPrefab, 8
EcsPrefab:
	.quad	260
	.globl	EcsDisabled
	.align 8
	.type	EcsDisabled, @object
	.size	EcsDisabled, 8
EcsDisabled:
	.quad	261
	.globl	EcsHidden
	.align 8
	.type	EcsHidden, @object
	.size	EcsHidden, 8
EcsHidden:
	.quad	262
	.globl	EcsWildcard
	.align 8
	.type	EcsWildcard, @object
	.size	EcsWildcard, 8
EcsWildcard:
	.quad	266
	.globl	EcsThis
	.align 8
	.type	EcsThis, @object
	.size	EcsThis, 8
EcsThis:
	.quad	267
	.globl	EcsTransitive
	.align 8
	.type	EcsTransitive, @object
	.size	EcsTransitive, 8
EcsTransitive:
	.quad	268
	.globl	EcsFinal
	.align 8
	.type	EcsFinal, @object
	.size	EcsFinal, 8
EcsFinal:
	.quad	269
	.globl	EcsTag
	.align 8
	.type	EcsTag, @object
	.size	EcsTag, 8
EcsTag:
	.quad	270
	.globl	EcsName
	.align 8
	.type	EcsName, @object
	.size	EcsName, 8
EcsName:
	.quad	271
	.globl	EcsSymbol
	.align 8
	.type	EcsSymbol, @object
	.size	EcsSymbol, 8
EcsSymbol:
	.quad	272
	.globl	EcsChildOf
	.align 8
	.type	EcsChildOf, @object
	.size	EcsChildOf, 8
EcsChildOf:
	.quad	276
	.globl	EcsIsA
	.align 8
	.type	EcsIsA, @object
	.size	EcsIsA, 8
EcsIsA:
	.quad	277
	.globl	EcsOnAdd
	.align 8
	.type	EcsOnAdd, @object
	.size	EcsOnAdd, 8
EcsOnAdd:
	.quad	286
	.globl	EcsOnRemove
	.align 8
	.type	EcsOnRemove, @object
	.size	EcsOnRemove, 8
EcsOnRemove:
	.quad	287
	.globl	EcsOnSet
	.align 8
	.type	EcsOnSet, @object
	.size	EcsOnSet, 8
EcsOnSet:
	.quad	288
	.globl	EcsUnSet
	.align 8
	.type	EcsUnSet, @object
	.size	EcsUnSet, 8
EcsUnSet:
	.quad	289
	.globl	EcsOnDelete
	.align 8
	.type	EcsOnDelete, @object
	.size	EcsOnDelete, 8
EcsOnDelete:
	.quad	290
	.globl	EcsOnCreateTable
	.align 8
	.type	EcsOnCreateTable, @object
	.size	EcsOnCreateTable, 8
EcsOnCreateTable:
	.quad	291
	.globl	EcsOnDeleteTable
	.align 8
	.type	EcsOnDeleteTable, @object
	.size	EcsOnDeleteTable, 8
EcsOnDeleteTable:
	.quad	292
	.globl	EcsOnTableEmpty
	.align 8
	.type	EcsOnTableEmpty, @object
	.size	EcsOnTableEmpty, 8
EcsOnTableEmpty:
	.quad	293
	.globl	EcsOnTableNonEmpty
	.align 8
	.type	EcsOnTableNonEmpty, @object
	.size	EcsOnTableNonEmpty, 8
EcsOnTableNonEmpty:
	.quad	294
	.globl	EcsOnCreateTrigger
	.align 8
	.type	EcsOnCreateTrigger, @object
	.size	EcsOnCreateTrigger, 8
EcsOnCreateTrigger:
	.quad	295
	.globl	EcsOnDeleteTrigger
	.align 8
	.type	EcsOnDeleteTrigger, @object
	.size	EcsOnDeleteTrigger, 8
EcsOnDeleteTrigger:
	.quad	296
	.globl	EcsOnDeleteObservable
	.align 8
	.type	EcsOnDeleteObservable, @object
	.size	EcsOnDeleteObservable, 8
EcsOnDeleteObservable:
	.quad	297
	.globl	EcsOnComponentLifecycle
	.align 8
	.type	EcsOnComponentLifecycle, @object
	.size	EcsOnComponentLifecycle, 8
EcsOnComponentLifecycle:
	.quad	298
	.globl	EcsOnDeleteObject
	.align 8
	.type	EcsOnDeleteObject, @object
	.size	EcsOnDeleteObject, 8
EcsOnDeleteObject:
	.quad	299
	.globl	EcsRemove
	.align 8
	.type	EcsRemove, @object
	.size	EcsRemove, 8
EcsRemove:
	.quad	306
	.globl	EcsDelete
	.align 8
	.type	EcsDelete, @object
	.size	EcsDelete, 8
EcsDelete:
	.quad	307
	.globl	EcsThrow
	.align 8
	.type	EcsThrow, @object
	.size	EcsThrow, 8
EcsThrow:
	.quad	308
	.globl	EcsOnDemand
	.align 8
	.type	EcsOnDemand, @object
	.size	EcsOnDemand, 8
EcsOnDemand:
	.quad	316
	.globl	EcsMonitor
	.align 8
	.type	EcsMonitor, @object
	.size	EcsMonitor, 8
EcsMonitor:
	.quad	317
	.globl	EcsDisabledIntern
	.align 8
	.type	EcsDisabledIntern, @object
	.size	EcsDisabledIntern, 8
EcsDisabledIntern:
	.quad	318
	.globl	EcsInactive
	.align 8
	.type	EcsInactive, @object
	.size	EcsInactive, 8
EcsInactive:
	.quad	319
	.globl	EcsPipeline
	.align 8
	.type	EcsPipeline, @object
	.size	EcsPipeline, 8
EcsPipeline:
	.quad	320
	.globl	EcsPreFrame
	.align 8
	.type	EcsPreFrame, @object
	.size	EcsPreFrame, 8
EcsPreFrame:
	.quad	321
	.globl	EcsOnLoad
	.align 8
	.type	EcsOnLoad, @object
	.size	EcsOnLoad, 8
EcsOnLoad:
	.quad	322
	.globl	EcsPostLoad
	.align 8
	.type	EcsPostLoad, @object
	.size	EcsPostLoad, 8
EcsPostLoad:
	.quad	323
	.globl	EcsPreUpdate
	.align 8
	.type	EcsPreUpdate, @object
	.size	EcsPreUpdate, 8
EcsPreUpdate:
	.quad	324
	.globl	EcsOnUpdate
	.align 8
	.type	EcsOnUpdate, @object
	.size	EcsOnUpdate, 8
EcsOnUpdate:
	.quad	325
	.globl	EcsOnValidate
	.align 8
	.type	EcsOnValidate, @object
	.size	EcsOnValidate, 8
EcsOnValidate:
	.quad	326
	.globl	EcsPostUpdate
	.align 8
	.type	EcsPostUpdate, @object
	.size	EcsPostUpdate, 8
EcsPostUpdate:
	.quad	327
	.globl	EcsPreStore
	.align 8
	.type	EcsPreStore, @object
	.size	EcsPreStore, 8
EcsPreStore:
	.quad	328
	.globl	EcsOnStore
	.align 8
	.type	EcsOnStore, @object
	.size	EcsOnStore, 8
EcsOnStore:
	.quad	329
	.globl	EcsPostFrame
	.align 8
	.type	EcsPostFrame, @object
	.size	EcsPostFrame, 8
EcsPostFrame:
	.quad	330
	.text
	.globl	ecs_get_world
	.type	ecs_get_world, @function
ecs_get_world:
.LFB435:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14320, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3047
	leaq	__PRETTY_FUNCTION__.12266(%rip), %rcx
	movl	$14320, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3047:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	jne	.L3048
	movq	-8(%rbp), %rax
	jmp	.L3049
.L3048:
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
.L3049:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE435:
	.size	ecs_get_world, .-ecs_get_world
	.globl	flecs_stage_from_readonly_world
	.type	flecs_stage_from_readonly_world, @function
flecs_stage_from_readonly_world:
.LFB436:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3051
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	jne	.L3052
.L3051:
	movl	$1, %eax
	jmp	.L3053
.L3052:
	movl	$0, %eax
.L3053:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14332, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC339(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3054
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L3054
	leaq	__PRETTY_FUNCTION__.12270(%rip), %rcx
	movl	$14332, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC340(%rip), %rdi
	call	__assert_fail@PLT
.L3054:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	jne	.L3055
	movq	-8(%rbp), %rax
	addq	$368, %rax
	jmp	.L3056
.L3055:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	jne	.L3057
	movq	-8(%rbp), %rax
	jmp	.L3056
.L3057:
	movl	$0, %eax
.L3056:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE436:
	.size	flecs_stage_from_readonly_world, .-flecs_stage_from_readonly_world
	.globl	flecs_stage_from_world
	.type	flecs_stage_from_world, @function
flecs_stage_from_world:
.LFB437:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3059
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	jne	.L3060
.L3059:
	movl	$1, %eax
	jmp	.L3061
.L3060:
	movl	$0, %eax
.L3061:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14352, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC339(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3062
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L3062
	leaq	__PRETTY_FUNCTION__.12275(%rip), %rcx
	movl	$14352, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC340(%rip), %rdi
	call	__assert_fail@PLT
.L3062:
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	jne	.L3063
	movq	-16(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14358, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3064
	leaq	__PRETTY_FUNCTION__.12275(%rip), %rcx
	movl	$14358, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L3064:
	movq	-16(%rbp), %rax
	addq	$368, %rax
	jmp	.L3065
.L3063:
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	jne	.L3066
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-8(%rbp), %rax
	jmp	.L3065
.L3066:
	movl	$0, %eax
.L3065:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE437:
	.size	flecs_stage_from_world, .-flecs_stage_from_world
	.type	eval_component_monitor, @function
eval_component_monitor:
.LFB438:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$176, %rsp
	movq	%rdi, -168(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-168(%rbp), %rax
	addq	$248, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movzbl	8(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3080
	movq	-152(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L3070
.L3078:
	movq	-144(%rbp), %rax
	movzbl	8(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3071
	jmp	.L3070
.L3071:
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3072
	movq	-144(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L3073
.L3077:
	movq	-136(%rbp), %rax
	movzbl	8(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3074
	jmp	.L3073
.L3074:
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -156(%rbp)
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -128(%rbp)
	movl	$0, -160(%rbp)
	jmp	.L3075
.L3076:
	movl	-160(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-128(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -120(%rbp)
	movq	$0, -112(%rbp)
	movq	$0, -104(%rbp)
	movq	$0, -96(%rbp)
	movl	$3, -112(%rbp)
	movq	-120(%rbp), %rax
	movq	(%rax), %rcx
	leaq	-112(%rbp), %rdx
	movq	-168(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_query_notify
	addl	$1, -160(%rbp)
.L3075:
	movl	-160(%rbp), %eax
	cmpl	-156(%rbp), %eax
	jl	.L3076
	movq	-136(%rbp), %rax
	movb	$0, 8(%rax)
.L3073:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -136(%rbp)
	cmpq	$0, -136(%rbp)
	jne	.L3077
.L3072:
	movq	-144(%rbp), %rax
	movb	$0, 8(%rax)
.L3070:
	leaq	-80(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -144(%rbp)
	cmpq	$0, -144(%rbp)
	jne	.L3078
	movq	-152(%rbp), %rax
	movb	$0, 8(%rax)
	jmp	.L3067
.L3080:
	nop
.L3067:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3079
	call	__stack_chk_fail@PLT
.L3079:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE438:
	.size	eval_component_monitor, .-eval_component_monitor
	.section	.rodata
	.align 8
.LC514:
	.string	"world->monitors.monitor_sets != NULL"
	.align 8
.LC515:
	.string	"world->monitors.monitor_sets != ((void *)0)"
	.text
	.globl	flecs_monitor_mark_dirty
	.type	flecs_monitor_mark_dirty, @function
flecs_monitor_mark_dirty:
.LFB439:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	248(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14421, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC514(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	248(%rax), %rax
	testq	%rax, %rax
	jne	.L3082
	leaq	__PRETTY_FUNCTION__.12304(%rip), %rcx
	movl	$14421, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC515(%rip), %rdi
	call	__assert_fail@PLT
.L3082:
	movq	-24(%rbp), %rax
	movq	248(%rax), %rax
	movq	-32(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L3084
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3084
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-40(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L3084
	movq	-8(%rbp), %rax
	movb	$1, 8(%rax)
	movq	-16(%rbp), %rax
	movb	$1, 8(%rax)
	movq	-24(%rbp), %rax
	movb	$1, 256(%rax)
.L3084:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE439:
	.size	flecs_monitor_mark_dirty, .-flecs_monitor_mark_dirty
	.section	.rodata
.LC516:
	.string	"id != 0"
.LC517:
	.string	"ms != NULL"
.LC518:
	.string	"ms != ((void *)0)"
	.text
	.globl	flecs_monitor_register
	.type	flecs_monitor_register, @function
flecs_monitor_register:
.LFB440:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14444, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L3086
	leaq	__PRETTY_FUNCTION__.12313(%rip), %rcx
	movl	$14444, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3086:
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14445, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC516(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L3087
	leaq	__PRETTY_FUNCTION__.12313(%rip), %rcx
	movl	$14445, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC516(%rip), %rdi
	call	__assert_fail@PLT
.L3087:
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14446, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L3088
	leaq	__PRETTY_FUNCTION__.12313(%rip), %rcx
	movl	$14446, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L3088:
	movq	-40(%rbp), %rax
	movq	248(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14447, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC514(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movq	248(%rax), %rax
	testq	%rax, %rax
	jne	.L3089
	leaq	__PRETTY_FUNCTION__.12313(%rip), %rcx
	movl	$14447, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC515(%rip), %rdi
	call	__assert_fail@PLT
.L3089:
	movq	-40(%rbp), %rax
	movq	248(%rax), %rax
	movq	-48(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_ensure
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14451, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC517(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3090
	leaq	__PRETTY_FUNCTION__.12313(%rip), %rcx
	movl	$14451, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC518(%rip), %rdi
	call	__assert_fail@PLT
.L3090:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L3091
	movl	$1, %edx
	movl	$8, %esi
	movl	$16, %edi
	call	_ecs_map_new
	movq	-24(%rbp), %rdx
	movq	%rax, (%rdx)
.L3091:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-56(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_ensure
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14458, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC86(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L3092
	leaq	__PRETTY_FUNCTION__.12313(%rip), %rcx
	movl	$14458, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC87(%rip), %rdi
	call	__assert_fail@PLT
.L3092:
	movq	-16(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, (%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE440:
	.size	flecs_monitor_register, .-flecs_monitor_register
	.type	monitors_init, @function
monitors_init:
.LFB441:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	$0, %edx
	movl	$8, %esi
	movl	$16, %edi
	call	_ecs_map_new
	movq	-8(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-8(%rbp), %rax
	movb	$0, 8(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE441:
	.size	monitors_init, .-monitors_init
	.type	monitors_fini, @function
monitors_fini:
.LFB442:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-104(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L3095
.L3098:
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3095
	movq	-96(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L3096
.L3097:
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
.L3096:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -88(%rbp)
	cmpq	$0, -88(%rbp)
	jne	.L3097
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
.L3095:
	leaq	-80(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -96(%rbp)
	cmpq	$0, -96(%rbp)
	jne	.L3098
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3099
	call	__stack_chk_fail@PLT
.L3099:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE442:
	.size	monitors_fini, .-monitors_fini
	.type	init_store, @function
init_store:
.LFB443:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-40(%rbp), %rax
	addq	$40, %rax
	movl	$184, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	movl	$16, %edi
	call	_flecs_sparse_new
	movq	-40(%rbp), %rdx
	movq	%rax, 40(%rdx)
	movq	-40(%rbp), %rax
	leaq	536(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_set_id_source
	movl	$136, %edi
	call	_flecs_sparse_new
	movq	-40(%rbp), %rdx
	movq	%rax, 48(%rdx)
	movq	-40(%rbp), %rbx
	leaq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_hashmap_new
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 56(%rbx)
	movq	%rdx, 64(%rbx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 72(%rbx)
	movq	%rdx, 80(%rbx)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_init_root_table
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3101
	call	__stack_chk_fail@PLT
.L3101:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE443:
	.size	init_store, .-init_store
	.type	clean_tables, @function
clean_tables:
.LFB444:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L3103
.L3104:
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movl	-24(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_free
	addl	$1, -24(%rbp)
.L3103:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L3104
	movl	$0, -24(%rbp)
	jmp	.L3105
.L3106:
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movl	-24(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_free_type
	addl	$1, -24(%rbp)
.L3105:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L3106
	cmpl	$0, -20(%rbp)
	je	.L3108
	movq	-40(%rbp), %rax
	leaq	88(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_reset
.L3108:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE444:
	.size	clean_tables, .-clean_tables
	.type	fini_store, @function
fini_store:
.LFB445:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	clean_tables
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_free
	movq	-8(%rbp), %rax
	leaq	88(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_free
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_clear
	movq	-8(%rbp), %rax
	pushq	80(%rax)
	pushq	72(%rax)
	pushq	64(%rax)
	pushq	56(%rax)
	call	flecs_hashmap_free
	addq	$32, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE445:
	.size	fini_store, .-fini_store
	.section	.rodata
.LC519:
	.string	"bootstrap"
.LC520:
	.string	"threading not available"
.LC521:
	.string	"time management not available"
	.text
	.globl	ecs_mini
	.type	ecs_mini, @function
ecs_mini:
.LFB446:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset 3, -24
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	call	ecs_os_init
	leaq	.LC519(%rip), %rcx
	movl	$14552, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
	call	ecs_log_push
	call	ecs_os_has_heap
	xorl	$1, %eax
	testb	%al, %al
	je	.L3111
	movl	$0, %ecx
	movl	$14556, %edx
	leaq	.LC74(%rip), %rsi
	movl	$9, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L3111:
	call	ecs_os_has_threading
	xorl	$1, %eax
	testb	%al, %al
	je	.L3112
	leaq	.LC520(%rip), %rcx
	movl	$14560, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
.L3112:
	call	ecs_os_has_time
	xorl	$1, %eax
	testb	%al, %al
	je	.L3113
	leaq	.LC521(%rip), %rcx
	movl	$14564, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
.L3113:
	movq	32+ecs_os_api(%rip), %rax
	movl	$704, %edi
	call	*%rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14568, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L3114
	leaq	__PRETTY_FUNCTION__.12356(%rip), %rcx
	movl	$14568, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3114:
	movq	-32(%rbp), %rax
	movl	$1701016439, (%rax)
	movq	-32(%rbp), %rax
	movq	$0, 696(%rax)
	movl	$104, %edi
	call	_flecs_sparse_new
	movq	-32(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movl	$8, %edx
	movl	$8, %esi
	movl	$24, %edi
	call	_ecs_map_new
	movq	-32(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movl	$8, %edx
	movl	$8, %esi
	movl	$32, %edi
	call	_ecs_map_new
	movq	-32(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movl	$1744, %edi
	call	_flecs_sparse_new
	movq	-32(%rbp), %rdx
	movq	%rax, 224(%rdx)
	movl	$328, %edi
	call	_flecs_sparse_new
	movq	-32(%rbp), %rdx
	movq	%rax, 232(%rdx)
	movl	$1744, %edi
	call	_flecs_sparse_new
	movq	-32(%rbp), %rdx
	movq	%rax, 240(%rdx)
	movl	$0, %edx
	movl	$16, %esi
	movl	$8, %edi
	call	_ecs_vector_new
	movq	-32(%rbp), %rdx
	movq	%rax, 288(%rdx)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-32(%rbp), %rbx
	leaq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_string_hashmap_new
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 304(%rbx)
	movq	%rdx, 312(%rbx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 320(%rbx)
	movq	%rdx, 328(%rbx)
	movq	-32(%rbp), %rbx
	leaq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_string_hashmap_new
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 336(%rbx)
	movq	%rdx, 344(%rbx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 352(%rbx)
	movq	%rdx, 360(%rbx)
	movq	-32(%rbp), %rax
	addq	$248, %rax
	movq	%rax, %rdi
	call	monitors_init
	movl	$0, %edx
	movl	$8, %esi
	movl	$8, %edi
	call	_ecs_map_new
	movq	-32(%rbp), %rdx
	movq	%rax, 296(%rdx)
	movl	$0, %edx
	movl	$8, %esi
	movl	$16, %edi
	call	_ecs_map_new
	movq	-32(%rbp), %rdx
	movq	%rax, 272(%rdx)
	movl	$0, %edx
	movl	$8, %esi
	movl	$16, %edi
	call	_ecs_map_new
	movq	-32(%rbp), %rdx
	movq	%rax, 280(%rdx)
	movq	-32(%rbp), %rax
	movq	$0, 456(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 500(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 496(%rax)
	movq	-32(%rbp), %rax
	movb	$0, 680(%rax)
	movq	-32(%rbp), %rax
	movb	$0, 681(%rax)
	movq	-32(%rbp), %rax
	movb	$0, 682(%rax)
	movq	-32(%rbp), %rax
	movb	$0, 683(%rax)
	movq	-32(%rbp), %rax
	movb	$0, 684(%rax)
	movq	-32(%rbp), %rax
	movb	$0, 685(%rax)
	movq	-32(%rbp), %rax
	movb	$0, 686(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 264(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 512(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 516(%rax)
	call	ecs_os_has_time
	testb	%al, %al
	je	.L3115
	movq	168+ecs_os_api(%rip), %rax
	movq	-32(%rbp), %rdx
	addq	$504, %rdx
	movq	%rdx, %rdi
	call	*%rax
.L3115:
	movq	-32(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 572(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 536(%rax)
	movq	-32(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 560(%rax)
	movq	-32(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 564(%rax)
	movq	-32(%rbp), %rax
	movss	.LC414(%rip), %xmm0
	movss	%xmm0, 568(%rax)
	movq	-32(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 576(%rax)
	movq	-32(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 580(%rax)
	movq	-32(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 584(%rax)
	movq	-32(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 588(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 596(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 600(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 608(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 604(%rax)
	movq	-32(%rbp), %rax
	movb	$0, 32(%rax)
	movq	-32(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 520(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 688(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-32(%rbp), %rax
	movl	$0, 620(%rax)
	movq	-32(%rbp), %rax
	leaq	368(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_stage_init
	movq	-32(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ecs_set_stages
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	init_store
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_bootstrap
	call	ecs_log_pop
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L3117
	call	__stack_chk_fail@PLT
.L3117:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE446:
	.size	ecs_mini, .-ecs_mini
	.section	.rodata
.LC522:
	.string	"import builtin modules"
.LC523:
	.string	"FlecsPipeline"
.LC524:
	.string	"FlecsTimer"
	.text
	.globl	ecs_init
	.type	ecs_init, @function
ecs_init:
.LFB447:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	call	ecs_mini
	movq	%rax, -104(%rbp)
	leaq	.LC522(%rip), %rcx
	movl	$14649, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
	call	ecs_log_push
	leaq	.LC523(%rip), %rdi
	call	ecs_module_path_from_c
	movq	%rax, -96(%rbp)
	leaq	-128(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	-104(%rbp), %rax
	movl	$4, %r8d
	leaq	FlecsPipelineImport(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_import
	movq	%rax, -120(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	$0, -64(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -48(%rbp)
	movl	$1, -64(%rbp)
	movl	$1, -60(%rbp)
	movq	$8, -56(%rbp)
	leaq	-64(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -48(%rbp)
	leaq	.LC524(%rip), %rdi
	call	ecs_module_path_from_c
	movq	%rax, -80(%rbp)
	leaq	-124(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	-104(%rbp), %rax
	movl	$4, %r8d
	leaq	FlecsTimerImport(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_import
	movq	%rax, -112(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movl	$1, -32(%rbp)
	movl	$1, -28(%rbp)
	movq	$8, -24(%rbp)
	leaq	-32(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -16(%rbp)
	call	ecs_log_pop
	movq	-104(%rbp), %rax
	movq	-8(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L3120
	call	__stack_chk_fail@PLT
.L3120:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE447:
	.size	ecs_init, .-ecs_init
	.globl	ecs_init_w_args
	.type	ecs_init_w_args, @function
ecs_init_w_args:
.LFB448:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	call	ecs_init
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE448:
	.size	ecs_init_w_args, .-ecs_init_w_args
	.globl	ecs_quit
	.type	ecs_quit, @function
ecs_quit:
.LFB449:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14695, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	testq	%rax, %rax
	jne	.L3124
	leaq	__PRETTY_FUNCTION__.12391(%rip), %rcx
	movl	$14695, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3124:
	leaq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	-8(%rbp), %rax
	movb	$1, 685(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE449:
	.size	ecs_quit, .-ecs_quit
	.globl	ecs_should_quit
	.type	ecs_should_quit, @function
ecs_should_quit:
.LFB450:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14703, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3126
	leaq	__PRETTY_FUNCTION__.12395(%rip), %rcx
	movl	$14703, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3126:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	685(%rax), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE450:
	.size	ecs_should_quit, .-ecs_should_quit
	.type	on_demand_in_map_fini, @function
on_demand_in_map_fini:
.LFB451:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-48(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L3129
.L3130:
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
.L3129:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L3130
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3131
	call	__stack_chk_fail@PLT
.L3131:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE451:
	.size	on_demand_in_map_fini, .-on_demand_in_map_fini
	.globl	flecs_notify_tables
	.type	flecs_notify_tables, @function
flecs_notify_tables:
.LFB452:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14727, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -104(%rbp)
	jne	.L3133
	leaq	__PRETTY_FUNCTION__.12409(%rip), %rcx
	movl	$14727, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3133:
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14728, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3134
	leaq	__PRETTY_FUNCTION__.12409(%rip), %rcx
	movl	$14728, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3134:
	cmpq	$0, -112(%rbp)
	jne	.L3135
	movq	-104(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -84(%rbp)
	movl	$0, -88(%rbp)
	jmp	.L3136
.L3137:
	movl	-88(%rbp), %edx
	movq	-64(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -56(%rbp)
	movq	-120(%rbp), %rdx
	movq	-56(%rbp), %rcx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_notify
	addl	$1, -88(%rbp)
.L3136:
	movl	-88(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jl	.L3137
	jmp	.L3132
.L3135:
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L3143
	movq	-80(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L3140
.L3141:
	movq	-72(%rbp), %rax
	movq	(%rax), %rcx
	movq	-120(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_notify
.L3140:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	jne	.L3141
	jmp	.L3132
.L3143:
	nop
.L3132:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3142
	call	__stack_chk_fail@PLT
.L3142:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE452:
	.size	flecs_notify_tables, .-flecs_notify_tables
	.type	default_ctor, @function
default_ctor:
.LFB453:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movl	%r9d, -44(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	imull	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE453:
	.size	default_ctor, .-default_ctor
	.type	default_copy_ctor, @function
default_copy_ctor:
.LFB454:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %r10
	movl	32(%rbp), %r8d
	movq	24(%rbp), %rdi
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	movq	-24(%rbp), %rax
	movq	16(%rax), %r10
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	32(%rbp), %edi
	pushq	%rdi
	pushq	24(%rbp)
	movq	16(%rbp), %r9
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE454:
	.size	default_copy_ctor, .-default_copy_ctor
	.type	default_move_ctor, @function
default_move_ctor:
.LFB455:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %r10
	movl	32(%rbp), %r8d
	movq	24(%rbp), %rdi
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	movq	-24(%rbp), %rax
	movq	24(%rax), %r10
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	32(%rbp), %edi
	pushq	%rdi
	pushq	24(%rbp)
	movq	16(%rbp), %r9
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE455:
	.size	default_move_ctor, .-default_move_ctor
	.type	default_ctor_w_move_w_dtor, @function
default_ctor_w_move_w_dtor:
.LFB456:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %r10
	movl	32(%rbp), %r8d
	movq	24(%rbp), %rdi
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	movq	-24(%rbp), %rax
	movq	24(%rax), %r10
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	32(%rbp), %edi
	pushq	%rdi
	pushq	24(%rbp)
	movq	16(%rbp), %r9
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	movq	-24(%rbp), %rax
	movq	8(%rax), %r10
	movl	32(%rbp), %edi
	movq	24(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	%edi, %r9d
	movq	%rcx, %r8
	movq	16(%rbp), %rcx
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE456:
	.size	default_ctor_w_move_w_dtor, .-default_ctor_w_move_w_dtor
	.type	default_move_ctor_w_dtor, @function
default_move_ctor_w_dtor:
.LFB457:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	48(%rax), %r10
	movq	-48(%rbp), %r9
	movq	-40(%rbp), %r8
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	pushq	40(%rbp)
	movl	32(%rbp), %edi
	pushq	%rdi
	pushq	24(%rbp)
	pushq	16(%rbp)
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	movq	-24(%rbp), %rax
	movq	8(%rax), %r10
	movl	32(%rbp), %edi
	movq	24(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	%edi, %r9d
	movq	%rcx, %r8
	movq	16(%rbp), %rcx
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE457:
	.size	default_move_ctor_w_dtor, .-default_move_ctor_w_dtor
	.type	default_move, @function
default_move:
.LFB458:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %r10
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	32(%rbp), %edi
	pushq	%rdi
	pushq	24(%rbp)
	movq	16(%rbp), %r9
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE458:
	.size	default_move, .-default_move
	.type	default_dtor, @function
default_dtor:
.LFB459:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %r10
	movl	32(%rbp), %r8d
	movq	24(%rbp), %rdi
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	movq	24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_from_size_t
	imull	32(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rax
	movq	16(%rbp), %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE459:
	.size	default_dtor, .-default_dtor
	.type	default_move_w_dtor, @function
default_move_w_dtor:
.LFB460:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %r10
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	32(%rbp), %edi
	pushq	%rdi
	pushq	24(%rbp)
	movq	16(%rbp), %r9
	movq	%rax, %rdi
	call	*%r10
	addq	$32, %rsp
	movq	-24(%rbp), %rax
	movq	8(%rax), %r10
	movl	32(%rbp), %edi
	movq	24(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	subq	$8, %rsp
	pushq	40(%rbp)
	movl	%edi, %r9d
	movq	%rcx, %r8
	movq	16(%rbp), %rcx
	movq	%rax, %rdi
	call	*%r10
	addq	$16, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE460:
	.size	default_move_w_dtor, .-default_move_w_dtor
	.section	.rodata
.LC525:
	.string	"component_ptr != NULL"
.LC526:
	.string	"component_ptr != ((void *)0)"
.LC527:
	.string	"component_ptr->size != 0"
.LC528:
	.string	"c_info != NULL"
.LC529:
	.string	"c_info != ((void *)0)"
	.align 8
.LC530:
	.string	"c_info->component == component"
	.align 8
.LC531:
	.string	"c_info->lifecycle.ctor == lifecycle->ctor"
	.align 8
.LC532:
	.string	"c_info->lifecycle.dtor == lifecycle->dtor"
	.align 8
.LC533:
	.string	"c_info->lifecycle.copy == lifecycle->copy"
	.align 8
.LC534:
	.string	"c_info->lifecycle.move == lifecycle->move"
	.text
	.globl	ecs_set_component_actions_w_id
	.type	ecs_set_component_actions_w_id, @function
ecs_set_component_actions_w_id:
.LFB461:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14860, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	jne	.L3153
	leaq	__PRETTY_FUNCTION__.12521(%rip), %rcx
	movl	$14860, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3153:
	leaq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	-88(%rbp), %rax
	movq	-96(%rbp), %rcx
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14866, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC525(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	jne	.L3154
	leaq	__PRETTY_FUNCTION__.12521(%rip), %rcx
	movl	$14866, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC526(%rip), %rdi
	call	__assert_fail@PLT
.L3154:
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14869, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC527(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jne	.L3155
	leaq	__PRETTY_FUNCTION__.12521(%rip), %rcx
	movl	$14869, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC527(%rip), %rdi
	call	__assert_fail@PLT
.L3155:
	movq	-88(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_or_create_c_info
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14872, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC528(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L3156
	leaq	__PRETTY_FUNCTION__.12521(%rip), %rcx
	movl	$14872, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC529(%rip), %rdi
	call	__assert_fail@PLT
.L3156:
	movq	-72(%rbp), %rax
	movzbl	96(%rax), %eax
	testb	%al, %al
	je	.L3157
	movq	-72(%rbp), %rax
	movq	80(%rax), %rax
	cmpq	%rax, -96(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14875, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC530(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	80(%rax), %rax
	cmpq	%rax, -96(%rbp)
	je	.L3158
	leaq	__PRETTY_FUNCTION__.12521(%rip), %rcx
	movl	$14875, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC530(%rip), %rdi
	call	__assert_fail@PLT
.L3158:
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14876, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC531(%rip), %rdx
	movl	$27, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, %rdx
	je	.L3159
	leaq	__PRETTY_FUNCTION__.12521(%rip), %rcx
	movl	$14876, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC531(%rip), %rdi
	call	__assert_fail@PLT
.L3159:
	movq	-72(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14878, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC532(%rip), %rdx
	movl	$27, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	je	.L3160
	leaq	__PRETTY_FUNCTION__.12521(%rip), %rcx
	movl	$14878, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC532(%rip), %rdi
	call	__assert_fail@PLT
.L3160:
	movq	-72(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	16(%rax), %rax
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14880, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC533(%rip), %rdx
	movl	$27, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	16(%rax), %rax
	cmpq	%rax, %rdx
	je	.L3161
	leaq	__PRETTY_FUNCTION__.12521(%rip), %rcx
	movl	$14880, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC533(%rip), %rdi
	call	__assert_fail@PLT
.L3161:
	movq	-72(%rbp), %rax
	movq	24(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14882, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC534(%rip), %rdx
	movl	$27, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	24(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	cmpq	%rax, %rdx
	je	.L3174
	leaq	__PRETTY_FUNCTION__.12521(%rip), %rcx
	movl	$14882, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC534(%rip), %rdi
	call	__assert_fail@PLT
.L3157:
	movq	-72(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, 80(%rax)
	movq	-72(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	(%rdx), %rcx
	movq	8(%rdx), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	16(%rdx), %rcx
	movq	24(%rdx), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	32(%rdx), %rcx
	movq	40(%rdx), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	48(%rdx), %rcx
	movq	56(%rdx), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	64(%rdx), %rcx
	movq	72(%rdx), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-72(%rbp), %rax
	movb	$1, 96(%rax)
	movq	-80(%rbp), %rax
	movl	(%rax), %edx
	movq	-72(%rbp), %rax
	movl	%edx, 88(%rax)
	movq	-80(%rbp), %rax
	movl	4(%rax), %edx
	movq	-72(%rbp), %rax
	movl	%edx, 92(%rax)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L3163
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L3164
	movq	-104(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L3164
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L3163
.L3164:
	movq	-72(%rbp), %rax
	leaq	default_ctor(%rip), %rdx
	movq	%rdx, (%rax)
.L3163:
	movq	-104(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L3165
	movq	-104(%rbp), %rax
	movq	40(%rax), %rax
	testq	%rax, %rax
	jne	.L3165
	movq	-72(%rbp), %rax
	leaq	default_copy_ctor(%rip), %rdx
	movq	%rdx, 40(%rax)
.L3165:
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L3166
	movq	-104(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	jne	.L3166
	movq	-72(%rbp), %rax
	leaq	default_move_ctor(%rip), %rdx
	movq	%rdx, 48(%rax)
.L3166:
	movq	-104(%rbp), %rax
	movq	56(%rax), %rax
	testq	%rax, %rax
	jne	.L3167
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L3167
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L3168
	movq	-104(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	je	.L3169
	movq	-72(%rbp), %rax
	leaq	default_move_ctor_w_dtor(%rip), %rdx
	movq	%rdx, 56(%rax)
	jmp	.L3167
.L3169:
	movq	-72(%rbp), %rax
	leaq	default_ctor_w_move_w_dtor(%rip), %rdx
	movq	%rdx, 56(%rax)
	jmp	.L3167
.L3168:
	movq	-72(%rbp), %rax
	movq	48(%rax), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, 56(%rax)
.L3167:
	movq	-104(%rbp), %rax
	movq	64(%rax), %rax
	testq	%rax, %rax
	jne	.L3170
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L3171
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L3172
	movq	-72(%rbp), %rax
	leaq	default_move_w_dtor(%rip), %rdx
	movq	%rdx, 64(%rax)
	jmp	.L3170
.L3172:
	movq	-72(%rbp), %rax
	leaq	default_move(%rip), %rdx
	movq	%rdx, 64(%rax)
	jmp	.L3170
.L3171:
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L3170
	movq	-72(%rbp), %rax
	leaq	default_dtor(%rip), %rdx
	movq	%rdx, 64(%rax)
.L3170:
	movq	$0, -64(%rbp)
	movq	$0, -56(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movl	$3, -64(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-88(%rbp), %rax
	leaq	-64(%rbp), %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	flecs_notify_tables
.L3174:
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3173
	call	__stack_chk_fail@PLT
.L3173:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE461:
	.size	ecs_set_component_actions_w_id, .-ecs_set_component_actions_w_id
	.globl	ecs_component_has_actions
	.type	ecs_component_has_actions, @function
ecs_component_has_actions:
.LFB462:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14964, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3176
	leaq	__PRETTY_FUNCTION__.12529(%rip), %rcx
	movl	$14964, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3176:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_c_info
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L3177
	movq	-8(%rbp), %rax
	movzbl	96(%rax), %eax
	testb	%al, %al
	je	.L3177
	movl	$1, %eax
	jmp	.L3178
.L3177:
	movl	$0, %eax
.L3178:
	andl	$1, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE462:
	.size	ecs_component_has_actions, .-ecs_component_has_actions
	.section	.rodata
.LC535:
	.string	"action != NULL"
.LC536:
	.string	"action != ((void *)0)"
.LC537:
	.string	"elem != NULL"
.LC538:
	.string	"elem != ((void *)0)"
	.text
	.globl	ecs_atfini
	.type	ecs_atfini, @function
ecs_atfini:
.LFB463:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14976, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3181
	leaq	__PRETTY_FUNCTION__.12536(%rip), %rcx
	movl	$14976, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3181:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14977, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3182
	leaq	__PRETTY_FUNCTION__.12536(%rip), %rcx
	movl	$14977, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3182:
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14979, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC535(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L3183
	leaq	__PRETTY_FUNCTION__.12536(%rip), %rcx
	movl	$14979, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC536(%rip), %rdi
	call	__assert_fail@PLT
.L3183:
	movq	-24(%rbp), %rax
	addq	$696, %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14983, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC537(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3184
	leaq	__PRETTY_FUNCTION__.12536(%rip), %rcx
	movl	$14983, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC538(%rip), %rdi
	call	__assert_fail@PLT
.L3184:
	movq	-8(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 8(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE463:
	.size	ecs_atfini, .-ecs_atfini
	.globl	ecs_run_post_frame
	.type	ecs_run_post_frame, @function
ecs_run_post_frame:
.LFB464:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-24(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14994, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	testq	%rax, %rax
	jne	.L3186
	leaq	__PRETTY_FUNCTION__.12543(%rip), %rcx
	movl	$14994, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3186:
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$14995, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC535(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L3187
	leaq	__PRETTY_FUNCTION__.12543(%rip), %rcx
	movl	$14995, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC536(%rip), %rdi
	call	__assert_fail@PLT
.L3187:
	leaq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15000, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC537(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3188
	leaq	__PRETTY_FUNCTION__.12543(%rip), %rcx
	movl	$15000, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC538(%rip), %rdi
	call	__assert_fail@PLT
.L3188:
	movq	-8(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 8(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE464:
	.size	ecs_run_post_frame, .-ecs_run_post_frame
	.type	fini_unset_tables, @function
fini_unset_tables:
.LFB465:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L3190
.L3191:
	movl	-24(%rbp), %edx
	movq	-16(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_remove_actions
	addl	$1, -24(%rbp)
.L3190:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L3191
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE465:
	.size	fini_unset_tables, .-fini_unset_tables
	.type	fini_actions, @function
fini_actions:
.LFB466:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	696(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movq	696(%rax), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L3193
.L3194:
	movl	-24(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	addl	$1, -24(%rbp)
.L3193:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L3194
	movq	-40(%rbp), %rax
	movq	696(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE466:
	.size	fini_actions, .-fini_actions
	.type	fini_component_lifecycle, @function
fini_component_lifecycle:
.LFB467:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_free
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE467:
	.size	fini_component_lifecycle, .-fini_component_lifecycle
	.type	fini_queries, @function
fini_queries:
.LFB468:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L3197
.L3198:
	movq	-24(%rbp), %rax
	movq	224(%rax), %rax
	movl	$0, %edx
	movl	$1744, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_fini
	addl	$1, -16(%rbp)
.L3197:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L3198
	movq	-24(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_free
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE468:
	.size	fini_queries, .-fini_queries
	.type	fini_observers, @function
fini_observers:
.LFB469:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	240(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_free
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE469:
	.size	fini_observers, .-fini_observers
	.type	fini_stages, @function
fini_stages:
.LFB470:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	leaq	368(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_stage_deinit
	movq	-8(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_set_stages
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE470:
	.size	fini_stages, .-fini_stages
	.type	fini_id_index, @function
fini_id_index:
.LFB471:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-72(%rbp), %rax
	movq	8(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L3202
.L3203:
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
.L3202:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L3203
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3204
	call	__stack_chk_fail@PLT
.L3204:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE471:
	.size	fini_id_index, .-fini_id_index
	.type	fini_id_triggers, @function
fini_id_triggers:
.LFB472:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-72(%rbp), %rax
	movq	16(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L3206
.L3207:
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
.L3206:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$32, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L3207
	movq	-72(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-72(%rbp), %rax
	movq	232(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_free
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3208
	call	__stack_chk_fail@PLT
.L3208:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE472:
	.size	fini_id_triggers, .-fini_id_triggers
	.type	fini_aliases, @function
fini_aliases:
.LFB473:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -88(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-64(%rbp), %rdx
	movq	-88(%rbp), %rax
	pushq	24(%rax)
	pushq	16(%rax)
	pushq	8(%rax)
	pushq	(%rax)
	movq	%rdx, %rdi
	call	flecs_hashmap_iter
	addq	$32, %rsp
	jmp	.L3210
.L3211:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L3210:
	leaq	-72(%rbp), %rdx
	leaq	-64(%rbp), %rax
	movl	$8, %ecx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_flecs_hashmap_next
	testq	%rax, %rax
	jne	.L3211
	movq	-88(%rbp), %rax
	pushq	24(%rax)
	pushq	16(%rax)
	pushq	8(%rax)
	pushq	(%rax)
	call	flecs_hashmap_free
	addq	$32, %rsp
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3212
	call	__stack_chk_fail@PLT
.L3212:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE473:
	.size	fini_aliases, .-fini_aliases
	.type	fini_misc, @function
fini_misc:
.LFB474:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	272(%rax), %rax
	movq	%rax, %rdi
	call	on_demand_in_map_fini
	movq	-8(%rbp), %rax
	movq	280(%rax), %rax
	movq	%rax, %rdi
	call	on_demand_in_map_fini
	movq	-8(%rbp), %rax
	movq	296(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-8(%rbp), %rax
	movq	288(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-8(%rbp), %rax
	addq	$248, %rax
	movq	%rax, %rdi
	call	monitors_fini
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE474:
	.size	fini_misc, .-fini_misc
	.section	.rodata
.LC539:
	.string	"!world->is_fini"
	.text
	.globl	ecs_fini
	.type	ecs_fini, @function
ecs_fini:
.LFB475:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15129, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3215
	leaq	__PRETTY_FUNCTION__.12614(%rip), %rcx
	movl	$15129, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3215:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15130, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3216
	leaq	__PRETTY_FUNCTION__.12614(%rip), %rcx
	movl	$15130, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3216:
	movq	-8(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15131, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3217
	leaq	__PRETTY_FUNCTION__.12614(%rip), %rcx
	movl	$15131, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L3217:
	movq	-8(%rbp), %rax
	movzbl	682(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15132, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC539(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	682(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3218
	leaq	__PRETTY_FUNCTION__.12614(%rip), %rcx
	movl	$15132, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC539(%rip), %rdi
	call	__assert_fail@PLT
.L3218:
	movq	-8(%rbp), %rax
	movb	$1, 682(%rax)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_defer_begin
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fini_unset_tables
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fini_actions
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fini_store
	movq	-8(%rbp), %rax
	leaq	368(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_purge
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_free
	movq	-8(%rbp), %rax
	movzbl	686(%rax), %eax
	testb	%al, %al
	je	.L3219
	movq	96+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	624(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L3219:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fini_stages
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fini_component_lifecycle
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fini_queries
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fini_observers
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fini_id_index
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fini_id_triggers
	movq	-8(%rbp), %rax
	addq	$304, %rax
	movq	%rax, %rdi
	call	fini_aliases
	movq	-8(%rbp), %rax
	addq	$336, %rax
	movq	%rax, %rdi
	call	fini_aliases
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	fini_misc
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, %edi
	call	flecs_increase_timer_resolution
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	call	ecs_os_fini
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE475:
	.size	ecs_fini, .-ecs_fini
	.globl	ecs_dim
	.type	ecs_dim, @function
ecs_dim:
.LFB476:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15201, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3222
	leaq	__PRETTY_FUNCTION__.12619(%rip), %rcx
	movl	$15201, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3222:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15202, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3223
	leaq	__PRETTY_FUNCTION__.12619(%rip), %rcx
	movl	$15202, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3223:
	movl	-12(%rbp), %eax
	leal	256(%rax), %edx
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_sparse_set_size
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE476:
	.size	ecs_dim, .-ecs_dim
	.globl	flecs_eval_component_monitors
	.type	flecs_eval_component_monitors, @function
flecs_eval_component_monitors:
.LFB477:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15209, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3225
	leaq	__PRETTY_FUNCTION__.12623(%rip), %rcx
	movl	$15209, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3225:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15210, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3226
	leaq	__PRETTY_FUNCTION__.12623(%rip), %rcx
	movl	$15210, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3226:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	eval_component_monitor
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE477:
	.size	flecs_eval_component_monitors, .-flecs_eval_component_monitors
	.section	.rodata
.LC540:
	.string	"ecs_os_has_time()"
	.text
	.globl	ecs_measure_frame_time
	.type	ecs_measure_frame_time, @function
ecs_measure_frame_time:
.LFB478:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, %eax
	movb	%al, -12(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15218, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3228
	leaq	__PRETTY_FUNCTION__.12628(%rip), %rcx
	movl	$15218, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3228:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15219, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3229
	leaq	__PRETTY_FUNCTION__.12628(%rip), %rcx
	movl	$15219, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3229:
	call	ecs_os_has_time
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15220, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC540(%rip), %rdx
	movl	$9, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	call	ecs_os_has_time
	testb	%al, %al
	jne	.L3230
	leaq	__PRETTY_FUNCTION__.12628(%rip), %rcx
	movl	$15220, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC540(%rip), %rdi
	call	__assert_fail@PLT
.L3230:
	movq	-8(%rbp), %rax
	movss	572(%rax), %xmm0
	pxor	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	jp	.L3234
	pxor	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	je	.L3231
.L3234:
	cmpb	$0, -12(%rbp)
	je	.L3235
.L3231:
	movq	-8(%rbp), %rax
	movzbl	-12(%rbp), %edx
	movb	%dl, 683(%rax)
.L3235:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE478:
	.size	ecs_measure_frame_time, .-ecs_measure_frame_time
	.globl	ecs_measure_system_time
	.type	ecs_measure_system_time, @function
ecs_measure_system_time:
.LFB479:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, %eax
	movb	%al, -12(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15231, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3237
	leaq	__PRETTY_FUNCTION__.12633(%rip), %rcx
	movl	$15231, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3237:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15232, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3238
	leaq	__PRETTY_FUNCTION__.12633(%rip), %rcx
	movl	$15232, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3238:
	call	ecs_os_has_time
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15233, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC540(%rip), %rdx
	movl	$9, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	call	ecs_os_has_time
	testb	%al, %al
	jne	.L3239
	leaq	__PRETTY_FUNCTION__.12633(%rip), %rcx
	movl	$15233, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC540(%rip), %rdi
	call	__assert_fail@PLT
.L3239:
	movq	-8(%rbp), %rax
	movzbl	-12(%rbp), %edx
	movb	%dl, 684(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE479:
	.size	ecs_measure_system_time, .-ecs_measure_system_time
	.type	set_timer_resolution, @function
set_timer_resolution:
.LFB480:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movss	%xmm0, -4(%rbp)
	movss	-4(%rbp), %xmm0
	comiss	.LC411(%rip), %xmm0
	jb	.L3245
	movl	$1, %edi
	call	flecs_increase_timer_resolution
	jmp	.L3246
.L3245:
	movl	$0, %edi
	call	flecs_increase_timer_resolution
.L3246:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE480:
	.size	set_timer_resolution, .-set_timer_resolution
	.globl	ecs_set_target_fps
	.type	ecs_set_target_fps, @function
ecs_set_target_fps:
.LFB481:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movss	%xmm0, -12(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15250, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3248
	leaq	__PRETTY_FUNCTION__.12641(%rip), %rcx
	movl	$15250, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3248:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15251, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3249
	leaq	__PRETTY_FUNCTION__.12641(%rip), %rcx
	movl	$15251, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3249:
	call	ecs_os_has_time
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15252, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC540(%rip), %rdx
	movl	$9, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	call	ecs_os_has_time
	testb	%al, %al
	jne	.L3250
	leaq	__PRETTY_FUNCTION__.12641(%rip), %rcx
	movl	$15252, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC540(%rip), %rdi
	call	__assert_fail@PLT
.L3250:
	movq	-8(%rbp), %rax
	movl	616(%rax), %eax
	testl	%eax, %eax
	jne	.L3252
	movq	-8(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ecs_measure_frame_time
	movq	-8(%rbp), %rax
	movss	-12(%rbp), %xmm0
	movss	%xmm0, 572(%rax)
	movl	-12(%rbp), %eax
	movd	%eax, %xmm0
	call	set_timer_resolution
.L3252:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE481:
	.size	ecs_set_target_fps, .-ecs_set_target_fps
	.globl	ecs_get_context
	.type	ecs_get_context, @function
ecs_get_context:
.LFB482:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15264, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3254
	leaq	__PRETTY_FUNCTION__.12645(%rip), %rcx
	movl	$15264, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3254:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	688(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE482:
	.size	ecs_get_context, .-ecs_get_context
	.globl	ecs_set_context
	.type	ecs_set_context, @function
ecs_set_context:
.LFB483:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15273, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3257
	leaq	__PRETTY_FUNCTION__.12650(%rip), %rcx
	movl	$15273, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3257:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15274, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3258
	leaq	__PRETTY_FUNCTION__.12650(%rip), %rcx
	movl	$15274, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3258:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 688(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE483:
	.size	ecs_set_context, .-ecs_set_context
	.section	.rodata
.LC541:
	.string	"!id_end || id_end > id_start"
	.align 8
.LC542:
	.string	"!id_end || id_end > world->stats.last_id"
	.text
	.globl	ecs_set_entity_range
	.type	ecs_set_entity_range, @function
ecs_set_entity_range:
.LFB484:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15283, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3260
	leaq	__PRETTY_FUNCTION__.12656(%rip), %rcx
	movl	$15283, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3260:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15284, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3261
	leaq	__PRETTY_FUNCTION__.12656(%rip), %rcx
	movl	$15284, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3261:
	cmpq	$0, -24(%rbp)
	je	.L3262
	movq	-24(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jbe	.L3263
.L3262:
	movl	$1, %eax
	jmp	.L3264
.L3263:
	movl	$0, %eax
.L3264:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15285, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC541(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	je	.L3265
	movq	-24(%rbp), %rax
	cmpq	-16(%rbp), %rax
	ja	.L3265
	leaq	__PRETTY_FUNCTION__.12656(%rip), %rcx
	movl	$15285, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC541(%rip), %rdi
	call	__assert_fail@PLT
.L3265:
	cmpq	$0, -24(%rbp)
	je	.L3266
	movq	-8(%rbp), %rax
	movq	536(%rax), %rax
	cmpq	%rax, -24(%rbp)
	jbe	.L3267
.L3266:
	movl	$1, %eax
	jmp	.L3268
.L3267:
	movl	$0, %eax
.L3268:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15286, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC542(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	je	.L3269
	movq	-8(%rbp), %rax
	movq	536(%rax), %rax
	cmpq	%rax, -24(%rbp)
	ja	.L3269
	leaq	__PRETTY_FUNCTION__.12656(%rip), %rcx
	movl	$15286, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC542(%rip), %rdi
	call	__assert_fail@PLT
.L3269:
	movq	-8(%rbp), %rax
	movq	536(%rax), %rax
	cmpq	%rax, -16(%rbp)
	jbe	.L3270
	movq	-16(%rbp), %rax
	leaq	-1(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 536(%rax)
.L3270:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 544(%rax)
	movq	-8(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, 552(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE484:
	.size	ecs_set_entity_range, .-ecs_set_entity_range
	.globl	ecs_enable_range_check
	.type	ecs_enable_range_check, @function
ecs_enable_range_check:
.LFB485:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, %eax
	movb	%al, -28(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15300, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3272
	leaq	__PRETTY_FUNCTION__.12661(%rip), %rcx
	movl	$15300, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3272:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15301, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3273
	leaq	__PRETTY_FUNCTION__.12661(%rip), %rcx
	movl	$15301, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3273:
	movq	-24(%rbp), %rax
	movzbl	32(%rax), %eax
	movb	%al, -1(%rbp)
	movq	-24(%rbp), %rax
	movzbl	-28(%rbp), %edx
	movb	%dl, 32(%rax)
	movzbl	-1(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE485:
	.size	ecs_enable_range_check, .-ecs_enable_range_check
	.globl	ecs_get_threads
	.type	ecs_get_threads, @function
ecs_get_threads:
.LFB486:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$8, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE486:
	.size	ecs_get_threads, .-ecs_get_threads
	.globl	ecs_enable_locking
	.type	ecs_enable_locking, @function
ecs_enable_locking:
.LFB487:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, %eax
	movb	%al, -28(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15317, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3278
	leaq	__PRETTY_FUNCTION__.12670(%rip), %rcx
	movl	$15317, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3278:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15318, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3279
	leaq	__PRETTY_FUNCTION__.12670(%rip), %rcx
	movl	$15318, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3279:
	cmpb	$0, -28(%rbp)
	je	.L3280
	movq	-24(%rbp), %rax
	movzbl	686(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3281
	movq	88+ecs_os_api(%rip), %rax
	call	*%rax
	movq	-24(%rbp), %rdx
	movq	%rax, 624(%rdx)
	movq	88+ecs_os_api(%rip), %rax
	call	*%rax
	movq	-24(%rbp), %rdx
	movq	%rax, 632(%rdx)
	movq	120+ecs_os_api(%rip), %rax
	call	*%rax
	movq	-24(%rbp), %rdx
	movq	%rax, 640(%rdx)
	jmp	.L3281
.L3280:
	movq	-24(%rbp), %rax
	movzbl	686(%rax), %eax
	testb	%al, %al
	je	.L3281
	movq	96+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	624(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	96+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	632(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	128+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	640(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L3281:
	movq	-24(%rbp), %rax
	movzbl	686(%rax), %eax
	movb	%al, -1(%rbp)
	movq	-24(%rbp), %rax
	movzbl	-28(%rbp), %edx
	movb	%dl, 686(%rax)
	movzbl	-1(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE487:
	.size	ecs_enable_locking, .-ecs_enable_locking
	.section	.rodata
.LC543:
	.string	"world->locking_enabled"
	.text
	.globl	ecs_lock
	.type	ecs_lock, @function
ecs_lock:
.LFB488:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15342, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3284
	leaq	__PRETTY_FUNCTION__.12675(%rip), %rcx
	movl	$15342, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3284:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15343, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3285
	leaq	__PRETTY_FUNCTION__.12675(%rip), %rcx
	movl	$15343, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3285:
	movq	-8(%rbp), %rax
	movzbl	686(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15344, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC543(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	686(%rax), %eax
	testb	%al, %al
	jne	.L3286
	leaq	__PRETTY_FUNCTION__.12675(%rip), %rcx
	movl	$15344, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC543(%rip), %rdi
	call	__assert_fail@PLT
.L3286:
	movq	104+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	624(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE488:
	.size	ecs_lock, .-ecs_lock
	.globl	ecs_unlock
	.type	ecs_unlock, @function
ecs_unlock:
.LFB489:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15351, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3288
	leaq	__PRETTY_FUNCTION__.12679(%rip), %rcx
	movl	$15351, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3288:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15352, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3289
	leaq	__PRETTY_FUNCTION__.12679(%rip), %rcx
	movl	$15352, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3289:
	movq	-8(%rbp), %rax
	movzbl	686(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15353, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC543(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	686(%rax), %eax
	testb	%al, %al
	jne	.L3290
	leaq	__PRETTY_FUNCTION__.12679(%rip), %rcx
	movl	$15353, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC543(%rip), %rdi
	call	__assert_fail@PLT
.L3290:
	movq	112+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	624(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE489:
	.size	ecs_unlock, .-ecs_unlock
	.globl	ecs_begin_wait
	.type	ecs_begin_wait, @function
ecs_begin_wait:
.LFB490:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15360, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3292
	leaq	__PRETTY_FUNCTION__.12683(%rip), %rcx
	movl	$15360, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3292:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15361, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3293
	leaq	__PRETTY_FUNCTION__.12683(%rip), %rcx
	movl	$15361, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3293:
	movq	-8(%rbp), %rax
	movzbl	686(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15362, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC543(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	686(%rax), %eax
	testb	%al, %al
	jne	.L3294
	leaq	__PRETTY_FUNCTION__.12683(%rip), %rcx
	movl	$15362, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC543(%rip), %rdi
	call	__assert_fail@PLT
.L3294:
	movq	104+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	632(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	152+ecs_os_api(%rip), %rcx
	movq	-8(%rbp), %rax
	movq	632(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	640(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE490:
	.size	ecs_begin_wait, .-ecs_begin_wait
	.globl	ecs_end_wait
	.type	ecs_end_wait, @function
ecs_end_wait:
.LFB491:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15370, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3296
	leaq	__PRETTY_FUNCTION__.12687(%rip), %rcx
	movl	$15370, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3296:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15371, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3297
	leaq	__PRETTY_FUNCTION__.12687(%rip), %rcx
	movl	$15371, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3297:
	movq	-8(%rbp), %rax
	movzbl	686(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15372, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC543(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	686(%rax), %eax
	testb	%al, %al
	jne	.L3298
	leaq	__PRETTY_FUNCTION__.12687(%rip), %rcx
	movl	$15372, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC543(%rip), %rdi
	call	__assert_fail@PLT
.L3298:
	movq	112+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	632(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE491:
	.size	ecs_end_wait, .-ecs_end_wait
	.section	.rodata
.LC544:
	.string	"!(component & ECS_ROLE_MASK)"
	.align 8
.LC545:
	.string	"!(component & (0xFFull << 56))"
	.text
	.globl	flecs_get_c_info
	.type	flecs_get_c_info, @function
flecs_get_c_info:
.LFB492:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15380, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3300
	leaq	__PRETTY_FUNCTION__.12692(%rip), %rcx
	movl	$15380, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3300:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15381, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3301
	leaq	__PRETTY_FUNCTION__.12692(%rip), %rcx
	movl	$15381, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3301:
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15383, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC193(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L3302
	leaq	__PRETTY_FUNCTION__.12692(%rip), %rcx
	movl	$15383, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC193(%rip), %rdi
	call	__assert_fail@PLT
.L3302:
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	testq	%rax, %rax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15384, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC544(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	testq	%rax, %rax
	je	.L3303
	leaq	__PRETTY_FUNCTION__.12692(%rip), %rcx
	movl	$15384, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC545(%rip), %rdi
	call	__assert_fail@PLT
.L3303:
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	-16(%rbp), %rdx
	movl	$104, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE492:
	.size	flecs_get_c_info, .-flecs_get_c_info
	.section	.rodata
.LC546:
	.string	"c_info_mut != NULL"
.LC547:
	.string	"c_info_mut != ((void *)0)"
	.text
	.globl	flecs_get_or_create_c_info
	.type	flecs_get_or_create_c_info, @function
flecs_get_or_create_c_info:
.LFB493:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15393, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3306
	leaq	__PRETTY_FUNCTION__.12697(%rip), %rcx
	movl	$15393, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3306:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15394, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3307
	leaq	__PRETTY_FUNCTION__.12697(%rip), %rcx
	movl	$15394, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3307:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_c_info
	movq	%rax, -8(%rbp)
	movq	$0, -16(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L3308
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rdx
	movl	$104, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_ensure
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15401, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC546(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L3309
	leaq	__PRETTY_FUNCTION__.12697(%rip), %rcx
	movl	$15401, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC547(%rip), %rdi
	call	__assert_fail@PLT
.L3308:
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
.L3309:
	movq	-16(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE493:
	.size	flecs_get_or_create_c_info, .-flecs_get_or_create_c_info
	.type	insert_sleep, @function
insert_sleep:
.LFB494:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15414, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L3312
	leaq	__PRETTY_FUNCTION__.12704(%rip), %rcx
	movl	$15414, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3312:
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15415, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3313
	leaq	__PRETTY_FUNCTION__.12704(%rip), %rcx
	movl	$15415, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3313:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_time_measure
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -40(%rbp)
	movq	-56(%rbp), %rax
	movss	572(%rax), %xmm0
	pxor	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	jp	.L3314
	pxor	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	jne	.L3314
	movss	-40(%rbp), %xmm0
	jmp	.L3320
.L3314:
	movq	-56(%rbp), %rax
	movss	572(%rax), %xmm1
	movss	.LC414(%rip), %xmm0
	divss	%xmm1, %xmm0
	movss	%xmm0, -36(%rbp)
	movss	-36(%rbp), %xmm0
	subss	-40(%rbp), %xmm0
	movss	%xmm0, -32(%rbp)
	movss	-32(%rbp), %xmm0
	movss	.LC548(%rip), %xmm1
	divss	%xmm1, %xmm0
	movss	%xmm0, -28(%rbp)
.L3319:
	pxor	%xmm0, %xmm0
	ucomiss	-28(%rbp), %xmm0
	jp	.L3323
	pxor	%xmm0, %xmm0
	ucomiss	-28(%rbp), %xmm0
	je	.L3317
.L3323:
	cvtss2sd	-28(%rbp), %xmm0
	call	ecs_sleepf
.L3317:
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_time_measure
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, -40(%rbp)
	movss	-36(%rbp), %xmm0
	subss	-40(%rbp), %xmm0
	movss	-28(%rbp), %xmm1
	movss	.LC549(%rip), %xmm2
	divss	%xmm2, %xmm1
	comiss	%xmm1, %xmm0
	ja	.L3319
	movss	-40(%rbp), %xmm0
.L3320:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3321
	call	__stack_chk_fail@PLT
.L3321:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE494:
	.size	insert_sleep, .-insert_sleep
	.type	start_measure_frame, @function
start_measure_frame:
.LFB495:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movss	%xmm0, -44(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15456, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L3325
	leaq	__PRETTY_FUNCTION__.12717(%rip), %rcx
	movl	$15456, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3325:
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15457, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3326
	leaq	__PRETTY_FUNCTION__.12717(%rip), %rcx
	movl	$15457, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3326:
	pxor	%xmm0, %xmm0
	movss	%xmm0, -20(%rbp)
	movq	-40(%rbp), %rax
	movzbl	683(%rax), %eax
	testb	%al, %al
	jne	.L3327
	pxor	%xmm0, %xmm0
	ucomiss	-44(%rbp), %xmm0
	jp	.L3328
	pxor	%xmm0, %xmm0
	ucomiss	-44(%rbp), %xmm0
	jne	.L3328
.L3327:
	movq	-40(%rbp), %rax
	movq	512(%rax), %rax
	movq	%rax, -16(%rbp)
.L3334:
	movq	-40(%rbp), %rax
	movl	512(%rax), %eax
	testl	%eax, %eax
	je	.L3330
	leaq	-16(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	insert_sleep
	movd	%xmm0, %eax
	movl	%eax, -20(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_time_measure
	jmp	.L3331
.L3330:
	leaq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_time_measure
	movq	-40(%rbp), %rax
	movss	572(%rax), %xmm0
	pxor	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	jp	.L3338
	pxor	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	je	.L3340
.L3338:
	movq	-40(%rbp), %rax
	movss	572(%rax), %xmm1
	movss	.LC414(%rip), %xmm0
	divss	%xmm1, %xmm0
	movss	%xmm0, -20(%rbp)
	jmp	.L3331
.L3340:
	movss	.LC550(%rip), %xmm0
	movss	%xmm0, -20(%rbp)
.L3331:
	pxor	%xmm0, %xmm0
	ucomiss	-20(%rbp), %xmm0
	jp	.L3339
	pxor	%xmm0, %xmm0
	ucomiss	-20(%rbp), %xmm0
	je	.L3334
.L3339:
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 512(%rax)
	movq	-40(%rbp), %rax
	movss	592(%rax), %xmm0
	addss	-20(%rbp), %xmm0
	movq	-40(%rbp), %rax
	movss	%xmm0, 592(%rax)
.L3328:
	movss	-20(%rbp), %xmm0
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3337
	call	__stack_chk_fail@PLT
.L3337:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE495:
	.size	start_measure_frame, .-start_measure_frame
	.type	stop_measure_frame, @function
stop_measure_frame:
.LFB496:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15494, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3342
	leaq	__PRETTY_FUNCTION__.12725(%rip), %rcx
	movl	$15494, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3342:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15495, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3343
	leaq	__PRETTY_FUNCTION__.12725(%rip), %rcx
	movl	$15495, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3343:
	movq	-24(%rbp), %rax
	movzbl	683(%rax), %eax
	testb	%al, %al
	je	.L3346
	movq	-24(%rbp), %rax
	movq	512(%rax), %rax
	movq	%rax, -16(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_time_measure
	cvtsd2ss	%xmm0, %xmm1
	movq	-24(%rbp), %rax
	movss	576(%rax), %xmm0
	addss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movss	%xmm0, 576(%rax)
.L3346:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3345
	call	__stack_chk_fail@PLT
.L3345:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE496:
	.size	stop_measure_frame, .-stop_measure_frame
	.section	.rodata
.LC551:
	.string	"world->is_readonly == false"
.LC552:
	.string	"world->is_readonly == 0"
.LC553:
	.string	"get_time"
	.align 8
.LC554:
	.string	"user_delta_time != 0 || ecs_os_has_time()"
	.text
	.globl	ecs_frame_begin
	.type	ecs_frame_begin, @function
ecs_frame_begin:
.LFB497:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movss	%xmm0, -28(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15507, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3348
	leaq	__PRETTY_FUNCTION__.12731(%rip), %rcx
	movl	$15507, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3348:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15508, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3349
	leaq	__PRETTY_FUNCTION__.12731(%rip), %rcx
	movl	$15508, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3349:
	movq	-24(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15509, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC551(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3350
	leaq	__PRETTY_FUNCTION__.12731(%rip), %rcx
	movl	$15509, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC552(%rip), %rdi
	call	__assert_fail@PLT
.L3350:
	pxor	%xmm0, %xmm0
	ucomiss	-28(%rbp), %xmm0
	jp	.L3351
	pxor	%xmm0, %xmm0
	ucomiss	-28(%rbp), %xmm0
	jne	.L3351
	call	ecs_os_has_time
	testb	%al, %al
	je	.L3352
.L3351:
	movl	$1, %eax
	jmp	.L3353
.L3352:
	movl	$0, %eax
.L3353:
	andl	$1, %eax
	movzbl	%al, %eax
	leaq	.LC553(%rip), %r9
	movl	$15511, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC554(%rip), %rdx
	movl	$9, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	pxor	%xmm0, %xmm0
	ucomiss	-28(%rbp), %xmm0
	jp	.L3354
	pxor	%xmm0, %xmm0
	ucomiss	-28(%rbp), %xmm0
	jne	.L3354
	call	ecs_os_has_time
	testb	%al, %al
	jne	.L3354
	leaq	__PRETTY_FUNCTION__.12731(%rip), %rcx
	movl	$15511, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC554(%rip), %rdi
	call	__assert_fail@PLT
.L3354:
	movq	-24(%rbp), %rax
	movzbl	686(%rax), %eax
	testb	%al, %al
	je	.L3355
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_lock
.L3355:
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movd	%edx, %xmm0
	movq	%rax, %rdi
	call	start_measure_frame
	movd	%xmm0, %eax
	movl	%eax, -4(%rbp)
	pxor	%xmm0, %xmm0
	ucomiss	-28(%rbp), %xmm0
	jp	.L3356
	pxor	%xmm0, %xmm0
	ucomiss	-28(%rbp), %xmm0
	jne	.L3356
	movss	-4(%rbp), %xmm0
	movss	%xmm0, -28(%rbp)
.L3356:
	movq	-24(%rbp), %rax
	movss	-28(%rbp), %xmm0
	movss	%xmm0, 560(%rax)
	movq	-24(%rbp), %rax
	movss	568(%rax), %xmm0
	mulss	-28(%rbp), %xmm0
	movq	-24(%rbp), %rax
	movss	%xmm0, 564(%rax)
	movq	-24(%rbp), %rax
	movss	588(%rax), %xmm1
	movq	-24(%rbp), %rax
	movss	564(%rax), %xmm0
	addss	%xmm1, %xmm0
	movq	-24(%rbp), %rax
	movss	%xmm0, 588(%rax)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_eval_component_monitors
	movq	-24(%rbp), %rax
	movss	564(%rax), %xmm0
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE497:
	.size	ecs_frame_begin, .-ecs_frame_begin
	.globl	ecs_frame_end
	.type	ecs_frame_end, @function
ecs_frame_end:
.LFB498:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15537, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L3361
	leaq	__PRETTY_FUNCTION__.12736(%rip), %rcx
	movl	$15537, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3361:
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15538, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3362
	leaq	__PRETTY_FUNCTION__.12736(%rip), %rcx
	movl	$15538, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3362:
	movq	-40(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15539, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC551(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3363
	leaq	__PRETTY_FUNCTION__.12736(%rip), %rcx
	movl	$15539, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC552(%rip), %rdi
	call	__assert_fail@PLT
.L3363:
	movq	-40(%rbp), %rax
	movl	596(%rax), %eax
	leal	1(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 596(%rax)
	movq	-40(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movq	456(%rax), %rax
	movl	$16, %edx
	movl	$88, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L3364
.L3365:
	movl	-24(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_stage_merge_post_frame
	addl	$1, -24(%rbp)
.L3364:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L3365
	movq	-40(%rbp), %rax
	movzbl	686(%rax), %eax
	testb	%al, %al
	je	.L3366
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_unlock
	movq	104+ecs_os_api(%rip), %rdx
	movq	-40(%rbp), %rax
	movq	632(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	144+ecs_os_api(%rip), %rdx
	movq	-40(%rbp), %rax
	movq	640(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	112+ecs_os_api(%rip), %rdx
	movq	-40(%rbp), %rax
	movq	632(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L3366:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	stop_measure_frame
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE498:
	.size	ecs_frame_end, .-ecs_frame_end
	.globl	ecs_get_world_info
	.type	ecs_get_world_info, @function
ecs_get_world_info:
.LFB499:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$528, %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE499:
	.size	ecs_get_world_info, .-ecs_get_world_info
	.globl	flecs_notify_queries
	.type	flecs_notify_queries, @function
flecs_notify_queries:
.LFB500:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15569, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3370
	leaq	__PRETTY_FUNCTION__.12751(%rip), %rcx
	movl	$15569, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3370:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15570, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3371
	leaq	__PRETTY_FUNCTION__.12751(%rip), %rcx
	movl	$15570, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3371:
	movq	-24(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -4(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L3372
.L3373:
	movq	-24(%rbp), %rax
	movq	224(%rax), %rax
	movl	-8(%rbp), %edx
	movl	$1744, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, %rcx
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_query_notify
	addl	$1, -8(%rbp)
.L3372:
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jl	.L3373
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE500:
	.size	flecs_notify_queries, .-flecs_notify_queries
	.globl	flecs_delete_table
	.type	flecs_delete_table, @function
flecs_delete_table:
.LFB501:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15583, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L3375
	leaq	__PRETTY_FUNCTION__.12761(%rip), %rcx
	movl	$15583, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3375:
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15584, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L3376
	leaq	__PRETTY_FUNCTION__.12761(%rip), %rcx
	movl	$15584, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L3376:
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movl	$4, -32(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_notify_queries
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_free
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_free_type
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15600, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC516(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L3377
	leaq	__PRETTY_FUNCTION__.12761(%rip), %rcx
	movl	$15600, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC516(%rip), %rdi
	call	__assert_fail@PLT
.L3377:
	movq	-56(%rbp), %rax
	movq	48(%rax), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_remove
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3378
	call	__stack_chk_fail@PLT
.L3378:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE501:
	.size	flecs_delete_table, .-flecs_delete_table
	.type	register_table_for_id, @function
register_table_for_id:
.LFB502:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$320, %rsp
	movq	%rdi, -296(%rbp)
	movq	%rsi, -304(%rbp)
	movq	%rdx, -312(%rbp)
	movl	%ecx, -316(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-312(%rbp), %rdx
	movq	-296(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_ensure_id_record
	movq	%rax, -288(%rbp)
	cmpq	$0, -288(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15612, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC124(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -288(%rbp)
	jne	.L3380
	leaq	__PRETTY_FUNCTION__.12771(%rip), %rcx
	movl	$15612, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC125(%rip), %rdi
	call	__assert_fail@PLT
.L3380:
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L3381
	movl	$1, %edx
	movl	$8, %esi
	movl	$16, %edi
	call	_ecs_map_new
	movq	-288(%rbp), %rdx
	movq	%rax, (%rdx)
.L3381:
	movq	-304(%rbp), %rax
	movq	(%rax), %rdx
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_ensure
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3382
	movq	-280(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -316(%rbp)
	jge	.L3383
.L3382:
	movq	-280(%rbp), %rax
	movq	-304(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-280(%rbp), %rax
	movl	-316(%rbp), %edx
	movl	%edx, 8(%rax)
	movq	-280(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.L3384
.L3383:
	movq	-280(%rbp), %rax
	movl	12(%rax), %eax
	leal	1(%rax), %edx
	movq	-280(%rbp), %rax
	movl	%edx, 12(%rax)
.L3384:
	leaq	-272(%rbp), %rdx
	movq	-312(%rbp), %rsi
	movq	-296(%rbp), %rax
	movl	$255, %ecx
	movq	%rax, %rdi
	call	ecs_id_str
	movq	-304(%rbp), %rax
	movl	16(%rax), %eax
	andl	$64, %eax
	testl	%eax, %eax
	jne	.L3390
	movl	$286, %edx
	movq	-312(%rbp), %rcx
	movq	-296(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_triggers_get
	testq	%rax, %rax
	je	.L3386
	movq	-304(%rbp), %rax
	movl	16(%rax), %eax
	orb	$8, %ah
	movl	%eax, %edx
	movq	-304(%rbp), %rax
	movl	%edx, 16(%rax)
.L3386:
	movl	$287, %edx
	movq	-312(%rbp), %rcx
	movq	-296(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_triggers_get
	testq	%rax, %rax
	je	.L3387
	movq	-304(%rbp), %rax
	movl	16(%rax), %eax
	orb	$16, %ah
	movl	%eax, %edx
	movq	-304(%rbp), %rax
	movl	%edx, 16(%rax)
.L3387:
	movl	$288, %edx
	movq	-312(%rbp), %rcx
	movq	-296(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_triggers_get
	testq	%rax, %rax
	je	.L3388
	movq	-304(%rbp), %rax
	movl	16(%rax), %eax
	orb	$32, %ah
	movl	%eax, %edx
	movq	-304(%rbp), %rax
	movl	%edx, 16(%rax)
.L3388:
	movl	$289, %edx
	movq	-312(%rbp), %rcx
	movq	-296(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_triggers_get
	testq	%rax, %rax
	je	.L3390
	movq	-304(%rbp), %rax
	movl	16(%rax), %eax
	orb	$64, %ah
	movl	%eax, %edx
	movq	-304(%rbp), %rax
	movl	%edx, 16(%rax)
.L3390:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3389
	call	__stack_chk_fail@PLT
.L3389:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE502:
	.size	register_table_for_id, .-register_table_for_id
	.type	unregister_table_for_id, @function
unregister_table_for_id:
.LFB503:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L3395
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3395
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_remove
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_count
	testl	%eax, %eax
	jne	.L3391
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_clear_id_record
	jmp	.L3391
.L3395:
	nop
.L3391:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE503:
	.size	unregister_table_for_id, .-unregister_table_for_id
	.type	do_register_id, @function
do_register_id:
.LFB504:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, %eax
	movb	%al, -32(%rbp)
	cmpb	$0, -32(%rbp)
	je	.L3397
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	unregister_table_for_id
	jmp	.L3399
.L3397:
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	register_table_for_id
.L3399:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE504:
	.size	do_register_id, .-do_register_id
	.type	do_register_each_id, @function
do_register_each_id:
.LFB505:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, %eax
	movb	%al, -84(%rbp)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -44(%rbp)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movb	$0, -49(%rbp)
	movl	$0, -48(%rbp)
	jmp	.L3401
.L3406:
	movl	-48(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-40(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L3402
	movq	-40(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$276, %edx
	cmpq	%rdx, %rax
	jne	.L3402
	movb	$1, -49(%rbp)
.L3402:
	movzbl	-84(%rbp), %edi
	movl	-48(%rbp), %ecx
	movq	-40(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	do_register_id
	movzbl	-84(%rbp), %ecx
	movl	$266, %edi
	movl	-48(%rbp), %edx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	%ecx, %r8d
	movl	%edx, %ecx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	do_register_id
	movabsq	$-72057594037927936, %rax
	andq	-40(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L3403
	movq	-40(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movabsq	$72057589742960640, %rax
	andq	%rdx, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movzbl	-84(%rbp), %edi
	movl	-48(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	do_register_id
	movl	$266, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movzbl	-84(%rbp), %edi
	movl	-48(%rbp), %ecx
	movq	-16(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	do_register_id
	movl	$266, %eax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movzbl	-84(%rbp), %edi
	movl	-48(%rbp), %ecx
	movq	-8(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	do_register_id
	movzbl	-84(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3404
	movq	-40(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_set_watch
	movq	-40(%rbp), %rax
	movl	%eax, %edx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_set_watch
	jmp	.L3404
.L3403:
	movabsq	$-72057594037927936, %rax
	andq	-40(%rbp), %rax
	testq	%rax, %rax
	je	.L3405
	movabsq	$72057594037927935, %rax
	andq	%rax, -40(%rbp)
	movzbl	-84(%rbp), %ecx
	movq	-40(%rbp), %rax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	movq	%rdx, %rdi
	orq	%rax, %rdi
	movl	-48(%rbp), %edx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	%ecx, %r8d
	movl	%edx, %ecx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	do_register_id
.L3405:
	movzbl	-84(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3404
	movq	-40(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_set_watch
.L3404:
	addl	$1, -48(%rbp)
.L3401:
	movl	-48(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L3406
	movzbl	-49(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3408
	movzbl	-84(%rbp), %ecx
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	%ecx, %r8d
	movl	$0, %ecx
	movq	%rax, %rdi
	call	do_register_id
.L3408:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE505:
	.size	do_register_each_id, .-do_register_each_id
	.globl	flecs_register_table
	.type	flecs_register_table, @function
flecs_register_table:
.LFB506:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	do_register_each_id
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE506:
	.size	flecs_register_table, .-flecs_register_table
	.globl	flecs_unregister_table
	.type	flecs_unregister_table, @function
flecs_unregister_table:
.LFB507:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	do_register_each_id
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -24(%rbp)
	leaq	-32(%rbp), %rcx
	movq	-40(%rbp), %rax
	pushq	80(%rax)
	pushq	72(%rax)
	pushq	64(%rax)
	pushq	56(%rax)
	movl	$8, %edx
	movq	%rcx, %rsi
	movl	$16, %edi
	call	_flecs_hashmap_remove
	addq	$32, %rsp
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3411
	call	__stack_chk_fail@PLT
.L3411:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE507:
	.size	flecs_unregister_table, .-flecs_unregister_table
	.globl	flecs_ensure_id_record
	.type	flecs_ensure_id_record, @function
flecs_ensure_id_record:
.LFB508:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_map_ensure
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE508:
	.size	flecs_ensure_id_record, .-flecs_ensure_id_record
	.globl	flecs_get_id_record
	.type	flecs_get_id_record, @function
flecs_get_id_record:
.LFB509:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE509:
	.size	flecs_get_id_record, .-flecs_get_id_record
	.globl	flecs_get_table_record
	.type	flecs_get_table_record, @function
flecs_get_table_record:
.LFB510:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L3417
	movl	$0, %eax
	jmp	.L3418
.L3417:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	nop
.L3418:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE510:
	.size	flecs_get_table_record, .-flecs_get_table_record
	.globl	flecs_clear_id_record
	.type	flecs_clear_id_record, @function
flecs_clear_id_record:
.LFB511:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L3422
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_remove
	jmp	.L3419
.L3422:
	nop
.L3419:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE511:
	.size	flecs_clear_id_record, .-flecs_clear_id_record
	.section	.rodata
.LC555:
	.string	"prev == nodes[elem].prev"
.LC556:
	.string	"count == hdr->count"
	.text
	.type	verify_nodes, @function
verify_nodes:
.LFB512:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L3429
	movl	$-1, -12(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L3426
.L3428:
	movl	-8(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	4(%rax), %eax
	cmpl	%eax, -12(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15813, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC555(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-8(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	4(%rax), %eax
	cmpl	%eax, -12(%rbp)
	je	.L3427
	leaq	__PRETTY_FUNCTION__.12838(%rip), %rcx
	movl	$15813, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC555(%rip), %rdi
	call	__assert_fail@PLT
.L3427:
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -8(%rbp)
	addl	$1, -4(%rbp)
.L3426:
	cmpl	$-1, -8(%rbp)
	jne	.L3428
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -4(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15819, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC556(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	%eax, -4(%rbp)
	je	.L3423
	leaq	__PRETTY_FUNCTION__.12838(%rip), %rcx
	movl	$15819, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC556(%rip), %rdi
	call	__assert_fail@PLT
.L3429:
	nop
.L3423:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE512:
	.size	verify_nodes, .-verify_nodes
	.section	.rodata
.LC557:
	.string	"value >= sw->min"
.LC558:
	.string	"value <= sw->max"
	.text
	.type	get_header, @function
get_header:
.LFB513:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L3431
	movl	$0, %eax
	jmp	.L3432
.L3431:
	movq	-32(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -32(%rbp)
	setnb	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15836, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC557(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -32(%rbp)
	jnb	.L3433
	leaq	__PRETTY_FUNCTION__.12846(%rip), %rcx
	movl	$15836, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC557(%rip), %rdi
	call	__assert_fail@PLT
.L3433:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -32(%rbp)
	setbe	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15837, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC558(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -32(%rbp)
	jbe	.L3434
	leaq	__PRETTY_FUNCTION__.12846(%rip), %rcx
	movl	$15837, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC558(%rip), %rdi
	call	__assert_fail@PLT
.L3434:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-32(%rbp), %rdx
	subq	%rax, %rdx
	movq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	-8(%rbp), %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
.L3432:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE513:
	.size	get_header, .-get_header
	.section	.rodata
.LC559:
	.string	"&nodes[element] == node"
.LC560:
	.string	"node->prev == -1"
.LC561:
	.string	"node->prev != -1"
.LC562:
	.string	"next >= 0"
.LC563:
	.string	"hdr->count >= 0"
	.text
	.type	remove_node, @function
remove_node:
.LFB514:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	cmpq	%rax, -56(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15851, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC559(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	cmpq	%rax, -56(%rbp)
	je	.L3436
	leaq	__PRETTY_FUNCTION__.12854(%rip), %rcx
	movl	$15851, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC559(%rip), %rdi
	call	__assert_fail@PLT
.L3436:
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -60(%rbp)
	jne	.L3437
	movq	-56(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$-1, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15855, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC560(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$-1, %eax
	je	.L3438
	leaq	__PRETTY_FUNCTION__.12854(%rip), %rcx
	movl	$15855, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC560(%rip), %rdi
	call	__assert_fail@PLT
.L3438:
	movq	-56(%rbp), %rax
	movl	(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, (%rax)
	jmp	.L3439
.L3437:
	movq	-56(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$-1, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15861, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC561(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	$-1, %eax
	jne	.L3440
	leaq	__PRETTY_FUNCTION__.12854(%rip), %rcx
	movl	$15861, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC561(%rip), %rdi
	call	__assert_fail@PLT
.L3440:
	movq	-56(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %edx
	movq	-16(%rbp), %rax
	movl	%edx, (%rax)
.L3439:
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	cmpl	$-1, -20(%rbp)
	je	.L3441
	movl	-20(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15869, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC562(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -20(%rbp)
	jns	.L3442
	leaq	__PRETTY_FUNCTION__.12854(%rip), %rcx
	movl	$15869, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC562(%rip), %rdi
	call	__assert_fail@PLT
.L3442:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-56(%rbp), %rax
	movl	4(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 4(%rax)
.L3441:
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	leal	-1(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15878, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC563(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	jns	.L3444
	leaq	__PRETTY_FUNCTION__.12854(%rip), %rcx
	movl	$15878, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC563(%rip), %rdi
	call	__assert_fail@PLT
.L3444:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE514:
	.size	remove_node, .-remove_node
	.section	.rodata
.LC564:
	.string	"min <= max"
.LC565:
	.string	"min > 0"
	.text
	.globl	flecs_switch_new
	.type	flecs_switch_new, @function
flecs_switch_new:
.LFB515:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movq	-56(%rbp), %rax
	cmpq	-64(%rbp), %rax
	setbe	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15886, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC564(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	cmpq	-64(%rbp), %rax
	jbe	.L3446
	leaq	__PRETTY_FUNCTION__.12863(%rip), %rcx
	movl	$15886, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC564(%rip), %rdi
	call	__assert_fail@PLT
.L3446:
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15890, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC565(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L3447
	leaq	__PRETTY_FUNCTION__.12863(%rip), %rcx
	movl	$15890, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC565(%rip), %rdi
	call	__assert_fail@PLT
.L3447:
	movq	16+ecs_os_api(%rip), %rax
	movl	$40, %edi
	call	*%rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-64(%rbp), %rax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-64(%rbp), %rax
	movl	%eax, %edx
	movq	-56(%rbp), %rax
	subl	%eax, %edx
	movl	%edx, %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	32+ecs_os_api(%rip), %rax
	movl	-36(%rbp), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-24(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movl	-68(%rbp), %eax
	movl	%eax, %edx
	movl	$16, %esi
	movl	$8, %edi
	call	_ecs_vector_new
	movq	-24(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movl	-68(%rbp), %eax
	movl	%eax, %edx
	movl	$16, %esi
	movl	$8, %edi
	call	_ecs_vector_new
	movq	-24(%rbp), %rdx
	movq	%rax, 32(%rdx)
	movq	$0, -32(%rbp)
	jmp	.L3448
.L3449:
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	-32(%rbp), %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	-32(%rbp), %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movl	$0, 4(%rax)
	addq	$1, -32(%rbp)
.L3448:
	movl	-36(%rbp), %eax
	cltq
	cmpq	%rax, -32(%rbp)
	jl	.L3449
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movq	$0, -32(%rbp)
	jmp	.L3450
.L3451:
	movq	-32(%rbp), %rax
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movl	$-1, 4(%rax)
	movq	-32(%rbp), %rax
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movl	$-1, (%rax)
	movq	-32(%rbp), %rax
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	$0, (%rax)
	addq	$1, -32(%rbp)
.L3450:
	movl	-68(%rbp), %eax
	cltq
	cmpq	%rax, -32(%rbp)
	jl	.L3451
	movq	-24(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE515:
	.size	flecs_switch_new, .-flecs_switch_new
	.globl	flecs_switch_free
	.type	flecs_switch_free, @function
flecs_switch_free:
.LFB516:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE516:
	.size	flecs_switch_free, .-flecs_switch_free
	.globl	flecs_switch_add
	.type	flecs_switch_add, @function
flecs_switch_add:
.LFB517:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	addq	$24, %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$32, %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	$-1, 4(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, (%rax)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE517:
	.size	flecs_switch_add, .-flecs_switch_add
	.globl	flecs_switch_set_count
	.type	flecs_switch_set_count, @function
flecs_switch_set_count:
.LFB518:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.L3460
	movq	-40(%rbp), %rax
	leaq	24(%rax), %rdi
	movl	-44(%rbp), %eax
	movl	%eax, %ecx
	movl	$16, %edx
	movl	$8, %esi
	call	_ecs_vector_set_count
	movq	-40(%rbp), %rax
	leaq	32(%rax), %rdi
	movl	-44(%rbp), %eax
	movl	%eax, %ecx
	movl	$16, %edx
	movl	$8, %esi
	call	_ecs_vector_set_count
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.L3458
.L3459:
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$-1, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$-1, (%rax)
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	$0, (%rax)
	addl	$1, -32(%rbp)
.L3458:
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L3459
	jmp	.L3455
.L3460:
	nop
.L3455:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE518:
	.size	flecs_switch_set_count, .-flecs_switch_set_count
	.globl	flecs_switch_ensure
	.type	flecs_switch_ensure, @function
flecs_switch_ensure:
.LFB519:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.L3464
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_set_count
	jmp	.L3461
.L3464:
	nop
.L3461:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE519:
	.size	flecs_switch_ensure, .-flecs_switch_ensure
	.globl	flecs_switch_addn
	.type	flecs_switch_addn, @function
flecs_switch_addn:
.LFB520:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %edx
	movl	-28(%rbp), %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_set_count
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE520:
	.size	flecs_switch_addn, .-flecs_switch_addn
	.section	.rodata
	.align 8
.LC566:
	.string	"element < ecs_vector_count(sw->nodes)"
	.align 8
.LC567:
	.string	"element < ecs_vector_count(sw->values)"
.LC568:
	.string	"element >= 0"
.LC569:
	.string	"dst_hdr != NULL || !value"
	.align 8
.LC570:
	.string	"dst_hdr != ((void *)0) || !value"
.LC571:
	.string	"first >= 0"
	.text
	.globl	flecs_switch_set
	.type	flecs_switch_set, @function
flecs_switch_set:
.LFB521:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movl	%esi, -76(%rbp)
	movq	%rdx, -88(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15989, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC202(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L3467
	leaq	__PRETTY_FUNCTION__.12910(%rip), %rcx
	movl	$15989, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC203(%rip), %rdi
	call	__assert_fail@PLT
.L3467:
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -76(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15990, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC566(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -76(%rbp)
	jl	.L3468
	leaq	__PRETTY_FUNCTION__.12910(%rip), %rcx
	movl	$15990, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC566(%rip), %rdi
	call	__assert_fail@PLT
.L3468:
	movq	-72(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -76(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15991, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC567(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -76(%rbp)
	jl	.L3469
	leaq	__PRETTY_FUNCTION__.12910(%rip), %rcx
	movl	$15991, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC567(%rip), %rdi
	call	__assert_fail@PLT
.L3469:
	movl	-76(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$15992, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC568(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -76(%rbp)
	jns	.L3470
	leaq	__PRETTY_FUNCTION__.12910(%rip), %rcx
	movl	$15992, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC568(%rip), %rdi
	call	__assert_fail@PLT
.L3470:
	movq	-72(%rbp), %rax
	movq	32(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -56(%rbp)
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	cmpq	-88(%rbp), %rax
	je	.L3480
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-48(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_header
	movq	%rax, -24(%rbp)
	movq	-88(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_header
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	verify_nodes
	movq	-40(%rbp), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	verify_nodes
	cmpq	$0, -16(%rbp)
	jne	.L3473
	cmpq	$0, -88(%rbp)
	jne	.L3474
.L3473:
	movl	$1, %eax
	jmp	.L3475
.L3474:
	movl	$0, %eax
.L3475:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16013, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC569(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L3476
	cmpq	$0, -88(%rbp)
	je	.L3476
	leaq	__PRETTY_FUNCTION__.12910(%rip), %rcx
	movl	$16013, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC570(%rip), %rdi
	call	__assert_fail@PLT
.L3476:
	cmpq	$0, -24(%rbp)
	je	.L3477
	movl	-76(%rbp), %ecx
	movq	-32(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	remove_node
.L3477:
	movq	-32(%rbp), %rax
	movl	$-1, 4(%rax)
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rax, %rdx
	movq	-88(%rbp), %rax
	movq	%rax, (%rdx)
	cmpq	$0, -16(%rbp)
	je	.L3466
	movq	-16(%rbp), %rax
	movl	(%rax), %edx
	movq	-32(%rbp), %rax
	movl	%edx, (%rax)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -60(%rbp)
	cmpl	$-1, -60(%rbp)
	je	.L3478
	movl	-60(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16029, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC571(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -60(%rbp)
	jns	.L3479
	leaq	__PRETTY_FUNCTION__.12910(%rip), %rcx
	movl	$16029, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC571(%rip), %rdi
	call	__assert_fail@PLT
.L3479:
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	-76(%rbp), %edx
	movl	%edx, 4(%rax)
.L3478:
	movq	-16(%rbp), %rax
	movl	-76(%rbp), %edx
	movl	%edx, (%rax)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	leal	1(%rax), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 4(%rax)
	jmp	.L3466
.L3480:
	nop
.L3466:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE521:
	.size	flecs_switch_set, .-flecs_switch_set
	.section	.rodata
.LC572:
	.string	"hdr != NULL"
.LC573:
	.string	"hdr != ((void *)0)"
.LC574:
	.string	"hdr->element == last_elem"
	.text
	.globl	flecs_switch_remove
	.type	flecs_switch_remove, @function
flecs_switch_remove:
.LFB522:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -104(%rbp)
	movl	%esi, -108(%rbp)
	cmpq	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16043, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC202(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -104(%rbp)
	jne	.L3482
	leaq	__PRETTY_FUNCTION__.12923(%rip), %rcx
	movl	$16043, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC203(%rip), %rdi
	call	__assert_fail@PLT
.L3482:
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -108(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16044, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC566(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -108(%rbp)
	jl	.L3483
	leaq	__PRETTY_FUNCTION__.12923(%rip), %rcx
	movl	$16044, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC566(%rip), %rdi
	call	__assert_fail@PLT
.L3483:
	movl	-108(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16045, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC568(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -108(%rbp)
	jns	.L3484
	leaq	__PRETTY_FUNCTION__.12923(%rip), %rcx
	movl	$16045, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC568(%rip), %rdi
	call	__assert_fail@PLT
.L3484:
	movq	-104(%rbp), %rax
	movq	32(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -72(%rbp)
	movl	-108(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -56(%rbp)
	movl	-108(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L3485
	movq	-64(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_header
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16055, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC572(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L3486
	leaq	__PRETTY_FUNCTION__.12923(%rip), %rcx
	movl	$16055, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC573(%rip), %rdi
	call	__assert_fail@PLT
.L3486:
	movq	-56(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	verify_nodes
	movl	-108(%rbp), %ecx
	movq	-48(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	remove_node
.L3485:
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	subl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	cmpl	-108(%rbp), %eax
	je	.L3487
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_last
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -76(%rbp)
	cmpl	$-1, -80(%rbp)
	je	.L3488
	movl	-80(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	-108(%rbp), %edx
	movl	%edx, 4(%rax)
.L3488:
	cmpl	$-1, -76(%rbp)
	je	.L3489
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	-108(%rbp), %edx
	movl	%edx, (%rax)
	jmp	.L3487
.L3489:
	movl	-84(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_header
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L3487
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$-1, %eax
	je	.L3487
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -84(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16076, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC574(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -84(%rbp)
	je	.L3490
	leaq	__PRETTY_FUNCTION__.12923(%rip), %rcx
	movl	$16076, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC574(%rip), %rdi
	call	__assert_fail@PLT
.L3490:
	movq	-16(%rbp), %rax
	movl	-108(%rbp), %edx
	movl	%edx, (%rax)
.L3487:
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movl	-108(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_remove
	movq	-104(%rbp), %rax
	movq	32(%rax), %rax
	movl	-108(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_remove
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE522:
	.size	flecs_switch_remove, .-flecs_switch_remove
	.globl	flecs_switch_get
	.type	flecs_switch_get, @function
flecs_switch_get:
.LFB523:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16092, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC202(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3492
	leaq	__PRETTY_FUNCTION__.12940(%rip), %rcx
	movl	$16092, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC203(%rip), %rdi
	call	__assert_fail@PLT
.L3492:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -28(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16093, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC566(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -28(%rbp)
	jl	.L3493
	leaq	__PRETTY_FUNCTION__.12940(%rip), %rcx
	movl	$16093, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC566(%rip), %rdi
	call	__assert_fail@PLT
.L3493:
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -28(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16094, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC567(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -28(%rbp)
	jl	.L3494
	leaq	__PRETTY_FUNCTION__.12940(%rip), %rcx
	movl	$16094, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC567(%rip), %rdi
	call	__assert_fail@PLT
.L3494:
	movl	-28(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16095, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC568(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -28(%rbp)
	jns	.L3495
	leaq	__PRETTY_FUNCTION__.12940(%rip), %rcx
	movl	$16095, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC568(%rip), %rdi
	call	__assert_fail@PLT
.L3495:
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE523:
	.size	flecs_switch_get, .-flecs_switch_get
	.globl	flecs_switch_values
	.type	flecs_switch_values, @function
flecs_switch_values:
.LFB524:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE524:
	.size	flecs_switch_values, .-flecs_switch_values
	.globl	flecs_switch_case_count
	.type	flecs_switch_case_count, @function
flecs_switch_case_count:
.LFB525:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_header
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L3500
	movl	$0, %eax
	jmp	.L3501
.L3500:
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
.L3501:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE525:
	.size	flecs_switch_case_count, .-flecs_switch_case_count
	.globl	flecs_switch_swap
	.type	flecs_switch_swap, @function
flecs_switch_swap:
.LFB526:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_get
	movq	%rax, -16(%rbp)
	movl	-32(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_get
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rdx
	movl	-32(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_switch_set
	movq	-8(%rbp), %rdx
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_switch_set
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE526:
	.size	flecs_switch_swap, .-flecs_switch_swap
	.section	.rodata
.LC575:
	.string	"(uint32_t)value <= sw->max"
.LC576:
	.string	"(uint32_t)value >= sw->min"
	.text
	.globl	flecs_switch_first
	.type	flecs_switch_first, @function
flecs_switch_first:
.LFB527:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16135, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC202(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3504
	leaq	__PRETTY_FUNCTION__.12961(%rip), %rcx
	movl	$16135, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC203(%rip), %rdi
	call	__assert_fail@PLT
.L3504:
	movq	-32(%rbp), %rax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	setbe	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16136, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC575(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, %rdx
	jbe	.L3505
	leaq	__PRETTY_FUNCTION__.12961(%rip), %rcx
	movl	$16136, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC575(%rip), %rdi
	call	__assert_fail@PLT
.L3505:
	movq	-32(%rbp), %rax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, %rdx
	setnb	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16137, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC576(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, %rdx
	jnb	.L3506
	leaq	__PRETTY_FUNCTION__.12961(%rip), %rcx
	movl	$16137, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC576(%rip), %rdi
	call	__assert_fail@PLT
.L3506:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_header
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16140, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC572(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3507
	leaq	__PRETTY_FUNCTION__.12961(%rip), %rcx
	movl	$16140, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC573(%rip), %rdi
	call	__assert_fail@PLT
.L3507:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE527:
	.size	flecs_switch_first, .-flecs_switch_first
	.globl	flecs_switch_next
	.type	flecs_switch_next, @function
flecs_switch_next:
.LFB528:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16149, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC202(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3510
	leaq	__PRETTY_FUNCTION__.12967(%rip), %rcx
	movl	$16149, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC203(%rip), %rdi
	call	__assert_fail@PLT
.L3510:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -28(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16150, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC566(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -28(%rbp)
	jl	.L3511
	leaq	__PRETTY_FUNCTION__.12967(%rip), %rcx
	movl	$16150, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC566(%rip), %rdi
	call	__assert_fail@PLT
.L3511:
	movl	-28(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16151, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC568(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -28(%rbp)
	jns	.L3512
	leaq	__PRETTY_FUNCTION__.12967(%rip), %rcx
	movl	$16151, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC568(%rip), %rdi
	call	__assert_fail@PLT
.L3512:
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE528:
	.size	flecs_switch_next, .-flecs_switch_next
	.type	hashlittle2, @function
hashlittle2:
.LFB529:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	-80(%rbp), %rax
	movl	%eax, %edx
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	addl	%edx, %eax
	subl	$559038737, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	addl	%eax, -52(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	andl	$3, %eax
	testq	%rax, %rax
	jne	.L3515
	movq	-72(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.L3516
.L3517:
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	addl	%eax, -60(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movl	(%rax), %eax
	addl	%eax, -56(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movl	(%rax), %eax
	addl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	subl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	roll	$4, %eax
	xorl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	addl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	subl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	roll	$6, %eax
	xorl	%eax, -56(%rbp)
	movl	-52(%rbp), %eax
	addl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	subl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	roll	$8, %eax
	xorl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	%eax, -56(%rbp)
	movl	-52(%rbp), %eax
	subl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	roll	$16, %eax
	xorl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	addl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	subl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	rorl	$13, %eax
	xorl	%eax, -56(%rbp)
	movl	-52(%rbp), %eax
	addl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	subl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	roll	$4, %eax
	xorl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	%eax, -56(%rbp)
	subq	$12, -80(%rbp)
	addq	$12, -40(%rbp)
.L3516:
	cmpq	$12, -80(%rbp)
	ja	.L3517
	movq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
	cmpq	$12, -80(%rbp)
	ja	.L3534
	movq	-80(%rbp), %rax
	leaq	0(,%rax,4), %rdx
	leaq	.L3520(%rip), %rax
	movl	(%rdx,%rax), %eax
	cltq
	leaq	.L3520(%rip), %rdx
	addq	%rdx, %rax
	notrack jmp	*%rax
	.section	.rodata
	.align 4
	.align 4
.L3520:
	.long	.L3532-.L3520
	.long	.L3531-.L3520
	.long	.L3530-.L3520
	.long	.L3529-.L3520
	.long	.L3528-.L3520
	.long	.L3527-.L3520
	.long	.L3526-.L3520
	.long	.L3525-.L3520
	.long	.L3524-.L3520
	.long	.L3523-.L3520
	.long	.L3522-.L3520
	.long	.L3521-.L3520
	.long	.L3519-.L3520
	.text
.L3519:
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movl	(%rax), %eax
	addl	%eax, -52(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movl	(%rax), %eax
	addl	%eax, -56(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3521:
	movq	-8(%rbp), %rax
	addq	$10, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -52(%rbp)
.L3522:
	movq	-8(%rbp), %rax
	addq	$9, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	addl	%eax, -52(%rbp)
.L3523:
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -52(%rbp)
.L3524:
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movl	(%rax), %eax
	addl	%eax, -56(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3525:
	movq	-8(%rbp), %rax
	addq	$6, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -56(%rbp)
.L3526:
	movq	-8(%rbp), %rax
	addq	$5, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	addl	%eax, -56(%rbp)
.L3527:
	movq	-8(%rbp), %rax
	addq	$4, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -56(%rbp)
.L3528:
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3529:
	movq	-8(%rbp), %rax
	addq	$2, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -60(%rbp)
.L3530:
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	addl	%eax, -60(%rbp)
.L3531:
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3532:
	movq	-88(%rbp), %rax
	movl	-52(%rbp), %edx
	movl	%edx, (%rax)
	movq	-96(%rbp), %rax
	movl	-56(%rbp), %edx
	movl	%edx, (%rax)
	jmp	.L3514
.L3515:
	movq	-48(%rbp), %rax
	andl	$1, %eax
	testq	%rax, %rax
	jne	.L3535
	movq	-72(%rbp), %rax
	movq	%rax, -32(%rbp)
	jmp	.L3536
.L3537:
	movq	-32(%rbp), %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$2, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$4, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$6, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$10, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	subl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	roll	$4, %eax
	xorl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	addl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	subl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	roll	$6, %eax
	xorl	%eax, -56(%rbp)
	movl	-52(%rbp), %eax
	addl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	subl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	roll	$8, %eax
	xorl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	%eax, -56(%rbp)
	movl	-52(%rbp), %eax
	subl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	roll	$16, %eax
	xorl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	addl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	subl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	rorl	$13, %eax
	xorl	%eax, -56(%rbp)
	movl	-52(%rbp), %eax
	addl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	subl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	roll	$4, %eax
	xorl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	%eax, -56(%rbp)
	subq	$12, -80(%rbp)
	addq	$12, -32(%rbp)
.L3536:
	cmpq	$12, -80(%rbp)
	ja	.L3537
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$12, -80(%rbp)
	ja	.L3534
	movq	-80(%rbp), %rax
	leaq	0(,%rax,4), %rdx
	leaq	.L3540(%rip), %rax
	movl	(%rdx,%rax), %eax
	cltq
	leaq	.L3540(%rip), %rdx
	addq	%rdx, %rax
	notrack jmp	*%rax
	.section	.rodata
	.align 4
	.align 4
.L3540:
	.long	.L3552-.L3540
	.long	.L3551-.L3540
	.long	.L3550-.L3540
	.long	.L3549-.L3540
	.long	.L3548-.L3540
	.long	.L3547-.L3540
	.long	.L3546-.L3540
	.long	.L3545-.L3540
	.long	.L3544-.L3540
	.long	.L3543-.L3540
	.long	.L3542-.L3540
	.long	.L3541-.L3540
	.long	.L3539-.L3540
	.text
.L3539:
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$10, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -52(%rbp)
	movq	-32(%rbp), %rax
	addq	$4, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$6, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -56(%rbp)
	movq	-32(%rbp), %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$2, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3541:
	movq	-16(%rbp), %rax
	addq	$10, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -52(%rbp)
.L3542:
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	addl	%eax, -52(%rbp)
	movq	-32(%rbp), %rax
	addq	$4, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$6, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -56(%rbp)
	movq	-32(%rbp), %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$2, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3543:
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -52(%rbp)
.L3544:
	movq	-32(%rbp), %rax
	addq	$4, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$6, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -56(%rbp)
	movq	-32(%rbp), %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$2, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3545:
	movq	-16(%rbp), %rax
	addq	$6, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -56(%rbp)
.L3546:
	movq	-32(%rbp), %rax
	addq	$4, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	addl	%eax, -56(%rbp)
	movq	-32(%rbp), %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$2, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3547:
	movq	-16(%rbp), %rax
	addq	$4, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -56(%rbp)
.L3548:
	movq	-32(%rbp), %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	movq	-32(%rbp), %rdx
	addq	$2, %rdx
	movzwl	(%rdx), %edx
	movzwl	%dx, %edx
	sall	$16, %edx
	addl	%edx, %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3549:
	movq	-16(%rbp), %rax
	addq	$2, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -60(%rbp)
.L3550:
	movq	-32(%rbp), %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3551:
	movq	-16(%rbp), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3552:
	movq	-88(%rbp), %rax
	movl	-52(%rbp), %edx
	movl	%edx, (%rax)
	movq	-96(%rbp), %rax
	movl	-56(%rbp), %edx
	movl	%edx, (%rax)
	jmp	.L3514
.L3535:
	movq	-72(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	.L3553
.L3554:
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -60(%rbp)
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	addl	%eax, -60(%rbp)
	movq	-24(%rbp), %rax
	addq	$2, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -60(%rbp)
	movq	-24(%rbp), %rax
	addq	$3, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$24, %eax
	addl	%eax, -60(%rbp)
	movq	-24(%rbp), %rax
	addq	$4, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	addq	$5, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	addl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	addq	$6, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	addq	$7, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$24, %eax
	addl	%eax, -56(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$9, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	addl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$10, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$11, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$24, %eax
	addl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	subl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	roll	$4, %eax
	xorl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	addl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	subl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	roll	$6, %eax
	xorl	%eax, -56(%rbp)
	movl	-52(%rbp), %eax
	addl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	subl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	roll	$8, %eax
	xorl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	%eax, -56(%rbp)
	movl	-52(%rbp), %eax
	subl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	roll	$16, %eax
	xorl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	addl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	subl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	rorl	$13, %eax
	xorl	%eax, -56(%rbp)
	movl	-52(%rbp), %eax
	addl	%eax, -60(%rbp)
	movl	-56(%rbp), %eax
	subl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	roll	$4, %eax
	xorl	%eax, -52(%rbp)
	movl	-60(%rbp), %eax
	addl	%eax, -56(%rbp)
	subq	$12, -80(%rbp)
	addq	$12, -24(%rbp)
.L3553:
	cmpq	$12, -80(%rbp)
	ja	.L3554
	cmpq	$12, -80(%rbp)
	ja	.L3534
	movq	-80(%rbp), %rax
	leaq	0(,%rax,4), %rdx
	leaq	.L3556(%rip), %rax
	movl	(%rdx,%rax), %eax
	cltq
	leaq	.L3556(%rip), %rdx
	addq	%rdx, %rax
	notrack jmp	*%rax
	.section	.rodata
	.align 4
	.align 4
.L3556:
	.long	.L3568-.L3556
	.long	.L3567-.L3556
	.long	.L3566-.L3556
	.long	.L3565-.L3556
	.long	.L3564-.L3556
	.long	.L3563-.L3556
	.long	.L3562-.L3556
	.long	.L3561-.L3556
	.long	.L3560-.L3556
	.long	.L3559-.L3556
	.long	.L3558-.L3556
	.long	.L3557-.L3556
	.long	.L3555-.L3556
	.text
.L3555:
	movq	-24(%rbp), %rax
	addq	$11, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$24, %eax
	addl	%eax, -52(%rbp)
.L3557:
	movq	-24(%rbp), %rax
	addq	$10, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -52(%rbp)
.L3558:
	movq	-24(%rbp), %rax
	addq	$9, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	addl	%eax, -52(%rbp)
.L3559:
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -52(%rbp)
.L3560:
	movq	-24(%rbp), %rax
	addq	$7, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$24, %eax
	addl	%eax, -56(%rbp)
.L3561:
	movq	-24(%rbp), %rax
	addq	$6, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -56(%rbp)
.L3562:
	movq	-24(%rbp), %rax
	addq	$5, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	addl	%eax, -56(%rbp)
.L3563:
	movq	-24(%rbp), %rax
	addq	$4, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -56(%rbp)
.L3564:
	movq	-24(%rbp), %rax
	addq	$3, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$24, %eax
	addl	%eax, -60(%rbp)
.L3565:
	movq	-24(%rbp), %rax
	addq	$2, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$16, %eax
	addl	%eax, -60(%rbp)
.L3566:
	movq	-24(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	sall	$8, %eax
	addl	%eax, -60(%rbp)
.L3567:
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	movzbl	%al, %eax
	addl	%eax, -60(%rbp)
	jmp	.L3534
.L3568:
	movq	-88(%rbp), %rax
	movl	-52(%rbp), %edx
	movl	%edx, (%rax)
	movq	-96(%rbp), %rax
	movl	-56(%rbp), %edx
	movl	%edx, (%rax)
	jmp	.L3514
.L3534:
	movl	-56(%rbp), %eax
	xorl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	roll	$14, %eax
	subl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	xorl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	roll	$11, %eax
	subl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	xorl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	rorl	$7, %eax
	subl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	xorl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	roll	$16, %eax
	subl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	xorl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	roll	$4, %eax
	subl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	xorl	%eax, -56(%rbp)
	movl	-60(%rbp), %eax
	roll	$14, %eax
	subl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	xorl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	rorl	$8, %eax
	subl	%eax, -52(%rbp)
	movq	-88(%rbp), %rax
	movl	-52(%rbp), %edx
	movl	%edx, (%rax)
	movq	-96(%rbp), %rax
	movl	-56(%rbp), %edx
	movl	%edx, (%rax)
.L3514:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE529:
	.size	hashlittle2, .-hashlittle2
	.globl	flecs_hash
	.type	flecs_hash, @function
flecs_hash:
.LFB530:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
	movq	%rax, %rsi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	hashlittle2
	movl	-16(%rbp), %eax
	movl	%eax, %edx
	movl	-12(%rbp), %eax
	movl	%eax, %eax
	salq	$32, %rax
	orq	%rdx, %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L3572
	call	__stack_chk_fail@PLT
.L3572:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE530:
	.size	flecs_hash, .-flecs_hash
	.type	resolve_identifier, @function
resolve_identifier:
.LFB531:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L3574
	movl	$0, %eax
	jmp	.L3575
.L3574:
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	jne	.L3576
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_identifier_is_var
	testb	%al, %al
	je	.L3576
	movq	-48(%rbp), %rax
	movl	$2, 16(%rax)
.L3576:
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	$2, %eax
	je	.L3577
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_identifier_is_0
	testb	%al, %al
	je	.L3578
	movq	-48(%rbp), %rax
	movq	$0, (%rax)
	jmp	.L3577
.L3578:
	movq	-48(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-24(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_lookup_symbol
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L3579
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-40(%rbp), %rsi
	movq	-32(%rbp), %rax
	movq	%rdx, %r8
	leaq	.LC470(%rip), %rcx
	movl	$0, %edx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L3579:
	movq	-48(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
.L3577:
	movl	$0, %eax
.L3575:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE531:
	.size	resolve_identifier, .-resolve_identifier
	.globl	ecs_identifier_is_0
	.type	ecs_identifier_is_0, @function
ecs_identifier_is_0:
.LFB532:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$48, %al
	jne	.L3581
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L3581
	movl	$1, %eax
	jmp	.L3582
.L3581:
	movl	$0, %eax
.L3582:
	andl	$1, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE532:
	.size	ecs_identifier_is_0, .-ecs_identifier_is_0
	.globl	ecs_identifier_is_var
	.type	ecs_identifier_is_var, @function
ecs_identifier_is_var:
.LFB533:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$95, %al
	jne	.L3585
	movl	$1, %eax
	jmp	.L3586
.L3585:
	call	__ctype_b_loc@PLT
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	movsbq	%al, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	je	.L3587
	movl	$0, %eax
	jmp	.L3586
.L3587:
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	jmp	.L3588
.L3590:
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-9(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L3589
	cmpb	$95, -9(%rbp)
	je	.L3589
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-9(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	jne	.L3589
	movl	$0, %eax
	jmp	.L3586
.L3589:
	addq	$1, -8(%rbp)
.L3588:
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -9(%rbp)
	cmpb	$0, -9(%rbp)
	jne	.L3590
	movl	$1, %eax
.L3586:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE533:
	.size	ecs_identifier_is_var, .-ecs_identifier_is_var
	.section	.rodata
.LC577:
	.string	"term->pred.entity != 0"
.LC578:
	.string	"term->args[1].entity != 0"
	.text
	.type	term_resolve_ids, @function
term_resolve_ids:
.LFB534:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rax
	leaq	16(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	resolve_identifier
	testl	%eax, %eax
	je	.L3592
	movl	$-1, %eax
	jmp	.L3593
.L3592:
	movq	-32(%rbp), %rax
	leaq	64(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	resolve_identifier
	testl	%eax, %eax
	je	.L3594
	movl	$-1, %eax
	jmp	.L3593
.L3594:
	movq	-32(%rbp), %rax
	leaq	112(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	resolve_identifier
	testl	%eax, %eax
	je	.L3595
	movl	$-1, %eax
	jmp	.L3593
.L3595:
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	testq	%rax, %rax
	jne	.L3596
	movq	-32(%rbp), %rax
	movq	168(%rax), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L3597
.L3596:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16576, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC577(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L3598
	leaq	__PRETTY_FUNCTION__.13068(%rip), %rcx
	movl	$16576, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC577(%rip), %rdi
	call	__assert_fail@PLT
.L3598:
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16577, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC578(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	testq	%rax, %rax
	jne	.L3599
	leaq	__PRETTY_FUNCTION__.13068(%rip), %rcx
	movl	$16577, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC578(%rip), %rdi
	call	__assert_fail@PLT
.L3599:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, (%rax)
	jmp	.L3600
.L3597:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, (%rax)
.L3600:
	movl	$0, %eax
.L3593:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE534:
	.size	term_resolve_ids, .-term_resolve_ids
	.section	.rodata
.LC579:
	.string	"id_rel != 0"
.LC580:
	.string	"id_obj != 0"
.LC581:
	.string	"pattern_rel != 0"
.LC582:
	.string	"pattern_obj != 0"
	.text
	.globl	ecs_id_match
	.type	ecs_id_match, @function
ecs_id_match:
.LFB535:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jne	.L3602
	movl	$1, %eax
	jmp	.L3603
.L3602:
	movabsq	$-72057594037927936, %rax
	andq	-48(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L3604
	movabsq	$-72057594037927936, %rax
	andq	-40(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	je	.L3605
	movl	$0, %eax
	jmp	.L3603
.L3605:
	movq	-40(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -8(%rbp)
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16604, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC579(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L3606
	leaq	__PRETTY_FUNCTION__.13077(%rip), %rcx
	movl	$16604, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC579(%rip), %rdi
	call	__assert_fail@PLT
.L3606:
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16605, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC580(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L3607
	leaq	__PRETTY_FUNCTION__.13077(%rip), %rcx
	movl	$16605, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC580(%rip), %rdi
	call	__assert_fail@PLT
.L3607:
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16607, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC581(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L3608
	leaq	__PRETTY_FUNCTION__.13077(%rip), %rcx
	movl	$16607, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC581(%rip), %rdi
	call	__assert_fail@PLT
.L3608:
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16608, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC582(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L3609
	leaq	__PRETTY_FUNCTION__.13077(%rip), %rcx
	movl	$16608, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC582(%rip), %rdi
	call	__assert_fail@PLT
.L3609:
	movl	$266, %eax
	cmpq	%rax, -16(%rbp)
	jne	.L3610
	movl	$266, %eax
	cmpq	%rax, -8(%rbp)
	je	.L3611
	movq	-8(%rbp), %rax
	cmpq	-24(%rbp), %rax
	jne	.L3612
.L3611:
	movl	$1, %eax
	jmp	.L3603
.L3610:
	movl	$266, %eax
	cmpq	%rax, -8(%rbp)
	jne	.L3612
	movq	-16(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jne	.L3612
	movl	$1, %eax
	jmp	.L3603
.L3604:
	movq	-40(%rbp), %rax
	xorq	-48(%rbp), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rdx, %rax
	testq	%rax, %rax
	je	.L3613
	movl	$0, %eax
	jmp	.L3603
.L3613:
	movabsq	$72057594037927935, %rax
	andq	-48(%rbp), %rax
	movl	$266, %edx
	cmpq	%rdx, %rax
	jne	.L3612
	movl	$1, %eax
	jmp	.L3603
.L3612:
	movl	$0, %eax
.L3603:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE535:
	.size	ecs_id_match, .-ecs_id_match
	.globl	ecs_id_is_pair
	.type	ecs_id_is_pair, @function
ecs_id_is_pair:
.LFB536:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	sete	%al
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE536:
	.size	ecs_id_is_pair, .-ecs_id_is_pair
	.globl	ecs_id_is_wildcard
	.type	ecs_id_is_wildcard, @function
ecs_id_is_wildcard:
.LFB537:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movl	$266, %eax
	cmpq	%rax, -8(%rbp)
	jne	.L3617
	movl	$1, %eax
	jmp	.L3618
.L3617:
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L3619
	movq	-8(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$266, %edx
	cmpq	%rdx, %rax
	je	.L3620
	movq	-8(%rbp), %rax
	movl	%eax, %edx
	movl	$266, %eax
	cmpq	%rax, %rdx
	jne	.L3621
.L3620:
	movl	$1, %eax
	jmp	.L3622
.L3621:
	movl	$0, %eax
.L3622:
	andl	$1, %eax
	jmp	.L3618
.L3619:
	movl	$0, %eax
.L3618:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE537:
	.size	ecs_id_is_wildcard, .-ecs_id_is_wildcard
	.globl	ecs_term_id_is_set
	.type	ecs_term_id_is_set, @function
ecs_term_id_is_set:
.LFB538:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L3624
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L3625
.L3624:
	movl	$1, %eax
	jmp	.L3626
.L3625:
	movl	$0, %eax
.L3626:
	andl	$1, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE538:
	.size	ecs_term_id_is_set, .-ecs_term_id_is_set
	.globl	ecs_term_is_initialized
	.type	ecs_term_is_initialized, @function
ecs_term_is_initialized:
.LFB539:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$8, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L3629
	movq	-8(%rbp), %rax
	addq	$16, %rax
	movq	%rax, %rdi
	call	ecs_term_id_is_set
	testb	%al, %al
	je	.L3630
.L3629:
	movl	$1, %eax
	jmp	.L3631
.L3630:
	movl	$0, %eax
.L3631:
	andl	$1, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE539:
	.size	ecs_term_is_initialized, .-ecs_term_is_initialized
	.globl	ecs_term_is_trivial
	.type	ecs_term_is_trivial, @function
ecs_term_is_trivial:
.LFB540:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L3634
	movl	$0, %eax
	jmp	.L3635
.L3634:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L3636
	movl	$0, %eax
	jmp	.L3635
.L3636:
	movq	-8(%rbp), %rax
	movzbl	96(%rax), %eax
	testb	%al, %al
	je	.L3637
	movl	$0, %eax
	jmp	.L3635
.L3637:
	movq	-8(%rbp), %rax
	movl	160(%rax), %eax
	testl	%eax, %eax
	je	.L3638
	movq	-8(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$4, %eax
	je	.L3638
	movl	$0, %eax
	jmp	.L3635
.L3638:
	movq	-8(%rbp), %rax
	movq	176(%rax), %rax
	testq	%rax, %rax
	je	.L3639
	movl	$0, %eax
	jmp	.L3635
.L3639:
	movl	$1, %eax
.L3635:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE540:
	.size	ecs_term_is_trivial, .-ecs_term_is_trivial
	.section	.rodata
	.align 8
.LC583:
	.string	"term->id == ecs_pair(term->pred.entity, term->args[1].entity)"
	.align 8
.LC584:
	.string	"term->id == (ECS_PAIR | ((((uint64_t)(term->pred.entity)) << 32) + ((uint32_t)(term->args[1].entity))))"
	.align 8
.LC585:
	.string	"term->pred.entity == (term->id & ECS_COMPONENT_MASK)"
	.align 8
.LC586:
	.string	"term->pred.entity == (term->id & (~(0xFFull << 56)))"
	.align 8
.LC587:
	.string	"!(term->id & ECS_ROLE_MASK) || (term->id & ECS_ROLE_MASK) == term->role"
	.align 8
.LC588:
	.string	"!(term->id & (0xFFull << 56)) || (term->id & (0xFFull << 56)) == term->role"
	.align 8
.LC589:
	.string	"term->role == (term->role & ECS_ROLE_MASK)"
	.align 8
.LC590:
	.string	"term->role == (term->role & (0xFFull << 56))"
	.text
	.globl	ecs_term_finalize
	.type	ecs_term_finalize, @function
ecs_term_finalize:
.LFB541:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3641
	movq	-32(%rbp), %rax
	movq	120(%rax), %rax
	testq	%rax, %rax
	je	.L3642
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	testq	%rax, %rax
	jne	.L3642
	movq	-32(%rbp), %rax
	leaq	112(%rax), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	resolve_identifier
	testl	%eax, %eax
	je	.L3642
	movl	$-1, %eax
	jmp	.L3643
.L3642:
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L3644
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16705, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC577(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L3645
	leaq	__PRETTY_FUNCTION__.13099(%rip), %rcx
	movl	$16705, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC577(%rip), %rdi
	call	__assert_fail@PLT
.L3645:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	salq	$32, %rax
	movq	%rax, %rcx
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movl	%eax, %eax
	addq	%rax, %rcx
	movabsq	$-432345564227567616, %rax
	orq	%rcx, %rax
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16706, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC583(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	salq	$32, %rax
	movq	%rax, %rcx
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movl	%eax, %eax
	addq	%rax, %rcx
	movabsq	$-432345564227567616, %rax
	orq	%rcx, %rax
	cmpq	%rax, %rdx
	je	.L3646
	leaq	__PRETTY_FUNCTION__.13099(%rip), %rcx
	movl	$16706, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC584(%rip), %rdi
	call	__assert_fail@PLT
.L3644:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L3646
	movq	-32(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movabsq	$72057594037927935, %rcx
	andq	%rcx, %rax
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16712, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC585(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movabsq	$72057594037927935, %rcx
	andq	%rcx, %rax
	cmpq	%rax, %rdx
	je	.L3646
	leaq	__PRETTY_FUNCTION__.13099(%rip), %rcx
	movl	$16712, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC586(%rip), %rdi
	call	__assert_fail@PLT
.L3646:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	cmpq	%rax, %rdx
	jne	.L3647
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, 16(%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	%eax, %edx
	movq	-32(%rbp), %rax
	movq	%rdx, 112(%rax)
	jmp	.L3648
.L3647:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movabsq	$72057594037927935, %rdx
	andq	%rax, %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, 16(%rax)
.L3648:
	movq	-32(%rbp), %rax
	movq	168(%rax), %rax
	testq	%rax, %rax
	jne	.L3649
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, 168(%rax)
	jmp	.L3650
.L3649:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rdx, %rax
	testq	%rax, %rax
	je	.L3651
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movq	-32(%rbp), %rax
	movq	168(%rax), %rax
	cmpq	%rax, %rdx
	jne	.L3652
.L3651:
	movl	$1, %eax
	jmp	.L3653
.L3652:
	movl	$0, %eax
.L3653:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16729, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC587(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rdx, %rax
	testq	%rax, %rax
	je	.L3650
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movq	-32(%rbp), %rax
	movq	168(%rax), %rax
	cmpq	%rax, %rdx
	je	.L3650
	leaq	__PRETTY_FUNCTION__.13099(%rip), %rcx
	movl	$16729, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC588(%rip), %rdi
	call	__assert_fail@PLT
.L3641:
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	term_resolve_ids
	testl	%eax, %eax
	je	.L3650
	movl	$-1, %eax
	jmp	.L3643
.L3650:
	movq	-32(%rbp), %rax
	movq	168(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	168(%rax), %rax
	movabsq	$-72057594037927936, %rcx
	andq	%rcx, %rax
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16741, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC589(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	168(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	168(%rax), %rax
	movabsq	$-72057594037927936, %rcx
	andq	%rcx, %rax
	cmpq	%rax, %rdx
	je	.L3654
	leaq	__PRETTY_FUNCTION__.13099(%rip), %rcx
	movl	$16741, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC590(%rip), %rdi
	call	__assert_fail@PLT
.L3654:
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	168(%rax), %rax
	orq	%rax, %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	testq	%rax, %rax
	jne	.L3655
	movq	-32(%rbp), %rax
	movzbl	96(%rax), %eax
	cmpb	$32, %al
	je	.L3655
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	cmpl	$2, %eax
	je	.L3655
	movl	$267, %edx
	movq	-32(%rbp), %rax
	movq	%rdx, 64(%rax)
.L3655:
	movq	-32(%rbp), %rax
	movzbl	96(%rax), %eax
	movzbl	%al, %eax
	andl	$6, %eax
	testl	%eax, %eax
	je	.L3656
	movq	-32(%rbp), %rax
	movq	88(%rax), %rax
	testq	%rax, %rax
	jne	.L3656
	movl	$277, %edx
	movq	-32(%rbp), %rax
	movq	%rdx, 88(%rax)
.L3656:
	movl	$0, %eax
.L3643:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE541:
	.size	ecs_term_finalize, .-ecs_term_finalize
	.globl	ecs_term_copy
	.type	ecs_term_copy, @function
ecs_term_copy:
.LFB542:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-240(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -224(%rbp)
	movq	%rbx, -216(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -208(%rbp)
	movq	%rbx, -200(%rbp)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, -192(%rbp)
	movq	%rbx, -184(%rbp)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, -128(%rbp)
	movq	%rbx, -120(%rbp)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, -112(%rbp)
	movq	%rbx, -104(%rbp)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, -96(%rbp)
	movq	%rbx, -88(%rbp)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, -80(%rbp)
	movq	%rbx, -72(%rbp)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, -64(%rbp)
	movq	%rbx, -56(%rbp)
	movq	184(%rax), %rdx
	movq	176(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	48+ecs_os_api(%rip), %rdx
	movq	-240(%rbp), %rax
	movq	176(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -48(%rbp)
	movq	48+ecs_os_api(%rip), %rdx
	movq	-240(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -200(%rbp)
	movq	48+ecs_os_api(%rip), %rdx
	movq	-240(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -152(%rbp)
	movq	48+ecs_os_api(%rip), %rdx
	movq	-240(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -104(%rbp)
	movq	-232(%rbp), %rax
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-208(%rbp), %rcx
	movq	-200(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-192(%rbp), %rcx
	movq	-184(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-176(%rbp), %rcx
	movq	-168(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 96(%rax)
	movq	%rbx, 104(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 112(%rax)
	movq	%rbx, 120(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 128(%rax)
	movq	%rbx, 136(%rax)
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 144(%rax)
	movq	%rbx, 152(%rax)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, 160(%rax)
	movq	%rbx, 168(%rax)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rbx
	movq	%rcx, 176(%rax)
	movq	%rbx, 184(%rax)
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3659
	call	__stack_chk_fail@PLT
.L3659:
	movq	-232(%rbp), %rax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE542:
	.size	ecs_term_copy, .-ecs_term_copy
	.globl	ecs_term_move
	.type	ecs_term_move, @function
ecs_term_move:
.LFB543:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-240(%rbp), %rax
	movzbl	188(%rax), %eax
	testb	%al, %al
	je	.L3661
	movq	-240(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -224(%rbp)
	movq	%rbx, -216(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -208(%rbp)
	movq	%rbx, -200(%rbp)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, -192(%rbp)
	movq	%rbx, -184(%rbp)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, -128(%rbp)
	movq	%rbx, -120(%rbp)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, -112(%rbp)
	movq	%rbx, -104(%rbp)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, -96(%rbp)
	movq	%rbx, -88(%rbp)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, -80(%rbp)
	movq	%rbx, -72(%rbp)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, -64(%rbp)
	movq	%rbx, -56(%rbp)
	movq	184(%rax), %rdx
	movq	176(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-240(%rbp), %rax
	movq	$0, 176(%rax)
	movq	-240(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-240(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-240(%rbp), %rax
	movq	$0, 120(%rax)
	movq	-232(%rbp), %rax
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-208(%rbp), %rcx
	movq	-200(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-192(%rbp), %rcx
	movq	-184(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-176(%rbp), %rcx
	movq	-168(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-144(%rbp), %rcx
	movq	-136(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, 96(%rax)
	movq	%rbx, 104(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 112(%rax)
	movq	%rbx, 120(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 128(%rax)
	movq	%rbx, 136(%rax)
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 144(%rax)
	movq	%rbx, 152(%rax)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, 160(%rax)
	movq	%rbx, 168(%rax)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rbx
	movq	%rcx, 176(%rax)
	movq	%rbx, 184(%rax)
	jmp	.L3660
.L3661:
	movq	-232(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_term_copy
.L3660:
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3663
	call	__stack_chk_fail@PLT
.L3663:
	movq	-232(%rbp), %rax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE543:
	.size	ecs_term_move, .-ecs_term_move
	.globl	ecs_term_fini
	.type	ecs_term_fini, @function
ecs_term_fini:
.LFB544:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	176(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE544:
	.size	ecs_term_fini, .-ecs_term_fini
	.globl	ecs_filter_finalize
	.type	ecs_filter_finalize, @function
ecs_filter_finalize:
.LFB545:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movb	$0, -29(%rbp)
	movb	$0, -30(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L3666
.L3674:
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-48(%rbp), %rax
	movq	1568(%rax), %rdx
	movq	-48(%rbp), %rax
	movq	1560(%rax), %rsi
	movq	-8(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_finalize
	testl	%eax, %eax
	je	.L3667
	movl	$-1, %eax
	jmp	.L3668
.L3667:
	movq	-8(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	sete	%al
	movb	%al, -29(%rbp)
	movzbl	-29(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3669
	movzbl	-30(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3670
.L3669:
	movl	$1, %eax
	jmp	.L3671
.L3670:
	movl	$0, %eax
.L3671:
	addl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	leal	-1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 184(%rax)
	movzbl	-29(%rbp), %eax
	movb	%al, -30(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	jne	.L3672
	movq	-48(%rbp), %rax
	movb	$1, 1552(%rax)
	movq	-8(%rbp), %rax
	movzbl	96(%rax), %eax
	cmpb	$1, %al
	je	.L3673
	movq	-48(%rbp), %rax
	movb	$0, 1553(%rax)
	jmp	.L3673
.L3672:
	movq	-48(%rbp), %rax
	movb	$0, 1553(%rax)
.L3673:
	addl	$1, -28(%rbp)
.L3666:
	movl	-28(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L3674
	movq	-48(%rbp), %rax
	movl	-24(%rbp), %edx
	movl	%edx, 12(%rax)
	movl	$0, %eax
.L3668:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE545:
	.size	ecs_filter_finalize, .-ecs_filter_finalize
	.section	.rodata
.LC591:
	.string	"filter_out != NULL"
.LC592:
	.string	"filter_out != ((void *)0)"
	.text
	.globl	ecs_filter_init
	.type	ecs_filter_init, @function
ecs_filter_init:
.LFB546:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$2104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -1896(%rbp)
	movq	%rsi, -1904(%rbp)
	movq	%rdx, -1912(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -1896(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16837, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC323(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -1896(%rbp)
	jne	.L3676
	leaq	__PRETTY_FUNCTION__.13130(%rip), %rcx
	movl	$16837, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC324(%rip), %rdi
	call	__assert_fail@PLT
.L3676:
	cmpq	$0, -1904(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16838, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC591(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -1904(%rbp)
	jne	.L3677
	leaq	__PRETTY_FUNCTION__.13130(%rip), %rcx
	movl	$16838, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC592(%rip), %rdi
	call	__assert_fail@PLT
.L3677:
	cmpq	$0, -1912(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$16839, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC262(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -1912(%rbp)
	jne	.L3678
	leaq	__PRETTY_FUNCTION__.13130(%rip), %rcx
	movl	$16839, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC263(%rip), %rdi
	call	__assert_fail@PLT
.L3678:
	movq	-1896(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -1848(%rbp)
	movl	$0, -1872(%rbp)
	movq	-1912(%rbp), %rax
	movq	3072(%rax), %rax
	movq	%rax, -1864(%rbp)
	movq	-1912(%rbp), %rax
	movq	3096(%rax), %rax
	movq	%rax, -1840(%rbp)
	movq	-1912(%rbp), %rax
	movq	3088(%rax), %rax
	movq	%rax, -1832(%rbp)
	leaq	-1632(%rbp), %rdx
	movl	$0, %eax
	movl	$200, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-1840(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-1832(%rbp), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -1864(%rbp)
	je	.L3679
	movq	-1912(%rbp), %rax
	movq	3072(%rax), %rax
	movq	%rax, -1864(%rbp)
	movq	-1912(%rbp), %rax
	movl	3080(%rax), %eax
	movl	%eax, -1872(%rbp)
	jmp	.L3680
.L3679:
	movq	-1912(%rbp), %rax
	movq	%rax, -1864(%rbp)
	movl	$0, -1876(%rbp)
	jmp	.L3681
.L3683:
	movl	-1876(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-1864(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	ecs_term_is_initialized
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3711
	addl	$1, -1872(%rbp)
	addl	$1, -1876(%rbp)
.L3681:
	cmpl	$15, -1876(%rbp)
	jle	.L3683
	jmp	.L3680
.L3711:
	nop
.L3680:
	movq	-1864(%rbp), %rax
	movq	%rax, -1632(%rbp)
	movl	-1872(%rbp), %eax
	movl	%eax, -1624(%rbp)
	cmpq	$0, -1832(%rbp)
	je	.L3684
	movl	$0, -1868(%rbp)
	cmpq	$0, -1864(%rbp)
	je	.L3685
	cmpl	$0, -1872(%rbp)
	je	.L3685
	movl	-1872(%rbp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$6, %eax
	movl	%eax, %edx
	movq	-1864(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_os_memdup
	movq	%rax, -1864(%rbp)
	movl	-1872(%rbp), %eax
	movl	%eax, -1868(%rbp)
	jmp	.L3686
.L3685:
	movq	$0, -1864(%rbp)
.L3686:
	movq	-1912(%rbp), %rax
	movq	3088(%rax), %rax
	movq	%rax, -1856(%rbp)
	leaq	-1824(%rbp), %rdx
	movl	$0, %eax
	movl	$24, %ecx
	movq	%rdx, %rdi
	rep stosq
	jmp	.L3687
.L3693:
	leaq	-1824(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_is_initialized
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3712
	movl	-1872(%rbp), %eax
	cmpl	-1868(%rbp), %eax
	jne	.L3690
	cmpl	$0, -1868(%rbp)
	je	.L3691
	movl	-1868(%rbp), %eax
	addl	%eax, %eax
	jmp	.L3692
.L3691:
	movl	$8, %eax
.L3692:
	movl	%eax, -1868(%rbp)
	movq	24+ecs_os_api(%rip), %rcx
	movl	-1868(%rbp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$6, %eax
	movl	%eax, %edx
	movq	-1864(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	*%rcx
	movq	%rax, -1864(%rbp)
.L3690:
	movl	-1872(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-1864(%rbp), %rax
	addq	%rdx, %rax
	movq	-1824(%rbp), %rcx
	movq	-1816(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-1808(%rbp), %rcx
	movq	-1800(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-1792(%rbp), %rcx
	movq	-1784(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-1776(%rbp), %rcx
	movq	-1768(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-1760(%rbp), %rcx
	movq	-1752(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-1744(%rbp), %rcx
	movq	-1736(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	movq	-1728(%rbp), %rcx
	movq	-1720(%rbp), %rbx
	movq	%rcx, 96(%rax)
	movq	%rbx, 104(%rax)
	movq	-1712(%rbp), %rcx
	movq	-1704(%rbp), %rbx
	movq	%rcx, 112(%rax)
	movq	%rbx, 120(%rax)
	movq	-1696(%rbp), %rcx
	movq	-1688(%rbp), %rbx
	movq	%rcx, 128(%rax)
	movq	%rbx, 136(%rax)
	movq	-1680(%rbp), %rcx
	movq	-1672(%rbp), %rbx
	movq	%rcx, 144(%rax)
	movq	%rbx, 152(%rax)
	movq	-1664(%rbp), %rcx
	movq	-1656(%rbp), %rbx
	movq	%rcx, 160(%rax)
	movq	%rbx, 168(%rax)
	movq	-1648(%rbp), %rcx
	movq	-1640(%rbp), %rbx
	movq	%rcx, 176(%rax)
	movq	%rbx, 184(%rax)
	addl	$1, -1872(%rbp)
.L3687:
	movq	-1856(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L3689
	leaq	-1824(%rbp), %rdi
	movq	-1856(%rbp), %rcx
	movq	-1832(%rbp), %rdx
	movq	-1840(%rbp), %rsi
	movq	-1848(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	ecs_parse_term
	movq	%rax, -1856(%rbp)
	cmpq	$0, -1856(%rbp)
	jne	.L3693
	jmp	.L3689
.L3712:
	nop
.L3689:
	movq	-1864(%rbp), %rax
	movq	%rax, -1632(%rbp)
	movl	-1872(%rbp), %eax
	movl	%eax, -1624(%rbp)
	cmpq	$0, -1856(%rbp)
	je	.L3713
.L3684:
	movq	-1912(%rbp), %rax
	movzbl	3084(%rax), %eax
	testb	%al, %al
	je	.L3696
	movl	$0, -1876(%rbp)
	jmp	.L3697
.L3699:
	movl	-1876(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-1864(%rbp), %rax
	addq	%rdx, %rax
	movzbl	96(%rax), %eax
	testb	%al, %al
	jne	.L3698
	movl	-1876(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-1864(%rbp), %rax
	addq	%rdx, %rax
	movb	$3, 96(%rax)
	movl	-1876(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-1864(%rbp), %rax
	addq	%rdx, %rax
	movl	$277, %edx
	movq	%rdx, 88(%rax)
.L3698:
	addl	$1, -1876(%rbp)
.L3697:
	movl	-1876(%rbp), %eax
	cmpl	-1872(%rbp), %eax
	jl	.L3699
.L3696:
	leaq	-1632(%rbp), %rdx
	movq	-1848(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_filter_finalize
	testl	%eax, %eax
	jne	.L3714
	movq	-1904(%rbp), %rax
	movq	%rax, %rdi
	leaq	-1632(%rbp), %rax
	movl	$200, %edx
	movq	%rax, %rsi
	movq	%rdx, %rcx
	rep movsq
	cmpl	$0, -1872(%rbp)
	je	.L3701
	movq	-1904(%rbp), %rax
	movq	1568(%rax), %rax
	testq	%rax, %rax
	jne	.L3702
	cmpl	$7, -1872(%rbp)
	jg	.L3703
	movq	-1904(%rbp), %rax
	leaq	16(%rax), %rdx
	movq	-1904(%rbp), %rax
	movq	%rdx, (%rax)
	jmp	.L3702
.L3703:
	movq	16+ecs_os_api(%rip), %rcx
	movl	-1872(%rbp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$6, %eax
	movl	%eax, %edi
	call	*%rcx
	movq	-1904(%rbp), %rdx
	movq	%rax, (%rdx)
.L3702:
	movl	$0, -1876(%rbp)
	jmp	.L3704
.L3705:
	movl	-1876(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-1864(%rbp), %rax
	leaq	(%rdx,%rax), %rcx
	movq	-1904(%rbp), %rax
	movq	(%rax), %rsi
	movl	-1876(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	leaq	(%rsi,%rax), %rbx
	leaq	-2112(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_term_move
	movq	-2112(%rbp), %rax
	movq	-2104(%rbp), %rdx
	movq	%rax, (%rbx)
	movq	%rdx, 8(%rbx)
	movq	-2096(%rbp), %rax
	movq	-2088(%rbp), %rdx
	movq	%rax, 16(%rbx)
	movq	%rdx, 24(%rbx)
	movq	-2080(%rbp), %rax
	movq	-2072(%rbp), %rdx
	movq	%rax, 32(%rbx)
	movq	%rdx, 40(%rbx)
	movq	-2064(%rbp), %rax
	movq	-2056(%rbp), %rdx
	movq	%rax, 48(%rbx)
	movq	%rdx, 56(%rbx)
	movq	-2048(%rbp), %rax
	movq	-2040(%rbp), %rdx
	movq	%rax, 64(%rbx)
	movq	%rdx, 72(%rbx)
	movq	-2032(%rbp), %rax
	movq	-2024(%rbp), %rdx
	movq	%rax, 80(%rbx)
	movq	%rdx, 88(%rbx)
	movq	-2016(%rbp), %rax
	movq	-2008(%rbp), %rdx
	movq	%rax, 96(%rbx)
	movq	%rdx, 104(%rbx)
	movq	-2000(%rbp), %rax
	movq	-1992(%rbp), %rdx
	movq	%rax, 112(%rbx)
	movq	%rdx, 120(%rbx)
	movq	-1984(%rbp), %rax
	movq	-1976(%rbp), %rdx
	movq	%rax, 128(%rbx)
	movq	%rdx, 136(%rbx)
	movq	-1968(%rbp), %rax
	movq	-1960(%rbp), %rdx
	movq	%rax, 144(%rbx)
	movq	%rdx, 152(%rbx)
	movq	-1952(%rbp), %rax
	movq	-1944(%rbp), %rdx
	movq	%rax, 160(%rbx)
	movq	%rdx, 168(%rbx)
	movq	-1936(%rbp), %rax
	movq	-1928(%rbp), %rdx
	movq	%rax, 176(%rbx)
	movq	%rdx, 184(%rbx)
	addl	$1, -1876(%rbp)
.L3704:
	movl	-1876(%rbp), %eax
	cmpl	-1872(%rbp), %eax
	jl	.L3705
	jmp	.L3706
.L3701:
	movq	-1904(%rbp), %rax
	movq	$0, (%rax)
.L3706:
	movq	48+ecs_os_api(%rip), %rdx
	movq	-1912(%rbp), %rax
	movq	3096(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-1904(%rbp), %rdx
	movq	%rax, 1560(%rdx)
	movq	48+ecs_os_api(%rip), %rdx
	movq	-1912(%rbp), %rax
	movq	3088(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-1904(%rbp), %rdx
	movq	%rax, 1568(%rdx)
	movl	$0, %eax
	jmp	.L3709
.L3713:
	nop
	jmp	.L3695
.L3714:
	nop
.L3695:
	movq	-64(%rbp), %rax
	testq	%rax, %rax
	jne	.L3708
	movq	$0, -1632(%rbp)
.L3708:
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	leaq	-1632(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_filter_fini
	movl	$-1, %eax
.L3709:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L3710
	call	__stack_chk_fail@PLT
.L3710:
	addq	$2104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE546:
	.size	ecs_filter_init, .-ecs_filter_init
	.globl	ecs_filter_copy
	.type	ecs_filter_copy, @function
ecs_filter_copy:
.LFB547:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -48(%rbp)
	je	.L3716
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rax
	movq	%rax, %rsi
	movl	$200, %eax
	movq	%rdx, %rdi
	movq	%rax, %rcx
	rep movsq
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	-48(%rbp), %rdx
	addq	$16, %rdx
	cmpq	%rdx, %rax
	jne	.L3717
	movq	-40(%rbp), %rax
	leaq	16(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, (%rax)
	jmp	.L3718
.L3717:
	movl	-28(%rbp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$6, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_os_memdup
	movq	-40(%rbp), %rdx
	movq	%rax, (%rdx)
.L3718:
	movl	$0, -32(%rbp)
	jmp	.L3719
.L3720:
	movq	-48(%rbp), %rax
	movq	(%rax), %rcx
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	addq	%rax, %rcx
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	leaq	(%rsi,%rax), %rbx
	leaq	-240(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_term_copy
	movq	-240(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rax, (%rbx)
	movq	%rdx, 8(%rbx)
	movq	-224(%rbp), %rax
	movq	-216(%rbp), %rdx
	movq	%rax, 16(%rbx)
	movq	%rdx, 24(%rbx)
	movq	-208(%rbp), %rax
	movq	-200(%rbp), %rdx
	movq	%rax, 32(%rbx)
	movq	%rdx, 40(%rbx)
	movq	-192(%rbp), %rax
	movq	-184(%rbp), %rdx
	movq	%rax, 48(%rbx)
	movq	%rdx, 56(%rbx)
	movq	-176(%rbp), %rax
	movq	-168(%rbp), %rdx
	movq	%rax, 64(%rbx)
	movq	%rdx, 72(%rbx)
	movq	-160(%rbp), %rax
	movq	-152(%rbp), %rdx
	movq	%rax, 80(%rbx)
	movq	%rdx, 88(%rbx)
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 96(%rbx)
	movq	%rdx, 104(%rbx)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, 112(%rbx)
	movq	%rdx, 120(%rbx)
	movq	-112(%rbp), %rax
	movq	-104(%rbp), %rdx
	movq	%rax, 128(%rbx)
	movq	%rdx, 136(%rbx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 144(%rbx)
	movq	%rdx, 152(%rbx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 160(%rbx)
	movq	%rdx, 168(%rbx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 176(%rbx)
	movq	%rdx, 184(%rbx)
	addl	$1, -32(%rbp)
.L3719:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L3720
	jmp	.L3723
.L3716:
	movq	-40(%rbp), %rax
	movl	$1600, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
.L3723:
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3722
	call	__stack_chk_fail@PLT
.L3722:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE547:
	.size	ecs_filter_copy, .-ecs_filter_copy
	.globl	ecs_filter_move
	.type	ecs_filter_move, @function
ecs_filter_move:
.LFB548:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L3725
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rax
	movq	%rax, %rsi
	movl	$200, %eax
	movq	%rdx, %rdi
	movq	%rax, %rcx
	rep movsq
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rdx
	addq	$16, %rdx
	cmpq	%rdx, %rax
	jne	.L3726
	movq	-8(%rbp), %rax
	leaq	16(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, (%rax)
.L3726:
	movq	-16(%rbp), %rax
	movq	$0, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	jmp	.L3728
.L3725:
	movq	-8(%rbp), %rax
	movl	$1600, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
.L3728:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE548:
	.size	ecs_filter_move, .-ecs_filter_move
	.globl	ecs_filter_fini
	.type	ecs_filter_fini, @function
ecs_filter_fini:
.LFB549:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3730
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	$0, -8(%rbp)
	jmp	.L3731
.L3732:
	movq	-24(%rbp), %rax
	movq	(%rax), %rcx
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	addq	%rcx, %rax
	movq	%rax, %rdi
	call	ecs_term_fini
	addl	$1, -8(%rbp)
.L3731:
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jl	.L3732
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rdx
	addq	$16, %rdx
	cmpq	%rdx, %rax
	je	.L3730
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L3730:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	1560(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	1568(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE549:
	.size	ecs_filter_fini, .-ecs_filter_fini
	.type	filter_str_add_id, @function
filter_str_add_id:
.LFB550:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L3734
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L3737
.L3734:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3736
	movq	-40(%rbp), %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_get_path_w_sep
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	jmp	.L3737
.L3736:
	movq	-32(%rbp), %rax
	leaq	.LC293(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L3737:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE550:
	.size	filter_str_add_id, .-filter_str_add_id
	.section	.rodata
.LC593:
	.string	" || "
.LC594:
	.string	", "
.LC595:
	.string	"[in] "
.LC596:
	.string	"[inout] "
.LC597:
	.string	"[out] "
.LC598:
	.string	" "
.LC599:
	.string	"!"
.LC600:
	.string	"?"
.LC601:
	.string	"()"
.LC602:
	.string	"$"
	.text
	.globl	ecs_filter_str
	.type	ecs_filter_str, @function
ecs_filter_str:
.LFB551:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1152, %rsp
	movq	%rdi, -1144(%rbp)
	movq	%rsi, -1152(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-1104(%rbp), %rdx
	movl	$0, %eax
	movl	$136, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-1152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -1120(%rbp)
	movq	-1152(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -1124(%rbp)
	movl	$0, -1128(%rbp)
	movl	$0, -1132(%rbp)
	jmp	.L3739
.L3757:
	movl	-1132(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-1120(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -1112(%rbp)
	cmpl	$0, -1132(%rbp)
	je	.L3740
	movl	-1132(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	leaq	-192(%rax), %rdx
	movq	-1120(%rbp), %rax
	addq	%rdx, %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	jne	.L3741
	movq	-1112(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	jne	.L3741
	leaq	-1104(%rbp), %rax
	leaq	.LC593(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L3740
.L3741:
	leaq	-1104(%rbp), %rax
	leaq	.LC594(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L3740:
	cmpl	$0, -1128(%rbp)
	jg	.L3742
	movq	-1112(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$2, %eax
	jne	.L3743
	leaq	-1104(%rbp), %rax
	leaq	.LC595(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L3742
.L3743:
	movq	-1112(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$1, %eax
	jne	.L3744
	leaq	-1104(%rbp), %rax
	leaq	.LC596(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L3742
.L3744:
	movq	-1112(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$3, %eax
	jne	.L3742
	leaq	-1104(%rbp), %rax
	leaq	.LC597(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L3742:
	movq	-1112(%rbp), %rax
	movq	168(%rax), %rax
	testq	%rax, %rax
	je	.L3745
	movq	-1112(%rbp), %rax
	movq	168(%rax), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	je	.L3745
	movq	-1112(%rbp), %rax
	movq	168(%rax), %rax
	movq	%rax, %rdi
	call	ecs_role_str
	movq	%rax, %rdx
	leaq	-1104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	leaq	-1104(%rbp), %rax
	leaq	.LC598(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L3745:
	movq	-1112(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	jne	.L3746
	addl	$1, -1128(%rbp)
	jmp	.L3747
.L3746:
	movl	$0, -1128(%rbp)
.L3747:
	movq	-1112(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$2, %eax
	jne	.L3748
	leaq	-1104(%rbp), %rax
	leaq	.LC599(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L3749
.L3748:
	movq	-1112(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$3, %eax
	jne	.L3749
	leaq	-1104(%rbp), %rax
	leaq	.LC600(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L3749:
	movq	-1112(%rbp), %rax
	movq	64(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	jne	.L3750
	movq	-1112(%rbp), %rax
	addq	$112, %rax
	movq	%rax, %rdi
	call	ecs_term_id_is_set
	testb	%al, %al
	je	.L3750
	leaq	-1104(%rbp), %rax
	leaq	.LC318(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L3750:
	movq	-1112(%rbp), %rax
	addq	$112, %rax
	movq	%rax, %rdi
	call	ecs_term_id_is_set
	xorl	$1, %eax
	testb	%al, %al
	je	.L3751
	movq	-1112(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-1112(%rbp), %rax
	movq	64(%rax), %rax
	cmpq	%rax, %rdx
	je	.L3751
	movq	-1112(%rbp), %rax
	leaq	16(%rax), %rdx
	leaq	-1104(%rbp), %rcx
	movq	-1144(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	filter_str_add_id
	movq	-1112(%rbp), %rax
	addq	$64, %rax
	movq	%rax, %rdi
	call	ecs_term_id_is_set
	xorl	$1, %eax
	testb	%al, %al
	je	.L3752
	leaq	-1104(%rbp), %rax
	leaq	.LC601(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L3753
.L3752:
	movq	-1112(%rbp), %rax
	movq	64(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L3753
	leaq	-1104(%rbp), %rax
	leaq	.LC318(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	movq	-1112(%rbp), %rax
	leaq	64(%rax), %rdx
	leaq	-1104(%rbp), %rcx
	movq	-1144(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	filter_str_add_id
.L3753:
	movq	-1112(%rbp), %rax
	addq	$112, %rax
	movq	%rax, %rdi
	call	ecs_term_id_is_set
	testb	%al, %al
	je	.L3755
	leaq	-1104(%rbp), %rax
	leaq	.LC594(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	movq	-1112(%rbp), %rax
	leaq	112(%rax), %rdx
	leaq	-1104(%rbp), %rcx
	movq	-1144(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	filter_str_add_id
	leaq	-1104(%rbp), %rax
	leaq	.LC320(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L3755
.L3751:
	movq	-1112(%rbp), %rax
	addq	$112, %rax
	movq	%rax, %rdi
	call	ecs_term_id_is_set
	xorl	$1, %eax
	testb	%al, %al
	je	.L3756
	leaq	-1104(%rbp), %rax
	leaq	.LC602(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	movq	-1112(%rbp), %rax
	leaq	16(%rax), %rdx
	leaq	-1104(%rbp), %rcx
	movq	-1144(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	filter_str_add_id
	jmp	.L3755
.L3756:
	movq	-1112(%rbp), %rax
	addq	$112, %rax
	movq	%rax, %rdi
	call	ecs_term_id_is_set
	testb	%al, %al
	je	.L3755
	movq	-1112(%rbp), %rax
	leaq	16(%rax), %rdx
	leaq	-1104(%rbp), %rcx
	movq	-1144(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	filter_str_add_id
	leaq	-1104(%rbp), %rax
	leaq	.LC594(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	movq	-1112(%rbp), %rax
	leaq	112(%rax), %rdx
	leaq	-1104(%rbp), %rcx
	movq	-1144(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	filter_str_add_id
	leaq	-1104(%rbp), %rax
	leaq	.LC320(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L3755:
	addl	$1, -1132(%rbp)
.L3739:
	movl	-1132(%rbp), %eax
	cmpl	-1124(%rbp), %eax
	jl	.L3757
	leaq	-1104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_get
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L3759
	call	__stack_chk_fail@PLT
.L3759:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE551:
	.size	ecs_filter_str, .-ecs_filter_str
	.type	populate_from_column, @function
populate_from_column:
.LFB552:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movl	%ecx, -76(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movb	$0, -41(%rbp)
	cmpl	$-1, -76(%rbp)
	je	.L3761
	cmpq	$0, -88(%rbp)
	je	.L3762
	movq	-88(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_table
	movq	%rax, -64(%rbp)
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_table_record
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -76(%rbp)
.L3762:
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -32(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-64(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -76(%rbp)
	jge	.L3763
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	-76(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movzwl	8(%rax), %eax
	testw	%ax, %ax
	je	.L3763
	movb	$1, -41(%rbp)
	movq	-16(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %edx
	movq	32(%rbp), %rax
	movl	%edx, (%rax)
.L3763:
	movzbl	-41(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3764
	movq	32(%rbp), %rax
	movl	$0, (%rax)
.L3764:
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, 24(%rbp)
	je	.L3765
	movq	24(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rdx, (%rax)
.L3765:
	cmpq	$0, 40(%rbp)
	je	.L3761
	cmpb	$0, -41(%rbp)
	je	.L3766
	cmpq	$0, -88(%rbp)
	je	.L3767
	movq	-72(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	40(%rbp), %rdx
	movq	%rax, (%rdx)
	jmp	.L3761
.L3767:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	-76(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-8(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %ecx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	40(%rbp), %rdx
	movq	%rax, (%rdx)
	jmp	.L3761
.L3766:
	movq	40(%rbp), %rax
	movq	$0, (%rax)
.L3761:
	movq	16(%rbp), %rax
	movq	$0, (%rax)
	movq	-96(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rdx, (%rax)
	movzbl	-41(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE552:
	.size	populate_from_column, .-populate_from_column
	.type	populate_from_table, @function
populate_from_table:
.LFB553:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, 48(%rax)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movq	-24(%rbp), %rdx
	movl	%eax, 204(%rdx)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 56(%rax)
	cmpq	$0, -8(%rbp)
	je	.L3770
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, 144(%rax)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	-24(%rbp), %rdx
	movq	%rax, 152(%rdx)
	jmp	.L3772
.L3770:
	movq	-24(%rbp), %rax
	movq	$0, 144(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 152(%rax)
.L3772:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE553:
	.size	populate_from_table, .-populate_from_table
	.section	.rodata
.LC603:
	.string	"filter != NULL"
.LC604:
	.string	"filter != ((void *)0)"
.LC605:
	.string	"types != NULL"
.LC606:
	.string	"types != ((void *)0)"
.LC607:
	.string	"subjects != NULL"
.LC608:
	.string	"subjects != ((void *)0)"
	.text
	.globl	flecs_filter_match_table
	.type	flecs_filter_match_table, @function
flecs_filter_match_table:
.LFB554:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$176, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%rcx, -128(%rbp)
	movq	%r8, -136(%rbp)
	movq	%r9, -144(%rbp)
	movq	16(%rbp), %rax
	movq	%rax, -152(%rbp)
	movq	24(%rbp), %rax
	movq	%rax, -160(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -168(%rbp)
	movq	40(%rbp), %rax
	movq	%rax, -176(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17227, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -104(%rbp)
	jne	.L3774
	leaq	__PRETTY_FUNCTION__.13230(%rip), %rcx
	movl	$17227, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3774:
	cmpq	$0, -112(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17228, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC603(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -112(%rbp)
	jne	.L3775
	leaq	__PRETTY_FUNCTION__.13230(%rip), %rcx
	movl	$17228, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC604(%rip), %rdi
	call	__assert_fail@PLT
.L3775:
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-112(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -88(%rbp)
	movb	$0, -95(%rbp)
	movb	$0, -94(%rbp)
	movl	$0, -92(%rbp)
	jmp	.L3776
.L3798:
	movl	-92(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movl	160(%rax), %eax
	movl	%eax, -84(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -56(%rbp)
	movzbl	-95(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3777
	cmpl	$1, -84(%rbp)
	jne	.L3777
	movb	$1, -95(%rbp)
	movb	$0, -94(%rbp)
	jmp	.L3778
.L3777:
	cmpb	$0, -95(%rbp)
	je	.L3778
	cmpl	$1, -84(%rbp)
	je	.L3778
	movzbl	-94(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3779
	movl	$0, %eax
	jmp	.L3797
.L3779:
	movb	$0, -95(%rbp)
.L3778:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L3803
	movl	$267, %eax
	cmpq	%rax, -24(%rbp)
	je	.L3783
	movq	-24(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_table
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L3784
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.L3783
.L3784:
	movq	$0, -56(%rbp)
.L3783:
	movq	-32(%rbp), %rax
	movl	40(%rax), %edi
	movq	-32(%rbp), %rax
	movl	36(%rax), %ecx
	movq	-32(%rbp), %rax
	movq	24(%rax), %r9
	movq	-40(%rbp), %rax
	movq	(%rax), %r10
	movq	-56(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-104(%rbp), %rax
	subq	$8, %rsp
	leaq	-72(%rbp), %r8
	pushq	%r8
	pushq	%rdi
	pushq	%rcx
	movq	%r10, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_match
	addq	$32, %rsp
	movl	%eax, -80(%rbp)
	cmpl	$-1, -80(%rbp)
	setne	%al
	movb	%al, -93(%rbp)
	cmpl	$2, -84(%rbp)
	jne	.L3785
	movzbl	-93(%rbp), %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	movb	%al, -93(%rbp)
	andb	$1, -93(%rbp)
.L3785:
	cmpl	$3, -84(%rbp)
	jne	.L3786
	movb	$1, -93(%rbp)
.L3786:
	cmpb	$0, -95(%rbp)
	je	.L3787
	movzbl	-94(%rbp), %eax
	orb	-93(%rbp), %al
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	movb	%al, -94(%rbp)
	jmp	.L3788
.L3787:
	movzbl	-93(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3788
	movl	$0, %eax
	jmp	.L3797
.L3788:
	movl	$267, %eax
	cmpq	%rax, -24(%rbp)
	je	.L3789
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	jne	.L3789
	movq	-24(%rbp), %rax
	movq	%rax, -72(%rbp)
.L3789:
	cmpq	$0, -144(%rbp)
	je	.L3782
	cmpb	$0, -93(%rbp)
	je	.L3782
	cmpq	$0, -136(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17296, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC222(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -136(%rbp)
	jne	.L3791
	leaq	__PRETTY_FUNCTION__.13230(%rip), %rcx
	movl	$17296, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC223(%rip), %rdi
	call	__assert_fail@PLT
.L3791:
	cmpq	$0, -152(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17297, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC605(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -152(%rbp)
	jne	.L3792
	leaq	__PRETTY_FUNCTION__.13230(%rip), %rcx
	movl	$17297, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC606(%rip), %rdi
	call	__assert_fail@PLT
.L3792:
	cmpq	$0, -160(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17298, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC607(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -160(%rbp)
	jne	.L3793
	leaq	__PRETTY_FUNCTION__.13230(%rip), %rcx
	movl	$17298, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC608(%rip), %rdi
	call	__assert_fail@PLT
.L3793:
	movq	-40(%rbp), %rax
	movl	184(%rax), %eax
	movl	%eax, -76(%rbp)
	cmpq	$0, -176(%rbp)
	je	.L3794
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-176(%rbp), %rax
	addq	%rdx, %rax
	jmp	.L3795
.L3794:
	movl	$0, %eax
.L3795:
	movq	%rax, -16(%rbp)
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	-168(%rbp), %rax
	leaq	(%rdx,%rax), %r9
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-160(%rbp), %rax
	leaq	(%rdx,%rax), %r8
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-152(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-136(%rbp), %rax
	leaq	(%rdx,%rax), %r11
	movq	-72(%rbp), %r10
	movq	-40(%rbp), %rax
	movq	(%rax), %rdx
	movl	-80(%rbp), %ecx
	movq	-120(%rbp), %rsi
	movq	-104(%rbp), %rax
	pushq	-16(%rbp)
	pushq	%r9
	pushq	%r8
	pushq	%rdi
	movq	%r11, %r9
	movq	%r10, %r8
	movq	%rax, %rdi
	call	populate_from_column
	addq	$32, %rsp
	cmpl	$-1, -80(%rbp)
	je	.L3796
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	-144(%rbp), %rax
	addq	%rdx, %rax
	movl	-80(%rbp), %edx
	addl	$1, %edx
	movl	%edx, (%rax)
	jmp	.L3782
.L3796:
	movl	-76(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	-144(%rbp), %rax
	addq	%rdx, %rax
	movl	$0, (%rax)
	jmp	.L3782
.L3803:
	nop
.L3782:
	addl	$1, -92(%rbp)
.L3776:
	movl	-92(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jl	.L3798
	movzbl	-95(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3799
	cmpb	$0, -94(%rbp)
	je	.L3800
.L3799:
	movl	$1, %eax
	jmp	.L3801
.L3800:
	movl	$0, %eax
.L3801:
	andl	$1, %eax
.L3797:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L3802
	call	__stack_chk_fail@PLT
.L3802:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE554:
	.size	flecs_filter_match_table, .-flecs_filter_match_table
	.type	term_iter_init_no_data, @function
term_iter_init_no_data:
.LFB555:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-40(%rbp), %rax
	movq	$0, (%rax)
	movq	-40(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-40(%rbp), %rbx
	leaq	-80(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_map_iter
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 24(%rbx)
	movq	%rdx, 32(%rbx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 40(%rbx)
	movq	%rdx, 48(%rbx)
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3805
	call	__stack_chk_fail@PLT
.L3805:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE555:
	.size	term_iter_init_no_data, .-term_iter_init_no_data
	.type	term_iter_init_wildcard, @function
term_iter_init_wildcard:
.LFB556:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-48(%rbp), %rax
	movq	$0, (%rax)
	movl	$266, %edx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	-48(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L3809
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdx
	movq	-48(%rbp), %rbx
	leaq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 24(%rbx)
	movq	%rdx, 32(%rbx)
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, 40(%rbx)
	movq	%rdx, 48(%rbx)
.L3809:
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3808
	call	__stack_chk_fail@PLT
.L3808:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE556:
	.size	term_iter_init_wildcard, .-term_iter_init_wildcard
	.type	term_iter_init, @function
term_iter_init:
.LFB557:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-48(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-32(%rbp), %rax
	movzbl	32(%rax), %eax
	testb	%al, %al
	je	.L3811
	movq	-32(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$1, %eax
	testl	%eax, %eax
	je	.L3812
.L3811:
	movq	-48(%rbp), %rax
	movq	(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	-56(%rbp), %rdx
	movq	%rax, 8(%rdx)
.L3812:
	movq	-32(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L3813
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	-56(%rbp), %rdx
	movq	%rax, 16(%rdx)
.L3813:
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L3814
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rbx
	leaq	-96(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 24(%rbx)
	movq	%rdx, 32(%rbx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 40(%rbx)
	movq	%rdx, 48(%rbx)
	jmp	.L3817
.L3814:
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L3817
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rbx
	leaq	-96(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rax, 24(%rbx)
	movq	%rdx, 32(%rbx)
	movq	-80(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rax, 40(%rbx)
	movq	%rdx, 48(%rbx)
	movq	-56(%rbp), %rax
	movb	$1, 56(%rax)
.L3817:
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3816
	call	__stack_chk_fail@PLT
.L3816:
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE557:
	.size	term_iter_init, .-term_iter_init
	.section	.rodata
.LC609:
	.string	"term->id != 0"
	.text
	.globl	ecs_term_iter
	.type	ecs_term_iter, @function
ecs_term_iter:
.LFB558:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$2352, %rsp
	movq	%rdi, -2328(%rbp)
	movq	%rsi, -2336(%rbp)
	movq	%rdx, -2344(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -2336(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17371, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC323(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2336(%rbp)
	jne	.L3819
	leaq	__PRETTY_FUNCTION__.13268(%rip), %rcx
	movl	$17371, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC324(%rip), %rdi
	call	__assert_fail@PLT
.L3819:
	cmpq	$0, -2344(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17372, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC489(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2344(%rbp)
	jne	.L3820
	leaq	__PRETTY_FUNCTION__.13268(%rip), %rcx
	movl	$17372, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC490(%rip), %rdi
	call	__assert_fail@PLT
.L3820:
	movq	-2344(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17373, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC609(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-2344(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L3821
	leaq	__PRETTY_FUNCTION__.13268(%rip), %rcx
	movl	$17373, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC609(%rip), %rdi
	call	__assert_fail@PLT
.L3821:
	movq	-2336(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -2312(%rbp)
	movq	-2344(%rbp), %rdx
	movq	-2312(%rbp), %rax
	movq	%rdx, %rcx
	movl	$0, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_term_finalize
	testl	%eax, %eax
	je	.L3822
	movl	$0, %ecx
	movl	$17379, %edx
	leaq	.LC74(%rip), %rsi
	movl	$2, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L3822:
	leaq	-2304(%rbp), %rdx
	movl	$0, %eax
	movl	$286, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-2336(%rbp), %rax
	movq	%rax, -2304(%rbp)
	movq	-2312(%rbp), %rax
	movq	%rax, -2296(%rbp)
	movl	$1, -2168(%rbp)
	leaq	-2304(%rbp), %rax
	leaq	232(%rax), %rdx
	movq	-2344(%rbp), %rcx
	movq	-2312(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	term_iter_init
	movq	-2328(%rbp), %rax
	movq	%rax, %rdi
	leaq	-2304(%rbp), %rax
	movl	$286, %edx
	movq	%rax, %rsi
	movq	%rdx, %rcx
	rep movsq
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3824
	call	__stack_chk_fail@PLT
.L3824:
	movq	-2328(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE558:
	.size	ecs_term_iter, .-ecs_term_iter
	.section	.rodata
.LC610:
	.string	"source != 0"
	.text
	.type	term_iter_next, @function
term_iter_next:
.LFB559:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	$0, -48(%rbp)
	movq	$0, -64(%rbp)
.L3835:
	movq	-96(%rbp), %rax
	addq	$24, %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L3826
	movq	-96(%rbp), %rax
	movzbl	56(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3827
	movq	-96(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L3827
	movq	-96(%rbp), %rax
	movq	16(%rax), %rax
	movq	(%rax), %rdx
	movq	-96(%rbp), %rbx
	leaq	-144(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	movq	-144(%rbp), %rax
	movq	-136(%rbp), %rdx
	movq	%rax, 24(%rbx)
	movq	%rdx, 32(%rbx)
	movq	-128(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rax, 40(%rbx)
	movq	%rdx, 48(%rbx)
	movq	-96(%rbp), %rax
	addq	$24, %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	movq	-96(%rbp), %rax
	movb	$1, 56(%rax)
.L3827:
	cmpq	$0, -56(%rbp)
	jne	.L3826
	movl	$0, %eax
	jmp	.L3837
.L3826:
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	testl	%eax, %eax
	je	.L3839
	movq	-96(%rbp), %rax
	movzbl	56(%rax), %eax
	testb	%al, %al
	je	.L3840
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-96(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L3832
	movq	-48(%rbp), %rax
	movq	(%rax), %rdx
	movq	-96(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_has
	testb	%al, %al
	jne	.L3841
.L3832:
	movq	-32(%rbp), %rax
	movl	40(%rax), %edi
	movq	-32(%rbp), %rax
	movl	36(%rax), %ecx
	movq	-32(%rbp), %rax
	movq	24(%rax), %r9
	movq	-40(%rbp), %rax
	movq	(%rax), %r10
	movq	-48(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-48(%rbp), %rsi
	movq	-88(%rbp), %rax
	subq	$8, %rsp
	leaq	-64(%rbp), %r8
	pushq	%r8
	pushq	%rdi
	pushq	%rcx
	movq	%r10, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_match
	addq	$32, %rsp
	movl	%eax, -68(%rbp)
	cmpl	$-1, -68(%rbp)
	je	.L3842
	movq	-64(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17445, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC610(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rax
	testq	%rax, %rax
	jne	.L3840
	leaq	__PRETTY_FUNCTION__.13283(%rip), %rcx
	movl	$17445, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC610(%rip), %rdi
	call	__assert_fail@PLT
.L3839:
	nop
	jmp	.L3835
.L3841:
	nop
	jmp	.L3835
.L3842:
	nop
	jmp	.L3835
.L3840:
	nop
	cmpq	$0, -104(%rbp)
	je	.L3836
	movq	-64(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, (%rax)
.L3836:
	movq	-56(%rbp), %rax
.L3837:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L3838
	call	__stack_chk_fail@PLT
.L3838:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE559:
	.size	term_iter_next, .-term_iter_next
	.section	.rodata
.LC611:
	.string	"source || !iter->iter_set"
	.text
	.globl	ecs_term_next
	.type	ecs_term_next, @function
ecs_term_next:
.LFB560:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-104(%rbp), %rax
	addq	$232, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	leaq	-80(%rbp), %rdx
	movq	-72(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	term_iter_next
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	jne	.L3844
	movq	-104(%rbp), %rax
	movb	$0, 212(%rax)
	movl	$0, %eax
	jmp	.L3854
.L3844:
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-80(%rbp), %rax
	testq	%rax, %rax
	jne	.L3846
	movq	-72(%rbp), %rax
	movzbl	56(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L3847
.L3846:
	movl	$1, %eax
	jmp	.L3848
.L3847:
	movl	$0, %eax
.L3848:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17475, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC611(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	testq	%rax, %rax
	jne	.L3849
	movq	-72(%rbp), %rax
	movzbl	56(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3849
	leaq	__PRETTY_FUNCTION__.13295(%rip), %rcx
	movl	$17475, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC611(%rip), %rdi
	call	__assert_fail@PLT
.L3849:
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17476, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L3850
	leaq	__PRETTY_FUNCTION__.13295(%rip), %rcx
	movl	$17476, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L3850:
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -32(%rbp)
	movq	-104(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 48(%rax)
	movq	-104(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, 56(%rax)
	movq	-72(%rbp), %rax
	leaq	64(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, 64(%rax)
	movq	-72(%rbp), %rax
	leaq	80(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, 72(%rax)
	movq	-72(%rbp), %rax
	leaq	72(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, 80(%rax)
	movq	-72(%rbp), %rax
	leaq	88(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, 88(%rax)
	movq	-72(%rbp), %rax
	leaq	96(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, 96(%rax)
	movq	-72(%rbp), %rax
	leaq	104(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, 104(%rax)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, 144(%rax)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movq	-104(%rbp), %rdx
	movl	%eax, 204(%rdx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	-104(%rbp), %rdx
	movq	%rax, 152(%rdx)
	movq	-104(%rbp), %rax
	movb	$1, 212(%rax)
	movq	-72(%rbp), %rax
	leaq	104(%rax), %r10
	movq	-72(%rbp), %rax
	leaq	96(%rax), %r9
	movq	-72(%rbp), %rax
	leaq	88(%rax), %r8
	movq	-72(%rbp), %rax
	leaq	80(%rax), %rdi
	movq	-72(%rbp), %rax
	leaq	64(%rax), %rbx
	movq	-80(%rbp), %r11
	movq	-48(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-64(%rbp), %rax
	movq	(%rax), %rdx
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rax
	pushq	%r10
	pushq	%r9
	pushq	%r8
	pushq	%rdi
	movq	%rbx, %r9
	movq	%r11, %r8
	movq	%rax, %rdi
	call	populate_from_column
	addq	$32, %rsp
	movb	%al, -81(%rbp)
	movq	-80(%rbp), %rax
	testq	%rax, %rax
	jne	.L3851
	cmpb	$0, -81(%rbp)
	je	.L3852
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-72(%rbp), %rax
	movl	%edx, 72(%rax)
	jmp	.L3853
.L3852:
	movq	-72(%rbp), %rax
	movl	$0, 72(%rax)
	jmp	.L3853
.L3851:
	movq	-72(%rbp), %rax
	movl	$-1, 72(%rax)
.L3853:
	movl	$1, %eax
.L3854:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L3855
	call	__stack_chk_fail@PLT
.L3855:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE560:
	.size	ecs_term_next, .-ecs_term_next
	.globl	ecs_filter_iter
	.type	ecs_filter_iter, @function
ecs_filter_iter:
.LFB561:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$4096, %rsp
	orq	$0, (%rsp)
	subq	$1408, %rsp
	movq	%rdi, -5480(%rbp)
	movq	%rsi, -5488(%rbp)
	movq	%rdx, -5496(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -5488(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17515, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC323(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -5488(%rbp)
	jne	.L3857
	leaq	__PRETTY_FUNCTION__.13302(%rip), %rcx
	movl	$17515, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC324(%rip), %rdi
	call	__assert_fail@PLT
.L3857:
	movq	-5488(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -5448(%rbp)
	leaq	-5408(%rbp), %rdx
	movl	$0, %eax
	movl	$286, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-5488(%rbp), %rax
	movq	%rax, -5408(%rbp)
	movq	-5448(%rbp), %rax
	movq	%rax, -5400(%rbp)
	leaq	-5408(%rbp), %rax
	addq	$232, %rax
	movq	%rax, -5440(%rbp)
	cmpq	$0, -5496(%rbp)
	je	.L3858
	movq	-5440(%rbp), %rdx
	movq	-5496(%rbp), %rax
	movq	%rax, %rsi
	movl	$200, %eax
	movq	%rdx, %rdi
	movq	%rax, %rcx
	rep movsq
	movq	-5496(%rbp), %rax
	movq	(%rax), %rax
	movq	-5496(%rbp), %rdx
	addq	$16, %rdx
	cmpq	%rdx, %rax
	jne	.L3859
	movq	-5440(%rbp), %rax
	leaq	16(%rax), %rdx
	movq	-5440(%rbp), %rax
	movq	%rdx, (%rax)
.L3859:
	movq	-5440(%rbp), %rdx
	movq	-5448(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_filter_finalize
	jmp	.L3860
.L3858:
	leaq	-3120(%rbp), %rdx
	movl	$0, %eax
	movl	$388, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$266, %eax
	movq	%rax, -3120(%rbp)
	movq	-5440(%rbp), %rcx
	leaq	-3120(%rbp), %rdx
	movq	-5448(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_filter_init
	movq	-5440(%rbp), %rax
	movq	%rax, -5496(%rbp)
.L3860:
	movq	-5496(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -5456(%rbp)
	movq	-5496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -5432(%rbp)
	movl	$-1, -5464(%rbp)
	movl	$-1, -5460(%rbp)
	movq	-5496(%rbp), %rax
	movzbl	1552(%rax), %eax
	testb	%al, %al
	je	.L3861
	movq	-5440(%rbp), %rax
	movl	$0, 1600(%rax)
	movl	$0, -5468(%rbp)
	jmp	.L3862
.L3870:
	movl	-5468(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-5432(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -5424(%rbp)
	cmpq	$0, -5424(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17553, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC489(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -5424(%rbp)
	jne	.L3863
	leaq	__PRETTY_FUNCTION__.13302(%rip), %rcx
	movl	$17553, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC490(%rip), %rdi
	call	__assert_fail@PLT
.L3863:
	movq	-5424(%rbp), %rax
	movl	160(%rax), %eax
	testl	%eax, %eax
	jne	.L3876
	movq	-5424(%rbp), %rax
	movq	64(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	jne	.L3877
	movq	-5424(%rbp), %rax
	movq	(%rax), %rdx
	movq	-5448(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -5416(%rbp)
	cmpq	$0, -5416(%rbp)
	jne	.L3867
	movq	-5440(%rbp), %rax
	addq	$1608, %rax
	movq	%rax, %rdi
	call	term_iter_init_no_data
	movq	-5480(%rbp), %rax
	movq	%rax, %rdi
	leaq	-5408(%rbp), %rax
	movl	$286, %edx
	movq	%rax, %rsi
	movq	%rdx, %rcx
	rep movsq
	jmp	.L3856
.L3867:
	movq	-5416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_count
	movl	%eax, -5452(%rbp)
	cmpl	$-1, -5464(%rbp)
	je	.L3869
	movl	-5452(%rbp), %eax
	cmpl	-5464(%rbp), %eax
	jge	.L3865
.L3869:
	movl	-5452(%rbp), %eax
	movl	%eax, -5464(%rbp)
	movl	-5468(%rbp), %eax
	movl	%eax, -5460(%rbp)
	jmp	.L3865
.L3876:
	nop
	jmp	.L3865
.L3877:
	nop
.L3865:
	addl	$1, -5468(%rbp)
.L3862:
	movl	-5468(%rbp), %eax
	cmpl	-5456(%rbp), %eax
	jl	.L3870
	movq	-5440(%rbp), %rax
	movl	-5460(%rbp), %edx
	movl	%edx, 1720(%rax)
	cmpl	$-1, -5460(%rbp)
	jne	.L3871
	movq	-5440(%rbp), %rax
	leaq	1608(%rax), %rdx
	movq	-5448(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	term_iter_init_wildcard
	jmp	.L3872
.L3871:
	movq	-5440(%rbp), %rax
	leaq	1608(%rax), %rsi
	movl	-5460(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-5432(%rbp), %rax
	leaq	(%rdx,%rax), %rcx
	movq	-5448(%rbp), %rax
	movq	%rsi, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	term_iter_init
	jmp	.L3872
.L3861:
	movq	-5440(%rbp), %rax
	movl	$1, 1600(%rax)
.L3872:
	movq	-5496(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -5272(%rbp)
	movq	-5496(%rbp), %rax
	movq	(%rax), %rax
	movq	-5496(%rbp), %rdx
	addq	$16, %rdx
	cmpq	%rdx, %rax
	jne	.L3873
	movq	-5440(%rbp), %rax
	movq	$0, (%rax)
.L3873:
	movq	-5480(%rbp), %rax
	movq	%rax, %rdi
	leaq	-5408(%rbp), %rax
	movl	$286, %edx
	movq	%rax, %rsi
	movq	%rdx, %rcx
	rep movsq
.L3856:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3875
	call	__stack_chk_fail@PLT
.L3875:
	movq	-5480(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE561:
	.size	ecs_filter_iter, .-ecs_filter_iter
	.globl	ecs_filter_next
	.type	ecs_filter_next, @function
ecs_filter_next:
.LFB562:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-104(%rbp), %rax
	addq	$232, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-104(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L3879
	movq	-64(%rbp), %rax
	leaq	16(%rax), %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, (%rax)
.L3879:
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_iter_init
	movq	-72(%rbp), %rax
	movl	1600(%rax), %eax
	testl	%eax, %eax
	jne	.L3886
	movq	-72(%rbp), %rax
	addq	$1608, %rax
	movq	%rax, -48(%rbp)
.L3882:
	leaq	-80(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	term_iter_next
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L3887
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-104(%rbp), %rax
	movq	104(%rax), %r10
	movq	-104(%rbp), %rax
	movq	96(%rax), %r9
	movq	-104(%rbp), %rax
	movq	88(%rax), %r8
	movq	-104(%rbp), %rax
	movq	72(%rax), %rdi
	movq	-104(%rbp), %rax
	movq	80(%rax), %rbx
	movq	-104(%rbp), %rax
	movq	64(%rax), %r11
	movq	-32(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-32(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	pushq	%r10
	pushq	%r9
	pushq	%r8
	pushq	%rdi
	movq	%rbx, %r9
	movq	%r11, %r8
	movq	%rax, %rdi
	call	flecs_filter_match_table
	addq	$32, %rsp
	movb	%al, -81(%rbp)
	movzbl	-81(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3882
	movq	-32(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	populate_from_table
	nop
.L3883:
	endbr64
	movq	-104(%rbp), %rax
	movb	$1, 212(%rax)
	movl	$1, %eax
	jmp	.L3884
.L3886:
	nop
	jmp	.L3880
.L3887:
	nop
.L3880:
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_iter_fini
	movl	$0, %eax
.L3884:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L3885
	call	__stack_chk_fail@PLT
.L3885:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE562:
	.size	ecs_filter_next, .-ecs_filter_next
	.section	.rodata
.LC612:
	.string	"it->table != NULL"
.LC613:
	.string	"it->table != ((void *)0)"
	.text
	.type	observer_callback, @function
observer_callback:
.LFB563:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$2376, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -2376(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-2376(%rbp), %rax
	movq	168(%rax), %rax
	movq	%rax, -2360(%rbp)
	movq	-2376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -2352(%rbp)
	movq	-2376(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17652, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC612(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-2376(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	jne	.L3889
	leaq	__PRETTY_FUNCTION__.13339(%rip), %rcx
	movl	$17652, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC613(%rip), %rdi
	call	__assert_fail@PLT
.L3889:
	movq	-2376(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -2344(%rbp)
	movq	-2344(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -2336(%rbp)
	movq	-2376(%rbp), %rdx
	leaq	-2320(%rbp), %rax
	movq	%rdx, %rsi
	movl	$286, %edx
	movq	%rax, %rdi
	movq	%rdx, %rcx
	rep movsq
	movq	-2360(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -2184(%rbp)
	movq	$0, -2256(%rbp)
	movq	$0, -2240(%rbp)
	movq	$0, -2248(%rbp)
	movq	$0, -2232(%rbp)
	movq	$0, -2224(%rbp)
	movq	$0, -2216(%rbp)
	leaq	-2320(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_iter_init
	movq	-2216(%rbp), %r10
	movq	-2224(%rbp), %r9
	movq	-2232(%rbp), %r8
	movq	-2248(%rbp), %rdi
	movq	-2240(%rbp), %rbx
	movq	-2256(%rbp), %r11
	movq	-2360(%rbp), %rsi
	movq	-2336(%rbp), %rcx
	movq	-2344(%rbp), %rdx
	movq	-2352(%rbp), %rax
	pushq	%r10
	pushq	%r9
	pushq	%r8
	pushq	%rdi
	movq	%rbx, %r9
	movq	%r11, %r8
	movq	%rax, %rdi
	call	flecs_filter_match_table
	addq	$32, %rsp
	testb	%al, %al
	je	.L3890
	movq	-2344(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -2328(%rbp)
	movq	-2256(%rbp), %rdx
	movq	-2376(%rbp), %rax
	movl	140(%rax), %eax
	cltq
	salq	$3, %rax
	addq	%rax, %rdx
	movq	-2376(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, (%rdx)
	movq	-2360(%rbp), %rax
	movq	1720(%rax), %rax
	movq	%rax, -2304(%rbp)
	movq	-2376(%rbp), %rax
	movl	140(%rax), %eax
	movl	%eax, -2180(%rbp)
	movq	-2360(%rbp), %rax
	movq	1728(%rax), %rax
	movq	%rax, -2280(%rbp)
	movq	-2360(%rbp), %rax
	movq	1688(%rax), %rax
	movq	%rax, -2152(%rbp)
	movq	-2360(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -2184(%rbp)
	movq	-2328(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -2176(%rbp)
	movq	-2360(%rbp), %rax
	movq	1680(%rax), %rdx
	leaq	-2320(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L3890:
	leaq	-2320(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_iter_fini
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L3891
	call	__stack_chk_fail@PLT
.L3891:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE563:
	.size	observer_callback, .-observer_callback
	.section	.rodata
.LC614:
	.string	"observer != NULL"
.LC615:
	.string	"observer != ((void *)0)"
.LC616:
	.string	"comp->observer != NULL"
.LC617:
	.string	"comp->observer != ((void *)0)"
	.text
	.globl	ecs_observer_init
	.type	ecs_observer_init, @function
ecs_observer_init:
.LFB564:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$4096, %rsp
	orq	$0, (%rsp)
	subq	$8, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -4104(%rbp)
	movq	%rsi, -4112(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -4104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17692, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -4104(%rbp)
	jne	.L3893
	leaq	__PRETTY_FUNCTION__.13348(%rip), %rcx
	movl	$17692, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L3893:
	cmpq	$0, -4112(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17693, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC262(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -4112(%rbp)
	jne	.L3894
	leaq	__PRETTY_FUNCTION__.13348(%rip), %rcx
	movl	$17693, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC263(%rip), %rdi
	call	__assert_fail@PLT
.L3894:
	movq	-4104(%rbp), %rax
	movzbl	682(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17694, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC539(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-4104(%rbp), %rax
	movzbl	682(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L3895
	leaq	__PRETTY_FUNCTION__.13348(%rip), %rcx
	movl	$17694, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC539(%rip), %rdi
	call	__assert_fail@PLT
.L3895:
	movq	-4112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -4088(%rbp)
	movq	-4112(%rbp), %rdx
	movq	-4104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_entity_init
	movq	%rax, -4080(%rbp)
	movb	$0, -4093(%rbp)
	leaq	-4093(%rbp), %rdx
	movq	-4080(%rbp), %rsi
	movq	-4104(%rbp), %rax
	movq	%rdx, %rcx
	movl	$8, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -4072(%rbp)
	movzbl	-4093(%rbp), %eax
	testb	%al, %al
	je	.L3896
	movq	-4104(%rbp), %rax
	movq	240(%rax), %rax
	movl	$1744, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_add
	movq	%rax, -4064(%rbp)
	cmpq	$0, -4064(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17705, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC614(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -4064(%rbp)
	jne	.L3897
	leaq	__PRETTY_FUNCTION__.13348(%rip), %rcx
	movl	$17705, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC615(%rip), %rdi
	call	__assert_fail@PLT
.L3897:
	movq	-4104(%rbp), %rax
	movq	240(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_last_id
	movq	-4064(%rbp), %rdx
	movq	%rax, 1736(%rdx)
	movq	-4112(%rbp), %rdx
	leaq	-3136(%rbp), %rax
	addq	$576, %rdx
	movl	$388, %ecx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	rep movsq
	movq	-4112(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-4064(%rbp), %rcx
	leaq	-3136(%rbp), %rdx
	movq	-4104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_filter_init
	testl	%eax, %eax
	je	.L3898
	movq	-4064(%rbp), %rdx
	movq	-4104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_observer_fini
	movl	$0, %eax
	jmp	.L3909
.L3898:
	movq	-4064(%rbp), %rax
	movq	%rax, -4056(%rbp)
	movq	16+ecs_os_api(%rip), %rax
	movq	-4064(%rbp), %rdx
	movl	8(%rdx), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-4064(%rbp), %rdx
	movq	%rax, 1600(%rdx)
	movl	$0, -4092(%rbp)
	jmp	.L3900
.L3904:
	movq	-4056(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -4048(%rbp)
	movl	-4092(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-4048(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -4040(%rbp)
	movq	-4040(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$2, %eax
	je	.L3901
	movl	-4092(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-4048(%rbp), %rax
	addq	%rdx, %rax
	movq	64(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L3902
.L3901:
	movq	-4064(%rbp), %rax
	movq	1600(%rax), %rax
	movl	-4092(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	$0, (%rax)
	jmp	.L3903
.L3902:
	leaq	-4032(%rbp), %rdx
	movl	$0, %eax
	movl	$111, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-4040(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -3456(%rbp)
	movq	%rbx, -3448(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -3440(%rbp)
	movq	%rbx, -3432(%rbp)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, -3424(%rbp)
	movq	%rbx, -3416(%rbp)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, -3408(%rbp)
	movq	%rbx, -3400(%rbp)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, -3392(%rbp)
	movq	%rbx, -3384(%rbp)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, -3376(%rbp)
	movq	%rbx, -3368(%rbp)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, -3360(%rbp)
	movq	%rbx, -3352(%rbp)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, -3344(%rbp)
	movq	%rbx, -3336(%rbp)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, -3328(%rbp)
	movq	%rbx, -3320(%rbp)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, -3312(%rbp)
	movq	%rbx, -3304(%rbp)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, -3296(%rbp)
	movq	%rbx, -3288(%rbp)
	movq	184(%rax), %rdx
	movq	176(%rax), %rax
	movq	%rax, -3280(%rbp)
	movq	%rdx, -3272(%rbp)
	leaq	observer_callback(%rip), %rax
	movq	%rax, -3192(%rbp)
	movq	-4064(%rbp), %rax
	movq	%rax, -3176(%rbp)
	movq	-4112(%rbp), %rax
	movq	3768(%rax), %rax
	movq	%rax, -3168(%rbp)
	movq	-4112(%rbp), %rax
	leaq	3680(%rax), %rcx
	leaq	-4032(%rbp), %rax
	addq	$776, %rax
	movl	$64, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-4064(%rbp), %rax
	movq	1600(%rax), %rax
	movl	-4092(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	leaq	(%rax,%rdx), %rbx
	leaq	-4032(%rbp), %rdx
	movq	-4104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_trigger_init
	movq	%rax, (%rbx)
.L3903:
	addl	$1, -4092(%rbp)
.L3900:
	movq	-4056(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -4092(%rbp)
	jl	.L3904
	movq	-4112(%rbp), %rax
	movq	3744(%rax), %rdx
	movq	-4064(%rbp), %rax
	movq	%rdx, 1680(%rax)
	movq	-4112(%rbp), %rax
	movq	3752(%rax), %rdx
	movq	-4064(%rbp), %rax
	movq	%rdx, 1728(%rax)
	movq	-4112(%rbp), %rax
	movq	3760(%rax), %rdx
	movq	-4064(%rbp), %rax
	movq	%rdx, 1688(%rax)
	movq	-4112(%rbp), %rax
	movq	3768(%rax), %rdx
	movq	-4064(%rbp), %rax
	movq	%rdx, 1696(%rax)
	movq	-4112(%rbp), %rax
	movq	3776(%rax), %rdx
	movq	-4064(%rbp), %rax
	movq	%rdx, 1704(%rax)
	movq	-4112(%rbp), %rax
	movq	3784(%rax), %rdx
	movq	-4064(%rbp), %rax
	movq	%rdx, 1712(%rax)
	movq	-4064(%rbp), %rax
	movl	$0, 1672(%rax)
	movq	-4064(%rbp), %rax
	movl	1672(%rax), %eax
	sall	$3, %eax
	cltq
	movq	-4112(%rbp), %rdx
	leaq	3680(%rdx), %rsi
	movq	-4064(%rbp), %rdx
	leaq	1608(%rdx), %rcx
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	memcpy@PLT
	movq	-4064(%rbp), %rax
	movq	-4080(%rbp), %rdx
	movq	%rdx, 1720(%rax)
	movq	-4072(%rbp), %rax
	movq	-4064(%rbp), %rdx
	movq	%rdx, (%rax)
	jmp	.L3905
.L3896:
	movq	-4072(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17763, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC616(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-4072(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L3906
	leaq	__PRETTY_FUNCTION__.13348(%rip), %rcx
	movl	$17763, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC617(%rip), %rdi
	call	__assert_fail@PLT
.L3906:
	cmpq	$0, -4088(%rbp)
	je	.L3905
	movq	-4112(%rbp), %rax
	movq	3744(%rax), %rax
	testq	%rax, %rax
	je	.L3907
	movq	-4072(%rbp), %rax
	movq	(%rax), %rax
	movq	-4112(%rbp), %rdx
	movq	3744(%rdx), %rdx
	movq	%rdx, 1680(%rax)
.L3907:
	movq	-4112(%rbp), %rax
	movq	3760(%rax), %rax
	testq	%rax, %rax
	je	.L3908
	movq	-4072(%rbp), %rax
	movq	(%rax), %rax
	movq	-4112(%rbp), %rdx
	movq	3760(%rdx), %rdx
	movq	%rdx, 1688(%rax)
.L3908:
	movq	-4112(%rbp), %rax
	movq	3768(%rax), %rax
	testq	%rax, %rax
	je	.L3905
	movq	-4072(%rbp), %rax
	movq	(%rax), %rax
	movq	-4112(%rbp), %rdx
	movq	3768(%rdx), %rdx
	movq	%rdx, 1696(%rax)
.L3905:
	movq	-4080(%rbp), %rax
.L3909:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L3910
	call	__stack_chk_fail@PLT
.L3910:
	addq	$4104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE564:
	.size	ecs_observer_init, .-ecs_observer_init
	.globl	flecs_observer_fini
	.type	flecs_observer_fini, @function
flecs_observer_fini:
.LFB565:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L3912
.L3914:
	movq	-32(%rbp), %rax
	movq	1600(%rax), %rax
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L3913
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_delete
.L3913:
	addl	$1, -16(%rbp)
.L3912:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L3914
	movq	40+ecs_os_api(%rip), %rdx
	movq	-32(%rbp), %rax
	movq	1600(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_filter_fini
	movq	-32(%rbp), %rax
	movq	1704(%rax), %rax
	testq	%rax, %rax
	je	.L3915
	movq	-32(%rbp), %rax
	movq	1704(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	1688(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L3915:
	movq	-32(%rbp), %rax
	movq	1712(%rax), %rax
	testq	%rax, %rax
	je	.L3916
	movq	-32(%rbp), %rax
	movq	1712(%rax), %rdx
	movq	-32(%rbp), %rax
	movq	1696(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L3916:
	movq	-32(%rbp), %rax
	movq	1736(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	240(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_remove
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE565:
	.size	flecs_observer_fini, .-flecs_observer_fini
	.globl	ecs_get_observer_ctx
	.type	ecs_get_observer_ctx, @function
ecs_get_observer_ctx:
.LFB566:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L3918
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	1688(%rax), %rax
	jmp	.L3919
.L3918:
	movl	$0, %eax
.L3919:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE566:
	.size	ecs_get_observer_ctx, .-ecs_get_observer_ctx
	.globl	ecs_get_observer_binding_ctx
	.type	ecs_get_observer_binding_ctx, @function
ecs_get_observer_binding_ctx:
.LFB567:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$8, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L3921
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	1696(%rax), %rax
	jmp	.L3922
.L3921:
	movl	$0, %eax
.L3922:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE567:
	.size	ecs_get_observer_binding_ctx, .-ecs_get_observer_binding_ctx
	.type	ensure, @function
ensure:
.LFB568:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	testl	%eax, %eax
	jne	.L3924
	movl	-28(%rbp), %eax
	subl	$1, %eax
	leal	63(%rax), %edx
	testl	%eax, %eax
	cmovs	%edx, %eax
	sarl	$6, %eax
	addl	$1, %eax
	sall	$3, %eax
	movl	%eax, -4(%rbp)
	movl	-28(%rbp), %eax
	subl	$1, %eax
	leal	63(%rax), %edx
	testl	%eax, %eax
	cmovs	%edx, %eax
	sarl	$6, %eax
	addl	$1, %eax
	sall	$6, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 12(%rax)
	movq	32+ecs_os_api(%rip), %rdx
	movl	-4(%rbp), %eax
	movl	%eax, %edi
	call	*%rdx
	movq	-24(%rbp), %rdx
	movq	%rax, (%rdx)
	jmp	.L3926
.L3924:
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jle	.L3926
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	leal	63(%rax), %edx
	testl	%eax, %eax
	cmovs	%edx, %eax
	sarl	$6, %eax
	addl	$1, %eax
	sall	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	subl	$1, %eax
	leal	63(%rax), %edx
	testl	%eax, %eax
	cmovs	%edx, %eax
	sarl	$6, %eax
	addl	$1, %eax
	sall	$6, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 12(%rax)
	movl	-28(%rbp), %eax
	subl	$1, %eax
	leal	63(%rax), %edx
	testl	%eax, %eax
	cmovs	%edx, %eax
	sarl	$6, %eax
	addl	$1, %eax
	sall	$3, %eax
	movl	%eax, -8(%rbp)
	movq	24+ecs_os_api(%rip), %rcx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	movq	%rax, %rdi
	call	*%rcx
	movq	-24(%rbp), %rdx
	movq	%rax, (%rdx)
	movl	-8(%rbp), %eax
	subl	-12(%rbp), %eax
	cltq
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, %rcx
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	addq	%rcx, %rdx
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movl	$0, %esi
	movq	%rcx, %rdi
	call	memset@PLT
.L3926:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE568:
	.size	ensure, .-ensure
	.globl	flecs_bitset_init
	.type	flecs_bitset_init, @function
flecs_bitset_init:
.LFB569:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE569:
	.size	flecs_bitset_init, .-flecs_bitset_init
	.globl	flecs_bitset_ensure
	.type	flecs_bitset_ensure, @function
flecs_bitset_ensure:
.LFB570:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jle	.L3930
	movq	-8(%rbp), %rax
	movl	-12(%rbp), %edx
	movl	%edx, 8(%rax)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ensure
.L3930:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE570:
	.size	flecs_bitset_ensure, .-flecs_bitset_ensure
	.globl	flecs_bitset_deinit
	.type	flecs_bitset_deinit, @function
flecs_bitset_deinit:
.LFB571:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE571:
	.size	flecs_bitset_deinit, .-flecs_bitset_deinit
	.globl	flecs_bitset_addn
	.type	flecs_bitset_addn, @function
flecs_bitset_addn:
.LFB572:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %edx
	movl	-28(%rbp), %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ensure
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE572:
	.size	flecs_bitset_addn, .-flecs_bitset_addn
	.section	.rodata
.LC618:
	.string	"elem < bs->count"
	.text
	.globl	flecs_bitset_set
	.type	flecs_bitset_set, @function
flecs_bitset_set:
.LFB573:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, %eax
	movb	%al, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -28(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17889, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC618(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L3934
	leaq	__PRETTY_FUNCTION__.13411(%rip), %rcx
	movl	$17889, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC618(%rip), %rdi
	call	__assert_fail@PLT
.L3934:
	movl	-28(%rbp), %eax
	sarl	$6, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	andl	$63, %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movl	-12(%rbp), %eax
	movl	$1, %edx
	movl	%eax, %ecx
	salq	%cl, %rdx
	movq	%rdx, %rax
	notq	%rax
	andq	-8(%rbp), %rax
	movq	%rax, %rdx
	movzbl	-32(%rbp), %esi
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	salq	%cl, %rsi
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	salq	$3, %rcx
	addq	%rcx, %rax
	orq	%rsi, %rdx
	movq	%rdx, (%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE573:
	.size	flecs_bitset_set, .-flecs_bitset_set
	.globl	flecs_bitset_get
	.type	flecs_bitset_get, @function
flecs_bitset_get:
.LFB574:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -12(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17900, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC618(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L3936
	leaq	__PRETTY_FUNCTION__.13419(%rip), %rcx
	movl	$17900, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC618(%rip), %rdi
	call	__assert_fail@PLT
.L3936:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %edx
	sarl	$6, %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movl	-12(%rbp), %eax
	andl	$63, %eax
	movl	%eax, %ecx
	shrq	%cl, %rdx
	movq	%rdx, %rax
	andl	$1, %eax
	testq	%rax, %rax
	setne	%al
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE574:
	.size	flecs_bitset_get, .-flecs_bitset_get
	.globl	flecs_bitset_count
	.type	flecs_bitset_count, @function
flecs_bitset_count:
.LFB575:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE575:
	.size	flecs_bitset_count, .-flecs_bitset_count
	.globl	flecs_bitset_remove
	.type	flecs_bitset_remove, @function
flecs_bitset_remove:
.LFB576:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -28(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17914, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC618(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L3941
	leaq	__PRETTY_FUNCTION__.13427(%rip), %rcx
	movl	$17914, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC618(%rip), %rdi
	call	__assert_fail@PLT
.L3941:
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_get
	movb	%al, -5(%rbp)
	movzbl	-5(%rbp), %edx
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_set
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	leal	-1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 8(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE576:
	.size	flecs_bitset_remove, .-flecs_bitset_remove
	.section	.rodata
.LC619:
	.string	"elem_a < bs->count"
.LC620:
	.string	"elem_b < bs->count"
	.text
	.globl	flecs_bitset_swap
	.type	flecs_bitset_swap, @function
flecs_bitset_swap:
.LFB577:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -28(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17926, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC619(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L3943
	leaq	__PRETTY_FUNCTION__.13435(%rip), %rcx
	movl	$17926, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC619(%rip), %rdi
	call	__assert_fail@PLT
.L3943:
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -32(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$17927, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC620(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -32(%rbp)
	jl	.L3944
	leaq	__PRETTY_FUNCTION__.13435(%rip), %rcx
	movl	$17927, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC620(%rip), %rdi
	call	__assert_fail@PLT
.L3944:
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_get
	movb	%al, -2(%rbp)
	movl	-32(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_get
	movb	%al, -1(%rbp)
	movzbl	-1(%rbp), %edx
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_set
	movzbl	-2(%rbp), %edx
	movl	-32(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	flecs_bitset_set
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE577:
	.size	flecs_bitset_swap, .-flecs_bitset_swap
	.type	ecs_strbuf_grow, @function
ecs_strbuf_grow:
.LFB578:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	16+ecs_os_api(%rip), %rax
	movl	$536, %edi
	call	*%rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	12(%rax), %edx
	movq	-24(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 12(%rax)
	movq	-24(%rbp), %rax
	movq	560(%rax), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 560(%rax)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-8(%rbp), %rax
	movb	$1, (%rax)
	movq	-8(%rbp), %rax
	leaq	24(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 16(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE578:
	.size	ecs_strbuf_grow, .-ecs_strbuf_grow
	.type	ecs_strbuf_grow_str, @function
ecs_strbuf_grow_str:
.LFB579:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	16+ecs_os_api(%rip), %rax
	movl	$32, %edi
	call	*%rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	12(%rax), %edx
	movq	-24(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 12(%rax)
	movq	-24(%rbp), %rax
	movq	560(%rax), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, 560(%rax)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-8(%rbp), %rax
	movb	$0, (%rax)
	cmpl	$0, -44(%rbp)
	jne	.L3947
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	jmp	.L3948
.L3947:
	movl	-44(%rbp), %eax
.L3948:
	movq	-8(%rbp), %rdx
	movl	%eax, 4(%rdx)
	movq	-8(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 24(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE579:
	.size	ecs_strbuf_grow_str, .-ecs_strbuf_grow_str
	.type	ecs_strbuf_ptr, @function
ecs_strbuf_ptr:
.LFB580:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3950
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	jmp	.L3951
.L3950:
	movq	-8(%rbp), %rax
	movq	560(%rax), %rax
	movq	8(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
.L3951:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE580:
	.size	ecs_strbuf_ptr, .-ecs_strbuf_ptr
	.type	ecs_strbuf_memLeftInCurrentElement, @function
ecs_strbuf_memLeftInCurrentElement:
.LFB581:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	560(%rax), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L3953
	movq	-8(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %eax
	movl	$511, %edx
	subl	%eax, %edx
	movl	%edx, %eax
	jmp	.L3954
.L3953:
	movl	$0, %eax
.L3954:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE581:
	.size	ecs_strbuf_memLeftInCurrentElement, .-ecs_strbuf_memLeftInCurrentElement
	.type	ecs_strbuf_memLeft, @function
ecs_strbuf_memLeft:
.LFB582:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L3956
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	%eax, %edx
	movq	-8(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %eax
	subl	%eax, %edx
	movl	%edx, %eax
	jmp	.L3957
.L3956:
	movl	$2147483647, %eax
.L3957:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE582:
	.size	ecs_strbuf_memLeft, .-ecs_strbuf_memLeft
	.type	ecs_strbuf_init, @function
ecs_strbuf_init:
.LFB583:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	jne	.L3960
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movb	$1, 24(%rax)
	movq	-8(%rbp), %rax
	leaq	48(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 32(%rax)
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	leal	1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-8(%rbp), %rax
	leaq	24(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 560(%rax)
.L3960:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE583:
	.size	ecs_strbuf_init, .-ecs_strbuf_init
	.section	.rodata
.LC621:
	.string	"n_cpy >= 0"
.LC622:
	.string	"n >= 0"
.LC623:
	.string	"ptr - orig < INT32_MAX"
.LC624:
	.string	"ptr - orig < (2147483647)"
	.text
	.type	fast_strncpy, @function
fast_strncpy:
.LFB584:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -56(%rbp)
	movl	-52(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18033, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC621(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -52(%rbp)
	jns	.L3962
	leaq	__PRETTY_FUNCTION__.13467(%rip), %rcx
	movl	$18033, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC621(%rip), %rdi
	call	__assert_fail@PLT
.L3962:
	movl	-56(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18034, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC622(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -56(%rbp)
	jns	.L3963
	leaq	__PRETTY_FUNCTION__.13467(%rip), %rcx
	movl	$18034, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC622(%rip), %rdi
	call	__assert_fail@PLT
.L3963:
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	.L3964
.L3967:
	movq	-16(%rbp), %rax
	subq	-8(%rbp), %rax
	movq	%rax, %rdx
	movl	-52(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	jge	.L3965
	movq	-40(%rbp), %rax
	movzbl	-17(%rbp), %edx
	movb	%dl, (%rax)
	addq	$1, -40(%rbp)
.L3965:
	addq	$1, -16(%rbp)
.L3964:
	movq	-16(%rbp), %rax
	subq	-8(%rbp), %rax
	movq	%rax, %rdx
	movl	-56(%rbp), %eax
	cltq
	cmpq	%rax, %rdx
	jge	.L3966
	movq	-16(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -17(%rbp)
	cmpb	$0, -17(%rbp)
	jne	.L3967
.L3966:
	movq	-16(%rbp), %rax
	subq	-8(%rbp), %rax
	cmpq	$2147483646, %rax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18046, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC623(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	subq	-8(%rbp), %rax
	cmpq	$2147483646, %rax
	jle	.L3968
	leaq	__PRETTY_FUNCTION__.13467(%rip), %rcx
	movl	$18046, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC624(%rip), %rdi
	call	__assert_fail@PLT
.L3968:
	movq	-16(%rbp), %rax
	subq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE584:
	.size	fast_strncpy, .-fast_strncpy
	.section	.rodata
.LC625:
	.string	"memRequired != -1"
	.text
	.type	ecs_strbuf_vappend_intern, @function
ecs_strbuf_vappend_intern:
.LFB585:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movb	$1, -73(%rbp)
	cmpq	$0, -96(%rbp)
	jne	.L3971
	movzbl	-73(%rbp), %eax
	jmp	.L3981
.L3971:
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_init
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_memLeftInCurrentElement
	movl	%eax, -72(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_memLeft
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.L3973
	movl	$0, %eax
	jmp	.L3981
.L3973:
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3974
	movl	-68(%rbp), %eax
	jmp	.L3975
.L3974:
	movl	-72(%rbp), %eax
.L3975:
	movl	%eax, -64(%rbp)
	leaq	-48(%rbp), %rcx
	movq	-104(%rbp), %rsi
	movq	(%rsi), %rax
	movq	8(%rsi), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rax
	movq	%rax, 16(%rcx)
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movslq	%eax, %rbx
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_ptr
	movq	%rax, %rdi
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rax
	movq	%rdx, %rcx
	movq	%rax, %rdx
	movq	%rbx, %rsi
	call	vsnprintf@PLT
	movl	%eax, -60(%rbp)
	cmpl	$-1, -60(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18084, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC625(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$-1, -60(%rbp)
	jne	.L3976
	leaq	__PRETTY_FUNCTION__.13485(%rip), %rcx
	movl	$18084, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC625(%rip), %rdi
	call	__assert_fail@PLT
.L3976:
	movl	-60(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jg	.L3977
	movq	-88(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %ecx
	movq	-88(%rbp), %rax
	movq	560(%rax), %rax
	movl	-60(%rbp), %edx
	addl	%ecx, %edx
	movl	%edx, 4(%rax)
	jmp	.L3978
.L3977:
	movl	-60(%rbp), %eax
	subl	-72(%rbp), %eax
	cmpl	%eax, -68(%rbp)
	jle	.L3979
	cmpl	$511, -60(%rbp)
	jg	.L3980
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_grow
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_ptr
	movq	%rax, %rcx
	leaq	-48(%rbp), %rdx
	movq	-96(%rbp), %rax
	movq	%rax, %rsi
	movq	%rcx, %rdi
	call	vsprintf@PLT
	movq	-88(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %ecx
	movq	-88(%rbp), %rax
	movq	560(%rax), %rax
	movl	-60(%rbp), %edx
	addl	%ecx, %edx
	movl	%edx, 4(%rax)
	jmp	.L3978
.L3980:
	movq	16+ecs_os_api(%rip), %rax
	movl	-60(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -56(%rbp)
	leaq	-48(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vsprintf@PLT
	movl	-60(%rbp), %ecx
	movq	-56(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_grow_str
	jmp	.L3978
.L3979:
	movb	$0, -73(%rbp)
.L3978:
	movzbl	-73(%rbp), %eax
.L3981:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L3982
	call	__stack_chk_fail@PLT
.L3982:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE585:
	.size	ecs_strbuf_vappend_intern, .-ecs_strbuf_vappend_intern
	.type	ecs_strbuf_append_intern, @function
ecs_strbuf_append_intern:
.LFB586:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r12
	pushq	%rbx
	subq	$64, %rsp
	.cfi_offset 12, -24
	.cfi_offset 3, -32
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movb	$1, -41(%rbp)
	cmpq	$0, -64(%rbp)
	jne	.L3984
	movzbl	-41(%rbp), %eax
	jmp	.L3985
.L3984:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_init
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_memLeftInCurrentElement
	movl	%eax, -40(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_memLeft
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jg	.L3986
	movl	$0, %eax
	jmp	.L3985
.L3986:
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L3987
	movl	-36(%rbp), %eax
	jmp	.L3988
.L3987:
	movl	-40(%rbp), %eax
.L3988:
	movl	%eax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	jns	.L3989
	movl	$2147483647, -68(%rbp)
.L3989:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_ptr
	movq	%rax, %rdi
	movl	-68(%rbp), %ecx
	movl	-32(%rbp), %edx
	movq	-64(%rbp), %rax
	movq	%rax, %rsi
	call	fast_strncpy
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.L3990
	movq	-56(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	560(%rax), %rax
	movl	-28(%rbp), %edx
	addl	%ecx, %edx
	movl	%edx, 4(%rax)
	jmp	.L3991
.L3990:
	movl	-28(%rbp), %eax
	subl	-40(%rbp), %eax
	cmpl	%eax, -36(%rbp)
	jle	.L3992
	movq	-56(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	560(%rax), %rax
	movl	-40(%rbp), %edx
	addl	%ecx, %edx
	movl	%edx, 4(%rax)
	movl	-40(%rbp), %eax
	subl	%eax, -28(%rbp)
	cmpl	$510, -28(%rbp)
	jg	.L3993
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_grow
	cmpl	$0, -68(%rbp)
	je	.L3994
	movl	-28(%rbp), %eax
	movslq	%eax, %rbx
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rax
	leaq	(%rdx,%rax), %r12
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_ptr
	movq	%rbx, %rdx
	movq	%r12, %rsi
	movq	%rax, %rdi
	call	strncpy@PLT
	jmp	.L3995
.L3994:
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_ptr
	movq	%rbx, %rsi
	movq	%rax, %rdi
	call	strcpy@PLT
.L3995:
	movq	-56(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %ecx
	movq	-56(%rbp), %rax
	movq	560(%rax), %rax
	movl	-28(%rbp), %edx
	addl	%ecx, %edx
	movl	%edx, 4(%rax)
	jmp	.L3991
.L3993:
	movq	48+ecs_os_api(%rip), %rax
	movl	-40(%rbp), %edx
	movslq	%edx, %rcx
	movq	-64(%rbp), %rdx
	addq	%rcx, %rdx
	movq	%rdx, %rdi
	call	*%rax
	movq	%rax, -24(%rbp)
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_grow_str
	jmp	.L3991
.L3992:
	movb	$0, -41(%rbp)
.L3991:
	movzbl	-41(%rbp), %eax
.L3985:
	addq	$64, %rsp
	popq	%rbx
	popq	%r12
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE586:
	.size	ecs_strbuf_append_intern, .-ecs_strbuf_append_intern
	.globl	ecs_strbuf_vappend
	.type	ecs_strbuf_vappend, @function
ecs_strbuf_vappend:
.LFB587:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_vappend_intern
	movb	%al, -1(%rbp)
	movzbl	-1(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE587:
	.size	ecs_strbuf_vappend, .-ecs_strbuf_vappend
	.globl	ecs_strbuf_append
	.type	ecs_strbuf_append, @function
ecs_strbuf_append:
.LFB588:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$240, %rsp
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	%rdx, -160(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L3999
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L3999:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movl	$16, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %rdx
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_vappend_intern
	movb	%al, -209(%rbp)
	movzbl	-209(%rbp), %eax
	movq	-184(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L4001
	call	__stack_chk_fail@PLT
.L4001:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE588:
	.size	ecs_strbuf_append, .-ecs_strbuf_append
	.globl	ecs_strbuf_appendstrn
	.type	ecs_strbuf_appendstrn, @function
ecs_strbuf_appendstrn:
.LFB589:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %edx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_append_intern
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE589:
	.size	ecs_strbuf_appendstrn, .-ecs_strbuf_appendstrn
	.globl	ecs_strbuf_appendstr_zerocpy
	.type	ecs_strbuf_appendstr_zerocpy, @function
ecs_strbuf_appendstr_zerocpy:
.LFB590:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_init
	movq	-16(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_strbuf_grow_str
	movl	$1, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE590:
	.size	ecs_strbuf_appendstr_zerocpy, .-ecs_strbuf_appendstr_zerocpy
	.globl	ecs_strbuf_appendstr_zerocpy_const
	.type	ecs_strbuf_appendstr_zerocpy_const, @function
ecs_strbuf_appendstr_zerocpy_const:
.LFB591:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_init
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	$0, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	ecs_strbuf_grow_str
	movl	$1, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE591:
	.size	ecs_strbuf_appendstr_zerocpy_const, .-ecs_strbuf_appendstr_zerocpy_const
	.globl	ecs_strbuf_appendstr
	.type	ecs_strbuf_appendstr, @function
ecs_strbuf_appendstr:
.LFB592:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movl	$-1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_append_intern
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE592:
	.size	ecs_strbuf_appendstr, .-ecs_strbuf_appendstr
	.globl	ecs_strbuf_mergebuff
	.type	ecs_strbuf_mergebuff, @function
ecs_strbuf_mergebuff:
.LFB593:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$1144, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -1144(%rbp)
	movq	%rsi, -1152(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-1152(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	je	.L4011
	movq	-1152(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L4012
	movq	-1152(%rbp), %rax
	movq	(%rax), %rdx
	movq	-1144(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L4013
.L4012:
	movq	-1152(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -1128(%rbp)
	movq	-1128(%rbp), %rax
	movl	4(%rax), %edx
	movq	-1128(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-1144(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstrn
	jmp	.L4014
.L4015:
	movq	16+ecs_os_api(%rip), %rax
	movq	-1144(%rbp), %rdx
	movq	560(%rdx), %rbx
	movl	$24, %edi
	call	*%rax
	movq	%rax, 16(%rbx)
	movq	-1144(%rbp), %rax
	movq	560(%rax), %rax
	movq	16(%rax), %rcx
	movq	-1128(%rbp), %rsi
	movq	(%rsi), %rax
	movq	8(%rsi), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	16(%rsi), %rax
	movq	%rax, 16(%rcx)
.L4014:
	movq	-1128(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -1128(%rbp)
	cmpq	$0, -1128(%rbp)
	jne	.L4015
	movq	-1152(%rbp), %rax
	movq	%rax, %rsi
	movl	$0, %eax
	movl	$136, %edx
	movq	%rsi, %rdi
	movq	%rdx, %rcx
	rep stosq
.L4011:
	movl	$1, %eax
.L4013:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L4016
	call	__stack_chk_fail@PLT
.L4016:
	addq	$1144, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE593:
	.size	ecs_strbuf_mergebuff, .-ecs_strbuf_mergebuff
	.globl	ecs_strbuf_get
	.type	ecs_strbuf_get, @function
ecs_strbuf_get:
.LFB594:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	$0, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	je	.L4018
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L4019
	movq	-56(%rbp), %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	48+ecs_os_api(%rip), %rdx
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -32(%rbp)
	jmp	.L4020
.L4019:
	movq	$0, -8(%rbp)
	movq	-56(%rbp), %rax
	movl	12(%rax), %edx
	movq	-56(%rbp), %rax
	movq	560(%rax), %rax
	movl	4(%rax), %eax
	addl	%edx, %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	-56(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -24(%rbp)
	movq	16+ecs_os_api(%rip), %rdx
	movl	-36(%rbp), %eax
	movl	%eax, %edi
	call	*%rdx
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.L4023:
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	cltq
	addq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-56(%rbp), %rax
	addq	$24, %rax
	cmpq	%rax, -24(%rbp)
	je	.L4021
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L4022
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L4022:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L4021:
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L4023
	movl	-36(%rbp), %eax
	cltq
	leaq	-1(%rax), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	jmp	.L4020
.L4018:
	movq	$0, -32(%rbp)
.L4020:
	movq	-56(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-32(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE594:
	.size	ecs_strbuf_get, .-ecs_strbuf_get
	.globl	ecs_strbuf_reset
	.type	ecs_strbuf_reset, @function
ecs_strbuf_reset:
.LFB595:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1136, %rsp
	movq	%rdi, -1128(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-1128(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	je	.L4026
	movq	-1128(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L4026
	movq	$0, -1112(%rbp)
	movq	-1128(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -1120(%rbp)
.L4028:
	movq	-1120(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -1112(%rbp)
	movq	-1128(%rbp), %rax
	addq	$24, %rax
	cmpq	%rax, -1120(%rbp)
	je	.L4027
	movq	40+ecs_os_api(%rip), %rdx
	movq	-1120(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L4027:
	movq	-1112(%rbp), %rax
	movq	%rax, -1120(%rbp)
	cmpq	$0, -1120(%rbp)
	jne	.L4028
.L4026:
	movq	-1128(%rbp), %rax
	movq	%rax, %rsi
	movl	$0, %eax
	movl	$136, %edx
	movq	%rsi, %rdi
	movq	%rdx, %rcx
	rep stosq
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4029
	call	__stack_chk_fail@PLT
.L4029:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE595:
	.size	ecs_strbuf_reset, .-ecs_strbuf_reset
	.globl	ecs_strbuf_list_push
	.type	ecs_strbuf_list_push, @function
ecs_strbuf_list_push:
.LFB596:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	movl	1080(%rax), %eax
	leal	1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 1080(%rax)
	movq	-8(%rbp), %rax
	movl	1080(%rax), %edx
	movq	-8(%rbp), %rax
	movslq	%edx, %rdx
	addq	$35, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	addq	$8, %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	1080(%rax), %edx
	movq	-8(%rbp), %rax
	movslq	%edx, %rdx
	addq	$35, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	leaq	16(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, (%rdx)
	cmpq	$0, -16(%rbp)
	je	.L4032
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L4032:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE596:
	.size	ecs_strbuf_list_push, .-ecs_strbuf_list_push
	.globl	ecs_strbuf_list_pop
	.type	ecs_strbuf_list_pop, @function
ecs_strbuf_list_pop:
.LFB597:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movl	1080(%rax), %eax
	leal	-1(%rax), %edx
	movq	-8(%rbp), %rax
	movl	%edx, 1080(%rax)
	cmpq	$0, -16(%rbp)
	je	.L4035
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L4035:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE597:
	.size	ecs_strbuf_list_pop, .-ecs_strbuf_list_pop
	.globl	ecs_strbuf_list_next
	.type	ecs_strbuf_list_next, @function
ecs_strbuf_list_next:
.LFB598:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	1080(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	addq	$35, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	addq	$8, %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L4037
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	addq	$35, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	addq	$16, %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L4037:
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %edx
	movslq	%edx, %rdx
	addq	$35, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	addq	$8, %rax
	movl	(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	$35, %rcx
	salq	$4, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movl	%edx, (%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE598:
	.size	ecs_strbuf_list_next, .-ecs_strbuf_list_next
	.globl	ecs_strbuf_list_append
	.type	ecs_strbuf_list_append, @function
ecs_strbuf_list_append:
.LFB599:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$240, %rsp
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	%rdx, -160(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L4039
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L4039:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movq	-232(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_list_next
	movl	$16, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %rdx
	movq	-240(%rbp), %rcx
	movq	-232(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_vappend_intern
	movb	%al, -209(%rbp)
	movzbl	-209(%rbp), %eax
	movq	-184(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L4041
	call	__stack_chk_fail@PLT
.L4041:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE599:
	.size	ecs_strbuf_list_append, .-ecs_strbuf_list_append
	.globl	ecs_strbuf_list_appendstr
	.type	ecs_strbuf_list_appendstr, @function
ecs_strbuf_list_appendstr:
.LFB600:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_list_next
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE600:
	.size	ecs_strbuf_list_appendstr, .-ecs_strbuf_list_appendstr
	.section	.rodata
.LC626:
	.string	"type_2 != NULL"
.LC627:
	.string	"type_2 != ((void *)0)"
.LC628:
	.string	"t1_array != NULL"
.LC629:
	.string	"t1_array != ((void *)0)"
.LC630:
	.string	"t2_array != NULL"
.LC631:
	.string	"t2_array != ((void *)0)"
	.text
	.globl	flecs_type_contains
	.type	flecs_type_contains, @function
flecs_type_contains:
.LFB601:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movl	%ecx, %eax
	movl	%r8d, %edx
	movb	%al, -92(%rbp)
	movl	%edx, %eax
	movb	%al, -96(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18411, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L4045
	leaq	__PRETTY_FUNCTION__.13584(%rip), %rcx
	movl	$18411, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L4045:
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -72(%rbp)
	cmpq	$0, -80(%rbp)
	jne	.L4046
	movl	$0, %eax
	jmp	.L4047
.L4046:
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18418, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC626(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L4048
	leaq	__PRETTY_FUNCTION__.13584(%rip), %rcx
	movl	$18418, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC627(%rip), %rdi
	call	__assert_fail@PLT
.L4048:
	movq	-80(%rbp), %rax
	cmpq	-88(%rbp), %rax
	jne	.L4049
	movq	-80(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	(%rax), %rax
	jmp	.L4047
.L4049:
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	$1, %eax
	jne	.L4050
	movzbl	-96(%rbp), %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %ebx
	movq	-88(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	(%rax), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	%ebx, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	movzbl	%al, %eax
	jmp	.L4047
.L4050:
	movl	$0, -60(%rbp)
	movq	$0, -48(%rbp)
	movq	-80(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movq	-88(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18434, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC628(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L4051
	leaq	__PRETTY_FUNCTION__.13584(%rip), %rcx
	movl	$18434, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC629(%rip), %rdi
	call	__assert_fail@PLT
.L4051:
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18435, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC630(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L4052
	leaq	__PRETTY_FUNCTION__.13584(%rip), %rcx
	movl	$18435, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC631(%rip), %rdi
	call	__assert_fail@PLT
.L4052:
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -56(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -52(%rbp)
	movl	$0, -64(%rbp)
	jmp	.L4053
.L4062:
	movl	-64(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jl	.L4054
	movl	$0, %eax
	jmp	.L4047
.L4054:
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jbe	.L4055
.L4057:
	addl	$1, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jl	.L4056
	movl	$0, %eax
	jmp	.L4047
.L4056:
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	cmpq	-48(%rbp), %rax
	ja	.L4057
.L4055:
	movq	-48(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.L4058
	movq	-48(%rbp), %rax
	cmpq	-24(%rbp), %rax
	je	.L4059
	cmpb	$0, -92(%rbp)
	je	.L4060
	movl	$0, %eax
	jmp	.L4047
.L4059:
	movzbl	-92(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L4060
	movq	-48(%rbp), %rax
	jmp	.L4047
.L4058:
	movzbl	-92(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L4061
	movq	-48(%rbp), %rax
	jmp	.L4047
.L4061:
	addl	$1, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.L4060
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
.L4060:
	addl	$1, -64(%rbp)
.L4053:
	movl	-64(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L4062
	cmpb	$0, -92(%rbp)
	je	.L4063
	movq	-48(%rbp), %rax
	jmp	.L4047
.L4063:
	movl	$0, %eax
.L4047:
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE601:
	.size	flecs_type_contains, .-flecs_type_contains
	.globl	ecs_type_merge
	.type	ecs_type_merge, @function
ecs_type_merge:
.LFB602:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18489, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L4065
	leaq	__PRETTY_FUNCTION__.13604(%rip), %rcx
	movl	$18489, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L4065:
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -64(%rbp)
	movq	-80(%rbp), %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_table_from_type
	movq	%rax, -56(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -56(%rbp)
	leaq	-48(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L4066
	movl	$0, %eax
	jmp	.L4068
.L4066:
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
.L4068:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4069
	call	__stack_chk_fail@PLT
.L4069:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE602:
	.size	ecs_type_merge, .-ecs_type_merge
	.type	has_case, @function
has_case:
.LFB603:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movabsq	$72057594037927935, %rax
	andq	-40(%rbp), %rax
	movq	%rax, %rcx
	movq	-24(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18520, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC77(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L4071
	leaq	__PRETTY_FUNCTION__.13615(%rip), %rcx
	movl	$18520, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC78(%rip), %rdi
	call	__assert_fail@PLT
.L4071:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE603:
	.size	has_case, .-has_case
	.type	match_id, @function
match_id:
.LFB604:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-40(%rbp), %rax
	movabsq	$-288230376151711744, %rdx
	cmpq	%rdx, %rax
	jne	.L4074
	movabsq	$72057594037927935, %rax
	andq	-40(%rbp), %rax
	movq	%rax, -8(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-32(%rbp), %rax
	movabsq	$-360287970189639680, %rdx
	cmpq	%rdx, %rax
	jne	.L4075
	movq	-32(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	has_case
	testb	%al, %al
	je	.L4075
	movl	$1, %eax
	jmp	.L4076
.L4075:
	movl	$0, %eax
	jmp	.L4076
.L4074:
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_id_match
.L4076:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE604:
	.size	match_id, .-match_id
	.section	.rodata
.LC632:
	.string	"obj != 0"
	.text
	.type	search_type, @function
search_type:
.LFB605:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movl	%ecx, -76(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	cmpq	$0, -88(%rbp)
	jne	.L4078
	movl	$-1, %eax
	jmp	.L4079
.L4078:
	cmpq	$0, -72(%rbp)
	jne	.L4080
	movl	$-1, %eax
	jmp	.L4079
.L4080:
	cmpl	$0, 24(%rbp)
	je	.L4081
	movl	32(%rbp), %eax
	cmpl	24(%rbp), %eax
	jle	.L4081
	movl	$-1, %eax
	jmp	.L4079
.L4081:
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -44(%rbp)
	movq	-72(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movl	32(%rbp), %eax
	cmpl	16(%rbp), %eax
	jl	.L4082
	cmpq	$0, -64(%rbp)
	je	.L4083
	cmpl	$0, -76(%rbp)
	jne	.L4083
	movabsq	$-72057594037927936, %rax
	andq	-88(%rbp), %rax
	movabsq	$-288230376151711744, %rdx
	cmpq	%rdx, %rax
	je	.L4083
	movq	-88(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_get_table_record
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L4099
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	jmp	.L4079
.L4083:
	movl	-76(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.L4085
.L4087:
	movl	-48(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rcx
	movq	-88(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	match_id
	testb	%al, %al
	je	.L4086
	movl	-48(%rbp), %eax
	jmp	.L4079
.L4086:
	addl	$1, -48(%rbp)
.L4085:
	movl	-48(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L4087
	jmp	.L4082
.L4099:
	nop
.L4082:
	cmpq	$0, -96(%rbp)
	je	.L4088
	movl	$260, %eax
	cmpq	%rax, -88(%rbp)
	je	.L4088
	movl	$261, %eax
	cmpq	%rax, -88(%rbp)
	je	.L4088
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	cmpq	%rax, -88(%rbp)
	je	.L4088
	movl	$0, -48(%rbp)
	jmp	.L4089
.L4098:
	movl	-48(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-24(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L4100
	movq	-24(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	cmpq	%rax, -96(%rbp)
	jne	.L4100
	movq	-24(%rbp), %rax
	movl	%eax, %edx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18595, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC632(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L4093
	leaq	__PRETTY_FUNCTION__.13644(%rip), %rcx
	movl	$18595, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC632(%rip), %rdi
	call	__assert_fail@PLT
.L4093:
	movq	-16(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_table
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L4101
	movl	32(%rbp), %eax
	leal	1(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-96(%rbp), %r8
	movq	-88(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	-56(%rbp), %rax
	pushq	40(%rbp)
	pushq	%rcx
	movl	24(%rbp), %ecx
	pushq	%rcx
	movl	16(%rbp), %ecx
	pushq	%rcx
	movq	%r8, %r9
	movq	%rdi, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	search_type
	addq	$32, %rsp
	cmpl	$-1, %eax
	je	.L4095
	cmpq	$0, 40(%rbp)
	je	.L4096
	movq	40(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L4096
	movq	40(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, (%rax)
.L4096:
	movl	-48(%rbp), %eax
	jmp	.L4079
.L4095:
	movl	$277, %eax
	cmpq	%rax, -96(%rbp)
	je	.L4092
	movl	$277, %edi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-88(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	-56(%rbp), %rax
	pushq	40(%rbp)
	pushq	$0
	pushq	$0
	pushq	$1
	movq	%rdi, %r9
	movq	%rcx, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	search_type
	addq	$32, %rsp
	cmpl	$-1, %eax
	je	.L4092
	cmpq	$0, 40(%rbp)
	je	.L4097
	movq	40(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L4097
	movq	40(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, (%rax)
.L4097:
	movl	-48(%rbp), %eax
	jmp	.L4079
.L4100:
	nop
	jmp	.L4092
.L4101:
	nop
.L4092:
	addl	$1, -48(%rbp)
.L4089:
	movl	-48(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L4098
.L4088:
	movl	$-1, %eax
.L4079:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE605:
	.size	search_type, .-search_type
	.globl	ecs_type_has_id
	.type	ecs_type_has_id, @function
ecs_type_has_id:
.LFB606:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, %eax
	movb	%al, -28(%rbp)
	cmpb	$0, -28(%rbp)
	je	.L4103
	movl	$0, %esi
	jmp	.L4104
.L4103:
	movl	$277, %esi
.L4104:
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	pushq	$0
	pushq	$0
	pushq	$0
	pushq	$0
	movq	%rsi, %r9
	movq	%rcx, %r8
	movl	$0, %ecx
	movl	$0, %esi
	movq	%rax, %rdi
	call	search_type
	addq	$32, %rsp
	cmpl	$-1, %eax
	setne	%al
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE606:
	.size	ecs_type_has_id, .-ecs_type_has_id
	.globl	ecs_type_index_of
	.type	ecs_type_index_of, @function
ecs_type_index_of:
.LFB607:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rcx
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	pushq	$0
	pushq	$0
	pushq	$0
	pushq	$0
	movl	$0, %r9d
	movq	%rcx, %r8
	movl	%edx, %ecx
	movq	%rax, %rdx
	movl	$0, %esi
	movl	$0, %edi
	call	search_type
	addq	$32, %rsp
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE607:
	.size	ecs_type_index_of, .-ecs_type_index_of
	.globl	ecs_type_match
	.type	ecs_type_match, @function
ecs_type_match:
.LFB608:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	cmpq	$0, 32(%rbp)
	je	.L4109
	movq	32(%rbp), %rax
	movq	$0, (%rax)
.L4109:
	movq	-48(%rbp), %r9
	movq	-40(%rbp), %r8
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	pushq	32(%rbp)
	pushq	$0
	movl	24(%rbp), %edi
	pushq	%rdi
	movl	16(%rbp), %edi
	pushq	%rdi
	movq	%rax, %rdi
	call	search_type
	addq	$32, %rsp
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE608:
	.size	ecs_type_match, .-ecs_type_match
	.globl	ecs_type_has_type
	.type	ecs_type_has_type, @function
ecs_type_has_type:
.LFB609:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	$0, %r8d
	movl	$1, %ecx
	movq	%rax, %rdi
	call	flecs_type_contains
	testq	%rax, %rax
	setne	%al
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE609:
	.size	ecs_type_has_type, .-ecs_type_has_type
	.globl	ecs_type_owns_type
	.type	ecs_type_owns_type, @function
ecs_type_owns_type:
.LFB610:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movl	%ecx, %eax
	movb	%al, -28(%rbp)
	movzbl	-28(%rbp), %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %ecx
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	%ecx, %r8d
	movl	$1, %ecx
	movq	%rax, %rdi
	call	flecs_type_contains
	testq	%rax, %rax
	setne	%al
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE610:
	.size	ecs_type_owns_type, .-ecs_type_owns_type
	.globl	ecs_type_add
	.type	ecs_type_add, @function
ecs_type_add:
.LFB611:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18684, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L4116
	leaq	__PRETTY_FUNCTION__.13687(%rip), %rcx
	movl	$18684, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L4116:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -48(%rbp)
	movq	-64(%rbp), %rdx
	movq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_table_from_type
	movq	%rax, -40(%rbp)
	leaq	-72(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18700, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L4117
	leaq	__PRETTY_FUNCTION__.13687(%rip), %rcx
	movl	$18700, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L4117:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4119
	call	__stack_chk_fail@PLT
.L4119:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE611:
	.size	ecs_type_add, .-ecs_type_add
	.globl	ecs_type_remove
	.type	ecs_type_remove, @function
ecs_type_remove:
.LFB612:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18710, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L4121
	leaq	__PRETTY_FUNCTION__.13696(%rip), %rcx
	movl	$18710, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L4121:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -48(%rbp)
	movq	-64(%rbp), %rdx
	movq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_table_from_type
	movq	%rax, -40(%rbp)
	leaq	-72(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18725, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L4122
	leaq	__PRETTY_FUNCTION__.13696(%rip), %rcx
	movl	$18725, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L4122:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4124
	call	__stack_chk_fail@PLT
.L4124:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE612:
	.size	ecs_type_remove, .-ecs_type_remove
	.globl	ecs_type_str
	.type	ecs_type_str, @function
ecs_type_str:
.LFB613:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$360, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -360(%rbp)
	movq	%rsi, -368(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -368(%rbp)
	jne	.L4126
	movq	48+ecs_os_api(%rip), %rax
	leaq	.LC34(%rip), %rdi
	call	*%rax
	jmp	.L4133
.L4126:
	movl	$32, %edx
	movl	$16, %esi
	movl	$1, %edi
	call	_ecs_vector_new
	movq	%rax, -328(%rbp)
	movq	-368(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -320(%rbp)
	movq	-368(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -332(%rbp)
	movl	$0, -340(%rbp)
	jmp	.L4128
.L4132:
	movl	-340(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-320(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -304(%rbp)
	cmpl	$0, -340(%rbp)
	je	.L4129
	leaq	-328(%rbp), %rax
	movl	$16, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movb	$44, (%rax)
.L4129:
	cmpq	$1, -304(%rbp)
	jne	.L4130
	leaq	-288(%rbp), %rax
	movabsq	$8030038460242027333, %rbx
	movq	%rbx, (%rax)
	movl	$1953391982, 8(%rax)
	movb	$0, 12(%rax)
	movl	$12, -336(%rbp)
	jmp	.L4131
.L4130:
	leaq	-288(%rbp), %rdx
	movq	-304(%rbp), %rsi
	movq	-360(%rbp), %rax
	movl	$256, %ecx
	movq	%rax, %rdi
	call	ecs_id_str
	movq	%rax, %rdi
	call	flecs_from_size_t
	movl	%eax, -336(%rbp)
.L4131:
	movl	-336(%rbp), %edx
	leaq	-328(%rbp), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	_ecs_vector_addn
	movq	%rax, -296(%rbp)
	movl	-336(%rbp), %eax
	movslq	%eax, %rdx
	leaq	-288(%rbp), %rcx
	movq	-296(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	addl	$1, -340(%rbp)
.L4128:
	movl	-340(%rbp), %eax
	cmpl	-332(%rbp), %eax
	jl	.L4132
	leaq	-328(%rbp), %rax
	movl	$16, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movb	$0, (%rax)
	movq	48+ecs_os_api(%rip), %rbx
	movq	-328(%rbp), %rax
	movl	$16, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, %rdi
	call	*%rbx
	movq	%rax, -312(%rbp)
	movq	-328(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-312(%rbp), %rax
.L4133:
	movq	-24(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4134
	call	__stack_chk_fail@PLT
.L4134:
	addq	$360, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE613:
	.size	ecs_type_str, .-ecs_type_str
	.section	.rodata
	.align 8
.LC633:
	.string	"ecs_type_has_id(world, type, ECS_XOR | xor, true)"
	.align 8
.LC634:
	.string	"ecs_type_has_id(world, type, ((1ull << 63) | (0x77ull << 56)) | xor, 1)"
.LC635:
	.string	"xor_type != NULL"
.LC636:
	.string	"xor_type != ((void *)0)"
	.text
	.globl	ecs_type_get_entity_for_xor
	.type	ecs_type_get_entity_for_xor, @function
ecs_type_get_entity_for_xor:
.LFB614:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movabsq	$-648518346341351424, %rax
	orq	-56(%rbp), %rax
	movq	%rax, %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18776, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC633(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movabsq	$-648518346341351424, %rax
	orq	-56(%rbp), %rax
	movq	%rax, %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	jne	.L4136
	leaq	__PRETTY_FUNCTION__.13721(%rip), %rcx
	movl	$18776, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC634(%rip), %rdi
	call	__assert_fail@PLT
.L4136:
	movq	-56(%rbp), %rcx
	movq	-40(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18781, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC77(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L4137
	leaq	__PRETTY_FUNCTION__.13721(%rip), %rcx
	movl	$18781, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC78(%rip), %rdi
	call	__assert_fail@PLT
.L4137:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18784, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC635(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L4138
	leaq	__PRETTY_FUNCTION__.13721(%rip), %rcx
	movl	$18784, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC636(%rip), %rdi
	call	__assert_fail@PLT
.L4138:
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movq	-48(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L4139
.L4142:
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	je	.L4140
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	jmp	.L4141
.L4140:
	addl	$1, -32(%rbp)
.L4139:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L4142
	movl	$0, %eax
.L4141:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE614:
	.size	ecs_type_get_entity_for_xor, .-ecs_type_get_entity_for_xor
	.local	ecs_os_api_initialized
	.comm	ecs_os_api_initialized,1,1
	.local	ecs_os_api_init_count
	.comm	ecs_os_api_init_count,4,4
	.comm	ecs_os_api,256,32
	.globl	ecs_os_api_malloc_count
	.bss
	.align 8
	.type	ecs_os_api_malloc_count, @object
	.size	ecs_os_api_malloc_count, 8
ecs_os_api_malloc_count:
	.zero	8
	.globl	ecs_os_api_realloc_count
	.align 8
	.type	ecs_os_api_realloc_count, @object
	.size	ecs_os_api_realloc_count, 8
ecs_os_api_realloc_count:
	.zero	8
	.globl	ecs_os_api_calloc_count
	.align 8
	.type	ecs_os_api_calloc_count, @object
	.size	ecs_os_api_calloc_count, 8
ecs_os_api_calloc_count:
	.zero	8
	.globl	ecs_os_api_free_count
	.align 8
	.type	ecs_os_api_free_count, @object
	.size	ecs_os_api_free_count, 8
ecs_os_api_free_count:
	.zero	8
	.text
	.globl	ecs_os_set_api
	.type	ecs_os_set_api, @function
ecs_os_set_api:
.LFB615:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	.cfi_offset 3, -24
	movq	%rdi, -16(%rbp)
	movzbl	ecs_os_api_initialized(%rip), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L4145
	movq	-16(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, ecs_os_api(%rip)
	movq	%rbx, 8+ecs_os_api(%rip)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, 16+ecs_os_api(%rip)
	movq	%rbx, 24+ecs_os_api(%rip)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, 32+ecs_os_api(%rip)
	movq	%rbx, 40+ecs_os_api(%rip)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, 48+ecs_os_api(%rip)
	movq	%rbx, 56+ecs_os_api(%rip)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, 64+ecs_os_api(%rip)
	movq	%rbx, 72+ecs_os_api(%rip)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, 80+ecs_os_api(%rip)
	movq	%rbx, 88+ecs_os_api(%rip)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, 96+ecs_os_api(%rip)
	movq	%rbx, 104+ecs_os_api(%rip)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, 112+ecs_os_api(%rip)
	movq	%rbx, 120+ecs_os_api(%rip)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, 128+ecs_os_api(%rip)
	movq	%rbx, 136+ecs_os_api(%rip)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, 144+ecs_os_api(%rip)
	movq	%rbx, 152+ecs_os_api(%rip)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, 160+ecs_os_api(%rip)
	movq	%rbx, 168+ecs_os_api(%rip)
	movq	176(%rax), %rcx
	movq	184(%rax), %rbx
	movq	%rcx, 176+ecs_os_api(%rip)
	movq	%rbx, 184+ecs_os_api(%rip)
	movq	192(%rax), %rcx
	movq	200(%rax), %rbx
	movq	%rcx, 192+ecs_os_api(%rip)
	movq	%rbx, 200+ecs_os_api(%rip)
	movq	208(%rax), %rcx
	movq	216(%rax), %rbx
	movq	%rcx, 208+ecs_os_api(%rip)
	movq	%rbx, 216+ecs_os_api(%rip)
	movq	224(%rax), %rcx
	movq	232(%rax), %rbx
	movq	%rcx, 224+ecs_os_api(%rip)
	movq	%rbx, 232+ecs_os_api(%rip)
	movq	248(%rax), %rdx
	movq	240(%rax), %rax
	movq	%rax, 240+ecs_os_api(%rip)
	movq	%rdx, 248+ecs_os_api(%rip)
	movb	$1, ecs_os_api_initialized(%rip)
.L4145:
	nop
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE615:
	.size	ecs_os_set_api, .-ecs_os_set_api
	.globl	ecs_os_init
	.type	ecs_os_init, @function
ecs_os_init:
.LFB616:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movzbl	ecs_os_api_initialized(%rip), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L4147
	call	ecs_os_set_api_defaults
.L4147:
	movl	ecs_os_api_init_count(%rip), %eax
	leal	1(%rax), %edx
	movl	%edx, ecs_os_api_init_count(%rip)
	testl	%eax, %eax
	jne	.L4149
	movq	ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4149
	movq	ecs_os_api(%rip), %rax
	call	*%rax
.L4149:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE616:
	.size	ecs_os_init, .-ecs_os_init
	.globl	ecs_os_fini
	.type	ecs_os_fini, @function
ecs_os_fini:
.LFB617:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	ecs_os_api_init_count(%rip), %eax
	subl	$1, %eax
	movl	%eax, ecs_os_api_init_count(%rip)
	movl	ecs_os_api_init_count(%rip), %eax
	testl	%eax, %eax
	jne	.L4152
	movq	8+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4152
	movq	8+ecs_os_api(%rip), %rax
	call	*%rax
.L4152:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE617:
	.size	ecs_os_fini, .-ecs_os_fini
	.type	ecs_log, @function
ecs_log:
.LFB618:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	stdout(%rip), %rax
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vfprintf@PLT
	movq	stdout(%rip), %rax
	movq	%rax, %rsi
	movl	$10, %edi
	call	fputc@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE618:
	.size	ecs_log, .-ecs_log
	.type	ecs_log_error, @function
ecs_log_error:
.LFB619:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	stderr(%rip), %rax
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vfprintf@PLT
	movq	stderr(%rip), %rax
	movq	%rax, %rsi
	movl	$10, %edi
	call	fputc@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE619:
	.size	ecs_log_error, .-ecs_log_error
	.type	ecs_log_debug, @function
ecs_log_debug:
.LFB620:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	stdout(%rip), %rax
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vfprintf@PLT
	movq	stdout(%rip), %rax
	movq	%rax, %rsi
	movl	$10, %edi
	call	fputc@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE620:
	.size	ecs_log_debug, .-ecs_log_debug
	.type	ecs_log_warning, @function
ecs_log_warning:
.LFB621:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	stderr(%rip), %rax
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	vfprintf@PLT
	movq	stderr(%rip), %rax
	movq	%rax, %rsi
	movl	$10, %edi
	call	fputc@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE621:
	.size	ecs_log_warning, .-ecs_log_warning
	.globl	ecs_os_dbg
	.type	ecs_os_dbg, @function
ecs_os_dbg:
.LFB622:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$224, %rsp
	movq	%rdi, -216(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%rdx, -160(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L4158
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L4158:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movl	$8, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	192+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4161
	movq	192+ecs_os_api(%rip), %rcx
	leaq	-208(%rbp), %rdx
	movq	-216(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
.L4161:
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4160
	call	__stack_chk_fail@PLT
.L4160:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE622:
	.size	ecs_os_dbg, .-ecs_os_dbg
	.globl	ecs_os_warn
	.type	ecs_os_warn, @function
ecs_os_warn:
.LFB623:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$224, %rsp
	movq	%rdi, -216(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%rdx, -160(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L4163
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L4163:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movl	$8, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	200+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4166
	movq	200+ecs_os_api(%rip), %rcx
	leaq	-208(%rbp), %rdx
	movq	-216(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
.L4166:
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4165
	call	__stack_chk_fail@PLT
.L4165:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE623:
	.size	ecs_os_warn, .-ecs_os_warn
	.globl	ecs_os_log
	.type	ecs_os_log, @function
ecs_os_log:
.LFB624:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$224, %rsp
	movq	%rdi, -216(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%rdx, -160(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L4168
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L4168:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movl	$8, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	176+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4171
	movq	176+ecs_os_api(%rip), %rcx
	leaq	-208(%rbp), %rdx
	movq	-216(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
.L4171:
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4170
	call	__stack_chk_fail@PLT
.L4170:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE624:
	.size	ecs_os_log, .-ecs_os_log
	.globl	ecs_os_err
	.type	ecs_os_err, @function
ecs_os_err:
.LFB625:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$224, %rsp
	movq	%rdi, -216(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%rdx, -160(%rbp)
	movq	%rcx, -152(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -136(%rbp)
	testb	%al, %al
	je	.L4173
	movaps	%xmm0, -128(%rbp)
	movaps	%xmm1, -112(%rbp)
	movaps	%xmm2, -96(%rbp)
	movaps	%xmm3, -80(%rbp)
	movaps	%xmm4, -64(%rbp)
	movaps	%xmm5, -48(%rbp)
	movaps	%xmm6, -32(%rbp)
	movaps	%xmm7, -16(%rbp)
.L4173:
	movq	%fs:40, %rax
	movq	%rax, -184(%rbp)
	xorl	%eax, %eax
	movl	$8, -208(%rbp)
	movl	$48, -204(%rbp)
	leaq	16(%rbp), %rax
	movq	%rax, -200(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	184+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4176
	movq	184+ecs_os_api(%rip), %rcx
	leaq	-208(%rbp), %rdx
	movq	-216(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
.L4176:
	nop
	movq	-184(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4175
	call	__stack_chk_fail@PLT
.L4175:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE625:
	.size	ecs_os_err, .-ecs_os_err
	.section	.rodata
.LC637:
	.string	"sec < UINT32_MAX"
	.align 8
.LC638:
	.string	"(now - sec * 1000000000) < UINT32_MAX"
	.text
	.type	ecs_os_gettime, @function
ecs_os_gettime:
.LFB626:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	call	flecs_os_time_now
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	shrq	$9, %rax
	movabsq	$19342813113834067, %rdx
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$11, %rax
	movq	%rax, -8(%rbp)
	movl	$4294967294, %eax
	cmpq	%rax, -8(%rbp)
	jbe	.L4178
	leaq	__PRETTY_FUNCTION__.13785(%rip), %rcx
	movl	$18909, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC637(%rip), %rdi
	call	__assert_fail@PLT
.L4178:
	movq	-8(%rbp), %rax
	imulq	$1000000000, %rax, %rax
	movq	-16(%rbp), %rdx
	subq	%rax, %rdx
	movl	$4294967294, %eax
	cmpq	%rax, %rdx
	jbe	.L4179
	leaq	__PRETTY_FUNCTION__.13785(%rip), %rcx
	movl	$18910, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC638(%rip), %rdi
	call	__assert_fail@PLT
.L4179:
	movq	-8(%rbp), %rax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, (%rax)
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	imull	$1000000000, %eax, %eax
	subl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 4(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE626:
	.size	ecs_os_gettime, .-ecs_os_gettime
	.section	.rodata
.LC639:
	.string	"size > 0"
	.text
	.type	ecs_os_api_malloc, @function
ecs_os_api_malloc:
.LFB627:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	ecs_os_api_malloc_count(%rip), %rax
	addq	$1, %rax
	movq	%rax, ecs_os_api_malloc_count(%rip)
	cmpl	$0, -4(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18919, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC639(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -4(%rbp)
	jg	.L4181
	leaq	__PRETTY_FUNCTION__.13789(%rip), %rcx
	movl	$18919, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC639(%rip), %rdi
	call	__assert_fail@PLT
.L4181:
	movl	-4(%rbp), %eax
	cltq
	movq	%rax, %rdi
	call	malloc@PLT
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE627:
	.size	ecs_os_api_malloc, .-ecs_os_api_malloc
	.type	ecs_os_api_calloc, @function
ecs_os_api_calloc:
.LFB628:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	ecs_os_api_calloc_count(%rip), %rax
	addq	$1, %rax
	movq	%rax, ecs_os_api_calloc_count(%rip)
	cmpl	$0, -4(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18926, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC639(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -4(%rbp)
	jg	.L4184
	leaq	__PRETTY_FUNCTION__.13793(%rip), %rcx
	movl	$18926, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC639(%rip), %rdi
	call	__assert_fail@PLT
.L4184:
	movl	-4(%rbp), %eax
	cltq
	movq	%rax, %rsi
	movl	$1, %edi
	call	calloc@PLT
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE628:
	.size	ecs_os_api_calloc, .-ecs_os_api_calloc
	.type	ecs_os_api_realloc, @function
ecs_os_api_realloc:
.LFB629:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18932, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC639(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -12(%rbp)
	jg	.L4187
	leaq	__PRETTY_FUNCTION__.13798(%rip), %rcx
	movl	$18932, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC639(%rip), %rdi
	call	__assert_fail@PLT
.L4187:
	cmpq	$0, -8(%rbp)
	je	.L4188
	movq	ecs_os_api_realloc_count(%rip), %rax
	addq	$1, %rax
	movq	%rax, ecs_os_api_realloc_count(%rip)
	jmp	.L4189
.L4188:
	movq	ecs_os_api_malloc_count(%rip), %rax
	addq	$1, %rax
	movq	%rax, ecs_os_api_malloc_count(%rip)
.L4189:
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	realloc@PLT
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE629:
	.size	ecs_os_api_realloc, .-ecs_os_api_realloc
	.type	ecs_os_api_free, @function
ecs_os_api_free:
.LFB630:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L4192
	movq	ecs_os_api_free_count(%rip), %rax
	addq	$1, %rax
	movq	%rax, ecs_os_api_free_count(%rip)
.L4192:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	free@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE630:
	.size	ecs_os_api_free, .-ecs_os_api_free
	.type	ecs_os_api_strdup, @function
ecs_os_api_strdup:
.LFB631:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L4194
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, -12(%rbp)
	movq	16+ecs_os_api(%rip), %rax
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$18957, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L4195
	leaq	__PRETTY_FUNCTION__.13807(%rip), %rcx
	movl	$18957, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L4195:
	movq	-24(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcpy@PLT
	movq	-8(%rbp), %rax
	jmp	.L4196
.L4194:
	movl	$0, %eax
.L4196:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE631:
	.size	ecs_os_api_strdup, .-ecs_os_api_strdup
	.type	module_file_base, @function
module_file_base:
.LFB632:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, %eax
	movb	%al, -28(%rbp)
	movq	48+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L4198
.L4200:
	movl	-16(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$46, %al
	jne	.L4199
	movl	-16(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	addq	%rax, %rdx
	movzbl	-28(%rbp), %eax
	movb	%al, (%rdx)
.L4199:
	addl	$1, -16(%rbp)
.L4198:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L4200
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE632:
	.size	module_file_base, .-module_file_base
	.section	.rodata
.LC640:
	.string	"lib"
.LC641:
	.string	".so"
	.text
	.type	ecs_os_api_module_to_dl, @function
ecs_os_api_module_to_dl:
.LFB633:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1136, %rsp
	movq	%rdi, -1128(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-1104(%rbp), %rdx
	movl	$0, %eax
	movl	$136, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-1128(%rbp), %rax
	movl	$95, %esi
	movq	%rax, %rdi
	call	module_file_base
	movq	%rax, -1112(%rbp)
	leaq	-1104(%rbp), %rax
	leaq	.LC640(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	movq	-1112(%rbp), %rdx
	leaq	-1104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	leaq	-1104(%rbp), %rax
	leaq	.LC641(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	movq	40+ecs_os_api(%rip), %rdx
	movq	-1112(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	leaq	-1104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_get
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4204
	call	__stack_chk_fail@PLT
.L4204:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE633:
	.size	ecs_os_api_module_to_dl, .-ecs_os_api_module_to_dl
	.section	.rodata
.LC642:
	.string	"/etc"
	.text
	.type	ecs_os_api_module_to_etc, @function
ecs_os_api_module_to_etc:
.LFB634:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1136, %rsp
	movq	%rdi, -1128(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-1104(%rbp), %rdx
	movl	$0, %eax
	movl	$136, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-1128(%rbp), %rax
	movl	$45, %esi
	movq	%rax, %rdi
	call	module_file_base
	movq	%rax, -1112(%rbp)
	movq	-1112(%rbp), %rdx
	leaq	-1104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	leaq	-1104(%rbp), %rax
	leaq	.LC642(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	movq	40+ecs_os_api(%rip), %rdx
	movq	-1112(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	leaq	-1104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_get
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4207
	call	__stack_chk_fail@PLT
.L4207:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE634:
	.size	ecs_os_api_module_to_etc, .-ecs_os_api_module_to_etc
	.globl	ecs_os_set_api_defaults
	.type	ecs_os_set_api_defaults, @function
ecs_os_set_api_defaults:
.LFB635:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movzbl	ecs_os_api_initialized(%rip), %eax
	testb	%al, %al
	jne	.L4213
	call	flecs_os_time_setup
	leaq	ecs_os_api_malloc(%rip), %rax
	movq	%rax, 16+ecs_os_api(%rip)
	leaq	ecs_os_api_free(%rip), %rax
	movq	%rax, 40+ecs_os_api(%rip)
	leaq	ecs_os_api_realloc(%rip), %rax
	movq	%rax, 24+ecs_os_api(%rip)
	leaq	ecs_os_api_calloc(%rip), %rax
	movq	%rax, 32+ecs_os_api(%rip)
	leaq	ecs_os_api_strdup(%rip), %rax
	movq	%rax, 48+ecs_os_api(%rip)
	leaq	flecs_os_time_sleep(%rip), %rax
	movq	%rax, 160+ecs_os_api(%rip)
	leaq	ecs_os_gettime(%rip), %rax
	movq	%rax, 168+ecs_os_api(%rip)
	leaq	ecs_log(%rip), %rax
	movq	%rax, 176+ecs_os_api(%rip)
	leaq	ecs_log_error(%rip), %rax
	movq	%rax, 184+ecs_os_api(%rip)
	leaq	ecs_log_debug(%rip), %rax
	movq	%rax, 192+ecs_os_api(%rip)
	leaq	ecs_log_warning(%rip), %rax
	movq	%rax, 200+ecs_os_api(%rip)
	movq	240+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	jne	.L4211
	leaq	ecs_os_api_module_to_dl(%rip), %rax
	movq	%rax, 240+ecs_os_api(%rip)
.L4211:
	movq	248+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	jne	.L4212
	leaq	ecs_os_api_module_to_etc(%rip), %rax
	movq	%rax, 248+ecs_os_api(%rip)
.L4212:
	movq	abort@GOTPCREL(%rip), %rax
	movq	%rax, 208+ecs_os_api(%rip)
	jmp	.L4208
.L4213:
	nop
.L4208:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE635:
	.size	ecs_os_set_api_defaults, .-ecs_os_set_api_defaults
	.globl	ecs_os_has_heap
	.type	ecs_os_has_heap, @function
ecs_os_has_heap:
.LFB636:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	16+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4215
	movq	32+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4215
	movq	24+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4215
	movq	40+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4215
	movl	$1, %eax
	jmp	.L4216
.L4215:
	movl	$0, %eax
.L4216:
	andl	$1, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE636:
	.size	ecs_os_has_heap, .-ecs_os_has_heap
	.globl	ecs_os_has_threading
	.type	ecs_os_has_threading, @function
ecs_os_has_threading:
.LFB637:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	88+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movq	96+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movq	104+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movq	112+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movq	120+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movq	128+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movq	152+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movq	136+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movq	144+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movq	56+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movq	64+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4219
	movl	$1, %eax
	jmp	.L4220
.L4219:
	movl	$0, %eax
.L4220:
	andl	$1, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE637:
	.size	ecs_os_has_threading, .-ecs_os_has_threading
	.globl	ecs_os_has_time
	.type	ecs_os_has_time, @function
ecs_os_has_time:
.LFB638:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	168+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4223
	movq	160+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4223
	movl	$1, %eax
	jmp	.L4224
.L4223:
	movl	$0, %eax
.L4224:
	andl	$1, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE638:
	.size	ecs_os_has_time, .-ecs_os_has_time
	.globl	ecs_os_has_logging
	.type	ecs_os_has_logging, @function
ecs_os_has_logging:
.LFB639:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	176+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4227
	movq	184+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4227
	movq	192+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4227
	movq	200+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4227
	movl	$1, %eax
	jmp	.L4228
.L4227:
	movl	$0, %eax
.L4228:
	andl	$1, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE639:
	.size	ecs_os_has_logging, .-ecs_os_has_logging
	.globl	ecs_os_has_dl
	.type	ecs_os_has_dl, @function
ecs_os_has_dl:
.LFB640:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	216+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4231
	movq	224+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4231
	movq	232+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4231
	movl	$1, %eax
	jmp	.L4232
.L4231:
	movl	$0, %eax
.L4232:
	andl	$1, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE640:
	.size	ecs_os_has_dl, .-ecs_os_has_dl
	.globl	ecs_os_has_modules
	.type	ecs_os_has_modules, @function
ecs_os_has_modules:
.LFB641:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	240+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4235
	movq	248+ecs_os_api(%rip), %rax
	testq	%rax, %rax
	je	.L4235
	movl	$1, %eax
	jmp	.L4236
.L4235:
	movl	$0, %eax
.L4236:
	andl	$1, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE641:
	.size	ecs_os_has_modules, .-ecs_os_has_modules
	.globl	ecs_os_strerror
	.type	ecs_os_strerror, @function
ecs_os_strerror:
.LFB642:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, %edi
	call	strerror@PLT
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE642:
	.size	ecs_os_strerror, .-ecs_os_strerror
	.section	.rodata
.LC643:
	.string	"relation != 0"
	.align 8
.LC644:
	.string	"term->args[0].set.mask & EcsCascade"
.LC645:
	.string	"term->args[0].set.mask & (8)"
	.text
	.type	group_by_cascade, @function
group_by_cascade:
.LFB643:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movl	$0, -60(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -48(%rbp)
	movq	-80(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19152, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC643(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L4241
	leaq	__PRETTY_FUNCTION__.13871(%rip), %rcx
	movl	$19152, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC643(%rip), %rdi
	call	__assert_fail@PLT
.L4241:
	movq	-32(%rbp), %rax
	movzbl	96(%rax), %eax
	movzbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19155, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC644(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movzbl	96(%rax), %eax
	movzbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	jne	.L4242
	leaq	__PRETTY_FUNCTION__.13871(%rip), %rcx
	movl	$19155, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC645(%rip), %rdi
	call	__assert_fail@PLT
.L4242:
	movl	-48(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.L4243
.L4252:
	movl	-56(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	cmpq	%rax, %rdx
	jne	.L4244
	movl	-56(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	cmpq	%rax, -24(%rbp)
	jne	.L4244
	movl	-56(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	%eax, %edx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_type
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L4245
.L4248:
	movl	-52(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	cmpq	%rax, -88(%rbp)
	jne	.L4246
	addl	$1, -60(%rbp)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	group_by_cascade
	addl	%eax, -60(%rbp)
	jmp	.L4247
.L4246:
	addl	$1, -52(%rbp)
.L4245:
	movl	-52(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L4248
.L4247:
	movl	-52(%rbp), %eax
	cmpl	-44(%rbp), %eax
	je	.L4254
	jmp	.L4250
.L4244:
	movl	-56(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rdx, %rax
	testq	%rax, %rax
	je	.L4255
	jmp	.L4251
.L4254:
	nop
.L4251:
	subl	$1, -56(%rbp)
.L4243:
	cmpl	$0, -56(%rbp)
	jns	.L4252
	jmp	.L4250
.L4255:
	nop
.L4250:
	movl	-60(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE643:
	.size	group_by_cascade, .-group_by_cascade
	.type	table_compare, @function
table_compare:
.LFB644:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	88(%rax), %edx
	movq	-8(%rbp), %rax
	movl	88(%rax), %eax
	subl	%eax, %edx
	movl	%edx, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE644:
	.size	table_compare, .-table_compare
	.type	has_auto_activation, @function
has_auto_activation:
.LFB645:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$14, %eax
	testl	%eax, %eax
	sete	%al
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE645:
	.size	has_auto_activation, .-has_auto_activation
	.section	.rodata
.LC646:
	.string	"ti != NULL"
.LC647:
	.string	"ti != ((void *)0)"
	.text
	.type	order_grouped_tables, @function
order_grouped_tables:
.LFB646:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$144, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-144(%rbp), %rax
	movq	1672(%rax), %rax
	testq	%rax, %rax
	je	.L4261
	movq	-144(%rbp), %rax
	movq	1608(%rax), %rax
	leaq	table_compare(%rip), %rcx
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_sort
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	has_auto_activation
	testb	%al, %al
	je	.L4262
	movq	-144(%rbp), %rax
	movq	1624(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L4263
.L4265:
	movq	-96(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19229, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC139(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -108(%rbp)
	jg	.L4264
	leaq	__PRETTY_FUNCTION__.13898(%rip), %rcx
	movl	$19229, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC139(%rip), %rdi
	call	__assert_fail@PLT
.L4264:
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	js	.L4263
	movq	-96(%rbp), %rax
	movl	$0, 8(%rax)
.L4263:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -96(%rbp)
	cmpq	$0, -96(%rbp)
	jne	.L4265
.L4262:
	movq	-144(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4266
	movq	-144(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -104(%rbp)
	movq	-144(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -88(%rbp)
	movl	$0, -116(%rbp)
	jmp	.L4267
.L4268:
	movl	-116(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -80(%rbp)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -40(%rbp)
	movl	-116(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rcx
	leaq	-48(%rbp), %rdx
	movq	-136(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_notify
	addl	$1, -116(%rbp)
.L4267:
	movl	-116(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jl	.L4268
.L4266:
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	has_auto_activation
	testb	%al, %al
	je	.L4261
	movq	-144(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -100(%rbp)
	movq	-144(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -72(%rbp)
	movl	$0, -112(%rbp)
	jmp	.L4269
.L4271:
	movl	-112(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdx
	movq	-144(%rbp), %rax
	movq	1624(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19259, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC646(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L4270
	leaq	__PRETTY_FUNCTION__.13898(%rip), %rcx
	movl	$19259, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC647(%rip), %rdi
	call	__assert_fail@PLT
.L4270:
	movq	-56(%rbp), %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	cltq
	salq	$2, %rax
	addq	%rax, %rdx
	movl	-112(%rbp), %eax
	movl	%eax, (%rdx)
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %edx
	movq	-56(%rbp), %rax
	movl	%edx, 8(%rax)
	addl	$1, -112(%rbp)
.L4269:
	movl	-112(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jl	.L4271
.L4261:
	movq	-144(%rbp), %rax
	movl	1732(%rax), %eax
	leal	1(%rax), %edx
	movq	-144(%rbp), %rax
	movl	%edx, 1732(%rax)
	movq	-144(%rbp), %rax
	movb	$0, 1740(%rax)
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4272
	call	__stack_chk_fail@PLT
.L4272:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE646:
	.size	order_grouped_tables, .-order_grouped_tables
	.section	.rodata
.LC648:
	.string	"table->table != NULL"
.LC649:
	.string	"table->table != ((void *)0)"
	.text
	.type	group_table, @function
group_table:
.LFB647:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19276, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L4274
	leaq	__PRETTY_FUNCTION__.13923(%rip), %rcx
	movl	$19276, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L4274:
	movq	-16(%rbp), %rax
	movq	1672(%rax), %rax
	testq	%rax, %rax
	je	.L4275
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19279, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC648(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L4276
	leaq	__PRETTY_FUNCTION__.13923(%rip), %rcx
	movl	$19279, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC649(%rip), %rdi
	call	__assert_fail@PLT
.L4276:
	movq	-16(%rbp), %rax
	movq	1672(%rax), %r8
	movq	-16(%rbp), %rax
	movq	1680(%rax), %rcx
	movq	-16(%rbp), %rax
	movq	1664(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	8(%rax), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%r8
	movq	-24(%rbp), %rdx
	movl	%eax, 88(%rdx)
	jmp	.L4278
.L4275:
	movq	-24(%rbp), %rax
	movl	$0, 88(%rax)
.L4278:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE647:
	.size	group_table, .-group_table
	.type	group_tables, @function
group_tables:
.LFB648:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	1672(%rax), %rax
	testq	%rax, %rax
	je	.L4285
	movq	-64(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movl	$0, -48(%rbp)
	jmp	.L4281
.L4282:
	movl	-48(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	group_table
	addl	$1, -48(%rbp)
.L4281:
	movl	-48(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L4282
	movq	-64(%rbp), %rax
	movq	1616(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	1616(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	$0, -44(%rbp)
	jmp	.L4283
.L4284:
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	group_table
	addl	$1, -44(%rbp)
.L4283:
	movl	-44(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L4284
.L4285:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE648:
	.size	group_tables, .-group_tables
	.type	query_name, @function
query_name:
.LFB649:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	1632(%rax), %rax
	testq	%rax, %rax
	je	.L4287
	movq	-16(%rbp), %rax
	movq	1632(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	jmp	.L4288
.L4287:
	movq	-16(%rbp), %rax
	movq	1560(%rax), %rax
	testq	%rax, %rax
	je	.L4289
	movq	-16(%rbp), %rax
	movq	1560(%rax), %rax
	jmp	.L4288
.L4289:
	movq	-16(%rbp), %rax
	movq	1568(%rax), %rax
.L4288:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE649:
	.size	query_name, .-query_name
	.section	.rodata
.LC650:
	.string	"result == true"
.LC651:
	.string	"result == 1"
	.text
	.type	get_comp_and_src, @function
get_comp_and_src:
.LFB650:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$144, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -116(%rbp)
	movq	%rcx, -128(%rbp)
	movq	%r8, -136(%rbp)
	movq	%r9, -144(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	$0, -64(%rbp)
	movq	$0, -56(%rbp)
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-112(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -84(%rbp)
	movl	-116(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	160(%rax), %eax
	movl	%eax, -80(%rbp)
	cmpl	$2, -80(%rbp)
	jne	.L4291
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
.L4291:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L4292
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.L4293
.L4292:
	movq	-128(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L4294
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_table
	movq	%rax, -48(%rbp)
.L4294:
	movq	$0, -40(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L4295
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
.L4295:
	cmpl	$1, -80(%rbp)
	jne	.L4296
	jmp	.L4297
.L4303:
	movl	-116(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	je	.L4298
	subl	$1, -116(%rbp)
	jmp	.L4304
.L4298:
	cmpq	$0, -64(%rbp)
	jne	.L4300
	movq	$0, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	40(%rax), %edi
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	24(%rax), %r9
	movq	-24(%rbp), %rax
	movq	(%rax), %r10
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-104(%rbp), %rax
	subq	$8, %rsp
	leaq	-72(%rbp), %r8
	pushq	%r8
	pushq	%rdi
	pushq	%rcx
	movq	%r10, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_match
	addq	$32, %rsp
	movl	%eax, -76(%rbp)
	cmpl	$-1, -76(%rbp)
	je	.L4301
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
.L4301:
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	je	.L4300
	movq	-72(%rbp), %rax
	movq	%rax, -56(%rbp)
.L4300:
	addl	$1, -116(%rbp)
.L4297:
	movl	-116(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jl	.L4303
	jmp	.L4304
.L4296:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	$0, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	40(%rax), %edi
	movq	-16(%rbp), %rax
	movl	36(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	24(%rax), %r9
	movq	-64(%rbp), %r10
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-104(%rbp), %rax
	subq	$8, %rsp
	leaq	-72(%rbp), %r8
	pushq	%r8
	pushq	%rdi
	pushq	%rcx
	movq	%r10, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_match
	addq	$32, %rsp
	cmpl	$-1, %eax
	setne	%al
	movb	%al, -85(%rbp)
	cmpl	$2, -80(%rbp)
	jne	.L4305
	movzbl	-85(%rbp), %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	movb	%al, -85(%rbp)
	andb	$1, -85(%rbp)
.L4305:
	cmpl	$3, -80(%rbp)
	je	.L4306
	cmpl	$4, -80(%rbp)
	je	.L4306
	cmpl	$5, -80(%rbp)
	je	.L4306
	cmpl	$6, -80(%rbp)
	jne	.L4307
.L4306:
	movb	$1, -85(%rbp)
.L4307:
	movq	-48(%rbp), %rax
	cmpq	-128(%rbp), %rax
	jne	.L4308
	movzbl	-85(%rbp), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19407, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC650(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpb	$0, -85(%rbp)
	jne	.L4308
	leaq	__PRETTY_FUNCTION__.13970(%rip), %rcx
	movl	$19407, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC651(%rip), %rdi
	call	__assert_fail@PLT
.L4308:
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	je	.L4304
	movq	-72(%rbp), %rax
	movq	%rax, -56(%rbp)
.L4304:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L4293
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
.L4293:
	movl	$267, %eax
	cmpq	%rax, -56(%rbp)
	jne	.L4310
	movq	$0, -56(%rbp)
.L4310:
	movq	-136(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-144(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, (%rax)
	movl	-116(%rbp), %eax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4312
	call	__stack_chk_fail@PLT
.L4312:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE650:
	.size	get_comp_and_src, .-get_comp_and_src
	.type	get_pair_index, @function
get_pair_index:
.LFB651:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movq	%rcx, -48(%rbp)
	movl	%r8d, -40(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movl	4(%rax), %eax
	cmpl	%eax, -40(%rbp)
	jne	.L4314
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.L4315
.L4314:
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %ecx
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -4(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movl	-4(%rbp), %edx
	addl	$1, %edx
	movl	%edx, (%rax)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rax, %rdx
	movl	-40(%rbp), %eax
	movl	%eax, 4(%rdx)
.L4315:
	movl	-4(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE651:
	.size	get_pair_index, .-get_pair_index
	.section	.rodata
.LC652:
	.string	"result != -1"
.LC653:
	.string	"pair_offsets != NULL"
.LC654:
	.string	"pair_offsets != ((void *)0)"
	.text
	.type	get_component_index, @function
get_component_index:
.LFB652:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$368, %rsp
	movq	%rdi, -328(%rbp)
	movq	%rsi, -336(%rbp)
	movq	%rdx, -344(%rbp)
	movq	%rcx, -352(%rbp)
	movl	%r8d, -356(%rbp)
	movl	%r9d, -360(%rbp)
	movq	16(%rbp), %rax
	movq	%rax, -368(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$0, -308(%rbp)
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -304(%rbp)
	cmpq	$0, -328(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19481, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -328(%rbp)
	jne	.L4318
	leaq	__PRETTY_FUNCTION__.13995(%rip), %rcx
	movl	$19481, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L4318:
	cmpq	$0, -336(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19482, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -336(%rbp)
	jne	.L4319
	leaq	__PRETTY_FUNCTION__.13995(%rip), %rcx
	movl	$19482, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L4319:
	cmpq	$0, -304(%rbp)
	je	.L4320
	movabsq	$-72057594037927936, %rax
	andq	-304(%rbp), %rax
	movabsq	$-288230376151711744, %rdx
	cmpq	%rdx, %rax
	jne	.L4321
	movq	-304(%rbp), %rdx
	movq	-336(%rbp), %rcx
	movq	-328(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_switch_from_case
	movl	%eax, -308(%rbp)
	cmpl	$-1, -308(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19490, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC652(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$-1, -308(%rbp)
	jne	.L4322
	leaq	__PRETTY_FUNCTION__.13995(%rip), %rcx
	movl	$19490, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC652(%rip), %rdi
	call	__assert_fail@PLT
.L4322:
	movq	-336(%rbp), %rax
	movl	120(%rax), %eax
	addl	%eax, -308(%rbp)
	jmp	.L4323
.L4321:
	movabsq	$-72057594037927936, %rax
	andq	-304(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L4324
	movq	-304(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, -296(%rbp)
	movq	-304(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -288(%rbp)
	cmpq	$0, -296(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19499, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC279(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -296(%rbp)
	jne	.L4325
	leaq	__PRETTY_FUNCTION__.13995(%rip), %rcx
	movl	$19499, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC279(%rip), %rdi
	call	__assert_fail@PLT
.L4325:
	cmpq	$0, -288(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19500, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC632(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -288(%rbp)
	jne	.L4326
	leaq	__PRETTY_FUNCTION__.13995(%rip), %rcx
	movl	$19500, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC632(%rip), %rdi
	call	__assert_fail@PLT
.L4326:
	movl	$266, %eax
	cmpq	%rax, -296(%rbp)
	je	.L4327
	movl	$266, %eax
	cmpq	%rax, -288(%rbp)
	jne	.L4328
.L4327:
	cmpq	$0, -368(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19503, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC653(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -368(%rbp)
	jne	.L4329
	leaq	__PRETTY_FUNCTION__.13995(%rip), %rcx
	movl	$19503, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC654(%rip), %rdi
	call	__assert_fail@PLT
.L4329:
	movl	24(%rbp), %edi
	movq	-368(%rbp), %rcx
	movl	-356(%rbp), %edx
	movq	-304(%rbp), %rsi
	movq	-344(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	get_pair_index
	movl	%eax, -308(%rbp)
	cmpl	$-1, -308(%rbp)
	je	.L4323
	movl	-308(%rbp), %edx
	movq	-344(%rbp), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rax
	movq	(%rax), %rdx
	movq	-352(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-280(%rbp), %rax
	movq	(%rax), %rsi
	leaq	-272(%rbp), %rdx
	movq	-328(%rbp), %rax
	movl	$256, %ecx
	movq	%rax, %rdi
	call	ecs_id_str
	movq	-296(%rbp), %rcx
	movq	-328(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	testq	%rax, %rax
	jne	.L4331
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movl	%eax, %eax
	movq	%rax, -304(%rbp)
	jmp	.L4323
.L4331:
	movq	-296(%rbp), %rax
	movq	%rax, -304(%rbp)
	jmp	.L4323
.L4328:
	movq	-304(%rbp), %rdx
	movq	-344(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -308(%rbp)
	jmp	.L4323
.L4324:
	movq	-304(%rbp), %rdx
	movq	-344(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -308(%rbp)
.L4323:
	cmpl	$-1, -308(%rbp)
	je	.L4320
	addl	$1, -308(%rbp)
.L4320:
	cmpl	$4, -360(%rbp)
	je	.L4334
	cmpl	$5, -360(%rbp)
	je	.L4334
	cmpl	$6, -360(%rbp)
	jne	.L4335
.L4334:
	movl	$0, -308(%rbp)
	jmp	.L4336
.L4335:
	cmpl	$3, -360(%rbp)
	jne	.L4336
	movq	-304(%rbp), %rdx
	movq	-344(%rbp), %rsi
	movq	-328(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	xorl	$1, %eax
	testb	%al, %al
	je	.L4336
	movl	$0, -308(%rbp)
.L4336:
	movl	-308(%rbp), %eax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4338
	call	__stack_chk_fail@PLT
.L4338:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE652:
	.size	get_component_index, .-get_component_index
	.type	add_ref, @function
add_ref:
.LFB653:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%rcx, -112(%rbp)
	movq	%r8, -120(%rbp)
	movq	%r9, -128(%rbp)
	leaq	-104(%rbp), %rax
	movl	$16, %edx
	movl	$48, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -72(%rbp)
	movq	-112(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	jne	.L4340
	cmpq	$0, -128(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19578, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC280(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -128(%rbp)
	jne	.L4340
	leaq	__PRETTY_FUNCTION__.14010(%rip), %rcx
	movl	$19578, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC280(%rip), %rdi
	call	__assert_fail@PLT
.L4340:
	movq	-72(%rbp), %rax
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	movq	$0, 24(%rax)
	movq	$0, 32(%rax)
	movq	$0, 40(%rax)
	movq	-72(%rbp), %rax
	movq	-128(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-72(%rbp), %rax
	movq	-120(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-120(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_component_from_id
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L4341
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L4341
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L4341
	cmpq	$0, -128(%rbp)
	je	.L4342
	movq	-120(%rbp), %rcx
	movq	-128(%rbp), %rdx
	movq	-72(%rbp), %rsi
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_ref_w_id
.L4342:
	movq	-96(%rbp), %rax
	movl	1712(%rax), %eax
	orl	$64, %eax
	movl	%eax, %edx
	movq	-96(%rbp), %rax
	movl	%edx, 1712(%rax)
.L4341:
	movq	-104(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE653:
	.size	add_ref, .-add_ref
	.type	get_pair_count, @function
get_pair_count:
.LFB654:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	$-1, -8(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L4345
.L4346:
	addl	$1, -4(%rbp)
.L4345:
	movl	-8(%rbp), %eax
	leal	1(%rax), %ecx
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.L4346
	movl	-4(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE654:
	.size	get_pair_count, .-get_pair_count
	.type	count_pairs, @function
count_pairs:
.LFB655:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L4349
.L4355:
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	cmpq	%rax, %rdx
	jne	.L4356
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	jne	.L4357
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_id_is_wildcard
	testb	%al, %al
	je	.L4351
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_pair_count
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jne	.L4353
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.L4351
.L4353:
	movl	-28(%rbp), %eax
	cmpl	-20(%rbp), %eax
	je	.L4351
	movl	$-1, %eax
	jmp	.L4354
.L4356:
	nop
	jmp	.L4351
.L4357:
	nop
.L4351:
	addl	$1, -32(%rbp)
.L4349:
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jl	.L4355
	movl	-28(%rbp), %eax
.L4354:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE655:
	.size	count_pairs, .-count_pairs
	.type	get_term_type, @function
get_term_type:
.LFB656:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rax
	movl	160(%rax), %eax
	movl	%eax, -12(%rbp)
	cmpl	$4, -12(%rbp)
	je	.L4359
	cmpl	$5, -12(%rbp)
	je	.L4359
	cmpl	$6, -12(%rbp)
	jne	.L4360
.L4359:
	movq	-40(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L4361
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	jmp	.L4362
.L4361:
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_type
	jmp	.L4362
.L4360:
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_type_from_id
.L4362:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE656:
	.size	get_term_type, .-get_term_type
	.section	.rodata
.LC655:
	.string	"table_data.columns != NULL"
	.align 8
.LC656:
	.string	"table_data.columns != ((void *)0)"
.LC657:
	.string	"table_data.ids != NULL"
.LC658:
	.string	"table_data.ids != ((void *)0)"
.LC659:
	.string	"table_data.types != NULL"
	.align 8
.LC660:
	.string	"table_data.types != ((void *)0)"
.LC661:
	.string	"table_data.subjects != NULL"
	.align 8
.LC662:
	.string	"table_data.subjects != ((void *)0)"
.LC663:
	.string	"table_data.sizes != NULL"
	.align 8
.LC664:
	.string	"table_data.sizes != ((void *)0)"
	.align 8
.LC665:
	.string	"query #[green]%s#[reset] matched with table #[green][%s]"
.LC666:
	.string	"matched_table_index >= 0"
	.text
	.type	add_table, @function
add_table:
.LFB657:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$392, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -376(%rbp)
	movq	%rsi, -384(%rbp)
	movq	%rdx, -392(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	$0, -296(%rbp)
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -256(%rbp)
	movq	-384(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -336(%rbp)
	cmpq	$0, -392(%rbp)
	je	.L4364
	movq	-392(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
.L4364:
	movl	$0, -352(%rbp)
	movq	-296(%rbp), %rdx
	movq	-384(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	count_pairs
	movl	%eax, -332(%rbp)
	movq	$0, -288(%rbp)
	cmpl	$0, -332(%rbp)
	je	.L4365
	movq	32+ecs_os_api(%rip), %rax
	movl	-336(%rbp), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -288(%rbp)
.L4365:
	movq	$0, -280(%rbp)
	movl	$0, -348(%rbp)
	movl	$0, -344(%rbp)
	movq	$0, -272(%rbp)
.L4366:
	leaq	-128(%rbp), %rdx
	movl	$0, %eax
	movl	$12, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-392(%rbp), %rax
	movq	%rax, -120(%rbp)
	cmpq	$0, -392(%rbp)
	je	.L4367
	movq	-392(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -296(%rbp)
.L4367:
	leaq	-128(%rbp), %rdx
	movq	-384(%rbp), %rcx
	movq	-376(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	group_table
	cmpl	$0, -336(%rbp)
	je	.L4368
	movq	32+ecs_os_api(%rip), %rax
	movq	-384(%rbp), %rdx
	movl	12(%rdx), %edx
	sall	$2, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19722, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC655(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-128(%rbp), %rax
	testq	%rax, %rax
	jne	.L4369
	leaq	__PRETTY_FUNCTION__.14063(%rip), %rcx
	movl	$19722, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC656(%rip), %rdi
	call	__assert_fail@PLT
.L4369:
	movq	32+ecs_os_api(%rip), %rax
	movq	-384(%rbp), %rdx
	movl	12(%rdx), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19727, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC657(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	testq	%rax, %rax
	jne	.L4370
	leaq	__PRETTY_FUNCTION__.14063(%rip), %rcx
	movl	$19727, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC658(%rip), %rdi
	call	__assert_fail@PLT
.L4370:
	movq	32+ecs_os_api(%rip), %rax
	movq	-384(%rbp), %rdx
	movl	12(%rdx), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19731, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC659(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	testq	%rax, %rax
	jne	.L4371
	leaq	__PRETTY_FUNCTION__.14063(%rip), %rcx
	movl	$19731, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC660(%rip), %rdi
	call	__assert_fail@PLT
.L4371:
	movq	32+ecs_os_api(%rip), %rax
	movq	-384(%rbp), %rdx
	movl	12(%rdx), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19735, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC661(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-96(%rbp), %rax
	testq	%rax, %rax
	jne	.L4372
	leaq	__PRETTY_FUNCTION__.14063(%rip), %rcx
	movl	$19735, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC662(%rip), %rdi
	call	__assert_fail@PLT
.L4372:
	movq	32+ecs_os_api(%rip), %rax
	movq	-384(%rbp), %rdx
	movl	12(%rdx), %edx
	sall	$2, %edx
	movl	%edx, %edi
	call	*%rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19739, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC663(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	testq	%rax, %rax
	jne	.L4368
	leaq	__PRETTY_FUNCTION__.14063(%rip), %rcx
	movl	$19739, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC664(%rip), %rdi
	call	__assert_fail@PLT
.L4368:
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	jmp	.L4373
.L4389:
	movl	-360(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-256(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	104(%rax), %rdx
	movq	96(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	$0, -312(%rbp)
	movq	$0, -304(%rbp)
	movq	-232(%rbp), %rax
	movl	160(%rax), %eax
	movl	%eax, -324(%rbp)
	cmpl	$2, -324(%rbp)
	jne	.L4374
	movq	$0, -176(%rbp)
.L4374:
	leaq	-312(%rbp), %r8
	leaq	-304(%rbp), %rdi
	movq	-392(%rbp), %rcx
	movl	-360(%rbp), %edx
	movq	-384(%rbp), %rsi
	movq	-376(%rbp), %rax
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	get_comp_and_src
	movl	%eax, -360(%rbp)
	movq	-312(%rbp), %rax
	testq	%rax, %rax
	jne	.L4375
	movq	-176(%rbp), %rax
	testq	%rax, %rax
	je	.L4375
	movl	-352(%rbp), %eax
	leal	1(%rax), %edi
	movl	-324(%rbp), %r9d
	movl	-356(%rbp), %r8d
	leaq	-304(%rbp), %rcx
	movq	-296(%rbp), %rdx
	movq	-392(%rbp), %rsi
	movq	-376(%rbp), %rax
	pushq	%rdi
	pushq	-288(%rbp)
	movq	%rax, %rdi
	call	get_component_index
	addq	$16, %rsp
	movl	%eax, -340(%rbp)
	cmpl	$-1, -340(%rbp)
	jne	.L4376
	cmpl	$3, -324(%rbp)
	jne	.L4377
	movzbl	-144(%rbp), %eax
	cmpb	$1, %al
	jne	.L4377
	movl	$0, -340(%rbp)
	jmp	.L4377
.L4376:
	cmpl	$3, -324(%rbp)
	jne	.L4377
	movzbl	-144(%rbp), %eax
	movzbl	%al, %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L4377
	movl	$0, -340(%rbp)
.L4377:
	movq	-128(%rbp), %rax
	movl	-356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	-340(%rbp), %eax
	movl	%eax, (%rdx)
	movq	-304(%rbp), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movabsq	$-288230376151711744, %rax
	cmpq	%rax, %rdx
	jne	.L4378
	leaq	-128(%rbp), %rax
	addq	$64, %rax
	movl	$16, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	movl	-360(%rbp), %edx
	movl	%edx, 16(%rax)
	movq	-304(%rbp), %rax
	movabsq	$72057594037927935, %rdx
	andq	%rax, %rdx
	movq	-224(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-224(%rbp), %rax
	movq	$0, (%rax)
.L4378:
	cmpl	$0, -340(%rbp)
	je	.L4375
	cmpq	$0, -392(%rbp)
	je	.L4375
	movq	-392(%rbp), %rax
	movl	16(%rax), %eax
	andl	$131072, %eax
	testl	%eax, %eax
	je	.L4375
	movq	-304(%rbp), %rax
	movabsq	$72057594037927935, %rdx
	andq	%rax, %rdx
	movabsq	$-864691128455135232, %rax
	orq	%rdx, %rax
	movq	%rax, -216(%rbp)
	movq	-392(%rbp), %rax
	movq	8(%rax), %rax
	movq	-216(%rbp), %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -320(%rbp)
	cmpl	$-1, -320(%rbp)
	je	.L4375
	leaq	-128(%rbp), %rax
	addq	$72, %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	movl	-320(%rbp), %edx
	movl	%edx, 8(%rax)
	movq	-208(%rbp), %rax
	movq	$0, (%rax)
.L4375:
	movq	-304(%rbp), %rdx
	movq	-376(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_typeid
	movq	%rax, -200(%rbp)
	movq	-312(%rbp), %rax
	testq	%rax, %rax
	jne	.L4379
	movq	-128(%rbp), %rax
	movl	-356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cmpl	$-1, %eax
	je	.L4379
	movzbl	-144(%rbp), %eax
	movzbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	je	.L4380
.L4379:
	cmpq	$0, -200(%rbp)
	je	.L4381
	movq	-312(%rbp), %r8
	movq	-304(%rbp), %rdi
	movq	-232(%rbp), %rcx
	movq	-272(%rbp), %rdx
	movq	-384(%rbp), %rsi
	movq	-376(%rbp), %rax
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	add_ref
	movq	%rax, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movq	-128(%rbp), %rdx
	movl	-356(%rbp), %ecx
	movslq	%ecx, %rcx
	salq	$2, %rcx
	addq	%rcx, %rdx
	negl	%eax
	movl	%eax, (%rdx)
.L4381:
	movq	-96(%rbp), %rax
	movl	-356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rax, %rdx
	movq	-312(%rbp), %rax
	movq	%rax, (%rdx)
	movq	-312(%rbp), %rdx
	movq	-376(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_set_watch
.L4380:
	cmpq	$0, -200(%rbp)
	je	.L4382
	movq	-200(%rbp), %rcx
	movq	-376(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -192(%rbp)
	cmpq	$0, -192(%rbp)
	je	.L4383
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jne	.L4384
.L4383:
	movq	-128(%rbp), %rax
	movl	-356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -316(%rbp)
	cmpl	$0, -316(%rbp)
	jns	.L4384
	movl	-316(%rbp), %eax
	notl	%eax
	movl	%eax, %edx
	movq	-272(%rbp), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$48, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	movq	$0, 8(%rax)
.L4384:
	cmpq	$0, -192(%rbp)
	je	.L4385
	movq	-80(%rbp), %rax
	movl	-356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rax, %rdx
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, (%rdx)
	jmp	.L4386
.L4385:
	movq	-80(%rbp), %rax
	movl	-356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	$0, (%rax)
	jmp	.L4386
.L4382:
	movq	-80(%rbp), %rax
	movl	-356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	$0, (%rax)
.L4386:
	movq	-304(%rbp), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movabsq	$-360287970189639680, %rax
	cmpq	%rax, %rdx
	jne	.L4387
	movq	-80(%rbp), %rax
	movl	-356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	$8, (%rax)
	jmp	.L4388
.L4387:
	movq	-304(%rbp), %rax
	movabsq	$-72057594037927936, %rdx
	andq	%rax, %rdx
	movabsq	$-288230376151711744, %rax
	cmpq	%rax, %rdx
	jne	.L4388
	movq	-80(%rbp), %rax
	movl	-356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	$8, (%rax)
.L4388:
	movq	-104(%rbp), %rax
	movl	-356(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rax, %rdx
	movq	-304(%rbp), %rax
	movq	%rax, (%rdx)
	movq	-304(%rbp), %rdx
	movq	-88(%rbp), %rax
	movl	-356(%rbp), %ecx
	movslq	%ecx, %rcx
	salq	$3, %rcx
	leaq	(%rax,%rcx), %rbx
	movq	-232(%rbp), %rcx
	movq	-376(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	get_term_type
	movq	%rax, (%rbx)
	addl	$1, -356(%rbp)
	addl	$1, -360(%rbp)
.L4373:
	movl	-360(%rbp), %eax
	cmpl	-336(%rbp), %eax
	jl	.L4389
	cmpq	$0, -392(%rbp)
	je	.L4390
	movq	-384(%rbp), %rax
	movq	%rax, %rdi
	call	has_auto_activation
	testb	%al, %al
	je	.L4390
	movq	-384(%rbp), %rax
	addq	$1616, %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -264(%rbp)
	movq	-384(%rbp), %rax
	movq	1616(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -344(%rbp)
	addl	$1, -348(%rbp)
	movq	24+ecs_os_api(%rip), %rdx
	movl	-348(%rbp), %eax
	leal	0(,%rax,4), %ecx
	movq	-280(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -280(%rbp)
	movl	-348(%rbp), %eax
	cltq
	salq	$2, %rax
	leaq	-4(%rax), %rdx
	movq	-280(%rbp), %rax
	addq	%rdx, %rax
	movl	-344(%rbp), %edx
	negl	%edx
	movl	%edx, (%rax)
	movq	-392(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-376(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_type_str
	movq	%rax, -248(%rbp)
	movq	-384(%rbp), %rdx
	movq	-376(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	query_name
	movq	-248(%rbp), %rdx
	movq	%rdx, %r9
	movq	%rax, %r8
	leaq	.LC665(%rip), %rcx
	movl	$19866, %edx
	leaq	.LC74(%rip), %rsi
	movl	$2, %edi
	movl	$0, %eax
	call	_ecs_trace
	movq	40+ecs_os_api(%rip), %rdx
	movq	-248(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	jmp	.L4391
.L4390:
	movq	-384(%rbp), %rax
	addq	$1608, %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -264(%rbp)
	movq	-384(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	subl	$1, %eax
	movl	%eax, -344(%rbp)
	movl	-344(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$19881, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC666(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -344(%rbp)
	jns	.L4391
	leaq	__PRETTY_FUNCTION__.14063(%rip), %rcx
	movl	$19881, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC666(%rip), %rdi
	call	__assert_fail@PLT
.L4391:
	cmpq	$0, -272(%rbp)
	je	.L4392
	movq	-272(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$4, %eax
	movl	%eax, -328(%rbp)
	movq	16+ecs_os_api(%rip), %rdx
	movl	-328(%rbp), %eax
	movl	%eax, %edi
	call	*%rdx
	movq	%rax, -72(%rbp)
	movl	-328(%rbp), %eax
	movslq	%eax, %rbx
	movq	-272(%rbp), %rax
	movl	$16, %edx
	movl	$48, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, %rcx
	movq	-72(%rbp), %rax
	movq	%rbx, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-272(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	$0, -272(%rbp)
.L4392:
	movq	-264(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	-120(%rbp), %rbx
	movq	%rcx, (%rax)
	movq	%rbx, 8(%rax)
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rbx
	movq	%rcx, 16(%rax)
	movq	%rbx, 24(%rax)
	movq	-96(%rbp), %rcx
	movq	-88(%rbp), %rbx
	movq	%rcx, 32(%rax)
	movq	%rbx, 40(%rax)
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rbx
	movq	%rcx, 48(%rax)
	movq	%rbx, 56(%rax)
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rbx
	movq	%rcx, 64(%rax)
	movq	%rbx, 72(%rax)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rbx
	movq	%rcx, 80(%rax)
	movq	%rbx, 88(%rax)
	addl	$1, -352(%rbp)
	movl	-352(%rbp), %eax
	cmpl	-332(%rbp), %eax
	jge	.L4393
	jmp	.L4366
.L4393:
	cmpq	$0, -280(%rbp)
	je	.L4394
	movq	-392(%rbp), %rax
	movq	(%rax), %rdx
	movq	-384(%rbp), %rax
	movq	1624(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_ensure
	movq	%rax, -240(%rbp)
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L4395
	movq	40+ecs_os_api(%rip), %rdx
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L4395:
	movq	-240(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-240(%rbp), %rax
	movl	-348(%rbp), %edx
	movl	%edx, 8(%rax)
.L4394:
	cmpq	$0, -392(%rbp)
	je	.L4396
	movq	-384(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L4396
	movq	$0, -176(%rbp)
	movq	$0, -168(%rbp)
	movq	$0, -160(%rbp)
	movq	$0, -152(%rbp)
	movq	$0, -144(%rbp)
	movq	-384(%rbp), %rax
	movq	%rax, -168(%rbp)
	movl	-344(%rbp), %eax
	movl	%eax, -160(%rbp)
	leaq	-176(%rbp), %rdx
	movq	-392(%rbp), %rcx
	movq	-376(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_notify
	jmp	.L4397
.L4396:
	cmpq	$0, -392(%rbp)
	je	.L4397
	movq	-392(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	testl	%eax, %eax
	je	.L4397
	movq	-392(%rbp), %rdx
	movq	-384(%rbp), %rsi
	movq	-376(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	activate_table
.L4397:
	cmpq	$0, -288(%rbp)
	je	.L4400
	movq	40+ecs_os_api(%rip), %rdx
	movq	-288(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L4400:
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4399
	call	__stack_chk_fail@PLT
.L4399:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE657:
	.size	add_table, .-add_table
	.type	match_term, @function
match_term:
.LFB658:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-40(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L4402
	movl	$1, %eax
	jmp	.L4403
.L4402:
	movq	-40(%rbp), %rax
	movq	64(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L4404
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_table
	movq	%rax, -32(%rbp)
.L4404:
	movq	-8(%rbp), %rax
	movl	40(%rax), %edi
	movq	-8(%rbp), %rax
	movl	36(%rax), %ecx
	movq	-8(%rbp), %rax
	movq	24(%rax), %r9
	movq	-40(%rbp), %rax
	movq	(%rax), %r8
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	subq	$8, %rsp
	pushq	$0
	pushq	%rdi
	pushq	%rcx
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_match
	addq	$32, %rsp
	cmpl	$-1, %eax
	setne	%al
.L4403:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE658:
	.size	match_term, .-match_term
	.globl	flecs_query_match
	.type	flecs_query_match, @function
flecs_query_match:
.LFB659:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$328, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -312(%rbp)
	movq	%rsi, -320(%rbp)
	movq	%rdx, -328(%rbp)
	movq	%rcx, -336(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -336(%rbp)
	jne	.L4406
	leaq	-232(%rbp), %rax
	movq	%rax, -336(%rbp)
.L4406:
	movq	-336(%rbp), %rax
	movl	$0, (%rax)
	movq	-336(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-328(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L4407
	movq	-336(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, %eax
	jmp	.L4429
.L4407:
	movq	-320(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -272(%rbp)
	movq	-328(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L4409
	movl	$261, %edx
	movq	-272(%rbp), %rsi
	movq	-312(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	je	.L4409
	movq	-336(%rbp), %rax
	movl	$3, (%rax)
	movl	$0, %eax
	jmp	.L4429
.L4409:
	movq	-328(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$32, %eax
	testl	%eax, %eax
	jne	.L4410
	movl	$260, %edx
	movq	-272(%rbp), %rsi
	movq	-312(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	je	.L4410
	movq	-336(%rbp), %rax
	movl	$4, (%rax)
	movl	$0, %eax
	jmp	.L4429
.L4410:
	movq	-320(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-328(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	count_pairs
	cmpl	$-1, %eax
	jne	.L4411
	movl	$0, %eax
	jmp	.L4429
.L4411:
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -264(%rbp)
	movq	-328(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -284(%rbp)
	movl	$0, -296(%rbp)
	jmp	.L4412
.L4428:
	movl	-296(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-264(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rax
	movl	160(%rax), %eax
	movl	%eax, -280(%rbp)
	movl	-296(%rbp), %eax
	leal	1(%rax), %edx
	movq	-336(%rbp), %rax
	movl	%edx, 4(%rax)
	cmpl	$0, -280(%rbp)
	jne	.L4413
	movq	-336(%rbp), %rcx
	movq	-256(%rbp), %rdx
	movq	-320(%rbp), %rsi
	movq	-312(%rbp), %rax
	movq	%rax, %rdi
	call	match_term
	xorl	$1, %eax
	testb	%al, %al
	je	.L4414
	movl	$0, %eax
	jmp	.L4429
.L4413:
	cmpl	$2, -280(%rbp)
	jne	.L4415
	movq	-336(%rbp), %rcx
	movq	-256(%rbp), %rdx
	movq	-320(%rbp), %rsi
	movq	-312(%rbp), %rax
	movq	%rax, %rdi
	call	match_term
	testb	%al, %al
	je	.L4414
	movl	$0, %eax
	jmp	.L4429
.L4415:
	cmpl	$1, -280(%rbp)
	jne	.L4416
	movb	$0, -297(%rbp)
	jmp	.L4417
.L4421:
	movl	-296(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-264(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	je	.L4418
	subl	$1, -296(%rbp)
	jmp	.L4419
.L4418:
	movzbl	-297(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L4420
	movq	-336(%rbp), %rcx
	movq	-256(%rbp), %rdx
	movq	-320(%rbp), %rsi
	movq	-312(%rbp), %rax
	movq	%rax, %rdi
	call	match_term
	testb	%al, %al
	je	.L4420
	movb	$1, -297(%rbp)
.L4420:
	addl	$1, -296(%rbp)
.L4417:
	movl	-296(%rbp), %eax
	cmpl	-284(%rbp), %eax
	jl	.L4421
.L4419:
	movzbl	-297(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L4414
	movl	$0, %eax
	jmp	.L4429
.L4416:
	cmpl	$4, -280(%rbp)
	je	.L4422
	cmpl	$5, -280(%rbp)
	je	.L4422
	cmpl	$6, -280(%rbp)
	jne	.L4414
.L4422:
	movq	-256(%rbp), %rax
	movq	(%rax), %rdx
	movq	-256(%rbp), %rcx
	movq	-312(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	get_term_type
	movq	%rax, -248(%rbp)
	movl	$0, -292(%rbp)
	movq	-248(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -276(%rbp)
	movq	-248(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -240(%rbp)
	movl	$0, -288(%rbp)
	jmp	.L4423
.L4425:
	movq	-256(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rbx
	movq	%rcx, -224(%rbp)
	movq	%rbx, -216(%rbp)
	movq	16(%rax), %rcx
	movq	24(%rax), %rbx
	movq	%rcx, -208(%rbp)
	movq	%rbx, -200(%rbp)
	movq	32(%rax), %rcx
	movq	40(%rax), %rbx
	movq	%rcx, -192(%rbp)
	movq	%rbx, -184(%rbp)
	movq	48(%rax), %rcx
	movq	56(%rax), %rbx
	movq	%rcx, -176(%rbp)
	movq	%rbx, -168(%rbp)
	movq	64(%rax), %rcx
	movq	72(%rax), %rbx
	movq	%rcx, -160(%rbp)
	movq	%rbx, -152(%rbp)
	movq	80(%rax), %rcx
	movq	88(%rax), %rbx
	movq	%rcx, -144(%rbp)
	movq	%rbx, -136(%rbp)
	movq	96(%rax), %rcx
	movq	104(%rax), %rbx
	movq	%rcx, -128(%rbp)
	movq	%rbx, -120(%rbp)
	movq	112(%rax), %rcx
	movq	120(%rax), %rbx
	movq	%rcx, -112(%rbp)
	movq	%rbx, -104(%rbp)
	movq	128(%rax), %rcx
	movq	136(%rax), %rbx
	movq	%rcx, -96(%rbp)
	movq	%rbx, -88(%rbp)
	movq	144(%rax), %rcx
	movq	152(%rax), %rbx
	movq	%rcx, -80(%rbp)
	movq	%rbx, -72(%rbp)
	movq	160(%rax), %rcx
	movq	168(%rax), %rbx
	movq	%rcx, -64(%rbp)
	movq	%rbx, -56(%rbp)
	movq	184(%rax), %rdx
	movq	176(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
	movl	$0, -64(%rbp)
	movl	-288(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-240(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -224(%rbp)
	movl	-288(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-240(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	-336(%rbp), %rcx
	leaq	-224(%rbp), %rdx
	movq	-320(%rbp), %rsi
	movq	-312(%rbp), %rax
	movq	%rax, %rdi
	call	match_term
	testb	%al, %al
	je	.L4424
	addl	$1, -292(%rbp)
.L4424:
	addl	$1, -288(%rbp)
.L4423:
	movl	-288(%rbp), %eax
	cmpl	-276(%rbp), %eax
	jl	.L4425
	cmpl	$4, -280(%rbp)
	jne	.L4426
	movl	-292(%rbp), %eax
	cmpl	-276(%rbp), %eax
	je	.L4426
	movl	$0, %eax
	jmp	.L4429
.L4426:
	cmpl	$5, -280(%rbp)
	jne	.L4427
	cmpl	$0, -292(%rbp)
	jne	.L4427
	movl	$0, %eax
	jmp	.L4429
.L4427:
	cmpl	$6, -280(%rbp)
	jne	.L4414
	cmpl	$0, -292(%rbp)
	je	.L4414
	movl	$0, %eax
	jmp	.L4429
.L4414:
	addl	$1, -296(%rbp)
.L4412:
	movl	-296(%rbp), %eax
	cmpl	-284(%rbp), %eax
	jl	.L4428
	movl	$1, %eax
.L4429:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L4430
	call	__stack_chk_fail@PLT
.L4430:
	addq	$328, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE659:
	.size	flecs_query_match, .-flecs_query_match
	.type	match_tables, @function
match_tables:
.LFB660:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L4432
.L4434:
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	movl	-16(%rbp), %edx
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -8(%rbp)
	movq	-32(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_query_match
	testb	%al, %al
	je	.L4433
	movq	-8(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_table
.L4433:
	addl	$1, -16(%rbp)
.L4432:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L4434
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	order_grouped_tables
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE660:
	.size	match_tables, .-match_tables
	.type	qsort_partition, @function
qsort_partition:
.LFB661:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movl	%r9d, -92(%rbp)
	movl	24(%rbp), %edx
	movl	16(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, %edx
	shrl	$31, %edx
	addl	%edx, %eax
	sarl	%eax
	movl	%eax, -28(%rbp)
	movl	-92(%rbp), %eax
	imull	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	16(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.L4436
.L4443:
	nop
.L4436:
	addl	$1, -36(%rbp)
	movl	-92(%rbp), %eax
	imull	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	32(%rbp), %r8
	movq	%rax, %rdi
	call	*%r8
	testl	%eax, %eax
	js	.L4443
.L4437:
	subl	$1, -32(%rbp)
	movl	-92(%rbp), %eax
	imull	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	32(%rbp), %r8
	movq	%rax, %rdi
	call	*%r8
	testl	%eax, %eax
	jg	.L4437
	movl	-36(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jl	.L4438
	movl	-32(%rbp), %eax
	jmp	.L4442
.L4438:
	movl	-32(%rbp), %edi
	movl	-36(%rbp), %ecx
	movq	-72(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	flecs_table_swap
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.L4440
	movl	-92(%rbp), %eax
	imull	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.L4436
.L4440:
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	.L4436
	movl	-92(%rbp), %eax
	imull	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.L4436
.L4442:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE661:
	.size	qsort_partition, .-qsort_partition
	.type	qsort_array, @function
qsort_array:
.LFB662:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -60(%rbp)
	movl	24(%rbp), %eax
	subl	16(%rbp), %eax
	testl	%eax, %eax
	jle	.L4447
	movl	-60(%rbp), %r9d
	movq	-56(%rbp), %r8
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	subq	$8, %rsp
	pushq	32(%rbp)
	movl	24(%rbp), %edi
	pushq	%rdi
	movl	16(%rbp), %edi
	pushq	%rdi
	movq	%rax, %rdi
	call	qsort_partition
	addq	$32, %rsp
	movl	%eax, -4(%rbp)
	movl	-60(%rbp), %r9d
	movq	-56(%rbp), %r8
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	subq	$8, %rsp
	pushq	32(%rbp)
	movl	-4(%rbp), %edi
	pushq	%rdi
	movl	16(%rbp), %edi
	pushq	%rdi
	movq	%rax, %rdi
	call	qsort_array
	addq	$32, %rsp
	movl	-4(%rbp), %eax
	leal	1(%rax), %r8d
	movl	-60(%rbp), %r9d
	movq	-56(%rbp), %r10
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	subq	$8, %rsp
	pushq	32(%rbp)
	movl	24(%rbp), %edi
	pushq	%rdi
	pushq	%r8
	movq	%r10, %r8
	movq	%rax, %rdi
	call	qsort_array
	addq	$32, %rsp
	jmp	.L4444
.L4447:
	nop
.L4444:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE662:
	.size	qsort_array, .-qsort_array
	.type	sort_table, @function
sort_table:
.LFB663:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L4454
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L4454
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_data_count
	movl	%eax, -36(%rbp)
	cmpl	$1, -36(%rbp)
	jle	.L4455
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -68(%rbp)
	je	.L4453
	movq	-24(%rbp), %rax
	movq	16(%rax), %rax
	movl	-68(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzwl	8(%rax), %eax
	cwtl
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-40(%rbp), %ecx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
.L4453:
	movl	-36(%rbp), %eax
	leal	-1(%rax), %edi
	movl	-40(%rbp), %r9d
	movq	-32(%rbp), %r8
	movq	-16(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	subq	$8, %rsp
	pushq	-80(%rbp)
	pushq	%rdi
	pushq	$0
	movq	%rax, %rdi
	call	qsort_array
	addq	$32, %rsp
	jmp	.L4448
.L4454:
	nop
	jmp	.L4448
.L4455:
	nop
.L4448:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE663:
	.size	sort_table, .-sort_table
	.section	.rodata
.LC667:
	.string	"helper->row < helper->count"
.LC668:
	.string	"helper->elem_size >= 0"
.LC669:
	.string	"helper->row >= 0"
	.text
	.type	ptr_from_helper, @function
ptr_from_helper:
.LFB664:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	24(%rax), %edx
	movq	-8(%rbp), %rax
	movl	32(%rax), %eax
	cmpl	%eax, %edx
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20208, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC667(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	24(%rax), %edx
	movq	-8(%rbp), %rax
	movl	32(%rax), %eax
	cmpl	%eax, %edx
	jl	.L4457
	leaq	__PRETTY_FUNCTION__.14190(%rip), %rcx
	movl	$20208, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC667(%rip), %rdi
	call	__assert_fail@PLT
.L4457:
	movq	-8(%rbp), %rax
	movl	28(%rax), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20209, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC668(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	28(%rax), %eax
	testl	%eax, %eax
	jns	.L4458
	leaq	__PRETTY_FUNCTION__.14190(%rip), %rcx
	movl	$20209, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC668(%rip), %rdi
	call	__assert_fail@PLT
.L4458:
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20210, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC669(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	testl	%eax, %eax
	jns	.L4459
	leaq	__PRETTY_FUNCTION__.14190(%rip), %rcx
	movl	$20210, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC669(%rip), %rdi
	call	__assert_fail@PLT
.L4459:
	movq	-8(%rbp), %rax
	movzbl	36(%rax), %eax
	testb	%al, %al
	je	.L4460
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	jmp	.L4461
.L4460:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rcx
	movq	-8(%rbp), %rax
	movl	28(%rax), %edx
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	imull	%edx, %eax
	cltq
	addq	%rcx, %rax
.L4461:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE664:
	.size	ptr_from_helper, .-ptr_from_helper
	.type	e_from_helper, @function
e_from_helper:
.LFB665:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	24(%rax), %edx
	movq	-8(%rbp), %rax
	movl	32(%rax), %eax
	cmpl	%eax, %edx
	jge	.L4463
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	cltq
	salq	$3, %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	jmp	.L4464
.L4463:
	movl	$0, %eax
.L4464:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE665:
	.size	e_from_helper, .-e_from_helper
	.section	.rodata
.LC670:
	.string	"cur != NULL"
.LC671:
	.string	"cur != ((void *)0)"
	.text
	.type	build_sorted_table_range, @function
build_sorted_table_range:
.LFB666:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -216(%rbp)
	movl	%esi, -220(%rbp)
	movl	%edx, -224(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-216(%rbp), %rax
	movq	1600(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-216(%rbp), %rax
	movq	1640(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-216(%rbp), %rax
	movq	1648(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-216(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -120(%rbp)
	movq	16+ecs_os_api(%rip), %rcx
	movl	-224(%rbp), %eax
	subl	-220(%rbp), %eax
	movl	%eax, %edx
	movl	%edx, %eax
	sall	$2, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edi
	call	*%rcx
	movq	%rax, -112(%rbp)
	movl	$0, -184(%rbp)
	movl	-220(%rbp), %eax
	movl	%eax, -188(%rbp)
	jmp	.L4466
.L4475:
	movl	-188(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	je	.L4491
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L4491
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	testl	%eax, %eax
	je	.L4491
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	-136(%rbp), %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -172(%rbp)
	cmpl	$-1, -172(%rbp)
	je	.L4470
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movl	-172(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movzwl	8(%rax), %eax
	movw	%ax, -192(%rbp)
	movq	-32(%rbp), %rax
	movzwl	10(%rax), %eax
	movw	%ax, -190(%rbp)
	movl	$16, %eax
	cmpw	$16, -190(%rbp)
	cmovge	-190(%rbp), %ax
	movswl	%ax, %edi
	movswl	-192(%rbp), %esi
	movq	-32(%rbp), %rax
	movq	(%rax), %rcx
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movl	%edi, %edx
	movq	%rcx, %rdi
	call	_ecs_vector_first
	movq	%rax, 16(%rbx)
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rax, %rdx
	movswl	-192(%rbp), %eax
	movl	%eax, 28(%rdx)
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, 36(%rax)
	jmp	.L4471
.L4470:
	cmpq	$0, -136(%rbp)
	je	.L4472
	movl	$277, %r8d
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-136(%rbp), %rdi
	movq	-64(%rbp), %rsi
	movq	-144(%rbp), %rax
	subq	$8, %rsp
	leaq	-168(%rbp), %rcx
	pushq	%rcx
	pushq	$0
	pushq	$1
	movq	%r8, %r9
	movq	%rdi, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_match
	addq	$32, %rsp
	movq	-168(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20269, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC197(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-168(%rbp), %rax
	testq	%rax, %rax
	jne	.L4473
	leaq	__PRETTY_FUNCTION__.14216(%rip), %rcx
	movl	$20269, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC197(%rip), %rdi
	call	__assert_fail@PLT
.L4473:
	movq	-136(%rbp), %rcx
	movq	-144(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20272, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC321(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L4474
	leaq	__PRETTY_FUNCTION__.14216(%rip), %rcx
	movl	$20272, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC322(%rip), %rdi
	call	__assert_fail@PLT
.L4474:
	movq	-168(%rbp), %rcx
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movq	-136(%rbp), %rdx
	movq	-144(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, 16(%rbx)
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rax, %rdx
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, 28(%rdx)
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movb	$1, 36(%rax)
	jmp	.L4471
.L4472:
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	$0, 16(%rax)
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movl	$0, 28(%rax)
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, 36(%rax)
.L4471:
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rax, %rdx
	movq	-72(%rbp), %rax
	movq	%rax, (%rdx)
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movq	-48(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, 8(%rbx)
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movl	$0, 24(%rax)
	movl	-184(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movl	%eax, 32(%rbx)
	addl	$1, -184(%rbp)
	jmp	.L4469
.L4491:
	nop
.L4469:
	addl	$1, -188(%rbp)
.L4466:
	movl	-188(%rbp), %eax
	cmpl	-224(%rbp), %eax
	jl	.L4475
	movq	$0, -160(%rbp)
.L4489:
	movl	$0, -176(%rbp)
	movb	$1, -193(%rbp)
	jmp	.L4476
.L4478:
	addl	$1, -176(%rbp)
	movl	-176(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jne	.L4476
	movb	$0, -193(%rbp)
	jmp	.L4477
.L4476:
	movl	-176(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	e_from_helper
	movq	%rax, -152(%rbp)
	cmpq	$0, -152(%rbp)
	je	.L4478
.L4477:
	movzbl	-193(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L4492
	movl	-176(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -180(%rbp)
	jmp	.L4481
.L4484:
	movl	-180(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	e_from_helper
	movq	%rax, -96(%rbp)
	cmpq	$0, -96(%rbp)
	je	.L4493
	movl	-176(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	ptr_from_helper
	movq	%rax, -88(%rbp)
	movl	-180(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	ptr_from_helper
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rsi
	movq	-152(%rbp), %rax
	movq	-128(%rbp), %r8
	movq	%rax, %rdi
	call	*%r8
	testl	%eax, %eax
	jle	.L4483
	movl	-180(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	e_from_helper
	movq	%rax, -152(%rbp)
	jmp	.L4483
.L4493:
	nop
.L4483:
	addl	$1, -180(%rbp)
.L4481:
	movl	-180(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jl	.L4484
	movl	-176(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -104(%rbp)
	cmpq	$0, -160(%rbp)
	je	.L4485
	movq	-160(%rbp), %rax
	movq	(%rax), %rdx
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, %rdx
	je	.L4486
.L4485:
	movq	-216(%rbp), %rax
	addq	$1656, %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -160(%rbp)
	cmpq	$0, -160(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20328, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC670(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -160(%rbp)
	jne	.L4487
	leaq	__PRETTY_FUNCTION__.14216(%rip), %rcx
	movl	$20328, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC671(%rip), %rdi
	call	__assert_fail@PLT
.L4487:
	movq	-104(%rbp), %rax
	movq	(%rax), %rdx
	movq	-160(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-104(%rbp), %rax
	movl	24(%rax), %edx
	movq	-160(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-160(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.L4488
.L4486:
	movq	-160(%rbp), %rax
	movl	12(%rax), %eax
	leal	1(%rax), %edx
	movq	-160(%rbp), %rax
	movl	%edx, 12(%rax)
.L4488:
	movq	-104(%rbp), %rax
	movl	24(%rax), %eax
	leal	1(%rax), %edx
	movq	-104(%rbp), %rax
	movl	%edx, 24(%rax)
	cmpb	$0, -193(%rbp)
	jne	.L4489
	jmp	.L4480
.L4492:
	nop
.L4480:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4490
	call	__stack_chk_fail@PLT
.L4490:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE666:
	.size	build_sorted_table_range, .-build_sorted_table_range
	.type	build_sorted_tables, @function
build_sorted_tables:
.LFB667:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	1656(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-40(%rbp), %rax
	movq	$0, 1656(%rax)
	movq	-40(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movq	$0, -8(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L4495
.L4498:
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	88(%rax), %eax
	cmpl	%eax, -24(%rbp)
	je	.L4496
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	je	.L4497
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movq	-40(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	build_sorted_table_range
	movl	-32(%rbp), %eax
	movl	%eax, -28(%rbp)
.L4497:
	movq	-8(%rbp), %rax
	movl	88(%rax), %eax
	movl	%eax, -24(%rbp)
.L4496:
	addl	$1, -32(%rbp)
.L4495:
	movl	-32(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L4498
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	je	.L4500
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movq	-40(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	build_sorted_table_range
.L4500:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE667:
	.size	build_sorted_tables, .-build_sorted_tables
	.type	tables_dirty, @function
tables_dirty:
.LFB668:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rax
	movzbl	1740(%rax), %eax
	testb	%al, %al
	je	.L4502
	movq	-72(%rbp), %rax
	movq	1600(%rax), %rax
	movq	-72(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	order_grouped_tables
.L4502:
	movq	-72(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movb	$0, -49(%rbp)
	movl	$0, -48(%rbp)
	jmp	.L4503
.L4510:
	movl	-48(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	testq	%rax, %rax
	jne	.L4504
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_monitor
	movq	-24(%rbp), %rdx
	movq	%rax, 80(%rdx)
	movb	$1, -49(%rbp)
.L4504:
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_dirty_state
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -44(%rbp)
	jmp	.L4505
.L4509:
	cmpb	$0, -49(%rbp)
	jne	.L4506
	movl	-44(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %edx
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	movl	-44(%rbp), %ecx
	movslq	%ecx, %rcx
	salq	$2, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	je	.L4507
.L4506:
	movl	$1, %eax
	jmp	.L4508
.L4507:
	movl	$0, %eax
.L4508:
	movb	%al, -49(%rbp)
	andb	$1, -49(%rbp)
	addl	$1, -44(%rbp)
.L4505:
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.L4509
	addl	$1, -48(%rbp)
.L4503:
	movl	-48(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L4510
	cmpb	$0, -49(%rbp)
	jne	.L4511
	movq	-72(%rbp), %rax
	movl	1732(%rax), %edx
	movq	-72(%rbp), %rax
	movl	1736(%rax), %eax
	cmpl	%eax, %edx
	je	.L4512
.L4511:
	movl	$1, %eax
	jmp	.L4513
.L4512:
	movl	$0, %eax
.L4513:
	movb	%al, -49(%rbp)
	andb	$1, -49(%rbp)
	movzbl	-49(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE668:
	.size	tables_dirty, .-tables_dirty
	.type	tables_reset_dirty, @function
tables_reset_dirty:
.LFB669:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	1732(%rax), %edx
	movq	-56(%rbp), %rax
	movl	%edx, 1736(%rax)
	movq	-56(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -40(%rbp)
	movq	-56(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movl	$0, -48(%rbp)
	jmp	.L4516
.L4521:
	movl	-48(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	testq	%rax, %rax
	je	.L4522
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_dirty_state
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -44(%rbp)
	jmp	.L4519
.L4520:
	movl	-44(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	-8(%rbp), %rax
	leaq	(%rdx,%rax), %rcx
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	movl	-44(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	(%rcx), %eax
	movl	%eax, (%rdx)
	addl	$1, -44(%rbp)
.L4519:
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.L4520
	addl	$1, -48(%rbp)
.L4516:
	movl	-48(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L4521
	jmp	.L4515
.L4522:
	nop
.L4515:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE669:
	.size	tables_reset_dirty, .-tables_reset_dirty
	.section	.rodata
	.align 8
.LC672:
	.string	"index < ecs_vector_count(table->type)"
	.text
	.type	sort_tables, @function
sort_tables:
.LFB670:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	1648(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L4540
	movq	-80(%rbp), %rax
	movq	1640(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-80(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movb	$0, -62(%rbp)
	movl	$0, -60(%rbp)
	jmp	.L4526
.L4538:
	movl	-60(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movb	$0, -61(%rbp)
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	testq	%rax, %rax
	jne	.L4527
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_monitor
	movq	-24(%rbp), %rdx
	movq	%rax, 80(%rdx)
	movb	$1, -61(%rbp)
.L4527:
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_dirty_state
	movq	%rax, -8(%rbp)
	cmpb	$0, -61(%rbp)
	jne	.L4528
	movq	-8(%rbp), %rax
	movl	(%rax), %edx
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	je	.L4529
.L4528:
	movl	$1, %eax
	jmp	.L4530
.L4529:
	movl	$0, %eax
.L4530:
	movb	%al, -61(%rbp)
	andb	$1, -61(%rbp)
	movl	$-1, -56(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L4531
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	-40(%rbp), %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	je	.L4541
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -56(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20475, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC672(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -56(%rbp)
	jl	.L4533
	leaq	__PRETTY_FUNCTION__.14301(%rip), %rcx
	movl	$20475, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC672(%rip), %rdi
	call	__assert_fail@PLT
.L4533:
	cmpb	$0, -61(%rbp)
	jne	.L4534
	movl	-56(%rbp), %eax
	cltq
	addq	$1, %rax
	leaq	0(,%rax,4), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %edx
	movq	-24(%rbp), %rax
	movq	80(%rax), %rax
	movl	-56(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	$1, %rcx
	salq	$2, %rcx
	addq	%rcx, %rax
	movl	(%rax), %eax
	cmpl	%eax, %edx
	je	.L4535
.L4534:
	movl	$1, %eax
	jmp	.L4536
.L4535:
	movl	$0, %eax
.L4536:
	movb	%al, -61(%rbp)
	andb	$1, -61(%rbp)
.L4531:
	cmpb	$0, -61(%rbp)
	je	.L4537
	movq	-48(%rbp), %rcx
	movl	-56(%rbp), %edx
	movq	-16(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	sort_table
	movb	$1, -62(%rbp)
	jmp	.L4537
.L4541:
	nop
.L4537:
	addl	$1, -60(%rbp)
.L4526:
	movl	-60(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L4538
	cmpb	$0, -62(%rbp)
	jne	.L4539
	movq	-80(%rbp), %rax
	movl	1732(%rax), %edx
	movq	-80(%rbp), %rax
	movl	1736(%rax), %eax
	cmpl	%eax, %edx
	je	.L4523
.L4539:
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	build_sorted_tables
	movq	-80(%rbp), %rax
	movl	1732(%rax), %eax
	leal	1(%rax), %edx
	movq	-80(%rbp), %rax
	movl	%edx, 1732(%rax)
	jmp	.L4523
.L4540:
	nop
.L4523:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE670:
	.size	sort_tables, .-sort_tables
	.type	has_refs, @function
has_refs:
.LFB671:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L4543
.L4548:
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$2, %eax
	jne	.L4544
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L4544
	movl	$1, %eax
	jmp	.L4545
.L4544:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L4546
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	jne	.L4547
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	cmpb	$1, %al
	je	.L4546
.L4547:
	movl	$1, %eax
	jmp	.L4545
.L4546:
	addl	$1, -32(%rbp)
.L4543:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L4548
	movl	$0, %eax
.L4545:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE671:
	.size	has_refs, .-has_refs
	.type	has_pairs, @function
has_pairs:
.LFB672:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$24, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L4550
.L4553:
	movl	-16(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_id_is_wildcard
	testb	%al, %al
	je	.L4551
	movl	$1, %eax
	jmp	.L4552
.L4551:
	addl	$1, -16(%rbp)
.L4550:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L4553
	movl	$0, %eax
.L4552:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE672:
	.size	has_pairs, .-has_pairs
	.type	register_monitors, @function
register_monitors:
.LFB673:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L4555
.L4561:
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$2, %eax
	testl	%eax, %eax
	je	.L4556
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	je	.L4556
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movl	$277, %edx
	cmpq	%rdx, %rax
	je	.L4556
	movq	-16(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	je	.L4559
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movl	$277, %edx
	cmpq	%rdx, %rax
	je	.L4558
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	88(%rax), %rsi
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_monitor_register
.L4558:
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	flecs_monitor_register
	jmp	.L4559
.L4556:
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$2, %eax
	testl	%eax, %eax
	jne	.L4560
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L4559
.L4560:
	movq	-16(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	je	.L4559
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	flecs_monitor_register
.L4559:
	addl	$1, -32(%rbp)
.L4555:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L4561
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE673:
	.size	register_monitors, .-register_monitors
	.section	.rodata
.LC673:
	.string	"pred->var != EcsVarIsVariable"
.LC674:
	.string	"subj->var != EcsVarIsVariable"
.LC675:
	.string	"obj->var != EcsVarIsVariable"
.LC676:
	.string	"!(pred->set.mask & EcsSubSet)"
.LC677:
	.string	"!(pred->set.mask & (4))"
.LC678:
	.string	"!(subj->set.mask & EcsSubSet)"
.LC679:
	.string	"!(subj->set.mask & (4))"
.LC680:
	.string	"!(obj->set.mask & EcsSubSet)"
.LC681:
	.string	"!(obj->set.mask & (4))"
	.align 8
.LC682:
	.string	"pred->set.mask == EcsDefaultSet"
.LC683:
	.string	"pred->set.mask == (0)"
	.align 8
.LC684:
	.string	"obj->set.mask == EcsDefaultSet"
.LC685:
	.string	"obj->set.mask == (0)"
.LC686:
	.string	"query->cascade_by == 0"
	.text
	.type	process_signature, @function
process_signature:
.LFB674:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-80(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -56(%rbp)
	jmp	.L4563
.L4584:
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$112, %rax
	movq	%rax, -8(%rbp)
	movq	-32(%rbp), %rax
	movl	160(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	$2, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20602, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC673(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	$2, %eax
	jne	.L4564
	leaq	__PRETTY_FUNCTION__.14351(%rip), %rcx
	movl	$20602, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC673(%rip), %rdi
	call	__assert_fail@PLT
.L4564:
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	$2, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20604, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC674(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	$2, %eax
	jne	.L4565
	leaq	__PRETTY_FUNCTION__.14351(%rip), %rcx
	movl	$20604, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC674(%rip), %rdi
	call	__assert_fail@PLT
.L4565:
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	$2, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20606, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC675(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	$2, %eax
	jne	.L4566
	leaq	__PRETTY_FUNCTION__.14351(%rip), %rcx
	movl	$20606, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC675(%rip), %rdi
	call	__assert_fail@PLT
.L4566:
	movq	-24(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$4, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20610, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC676(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$4, %eax
	testl	%eax, %eax
	je	.L4567
	leaq	__PRETTY_FUNCTION__.14351(%rip), %rcx
	movl	$20610, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC677(%rip), %rdi
	call	__assert_fail@PLT
.L4567:
	movq	-16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$4, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20611, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC678(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$4, %eax
	testl	%eax, %eax
	je	.L4568
	leaq	__PRETTY_FUNCTION__.14351(%rip), %rcx
	movl	$20611, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC679(%rip), %rdi
	call	__assert_fail@PLT
.L4568:
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$4, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20612, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC680(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$4, %eax
	testl	%eax, %eax
	je	.L4569
	leaq	__PRETTY_FUNCTION__.14351(%rip), %rcx
	movl	$20612, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC681(%rip), %rdi
	call	__assert_fail@PLT
.L4569:
	movq	-24(%rbp), %rax
	movzbl	32(%rax), %eax
	testb	%al, %al
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20615, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC682(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movzbl	32(%rax), %eax
	testb	%al, %al
	je	.L4570
	leaq	__PRETTY_FUNCTION__.14351(%rip), %rcx
	movl	$20615, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC683(%rip), %rdi
	call	__assert_fail@PLT
.L4570:
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	testb	%al, %al
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20616, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC684(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	testb	%al, %al
	je	.L4571
	leaq	__PRETTY_FUNCTION__.14351(%rip), %rcx
	movl	$20616, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC685(%rip), %rdi
	call	__assert_fail@PLT
.L4571:
	movq	-16(%rbp), %rax
	movzbl	32(%rax), %eax
	testb	%al, %al
	jne	.L4572
	movq	-16(%rbp), %rax
	movb	$1, 32(%rax)
.L4572:
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	testl	%eax, %eax
	jne	.L4573
	movq	-16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L4573
	movq	-16(%rbp), %rax
	movl	$1, 36(%rax)
.L4573:
	cmpl	$2, -44(%rbp)
	je	.L4574
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	orb	$4, %ah
	movl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	%edx, 1712(%rax)
.L4574:
	cmpl	$3, -48(%rbp)
	jne	.L4575
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	orb	$8, %ah
	movl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	%edx, 1712(%rax)
.L4575:
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$16, %eax
	testl	%eax, %eax
	jne	.L4576
	cmpl	$0, -48(%rbp)
	je	.L4577
	cmpl	$1, -48(%rbp)
	je	.L4577
	cmpl	$3, -48(%rbp)
	jne	.L4576
.L4577:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$261, %edx
	cmpq	%rdx, %rax
	jne	.L4576
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	orl	$16, %eax
	movl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	%edx, 1712(%rax)
.L4576:
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$32, %eax
	testl	%eax, %eax
	jne	.L4578
	cmpl	$0, -48(%rbp)
	je	.L4579
	cmpl	$1, -48(%rbp)
	je	.L4579
	cmpl	$3, -48(%rbp)
	jne	.L4578
.L4579:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	$260, %edx
	cmpq	%rdx, %rax
	jne	.L4578
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	orl	$32, %eax
	movl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	%edx, 1712(%rax)
.L4578:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	jne	.L4580
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	orl	$1, %eax
	movl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	%edx, 1712(%rax)
.L4580:
	movq	-16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$8, %eax
	testl	%eax, %eax
	je	.L4581
	movq	-32(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$3, %eax
	jne	.L4581
	movq	-80(%rbp), %rax
	movl	1728(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20657, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC686(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movl	1728(%rax), %eax
	testl	%eax, %eax
	je	.L4582
	leaq	__PRETTY_FUNCTION__.14351(%rip), %rcx
	movl	$20657, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC686(%rip), %rdi
	call	__assert_fail@PLT
.L4582:
	movl	-56(%rbp), %eax
	leal	1(%rax), %edx
	movq	-80(%rbp), %rax
	movl	%edx, 1728(%rax)
.L4581:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L4583
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L4583
	movq	-16(%rbp), %rax
	movzbl	32(%rax), %eax
	cmpb	$1, %al
	jne	.L4583
	movq	-32(%rbp), %rax
	movq	64(%rax), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_set_watch
.L4583:
	addl	$1, -56(%rbp)
.L4563:
	movl	-56(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L4584
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	has_refs
	movzbl	%al, %eax
	sall	$6, %eax
	movl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	orl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	%edx, 1712(%rax)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	has_pairs
	movzbl	%al, %eax
	sall	$7, %eax
	movl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	orl	%eax, %edx
	movq	-80(%rbp), %rax
	movl	%edx, 1712(%rax)
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L4586
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	register_monitors
.L4586:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE674:
	.size	process_signature, .-process_signature
	.type	match_table, @function
match_table:
.LFB675:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	-8(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_query_match
	testb	%al, %al
	je	.L4588
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_table
	movl	$1, %eax
	jmp	.L4589
.L4588:
	movl	$0, %eax
.L4589:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE675:
	.size	match_table, .-match_table
	.section	.rodata
.LC687:
	.string	"last_src_index >= 0"
.LC688:
	.string	"table == mt->table"
.LC689:
	.string	"mt->table == table"
	.align 8
.LC690:
	.string	"ecs_vector_count(*dst_array) == (new_index + 1)"
	.align 8
.LC691:
	.string	"ecs_vector_count(src_array) == last_src_index"
	.text
	.type	move_table, @function
move_table:
.LFB676:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movl	%r9d, %eax
	movb	%al, -72(%rbp)
	movl	$0, -36(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20703, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC687(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -24(%rbp)
	jns	.L4591
	leaq	__PRETTY_FUNCTION__.14370(%rip), %rcx
	movl	$20703, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC687(%rip), %rdi
	call	__assert_fail@PLT
.L4591:
	movq	-88(%rbp), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_last
	movq	%rax, -16(%rbp)
	cmpl	$0, -24(%rbp)
	je	.L4592
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	1624(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L4593
.L4601:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	cmpb	$0, -72(%rbp)
	je	.L4594
	cmpl	$0, -28(%rbp)
	js	.L4595
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -64(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20722, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC688(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -64(%rbp)
	je	.L4608
	leaq	__PRETTY_FUNCTION__.14370(%rip), %rcx
	movl	$20722, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC688(%rip), %rdi
	call	__assert_fail@PLT
.L4595:
	notl	-28(%rbp)
.L4594:
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.L4597
	cmpb	$0, -72(%rbp)
	je	.L4598
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	-68(%rbp), %edx
	notl	%edx
	movl	%edx, (%rax)
	jmp	.L4600
.L4598:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rax, %rdx
	movl	-68(%rbp), %eax
	movl	%eax, (%rdx)
	jmp	.L4600
.L4608:
	nop
.L4597:
	addl	$1, -32(%rbp)
.L4593:
	movl	-32(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L4601
.L4600:
	movl	-32(%rbp), %eax
	cmpl	-20(%rbp), %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20744, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC92(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-32(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jne	.L4592
	leaq	__PRETTY_FUNCTION__.14370(%rip), %rcx
	movl	$20744, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC92(%rip), %rdi
	call	__assert_fail@PLT
.L4592:
	cmpq	$0, -80(%rbp)
	je	.L4602
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -36(%rbp)
	movl	-68(%rbp), %edx
	movq	-88(%rbp), %rsi
	movq	-80(%rbp), %rax
	movl	%edx, %r8d
	movl	$16, %ecx
	movl	$96, %edx
	movq	%rax, %rdi
	call	_ecs_vector_move_index
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_last
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -64(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20758, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC689(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -64(%rbp)
	je	.L4603
	leaq	__PRETTY_FUNCTION__.14370(%rip), %rcx
	movl	$20758, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC689(%rip), %rdi
	call	__assert_fail@PLT
.L4603:
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	-36(%rbp), %edx
	addl	$1, %edx
	cmpl	%edx, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20759, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC690(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	-36(%rbp), %edx
	addl	$1, %edx
	cmpl	%edx, %eax
	je	.L4604
	leaq	__PRETTY_FUNCTION__.14370(%rip), %rcx
	movl	$20759, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC690(%rip), %rdi
	call	__assert_fail@PLT
.L4602:
	movl	-68(%rbp), %edx
	movq	-88(%rbp), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_remove
.L4604:
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -24(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20766, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC691(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -24(%rbp)
	je	.L4605
	leaq	__PRETTY_FUNCTION__.14370(%rip), %rcx
	movl	$20766, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC691(%rip), %rdi
	call	__assert_fail@PLT
.L4605:
	cmpb	$0, -72(%rbp)
	je	.L4606
	movl	-36(%rbp), %eax
	jmp	.L4607
.L4606:
	movl	-36(%rbp), %eax
	notl	%eax
.L4607:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE676:
	.size	move_table, .-move_table
	.section	.rodata
	.align 8
.LC692:
	.string	"(query->flags & EcsQueryIsSubquery) != 0"
.LC693:
	.string	"(query->flags & (256)) != 0"
	.text
	.type	activate_table, @function
activate_table:
.LFB677:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movl	%ecx, %eax
	movb	%al, -108(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movl	$0, -80(%rbp)
	movl	$0, -76(%rbp)
	cmpb	$0, -108(%rbp)
	je	.L4610
	movq	-96(%rbp), %rax
	movq	1616(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-96(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -76(%rbp)
	jmp	.L4611
.L4610:
	movq	-96(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-96(%rbp), %rax
	movq	1616(%rax), %rax
	movq	%rax, -56(%rbp)
.L4611:
	movq	-104(%rbp), %rax
	movq	(%rax), %rdx
	movq	-96(%rbp), %rax
	movq	1624(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L4612
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	$0, -72(%rbp)
	jmp	.L4613
.L4619:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-72(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	jns	.L4614
	movzbl	-108(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L4627
	notl	-68(%rbp)
	jmp	.L4617
.L4614:
	cmpb	$0, -108(%rbp)
	jne	.L4628
.L4617:
	movl	-68(%rbp), %edx
	movq	-48(%rbp), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -104(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20826, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC689(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -104(%rbp)
	je	.L4618
	leaq	__PRETTY_FUNCTION__.14396(%rip), %rcx
	movl	$20826, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC689(%rip), %rdi
	call	__assert_fail@PLT
.L4618:
	addl	$1, -80(%rbp)
	movzbl	-108(%rbp), %r8d
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-72(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	leaq	(%rax,%rdx), %rbx
	movq	-48(%rbp), %rdi
	leaq	-56(%rbp), %rcx
	movl	-68(%rbp), %edx
	movq	-104(%rbp), %rsi
	movq	-96(%rbp), %rax
	movl	%r8d, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	move_table
	movl	%eax, (%rbx)
	jmp	.L4616
.L4627:
	nop
	jmp	.L4616
.L4628:
	nop
.L4616:
	addl	$1, -72(%rbp)
.L4613:
	movl	-72(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jl	.L4619
	cmpl	$0, -80(%rbp)
	je	.L4620
	movq	-96(%rbp), %rax
	movq	1632(%rax), %rax
	testq	%rax, %rax
	je	.L4620
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -60(%rbp)
	cmpb	$0, -108(%rbp)
	je	.L4621
	cmpl	$0, -76(%rbp)
	jne	.L4620
	cmpl	$0, -60(%rbp)
	je	.L4620
	movq	-96(%rbp), %rax
	movq	1632(%rax), %rsi
	movq	-88(%rbp), %rax
	movl	$0, %ecx
	movl	$1, %edx
	movq	%rax, %rdi
	call	ecs_system_activate
	jmp	.L4620
.L4621:
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	jne	.L4620
	movq	-96(%rbp), %rax
	movq	1632(%rax), %rsi
	movq	-88(%rbp), %rax
	movl	$0, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	ecs_system_activate
.L4620:
	cmpb	$0, -108(%rbp)
	je	.L4622
	movq	-56(%rbp), %rdx
	movq	-96(%rbp), %rax
	movq	%rdx, 1608(%rax)
	jmp	.L4612
.L4622:
	movq	-56(%rbp), %rdx
	movq	-96(%rbp), %rax
	movq	%rdx, 1616(%rax)
.L4612:
	cmpl	$0, -80(%rbp)
	jne	.L4623
	movq	-96(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20861, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC692(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-96(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L4629
	leaq	__PRETTY_FUNCTION__.14396(%rip), %rcx
	movl	$20861, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC693(%rip), %rdi
	call	__assert_fail@PLT
.L4623:
	movq	-96(%rbp), %rax
	movb	$1, 1740(%rax)
	jmp	.L4609
.L4629:
	nop
.L4609:
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4626
	call	__stack_chk_fail@PLT
.L4626:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE677:
	.size	activate_table, .-activate_table
	.type	add_subquery, @function
add_subquery:
.LFB678:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-64(%rbp), %rax
	addq	$1704, %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-64(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-64(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -36(%rbp)
	movl	$0, -40(%rbp)
	jmp	.L4631
.L4632:
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-72(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	match_table
	movq	-8(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-72(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	activate_table
	addl	$1, -40(%rbp)
.L4631:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L4632
	movq	-64(%rbp), %rax
	movq	1616(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-64(%rbp), %rax
	movq	1616(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -36(%rbp)
	movl	$0, -40(%rbp)
	jmp	.L4633
.L4634:
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-72(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	match_table
	addl	$1, -40(%rbp)
.L4633:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L4634
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE678:
	.size	add_subquery, .-add_subquery
	.type	notify_subqueries, @function
notify_subqueries:
.LFB679:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-80(%rbp), %rax
	movq	1704(%rax), %rax
	testq	%rax, %rax
	je	.L4640
	movq	-80(%rbp), %rax
	movq	1704(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	movq	-80(%rbp), %rax
	movq	1704(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -52(%rbp)
	movq	-88(%rbp), %rcx
	movq	(%rcx), %rax
	movq	8(%rcx), %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	16(%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -56(%rbp)
	jmp	.L4637
.L4638:
	movl	-56(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-40(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_query_notify
	addl	$1, -56(%rbp)
.L4637:
	movl	-56(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L4638
.L4640:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4639
	call	__stack_chk_fail@PLT
.L4639:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE679:
	.size	notify_subqueries, .-notify_subqueries
	.type	free_matched_table, @function
free_matched_table:
.LFB680:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE680:
	.size	free_matched_table, .-free_matched_table
	.type	get_table_indices, @function
get_table_indices:
.LFB681:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	1624(%rax), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE681:
	.size	get_table_indices, .-get_table_indices
	.section	.rodata
.LC694:
	.string	"table_data->references != 0"
.LC695:
	.string	"ref->component == term->id"
	.text
	.type	resolve_cascade_subject, @function
resolve_cascade_subject:
.LFB682:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%rcx, -128(%rbp)
	movq	%r8, -136(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-112(%rbp), %rax
	movl	1728(%rax), %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movq	-112(%rbp), %rax
	movq	(%rax), %rcx
	movl	-88(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	-120(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -92(%rbp)
	jmp	.L4645
.L4652:
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movl	-92(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -80(%rbp)
	js	.L4646
	movq	-112(%rbp), %rax
	movq	1608(%rax), %rax
	movl	-80(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -64(%rbp)
	jmp	.L4647
.L4646:
	movl	-80(%rbp), %eax
	notl	%eax
	movl	%eax, %edx
	movq	-112(%rbp), %rax
	movq	1616(%rax), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -64(%rbp)
.L4647:
	movq	-64(%rbp), %rax
	movq	56(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20973, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC694(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rax
	movq	56(%rax), %rax
	testq	%rax, %rax
	jne	.L4648
	leaq	__PRETTY_FUNCTION__.14451(%rip), %rcx
	movl	$20973, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC694(%rip), %rdi
	call	__assert_fail@PLT
.L4648:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-88(%rbp), %eax
	cltq
	leaq	0(,%rax,4), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	notl	%eax
	movl	%eax, -76(%rbp)
	movq	-64(%rbp), %rax
	movq	56(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-56(%rbp), %rax
	movq	88(%rax), %r8
	movq	-56(%rbp), %rax
	movq	(%rax), %rdi
	movq	-136(%rbp), %rdx
	movq	-128(%rbp), %rsi
	movq	-104(%rbp), %rax
	subq	$8, %rsp
	leaq	-72(%rbp), %rcx
	pushq	%rcx
	pushq	$0
	pushq	$1
	movq	%r8, %r9
	movq	%rdi, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_match
	addq	$32, %rsp
	movq	-72(%rbp), %rax
	testq	%rax, %rax
	je	.L4649
	movl	-76(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, %rdx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$20991, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC695(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, %rdx
	je	.L4650
	leaq	__PRETTY_FUNCTION__.14451(%rip), %rcx
	movl	$20991, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC695(%rip), %rdi
	call	__assert_fail@PLT
.L4650:
	movq	-72(%rbp), %rcx
	movl	-76(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, (%rbx)
	movq	-64(%rbp), %rax
	movq	32(%rax), %rax
	movl	-88(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rax, %rdx
	movq	-72(%rbp), %rax
	movq	%rax, (%rdx)
	movq	-56(%rbp), %rax
	movq	(%rax), %rcx
	movq	-72(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_ref_w_id
	jmp	.L4651
.L4649:
	movl	-76(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	$0, (%rax)
	movq	-64(%rbp), %rax
	movq	32(%rax), %rax
	movl	-88(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	$0, (%rax)
.L4651:
	addl	$1, -92(%rbp)
.L4645:
	movl	-92(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jl	.L4652
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4653
	call	__stack_chk_fail@PLT
.L4653:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE682:
	.size	resolve_cascade_subject, .-resolve_cascade_subject
	.section	.rodata
	.align 8
.LC696:
	.string	"query->flags & EcsQueryIsSubquery"
.LC697:
	.string	"query->flags & (256)"
	.text
	.type	remove_table, @function
remove_table:
.LFB683:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, %eax
	movb	%al, -48(%rbp)
	movl	-44(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L4655
	movq	-24(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21017, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC696(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L4659
	leaq	__PRETTY_FUNCTION__.14468(%rip), %rcx
	movl	$21017, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC697(%rip), %rdi
	call	__assert_fail@PLT
.L4655:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -32(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21021, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC689(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	cmpq	%rax, -32(%rbp)
	je	.L4658
	leaq	__PRETTY_FUNCTION__.14468(%rip), %rcx
	movl	$21021, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC689(%rip), %rdi
	call	__assert_fail@PLT
.L4658:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	free_matched_table
	movzbl	-48(%rbp), %edi
	movq	-8(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-40(%rbp), %rcx
	movl	-44(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edi, %r9d
	movq	%rcx, %r8
	movl	$0, %ecx
	movq	%rax, %rdi
	call	move_table
	jmp	.L4654
.L4659:
	nop
.L4654:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE683:
	.size	remove_table, .-remove_table
	.type	unmatch_table, @function
unmatch_table:
.LFB684:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L4661
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_table_indices
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L4667
.L4661:
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L4663
.L4666:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jns	.L4664
	notl	-4(%rbp)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rdx
	movl	-4(%rbp), %ecx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$1, %r8d
	movq	%rax, %rdi
	call	remove_table
	jmp	.L4665
.L4664:
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rdx
	movl	-4(%rbp), %ecx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$0, %r8d
	movq	%rax, %rdi
	call	remove_table
.L4665:
	addl	$1, -12(%rbp)
.L4663:
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L4666
	movq	40+ecs_os_api(%rip), %rdx
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	1624(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_remove
	jmp	.L4660
.L4667:
	nop
.L4660:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE684:
	.size	unmatch_table, .-unmatch_table
	.type	rematch_table, @function
rematch_table:
.LFB685:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_table_indices
	movq	%rax, -56(%rbp)
	movq	-80(%rbp), %rdx
	movq	-88(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_query_match
	testb	%al, %al
	je	.L4669
	cmpq	$0, -56(%rbp)
	jne	.L4670
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_table
	jmp	.L4676
.L4670:
	movq	-80(%rbp), %rax
	movl	1728(%rax), %eax
	testl	%eax, %eax
	je	.L4672
	movq	-88(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-88(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	resolve_cascade_subject
	jmp	.L4676
.L4672:
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$2048, %eax
	testl	%eax, %eax
	je	.L4676
	movq	-56(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	unmatch_table
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L4673
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movl	$1, -48(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -40(%rbp)
	leaq	-48(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_notify
.L4673:
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_table
	jmp	.L4676
.L4669:
	cmpq	$0, -56(%rbp)
	je	.L4676
	movq	-56(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-80(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	unmatch_table
	movq	-80(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L4674
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movl	$1, -48(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -40(%rbp)
	leaq	-48(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_notify
.L4674:
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movl	$4, -48(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -40(%rbp)
	leaq	-48(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	notify_subqueries
.L4676:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4675
	call	__stack_chk_fail@PLT
.L4675:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE685:
	.size	rematch_table, .-rematch_table
	.type	satisfy_constraints, @function
satisfy_constraints:
.LFB686:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -44(%rbp)
	jmp	.L4678
.L4682:
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	160(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L4679
	movq	-16(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$1, %eax
	testl	%eax, %eax
	je	.L4679
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_type
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdx
	movq	-8(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	je	.L4680
	cmpl	$2, -36(%rbp)
	jne	.L4679
	movl	$0, %eax
	jmp	.L4681
.L4680:
	cmpl	$2, -36(%rbp)
	je	.L4679
	movl	$0, %eax
	jmp	.L4681
.L4679:
	addl	$1, -44(%rbp)
.L4678:
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L4682
	movl	$1, %eax
.L4681:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE686:
	.size	satisfy_constraints, .-satisfy_constraints
	.type	rematch_tables, @function
rematch_tables:
.LFB687:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	cmpq	$0, -88(%rbp)
	je	.L4684
	movq	-88(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-88(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -44(%rbp)
	movl	$0, -56(%rbp)
	jmp	.L4685
.L4686:
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	8(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	rematch_table
	addl	$1, -56(%rbp)
.L4685:
	movl	-56(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L4686
	movq	-88(%rbp), %rax
	movq	1616(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-88(%rbp), %rax
	movq	1616(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -44(%rbp)
	movl	$0, -56(%rbp)
	jmp	.L4687
.L4688:
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	rematch_table
	addl	$1, -56(%rbp)
.L4687:
	movl	-56(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L4688
	jmp	.L4689
.L4684:
	movq	-72(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_sparse_count
	movl	%eax, -48(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L4690
.L4691:
	movl	-52(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_get_dense
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	rematch_table
	addl	$1, -52(%rbp)
.L4690:
	movl	-52(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jl	.L4691
.L4689:
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	group_tables
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	order_grouped_tables
	movq	-80(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	satisfy_constraints
	movq	-80(%rbp), %rdx
	movb	%al, 1741(%rdx)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE687:
	.size	rematch_tables, .-rematch_tables
	.section	.rodata
.LC698:
	.string	"parent != NULL"
.LC699:
	.string	"parent != ((void *)0)"
.LC700:
	.string	"sub != NULL"
.LC701:
	.string	"sub != ((void *)0)"
.LC702:
	.string	"parent->subqueries != NULL"
	.align 8
.LC703:
	.string	"parent->subqueries != ((void *)0)"
	.text
	.type	remove_subquery, @function
remove_subquery:
.LFB688:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21184, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC698(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L4693
	leaq	__PRETTY_FUNCTION__.14530(%rip), %rcx
	movl	$21184, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC699(%rip), %rdi
	call	__assert_fail@PLT
.L4693:
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21185, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC700(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L4694
	leaq	__PRETTY_FUNCTION__.14530(%rip), %rcx
	movl	$21185, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC701(%rip), %rdi
	call	__assert_fail@PLT
.L4694:
	movq	-24(%rbp), %rax
	movq	1704(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21186, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC702(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	1704(%rax), %rax
	testq	%rax, %rax
	jne	.L4695
	leaq	__PRETTY_FUNCTION__.14530(%rip), %rcx
	movl	$21186, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC703(%rip), %rdi
	call	__assert_fail@PLT
.L4695:
	movq	-24(%rbp), %rax
	movq	1704(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	movq	1704(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L4696
.L4699:
	movl	-16(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	cmpq	%rax, -32(%rbp)
	je	.L4700
	addl	$1, -16(%rbp)
.L4696:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L4699
	jmp	.L4698
.L4700:
	nop
.L4698:
	movq	-24(%rbp), %rax
	movq	1704(%rax), %rax
	movl	-16(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_remove
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE688:
	.size	remove_subquery, .-remove_subquery
	.globl	flecs_query_notify
	.type	flecs_query_notify, @function
flecs_query_notify:
.LFB689:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movb	$1, -1(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$5, %eax
	ja	.L4702
	movl	%eax, %eax
	leaq	0(,%rax,4), %rdx
	leaq	.L4704(%rip), %rax
	movl	(%rdx,%rax), %eax
	cltq
	leaq	.L4704(%rip), %rdx
	addq	%rdx, %rax
	notrack jmp	*%rax
	.section	.rodata
	.align 4
	.align 4
.L4704:
	.long	.L4709-.L4704
	.long	.L4708-.L4704
	.long	.L4707-.L4704
	.long	.L4706-.L4704
	.long	.L4705-.L4704
	.long	.L4703-.L4704
	.text
.L4709:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	match_table
	testb	%al, %al
	je	.L4710
	movq	-32(%rbp), %rax
	movq	1704(%rax), %rax
	testq	%rax, %rax
	je	.L4710
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	notify_subqueries
.L4710:
	movb	$0, -1(%rbp)
	jmp	.L4702
.L4705:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-32(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	unmatch_table
	jmp	.L4702
.L4706:
	movq	-40(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	rematch_tables
	jmp	.L4702
.L4708:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	activate_table
	jmp	.L4702
.L4707:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	activate_table
	jmp	.L4702
.L4703:
	movq	-32(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21236, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC696(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-32(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L4711
	leaq	__PRETTY_FUNCTION__.14550(%rip), %rcx
	movl	$21236, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC697(%rip), %rdi
	call	__assert_fail@PLT
.L4711:
	movq	-32(%rbp), %rax
	movl	1712(%rax), %eax
	orb	$2, %ah
	movl	%eax, %edx
	movq	-32(%rbp), %rax
	movl	%edx, 1712(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 1696(%rax)
	nop
.L4702:
	cmpb	$0, -1(%rbp)
	je	.L4713
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	notify_subqueries
.L4713:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE689:
	.size	flecs_query_notify, .-flecs_query_notify
	.section	.rodata
	.align 8
.LC704:
	.string	"!(query->flags & EcsQueryIsOrphaned)"
.LC705:
	.string	"!(query->flags & (512))"
	.align 8
.LC706:
	.string	"query->flags & EcsQueryNeedsTables"
.LC707:
	.string	"query->flags & (1)"
	.text
	.globl	ecs_query_order_by
	.type	ecs_query_order_by, @function
ecs_query_order_by:
.LFB690:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21253, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L4715
	leaq	__PRETTY_FUNCTION__.14557(%rip), %rcx
	movl	$21253, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L4715:
	movq	-16(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21254, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC704(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	je	.L4716
	leaq	__PRETTY_FUNCTION__.14557(%rip), %rcx
	movl	$21254, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC705(%rip), %rdi
	call	__assert_fail@PLT
.L4716:
	movq	-16(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21255, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC706(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L4717
	leaq	__PRETTY_FUNCTION__.14557(%rip), %rcx
	movl	$21255, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC707(%rip), %rdi
	call	__assert_fail@PLT
.L4717:
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, 1640(%rax)
	movq	-16(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, 1648(%rax)
	movq	-16(%rbp), %rax
	movq	1656(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-16(%rbp), %rax
	movq	$0, 1656(%rax)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	sort_tables
	movq	-16(%rbp), %rax
	movq	1656(%rax), %rax
	testq	%rax, %rax
	jne	.L4719
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	build_sorted_tables
.L4719:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE690:
	.size	ecs_query_order_by, .-ecs_query_order_by
	.globl	ecs_query_group_by
	.type	ecs_query_group_by, @function
ecs_query_group_by:
.LFB691:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21276, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L4721
	leaq	__PRETTY_FUNCTION__.14564(%rip), %rcx
	movl	$21276, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L4721:
	movq	-16(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21277, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC704(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	je	.L4722
	leaq	__PRETTY_FUNCTION__.14564(%rip), %rcx
	movl	$21277, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC705(%rip), %rdi
	call	__assert_fail@PLT
.L4722:
	movq	-16(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21278, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC706(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L4723
	leaq	__PRETTY_FUNCTION__.14564(%rip), %rcx
	movl	$21278, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC707(%rip), %rdi
	call	__assert_fail@PLT
.L4723:
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, 1664(%rax)
	movq	-16(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, 1672(%rax)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	group_tables
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	order_grouped_tables
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	build_sorted_tables
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE691:
	.size	ecs_query_group_by, .-ecs_query_group_by
	.section	.rodata
	.align 8
.LC708:
	.string	"query #[green]%s#[reset] created with expression #[red]%s"
.LC709:
	.string	"!result->cascade_by"
	.text
	.globl	ecs_query_init
	.type	ecs_query_init, @function
ecs_query_init:
.LFB692:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21297, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L4725
	leaq	__PRETTY_FUNCTION__.14569(%rip), %rcx
	movl	$21297, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L4725:
	movq	-72(%rbp), %rax
	movzbl	682(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21298, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC539(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movzbl	682(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L4726
	leaq	__PRETTY_FUNCTION__.14569(%rip), %rcx
	movl	$21298, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC539(%rip), %rdi
	call	__assert_fail@PLT
.L4726:
	movq	-72(%rbp), %rax
	movq	224(%rax), %rax
	movl	$1744, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_add
	movq	%rax, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_last_id
	movq	-40(%rbp), %rdx
	movq	%rax, 1720(%rdx)
	movq	-80(%rbp), %rdx
	movq	-40(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_filter_init
	testl	%eax, %eax
	je	.L4727
	movq	-40(%rbp), %rax
	movq	1720(%rax), %rdx
	movq	-72(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_remove
	movl	$0, %eax
	jmp	.L4728
.L4727:
	movq	-40(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rdx, 1600(%rax)
	movl	$0, %edx
	movl	$8, %esi
	movl	$16, %edi
	call	_ecs_map_new
	movq	-40(%rbp), %rdx
	movq	%rax, 1624(%rdx)
	movl	$0, %edx
	movl	$16, %esi
	movl	$96, %edi
	call	_ecs_vector_new
	movq	-40(%rbp), %rdx
	movq	%rax, 1608(%rdx)
	movl	$0, %edx
	movl	$16, %esi
	movl	$96, %edi
	call	_ecs_vector_new
	movq	-40(%rbp), %rdx
	movq	%rax, 1616(%rdx)
	movq	-80(%rbp), %rax
	movq	3160(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, 1632(%rax)
	movq	-40(%rbp), %rax
	movl	$-1, 1736(%rax)
	movq	-80(%rbp), %rax
	movq	3152(%rax), %rax
	testq	%rax, %rax
	je	.L4729
	movq	-40(%rbp), %rax
	movl	1712(%rax), %eax
	orb	$1, %ah
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, 1712(%rax)
.L4729:
	movq	-80(%rbp), %rax
	movq	3160(%rax), %rax
	testq	%rax, %rax
	je	.L4730
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L4731
.L4733:
	movl	-52(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	64(%rax), %rdx
	movq	-80(%rbp), %rax
	movq	3160(%rax), %rax
	cmpq	%rax, %rdx
	jne	.L4732
	movq	-24(%rbp), %rax
	movq	(%rax), %rdx
	movq	-80(%rbp), %rax
	movq	3160(%rax), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L4732:
	addl	$1, -52(%rbp)
.L4731:
	movl	-52(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jl	.L4733
.L4730:
	movq	-40(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	process_signature
	movq	-40(%rbp), %rax
	movq	1568(%rax), %rbx
	movq	-40(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	query_name
	movq	%rbx, %r9
	movq	%rax, %r8
	leaq	.LC708(%rip), %rcx
	movl	$21335, %edx
	leaq	.LC74(%rip), %rsi
	movl	$2, %edi
	movl	$0, %eax
	call	_ecs_trace
	call	ecs_log_push
	movq	-80(%rbp), %rax
	movq	3152(%rax), %rax
	testq	%rax, %rax
	jne	.L4734
	movq	-40(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	je	.L4735
	movq	-80(%rbp), %rax
	movq	3160(%rax), %rax
	testq	%rax, %rax
	je	.L4736
	movl	$317, %edx
	movq	-80(%rbp), %rax
	movq	3160(%rax), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	je	.L4737
	movq	-40(%rbp), %rax
	movl	1712(%rax), %eax
	orl	$2, %eax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, 1712(%rax)
.L4737:
	movl	$288, %edx
	movq	-80(%rbp), %rax
	movq	3160(%rax), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	je	.L4738
	movq	-40(%rbp), %rax
	movl	1712(%rax), %eax
	orl	$4, %eax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, 1712(%rax)
.L4738:
	movl	$289, %edx
	movq	-80(%rbp), %rax
	movq	3160(%rax), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	je	.L4736
	movq	-40(%rbp), %rax
	movl	1712(%rax), %eax
	orl	$8, %eax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, 1712(%rax)
.L4736:
	movq	-40(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	match_tables
	jmp	.L4739
.L4735:
	movq	-40(%rbp), %rcx
	movq	-72(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_table
	jmp	.L4739
.L4734:
	movq	-80(%rbp), %rax
	movq	3152(%rax), %rcx
	movq	-40(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	add_subquery
	movq	-80(%rbp), %rax
	movq	3152(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, 1696(%rax)
.L4739:
	movq	-40(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	satisfy_constraints
	movq	-40(%rbp), %rdx
	movb	%al, 1741(%rdx)
	movq	-40(%rbp), %rax
	movl	1728(%rax), %eax
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.L4740
	movq	-40(%rbp), %rax
	leaq	group_by_cascade(%rip), %rdx
	movq	%rdx, 1672(%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rcx
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	subq	$192, %rax
	addq	%rcx, %rax
	movq	(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, 1664(%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rcx
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	subq	$192, %rax
	leaq	(%rcx,%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, 1680(%rax)
.L4740:
	movq	-80(%rbp), %rax
	movq	3112(%rax), %rax
	testq	%rax, %rax
	je	.L4741
	movq	-80(%rbp), %rax
	movq	3112(%rax), %rcx
	movq	-80(%rbp), %rax
	movq	3104(%rax), %rdx
	movq	-40(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_order_by
.L4741:
	movq	-80(%rbp), %rax
	movq	3128(%rax), %rax
	testq	%rax, %rax
	je	.L4742
	movq	-40(%rbp), %rax
	movl	1728(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21384, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC709(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	1728(%rax), %eax
	testl	%eax, %eax
	je	.L4743
	leaq	__PRETTY_FUNCTION__.14569(%rip), %rcx
	movl	$21384, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC709(%rip), %rdi
	call	__assert_fail@PLT
.L4743:
	movq	-80(%rbp), %rax
	movq	3128(%rax), %rcx
	movq	-80(%rbp), %rax
	movq	3120(%rax), %rdx
	movq	-40(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_group_by
	movq	-80(%rbp), %rax
	movq	3136(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, 1680(%rax)
	movq	-80(%rbp), %rax
	movq	3144(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, 1688(%rax)
.L4742:
	call	ecs_log_pop
	movq	-40(%rbp), %rax
.L4728:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE692:
	.size	ecs_query_init, .-ecs_query_init
	.globl	ecs_query_fini
	.type	ecs_query_fini, @function
ecs_query_fini:
.LFB693:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$160, %rsp
	movq	%rdi, -152(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-152(%rbp), %rax
	movq	1600(%rax), %rax
	movq	%rax, -128(%rbp)
	cmpq	$0, -128(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21399, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -128(%rbp)
	jne	.L4745
	leaq	__PRETTY_FUNCTION__.14583(%rip), %rcx
	movl	$21399, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L4745:
	cmpq	$0, -152(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21400, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -152(%rbp)
	jne	.L4746
	leaq	__PRETTY_FUNCTION__.14583(%rip), %rcx
	movl	$21400, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L4746:
	movq	-152(%rbp), %rax
	movq	1688(%rax), %rax
	testq	%rax, %rax
	je	.L4747
	movq	-152(%rbp), %rax
	movq	1680(%rax), %rax
	testq	%rax, %rax
	je	.L4747
	movq	-152(%rbp), %rax
	movq	1688(%rax), %rdx
	movq	-152(%rbp), %rax
	movq	1680(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L4747:
	movq	-152(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	je	.L4748
	movq	-152(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	jne	.L4748
	movq	-152(%rbp), %rax
	movq	1696(%rax), %rax
	movq	-152(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	remove_subquery
.L4748:
	movq	$0, -80(%rbp)
	movq	$0, -72(%rbp)
	movq	$0, -64(%rbp)
	movl	$5, -80(%rbp)
	leaq	-80(%rbp), %rdx
	movq	-152(%rbp), %rcx
	movq	-128(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	notify_subqueries
	movq	-152(%rbp), %rax
	movq	1616(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -136(%rbp)
	movq	-152(%rbp), %rax
	movq	1616(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -120(%rbp)
	movl	$0, -144(%rbp)
	jmp	.L4749
.L4751:
	movl	-144(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-120(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -88(%rbp)
	movq	-152(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L4750
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movl	$1, -48(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-88(%rbp), %rax
	movq	8(%rax), %rcx
	leaq	-48(%rbp), %rdx
	movq	-128(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_notify
.L4750:
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	free_matched_table
	addl	$1, -144(%rbp)
.L4749:
	movl	-144(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jl	.L4751
	movq	-152(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -132(%rbp)
	movq	-152(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -112(%rbp)
	movl	$0, -140(%rbp)
	jmp	.L4752
.L4754:
	movl	-140(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -96(%rbp)
	movq	-152(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L4753
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movl	$1, -48(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-96(%rbp), %rax
	movq	8(%rax), %rcx
	leaq	-48(%rbp), %rdx
	movq	-128(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_notify
.L4753:
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	free_matched_table
	addl	$1, -140(%rbp)
.L4752:
	movl	-140(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jl	.L4754
	movq	-152(%rbp), %rax
	movq	1624(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L4755
.L4756:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L4755:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -104(%rbp)
	cmpq	$0, -104(%rbp)
	jne	.L4756
	movq	-152(%rbp), %rax
	movq	1624(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-152(%rbp), %rax
	movq	1704(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-152(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-152(%rbp), %rax
	movq	1616(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-152(%rbp), %rax
	movq	1656(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-152(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_filter_fini
	movq	-152(%rbp), %rax
	movq	1720(%rax), %rdx
	movq	-128(%rbp), %rax
	movq	224(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_remove
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4757
	call	__stack_chk_fail@PLT
.L4757:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE693:
	.size	ecs_query_fini, .-ecs_query_fini
	.globl	ecs_query_get_filter
	.type	ecs_query_get_filter, @function
ecs_query_get_filter:
.LFB694:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE694:
	.size	ecs_query_get_filter, .-ecs_query_get_filter
	.globl	ecs_query_iter_page
	.type	ecs_query_iter_page, @function
ecs_query_iter_page:
.LFB695:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$2392, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -2376(%rbp)
	movq	%rsi, -2384(%rbp)
	movl	%edx, -2388(%rbp)
	movl	%ecx, -2392(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -2384(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21467, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2384(%rbp)
	jne	.L4761
	leaq	__PRETTY_FUNCTION__.14614(%rip), %rcx
	movl	$21467, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L4761:
	movq	-2384(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21468, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC704(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-2384(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	je	.L4762
	leaq	__PRETTY_FUNCTION__.14614(%rip), %rcx
	movl	$21468, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC705(%rip), %rdi
	call	__assert_fail@PLT
.L4762:
	movq	-2384(%rbp), %rax
	movq	1600(%rax), %rax
	movq	%rax, -2360(%rbp)
	movq	-2384(%rbp), %rax
	movzbl	1740(%rax), %eax
	testb	%al, %al
	je	.L4763
	movq	-2384(%rbp), %rdx
	movq	-2360(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	order_grouped_tables
.L4763:
	movq	-2384(%rbp), %rdx
	movq	-2360(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	sort_tables
	movq	-2360(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L4764
	movq	-2384(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$64, %eax
	testl	%eax, %eax
	je	.L4764
	movq	-2360(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_eval_component_monitors
.L4764:
	movq	-2384(%rbp), %rax
	movq	%rax, %rdi
	call	tables_reset_dirty
	movq	-2384(%rbp), %rax
	movq	1656(%rax), %rax
	testq	%rax, %rax
	je	.L4765
	movq	-2384(%rbp), %rax
	movq	1656(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -2364(%rbp)
	jmp	.L4766
.L4765:
	movq	-2384(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -2364(%rbp)
.L4766:
	movq	$0, -2352(%rbp)
	movq	$0, -2344(%rbp)
	movq	$0, -2336(%rbp)
	movl	$0, -2328(%rbp)
	movl	-2388(%rbp), %eax
	movl	%eax, -2352(%rbp)
	movl	-2392(%rbp), %eax
	movl	%eax, -2348(%rbp)
	movl	-2392(%rbp), %eax
	movl	%eax, -2344(%rbp)
	movq	-2384(%rbp), %rax
	movq	1616(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, %r8d
	movq	-2384(%rbp), %rax
	movl	12(%rax), %r9d
	movq	-2376(%rbp), %rax
	movq	%rax, %rsi
	movl	$0, %eax
	movl	$286, %edx
	movq	%rsi, %rdi
	movq	%rdx, %rcx
	rep stosq
	movq	-2376(%rbp), %rax
	movq	-2360(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-2376(%rbp), %rax
	movq	-2384(%rbp), %rdx
	movq	%rdx, 120(%rax)
	movq	-2376(%rbp), %rax
	movl	-2364(%rbp), %edx
	movl	%edx, 128(%rax)
	movq	-2376(%rbp), %rax
	movl	%r8d, 132(%rax)
	movq	-2376(%rbp), %rax
	movl	%r9d, 136(%rax)
	movq	-2376(%rbp), %rax
	movq	-2352(%rbp), %rcx
	movq	-2344(%rbp), %rbx
	movq	%rcx, 232(%rax)
	movq	%rbx, 240(%rax)
	movq	-2336(%rbp), %rdx
	movq	%rdx, 248(%rax)
	movl	-2328(%rbp), %edx
	movl	%edx, 256(%rax)
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4768
	call	__stack_chk_fail@PLT
.L4768:
	movq	-2376(%rbp), %rax
	addq	$2392, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE695:
	.size	ecs_query_iter_page, .-ecs_query_iter_page
	.globl	ecs_query_iter
	.type	ecs_query_iter, @function
ecs_query_iter:
.LFB696:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rsi
	movl	$0, %ecx
	movl	$0, %edx
	movq	%rax, %rdi
	call	ecs_query_iter_page
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4771
	call	__stack_chk_fail@PLT
.L4771:
	movq	-24(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE696:
	.size	ecs_query_iter, .-ecs_query_iter
	.type	populate_ptrs, @function
populate_ptrs:
.LFB697:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$344, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -344(%rbp)
	movq	%rsi, -352(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-352(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -312(%rbp)
	movq	$0, -328(%rbp)
	movq	$0, -320(%rbp)
	cmpq	$0, -312(%rbp)
	je	.L4773
	movq	-312(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -328(%rbp)
.L4773:
	cmpq	$0, -328(%rbp)
	je	.L4774
	movq	-328(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -320(%rbp)
.L4774:
	movl	$0, -336(%rbp)
	jmp	.L4775
.L4781:
	movq	-352(%rbp), %rax
	movq	80(%rax), %rax
	movl	-336(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -332(%rbp)
	cmpl	$0, -332(%rbp)
	jne	.L4776
	movq	-352(%rbp), %rax
	movq	104(%rax), %rax
	movl	-336(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	$0, (%rax)
	jmp	.L4777
.L4776:
	cmpl	$0, -332(%rbp)
	jle	.L4778
	subl	$1, -332(%rbp)
	cmpq	$0, -320(%rbp)
	je	.L4783
	movq	-352(%rbp), %rax
	movq	96(%rax), %rax
	movl	-336(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.L4784
	movl	-332(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-320(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -296(%rbp)
	movq	-352(%rbp), %rax
	movl	200(%rax), %ecx
	movq	-296(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-296(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %esi
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	-352(%rbp), %rdi
	movq	104(%rdi), %rdi
	movl	-336(%rbp), %r8d
	movslq	%r8d, %r8
	salq	$3, %r8
	leaq	(%rdi,%r8), %rbx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, (%rbx)
	jmp	.L4777
.L4778:
	movq	-352(%rbp), %rax
	movq	112(%rax), %rcx
	movl	-332(%rbp), %eax
	negl	%eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$4, %rax
	subq	$48, %rax
	addq	%rcx, %rax
	movq	%rax, -304(%rbp)
	movq	-304(%rbp), %rax
	movq	8(%rax), %rsi
	leaq	-288(%rbp), %rdx
	movq	-344(%rbp), %rax
	movl	$255, %ecx
	movq	%rax, %rdi
	call	ecs_id_str
	movq	-304(%rbp), %rax
	movq	8(%rax), %rcx
	movq	-304(%rbp), %rax
	movq	(%rax), %rdx
	movq	-352(%rbp), %rax
	movq	104(%rax), %rax
	movl	-336(%rbp), %esi
	movslq	%esi, %rsi
	salq	$3, %rsi
	leaq	(%rax,%rsi), %rbx
	movq	-304(%rbp), %rsi
	movq	-344(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_ref_w_id
	movq	%rax, (%rbx)
	jmp	.L4777
.L4783:
	nop
	jmp	.L4777
.L4784:
	nop
.L4777:
	addl	$1, -336(%rbp)
.L4775:
	movq	-352(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	%eax, -336(%rbp)
	jl	.L4781
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4782
	call	__stack_chk_fail@PLT
.L4782:
	addq	$344, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE697:
	.size	populate_ptrs, .-populate_ptrs
	.section	.rodata
.LC710:
	.string	"table_data != NULL"
.LC711:
	.string	"table_data != ((void *)0)"
	.text
	.globl	flecs_query_set_iter
	.type	flecs_query_set_iter, @function
flecs_query_set_iter:
.LFB698:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -68(%rbp)
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21573, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L4786
	leaq	__PRETTY_FUNCTION__.14646(%rip), %rcx
	movl	$21573, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L4786:
	movq	-48(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21574, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC704(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-48(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	je	.L4787
	leaq	__PRETTY_FUNCTION__.14646(%rip), %rcx
	movl	$21574, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC705(%rip), %rdi
	call	__assert_fail@PLT
.L4787:
	movq	-48(%rbp), %rax
	movq	1608(%rax), %rax
	movl	-60(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21578, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC710(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L4788
	leaq	__PRETTY_FUNCTION__.14646(%rip), %rcx
	movl	$21578, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC711(%rip), %rdi
	call	__assert_fail@PLT
.L4788:
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21582, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L4789
	leaq	__PRETTY_FUNCTION__.14646(%rip), %rcx
	movl	$21582, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L4789:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	-64(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rax, %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, 152(%rax)
	movq	-56(%rbp), %rax
	movq	$0, (%rax)
	movq	-56(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, 120(%rax)
	movq	-48(%rbp), %rax
	movl	12(%rax), %edx
	movq	-56(%rbp), %rax
	movl	%edx, 136(%rax)
	movq	-56(%rbp), %rax
	movl	$1, 128(%rax)
	movq	-56(%rbp), %rax
	movl	$0, 132(%rax)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, 144(%rax)
	movq	-56(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, 48(%rax)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, 64(%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, 80(%rax)
	movq	-32(%rbp), %rax
	movq	40(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, 72(%rax)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, 88(%rax)
	movq	-32(%rbp), %rax
	movq	48(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, 96(%rax)
	movq	-32(%rbp), %rax
	movq	56(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, 112(%rax)
	movq	-56(%rbp), %rax
	movl	-64(%rbp), %edx
	movl	%edx, 200(%rax)
	movq	-56(%rbp), %rax
	movl	-68(%rbp), %edx
	movl	%edx, 204(%rax)
	movq	-56(%rbp), %rax
	movl	-68(%rbp), %edx
	movl	%edx, 208(%rax)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_iter_init
	movq	-56(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	populate_ptrs
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE698:
	.size	flecs_query_set_iter, .-flecs_query_set_iter
	.type	ecs_page_iter_next, @function
ecs_page_iter_next:
.LFB699:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -12(%rbp)
	jne	.L4791
	cmpl	$0, -8(%rbp)
	jne	.L4791
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	jmp	.L4792
.L4791:
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -4(%rbp)
	cmpl	$0, -12(%rbp)
	je	.L4793
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jle	.L4794
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	subl	-16(%rbp), %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, (%rax)
	movl	$1, %eax
	jmp	.L4792
.L4794:
	movq	-32(%rbp), %rax
	movl	(%rax), %edx
	movl	-12(%rbp), %eax
	addl	%eax, %edx
	movq	-32(%rbp), %rax
	movl	%edx, (%rax)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	subl	-12(%rbp), %eax
	movl	%eax, %edx
	movq	-32(%rbp), %rax
	movl	%edx, 4(%rax)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
.L4793:
	cmpl	$0, -4(%rbp)
	je	.L4795
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jle	.L4796
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	subl	-16(%rbp), %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 8(%rax)
	jmp	.L4797
.L4796:
	movq	-32(%rbp), %rax
	movl	-4(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	jmp	.L4797
.L4795:
	cmpl	$0, -8(%rbp)
	je	.L4797
	movl	$-1, %eax
	jmp	.L4792
.L4797:
	cmpl	$0, -16(%rbp)
	sete	%al
	movzbl	%al, %eax
.L4792:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE699:
	.size	ecs_page_iter_next, .-ecs_page_iter_next
	.section	.rodata
.LC712:
	.string	"table_column_index >= 1"
	.text
	.type	find_smallest_column, @function
find_smallest_column:
.LFB700:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-88(%rbp), %rax
	movl	$16, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -52(%rbp)
	movl	$2147483647, -60(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -64(%rbp)
	jmp	.L4799
.L4803:
	movl	-64(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L4800
	movq	-80(%rbp), %rax
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	cltq
	salq	$2, %rax
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	-72(%rbp), %rax
	movl	120(%rax), %eax
	subl	%eax, -48(%rbp)
	cmpl	$0, -48(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21676, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC712(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -48(%rbp)
	jg	.L4801
	leaq	__PRETTY_FUNCTION__.14672(%rip), %rcx
	movl	$21676, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC712(%rip), %rdi
	call	__assert_fail@PLT
.L4801:
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movl	-48(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	subq	$16, %rdx
	addq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
.L4800:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_switch_case_count
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.L4802
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
.L4802:
	addl	$1, -64(%rbp)
.L4799:
	movl	-64(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L4803
	movl	-56(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE700:
	.size	find_smallest_column, .-find_smallest_column
	.type	sparse_column_next, @function
sparse_column_next:
.LFB701:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	%r8, -104(%rbp)
	movb	$0, -57(%rbp)
	movq	-96(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -56(%rbp)
	jne	.L4806
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	find_smallest_column
	movq	-96(%rbp), %rdx
	movl	%eax, 16(%rdx)
	movq	-96(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -56(%rbp)
	movb	$1, -57(%rbp)
.L4806:
	subl	$1, -56(%rbp)
	movq	-88(%rbp), %rax
	movl	$16, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpb	$0, -57(%rbp)
	je	.L4807
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_switch_first
	movl	%eax, -52(%rbp)
	jmp	.L4808
.L4807:
	movq	-96(%rbp), %rax
	movl	20(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_next
	movl	%eax, -52(%rbp)
.L4808:
	cmpl	$-1, -52(%rbp)
	je	.L4817
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -44(%rbp)
.L4815:
	movl	$0, -48(%rbp)
	jmp	.L4811
.L4814:
	movl	-48(%rbp), %eax
	cmpl	-56(%rbp), %eax
	je	.L4818
	movl	-48(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movl	-52(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_get
	movq	-32(%rbp), %rdx
	movq	8(%rdx), %rdx
	cmpq	%rdx, %rax
	je	.L4813
	movl	-52(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_switch_next
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	je	.L4819
	jmp	.L4813
.L4818:
	nop
.L4813:
	addl	$1, -48(%rbp)
.L4811:
	movl	-48(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L4814
	movl	-48(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jne	.L4815
	movq	-96(%rbp), %rax
	movl	-52(%rbp), %edx
	movl	%edx, 20(%rax)
	movq	-96(%rbp), %rax
	movl	20(%rax), %edx
	movq	-104(%rbp), %rax
	movl	%edx, (%rax)
	movq	-104(%rbp), %rax
	movl	$1, 4(%rax)
	movl	$0, %eax
	jmp	.L4816
.L4817:
	nop
	jmp	.L4810
.L4819:
	nop
.L4810:
	movq	-96(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-96(%rbp), %rax
	movl	$0, 20(%rax)
	movl	$-1, %eax
.L4816:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE701:
	.size	sparse_column_next, .-sparse_column_next
	.section	.rodata
.LC713:
	.string	"(index - bs_offset >= 0)"
.LC714:
	.string	"bs_start < 64"
.LC715:
	.string	"bs_end < 64"
	.text
	.type	bitset_column_next, @function
bitset_column_next:
.LFB702:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$160, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movq	%rcx, -160(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -84(%rbp)
	movq	-144(%rbp), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movq	-136(%rbp), %rax
	movl	128(%rax), %eax
	movl	%eax, -80(%rbp)
	movq	-152(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -112(%rbp)
	movl	$0, -120(%rbp)
	jmp	.L4821
.L4844:
	movl	-120(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -32(%rbp)
	movl	-120(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	jne	.L4822
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	subl	-80(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21837, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC713(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-76(%rbp), %eax
	subl	-80(%rbp), %eax
	testl	%eax, %eax
	jns	.L4823
	leaq	__PRETTY_FUNCTION__.14721(%rip), %rcx
	movl	$21837, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC713(%rip), %rdi
	call	__assert_fail@PLT
.L4823:
	movq	-24(%rbp), %rax
	movq	32(%rax), %rdx
	movl	-76(%rbp), %eax
	subl	-80(%rbp), %eax
	cltq
	salq	$4, %rax
	addq	%rdx, %rax
	movq	%rax, -64(%rbp)
	movl	-120(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	addq	%rax, %rdx
	movq	-64(%rbp), %rax
	movq	%rax, (%rdx)
.L4822:
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	-116(%rbp), %eax
	sarl	$6, %eax
	movl	%eax, -108(%rbp)
	movl	-72(%rbp), %eax
	subl	$1, %eax
	sarl	$6, %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	movl	-108(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.L4846
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movl	-116(%rbp), %eax
	andl	$63, %eax
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-104(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	leaq	bitmask_remain.14710(%rip), %rax
	movq	(%rdx,%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.L4826
.L4828:
	addl	$1, -108(%rbp)
	movl	-108(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.L4847
	movl	$0, -104(%rbp)
	movq	$-1, -48(%rbp)
	movl	-108(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
.L4826:
	movq	-56(%rbp), %rax
	andq	-48(%rbp), %rax
	testq	%rax, %rax
	je	.L4828
	jmp	.L4829
.L4830:
	addl	$1, -104(%rbp)
	cmpl	$63, -104(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21874, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC714(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$63, -104(%rbp)
	jle	.L4829
	leaq	__PRETTY_FUNCTION__.14721(%rip), %rcx
	movl	$21874, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC714(%rip), %rdi
	call	__assert_fail@PLT
.L4829:
	movl	-104(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	leaq	bitmask.14709(%rip), %rax
	movq	(%rdx,%rax), %rax
	andq	-56(%rbp), %rax
	testq	%rax, %rax
	je	.L4830
	movl	-104(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-100(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	leaq	bitmask_remain.14710(%rip), %rax
	movq	(%rdx,%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.L4831
.L4834:
	movl	$0, -100(%rbp)
	addl	$1, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	-68(%rbp), %eax
	je	.L4848
	movl	-96(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	$-1, -48(%rbp)
.L4831:
	movq	-56(%rbp), %rax
	andq	-48(%rbp), %rax
	cmpq	%rax, -48(%rbp)
	je	.L4834
	jmp	.L4833
.L4848:
	nop
.L4833:
	movl	-96(%rbp), %eax
	cmpl	-68(%rbp), %eax
	je	.L4835
	jmp	.L4836
.L4837:
	addl	$1, -100(%rbp)
.L4836:
	movl	-100(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	leaq	bitmask.14709(%rip), %rax
	movq	(%rdx,%rax), %rax
	andq	-56(%rbp), %rax
	testq	%rax, %rax
	jne	.L4837
.L4835:
	cmpl	$63, -100(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21901, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC715(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$63, -100(%rbp)
	jle	.L4838
	leaq	__PRETTY_FUNCTION__.14721(%rip), %rcx
	movl	$21901, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC715(%rip), %rdi
	call	__assert_fail@PLT
.L4838:
	movl	-108(%rbp), %eax
	sall	$6, %eax
	movl	%eax, %edx
	movl	-104(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -116(%rbp)
	movl	-96(%rbp), %eax
	sall	$6, %eax
	movl	%eax, %edx
	movl	-100(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -92(%rbp)
	movl	-116(%rbp), %eax
	cmpl	-92(%rbp), %eax
	je	.L4849
	cmpl	$0, -120(%rbp)
	je	.L4840
	movl	-116(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.L4841
	movl	$-1, -120(%rbp)
	jmp	.L4842
.L4841:
	movl	-92(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jle	.L4840
	movl	-112(%rbp), %eax
	movl	%eax, -92(%rbp)
.L4840:
	movl	-92(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	-112(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jle	.L4843
	movl	-72(%rbp), %eax
	movl	%eax, -88(%rbp)
.L4843:
	movq	-160(%rbp), %rax
	movl	-116(%rbp), %edx
	movl	%edx, (%rax)
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edx
	movl	%edx, 4(%rax)
	movq	-152(%rbp), %rax
	movl	-116(%rbp), %edx
	movl	%edx, 24(%rax)
.L4842:
	addl	$1, -120(%rbp)
.L4821:
	movl	-120(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jl	.L4844
	movq	-152(%rbp), %rax
	movl	-112(%rbp), %edx
	movl	%edx, 24(%rax)
	movl	$0, %eax
	jmp	.L4845
.L4846:
	nop
	jmp	.L4825
.L4847:
	nop
	jmp	.L4825
.L4849:
	nop
.L4825:
	movl	$-1, %eax
.L4845:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE702:
	.size	bitset_column_next, .-bitset_column_next
	.type	mark_columns_dirty, @function
mark_columns_dirty:
.LFB703:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L4858
	movq	-32(%rbp), %rax
	movq	104(%rax), %rax
	testq	%rax, %rax
	je	.L4858
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -48(%rbp)
	movq	-56(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -44(%rbp)
	jmp	.L4852
.L4857:
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$2, %eax
	je	.L4853
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jne	.L4854
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	jne	.L4853
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	cmpb	$1, %al
	jne	.L4853
.L4854:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jle	.L4853
	movq	-32(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -36(%rbp)
	jg	.L4853
	movq	-32(%rbp), %rax
	movq	104(%rax), %rax
	movl	-36(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	addq	%rdx, %rax
	movl	(%rax), %edx
	addl	$1, %edx
	movl	%edx, (%rax)
.L4853:
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	jne	.L4855
.L4856:
	addl	$1, -44(%rbp)
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.L4855
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	je	.L4856
.L4855:
	addl	$1, -48(%rbp)
	addl	$1, -44(%rbp)
.L4852:
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L4857
.L4858:
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE703:
	.size	mark_columns_dirty, .-mark_columns_dirty
	.section	.rodata
.LC716:
	.string	"it != NULL"
.LC717:
	.string	"it != ((void *)0)"
.LC718:
	.string	"!slice || query->order_by"
	.text
	.globl	ecs_query_next
	.type	ecs_query_next, @function
ecs_query_next:
.LFB704:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$144, %rsp
	movq	%rdi, -136(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -136(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21990, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC716(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -136(%rbp)
	jne	.L4860
	leaq	__PRETTY_FUNCTION__.14771(%rip), %rcx
	movl	$21990, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC717(%rip), %rdi
	call	__assert_fail@PLT
.L4860:
	movq	-136(%rbp), %rax
	addq	$232, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -104(%rbp)
	movq	-136(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	1600(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-136(%rbp), %rax
	movb	$1, 212(%rax)
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$21999, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L4861
	leaq	__PRETTY_FUNCTION__.14771(%rip), %rcx
	movl	$21999, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L4861:
	movq	-96(%rbp), %rax
	movzbl	1741(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L4889
	movq	-96(%rbp), %rax
	movq	1656(%rax), %rax
	movl	$16, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -80(%rbp)
	movq	-96(%rbp), %rax
	movq	1608(%rax), %rax
	movl	$16, %edx
	movl	$96, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -72(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L4864
	movq	-96(%rbp), %rax
	movq	1648(%rax), %rax
	testq	%rax, %rax
	je	.L4865
.L4864:
	movl	$1, %eax
	jmp	.L4866
.L4865:
	movl	$0, %eax
.L4866:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22010, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC718(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -80(%rbp)
	je	.L4867
	movq	-96(%rbp), %rax
	movq	1648(%rax), %rax
	testq	%rax, %rax
	jne	.L4867
	leaq	__PRETTY_FUNCTION__.14771(%rip), %rcx
	movl	$22010, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC718(%rip), %rdi
	call	__assert_fail@PLT
.L4867:
	movq	-136(%rbp), %rax
	movl	128(%rax), %eax
	movl	%eax, -124(%rbp)
	movq	-136(%rbp), %rax
	movl	208(%rax), %eax
	movl	%eax, -120(%rbp)
	movq	-112(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -128(%rbp)
	jmp	.L4868
.L4885:
	cmpq	$0, -80(%rbp)
	je	.L4869
	movl	-128(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	jmp	.L4870
.L4869:
	movl	-128(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
.L4870:
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	$0, -48(%rbp)
	movl	-128(%rbp), %eax
	leal	1(%rax), %edx
	movq	-112(%rbp), %rax
	movl	%edx, 12(%rax)
	cmpq	$0, -56(%rbp)
	je	.L4871
	movq	-64(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-64(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22028, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L4872
	leaq	__PRETTY_FUNCTION__.14771(%rip), %rcx
	movl	$22028, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L4872:
	movq	-48(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, 144(%rax)
	cmpq	$0, -80(%rbp)
	je	.L4873
	movl	-128(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movl	8(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-128(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movl	12(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.L4874
.L4873:
	movl	$0, -16(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movl	%eax, -12(%rbp)
.L4874:
	movl	-12(%rbp), %eax
	testl	%eax, %eax
	je	.L4890
	cmpq	$0, -40(%rbp)
	je	.L4876
	leaq	-16(%rbp), %rcx
	movq	-112(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	bitset_column_next
	cmpl	$-1, %eax
	je	.L4891
	movq	-112(%rbp), %rax
	movl	-128(%rbp), %edx
	movl	%edx, 12(%rax)
.L4876:
	cmpq	$0, -32(%rbp)
	je	.L4879
	leaq	-16(%rbp), %rdi
	movq	-112(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	sparse_column_next
	cmpl	$-1, %eax
	je	.L4892
	movq	-112(%rbp), %rax
	movl	-128(%rbp), %edx
	movl	%edx, 12(%rax)
.L4879:
	leaq	-16(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_page_iter_next
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	js	.L4893
	cmpl	$0, -116(%rbp)
	jg	.L4894
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	-16(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rax, %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, 152(%rax)
	movl	-16(%rbp), %edx
	movq	-136(%rbp), %rax
	movl	%edx, 200(%rax)
	movl	-12(%rbp), %edx
	movq	-136(%rbp), %rax
	movl	%edx, 204(%rax)
	movl	-12(%rbp), %edx
	movq	-136(%rbp), %rax
	movl	%edx, 208(%rax)
.L4871:
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, 48(%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, 64(%rax)
	movq	-64(%rbp), %rax
	movq	(%rax), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, 80(%rax)
	movq	-64(%rbp), %rax
	movq	40(%rax), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, 72(%rax)
	movq	-64(%rbp), %rax
	movq	32(%rax), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, 88(%rax)
	movq	-64(%rbp), %rax
	movq	48(%rax), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, 96(%rax)
	movq	-64(%rbp), %rax
	movq	56(%rax), %rdx
	movq	-136(%rbp), %rax
	movq	%rdx, 112(%rax)
	movq	-136(%rbp), %rax
	movl	196(%rax), %edx
	movl	-120(%rbp), %eax
	addl	%eax, %edx
	movq	-136(%rbp), %rax
	movl	%edx, 196(%rax)
	movq	-136(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_iter_init
	movq	-136(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	populate_ptrs
	movq	-96(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$1024, %eax
	testl	%eax, %eax
	je	.L4895
	cmpq	$0, -56(%rbp)
	je	.L4895
	movq	-64(%rbp), %rdx
	movq	-96(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	mark_columns_dirty
	jmp	.L4895
.L4890:
	nop
	jmp	.L4878
.L4891:
	nop
	jmp	.L4878
.L4892:
	nop
	jmp	.L4878
.L4894:
	nop
.L4878:
	addl	$1, -128(%rbp)
.L4868:
	movl	-128(%rbp), %eax
	cmpl	-124(%rbp), %eax
	jl	.L4885
	jmp	.L4863
.L4889:
	nop
	jmp	.L4863
.L4893:
	nop
.L4863:
	movq	-136(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_iter_fini
	movl	$0, %eax
	jmp	.L4887
.L4895:
	nop
.L4884:
	endbr64
	movl	$1, %eax
.L4887:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4888
	call	__stack_chk_fail@PLT
.L4888:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE704:
	.size	ecs_query_next, .-ecs_query_next
	.globl	ecs_query_next_w_filter
	.type	ecs_query_next_w_filter, @function
ecs_query_next_w_filter:
.LFB705:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
.L4900:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_next
	xorl	$1, %eax
	testb	%al, %al
	je	.L4897
	movl	$0, %eax
	jmp	.L4898
.L4897:
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L4899
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-32(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_match_filter
	xorl	$1, %eax
	testb	%al, %al
	jne	.L4900
.L4899:
	movl	$1, %eax
.L4898:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE705:
	.size	ecs_query_next_w_filter, .-ecs_query_next_w_filter
	.globl	ecs_query_next_worker
	.type	ecs_query_next_worker, @function
ecs_query_next_worker:
.LFB706:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	200(%rax), %eax
	movl	%eax, -8(%rbp)
.L4908:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_next
	xorl	$1, %eax
	testb	%al, %al
	je	.L4902
	movl	$0, %eax
	jmp	.L4903
.L4902:
	movq	-24(%rbp), %rax
	movl	204(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	-32(%rbp)
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	imull	-32(%rbp), %eax
	subl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.L4904
	movl	-28(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.L4905
	addl	$1, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	%eax, -12(%rbp)
	jmp	.L4904
.L4905:
	movl	-4(%rbp), %eax
	addl	%eax, -12(%rbp)
.L4904:
	cmpl	$0, -16(%rbp)
	jne	.L4906
	movq	-24(%rbp), %rax
	movq	120(%rax), %rax
	movl	1712(%rax), %eax
	andl	$1, %eax
	testl	%eax, %eax
	jne	.L4906
	cmpl	$0, -28(%rbp)
	jne	.L4907
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	populate_ptrs
	movl	$1, %eax
	jmp	.L4903
.L4907:
	movl	$0, %eax
	jmp	.L4903
.L4906:
	cmpl	$0, -16(%rbp)
	je	.L4908
	movq	-24(%rbp), %rax
	movl	196(%rax), %eax
	subl	-8(%rbp), %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 196(%rax)
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	movl	%edx, 204(%rax)
	movq	-24(%rbp), %rax
	movl	200(%rax), %edx
	movl	-12(%rbp), %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 200(%rax)
	movq	-24(%rbp), %rax
	movq	152(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, 152(%rax)
	movq	-24(%rbp), %rax
	movl	196(%rax), %edx
	movl	-12(%rbp), %eax
	addl	%eax, %edx
	movq	-24(%rbp), %rax
	movl	%edx, 196(%rax)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	populate_ptrs
	movl	$1, %eax
.L4903:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE706:
	.size	ecs_query_next_worker, .-ecs_query_next_worker
	.globl	ecs_query_changed
	.type	ecs_query_changed, @function
ecs_query_changed:
.LFB707:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22177, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L4910
	leaq	__PRETTY_FUNCTION__.14816(%rip), %rcx
	movl	$22177, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L4910:
	movq	-8(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22178, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC704(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	je	.L4911
	leaq	__PRETTY_FUNCTION__.14816(%rip), %rcx
	movl	$22178, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC705(%rip), %rdi
	call	__assert_fail@PLT
.L4911:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	tables_dirty
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE707:
	.size	ecs_query_changed, .-ecs_query_changed
	.globl	ecs_query_orphaned
	.type	ecs_query_orphaned, @function
ecs_query_orphaned:
.LFB708:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	1712(%rax), %eax
	andl	$512, %eax
	testl	%eax, %eax
	setne	%al
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE708:
	.size	ecs_query_orphaned, .-ecs_query_orphaned
	.type	ids_hash, @function
ids_hash:
.LFB709:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	leal	0(,%rax,8), %edx
	movq	-16(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_hash
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE709:
	.size	ids_hash, .-ids_hash
	.type	ids_compare, @function
ids_compare:
.LFB710:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	cmpl	-52(%rbp), %eax
	je	.L4918
	movl	-56(%rbp), %eax
	cmpl	-52(%rbp), %eax
	setg	%al
	movzbl	%al, %edx
	movl	-56(%rbp), %eax
	cmpl	-52(%rbp), %eax
	setl	%al
	movzbl	%al, %eax
	subl	%eax, %edx
	movl	%edx, %eax
	jmp	.L4919
.L4918:
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -60(%rbp)
	jmp	.L4920
.L4922:
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	cmpq	-8(%rbp), %rax
	je	.L4921
	movq	-16(%rbp), %rax
	cmpq	-8(%rbp), %rax
	seta	%al
	movzbl	%al, %edx
	movq	-16(%rbp), %rax
	cmpq	-8(%rbp), %rax
	setb	%al
	movzbl	%al, %eax
	subl	%eax, %edx
	movl	%edx, %eax
	jmp	.L4919
.L4921:
	addl	$1, -60(%rbp)
.L4920:
	movl	-60(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jl	.L4922
	movl	$0, %eax
.L4919:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE710:
	.size	ids_compare, .-ids_compare
	.globl	flecs_table_hashmap_new
	.type	flecs_table_hashmap_new, @function
flecs_table_hashmap_new:
.LFB711:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-24(%rbp), %rax
	leaq	ids_compare(%rip), %r8
	leaq	ids_hash(%rip), %rcx
	movl	$8, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_hashmap_new
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4925
	call	__stack_chk_fail@PLT
.L4925:
	movq	-24(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE711:
	.size	flecs_table_hashmap_new, .-flecs_table_hashmap_new
	.globl	flecs_component_from_id
	.type	flecs_component_from_id, @function
flecs_component_from_id:
.LFB712:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -16(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-32(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L4927
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -32(%rbp)
	movl	$270, %edx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	je	.L4927
	movl	$0, %eax
	jmp	.L4928
.L4927:
	movabsq	$-72057594037927936, %rax
	andq	-32(%rbp), %rax
	testq	%rax, %rax
	je	.L4929
	movl	$0, %eax
	jmp	.L4928
.L4929:
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L4930
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jne	.L4931
.L4930:
	cmpq	$0, -16(%rbp)
	je	.L4931
	movq	-16(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22261, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC386(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L4932
	leaq	__PRETTY_FUNCTION__.14852(%rip), %rcx
	movl	$22261, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC386(%rip), %rdi
	call	__assert_fail@PLT
.L4932:
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
.L4931:
	movq	-8(%rbp), %rax
.L4928:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE712:
	.size	flecs_component_from_id, .-flecs_component_from_id
	.type	data_column_count, @function
data_column_count:
.LFB713:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L4934
.L4937:
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$1, -8(%rbp)
	je	.L4935
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	cmpq	%rax, -8(%rbp)
	je	.L4935
	movl	$272, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	cmpq	%rax, -8(%rbp)
	je	.L4935
	movq	-8(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_component_from_id
	testq	%rax, %rax
	je	.L4936
.L4935:
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.L4936:
	addl	$1, -32(%rbp)
.L4934:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L4937
	movl	-36(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE713:
	.size	data_column_count, .-data_column_count
	.type	ensure_columns, @function
ensure_columns:
.LFB714:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	$0, -56(%rbp)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -52(%rbp)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	movl	$0, -60(%rbp)
	jmp	.L4940
.L4944:
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-32(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L4941
	movq	-32(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_ensure
	movq	-8(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_ensure
	jmp	.L4942
.L4941:
	movabsq	$-72057594037927936, %rax
	andq	-32(%rbp), %rax
	testq	%rax, %rax
	je	.L4943
	movq	-32(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_ensure
	jmp	.L4942
.L4943:
	movq	-32(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_ensure
.L4942:
	addl	$1, -60(%rbp)
.L4940:
	movl	-60(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L4944
	movl	-56(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE714:
	.size	ensure_columns, .-ensure_columns
	.type	switch_column_count, @function
switch_column_count:
.LFB715:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L4947
.L4950:
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-360287970189639680, %rdx
	cmpq	%rdx, %rax
	jne	.L4948
	cmpl	$0, -36(%rbp)
	jne	.L4949
	movq	-56(%rbp), %rax
	movl	-32(%rbp), %edx
	movl	%edx, 120(%rax)
.L4949:
	addl	$1, -36(%rbp)
.L4948:
	addl	$1, -32(%rbp)
.L4947:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L4950
	movl	-36(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE715:
	.size	switch_column_count, .-switch_column_count
	.type	bitset_column_count, @function
bitset_column_count:
.LFB716:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L4953
.L4956:
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	movabsq	$-864691128455135232, %rdx
	cmpq	%rdx, %rax
	jne	.L4954
	cmpl	$0, -36(%rbp)
	jne	.L4955
	movq	-56(%rbp), %rax
	movl	-32(%rbp), %edx
	movl	%edx, 128(%rax)
.L4955:
	addl	$1, -36(%rbp)
.L4954:
	addl	$1, -32(%rbp)
.L4953:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L4956
	movl	-36(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE716:
	.size	bitset_column_count, .-bitset_column_count
	.type	entities_to_type, @function
entities_to_type:
.LFB717:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	je	.L4959
	movq	$0, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	8(%rax), %edx
	leaq	-24(%rbp), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movq	-24(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	sall	$3, %eax
	movslq	%eax, %rdx
	movq	-40(%rbp), %rax
	movq	(%rax), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-24(%rbp), %rax
	jmp	.L4960
.L4959:
	movl	$0, %eax
.L4960:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4961
	call	__stack_chk_fail@PLT
.L4961:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE717:
	.size	entities_to_type, .-entities_to_type
	.type	get_edge, @function
get_edge:
.LFB718:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$255, -16(%rbp)
	ja	.L4963
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	testq	%rax, %rax
	jne	.L4964
	movq	32+ecs_os_api(%rip), %rax
	movl	$4096, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, 40(%rdx)
.L4964:
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	jmp	.L4965
.L4963:
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	jne	.L4966
	movl	$1, %edx
	movl	$8, %esi
	movl	$16, %edi
	call	_ecs_map_new
	movq	-8(%rbp), %rdx
	movq	%rax, 48(%rdx)
.L4966:
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_ensure
	nop
.L4965:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE718:
	.size	get_edge, .-get_edge
	.section	.rodata
.LC719:
	.string	"edge != NULL"
.LC720:
	.string	"edge != ((void *)0)"
	.text
	.type	init_edges, @function
init_edges:
.LFB719:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-40(%rbp), %rax
	movq	$0, 48(%rax)
	movl	$0, -32(%rbp)
	jmp	.L4968
.L4970:
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_edge
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22411, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC719(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L4969
	leaq	__PRETTY_FUNCTION__.14923(%rip), %rcx
	movl	$22411, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC720(%rip), %rdi
	call	__assert_fail@PLT
.L4969:
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, (%rax)
	addl	$1, -32(%rbp)
.L4968:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L4970
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE719:
	.size	init_edges, .-init_edges
	.type	init_flags, @function
init_flags:
.LFB720:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L4972
.L4983:
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$10, -16(%rbp)
	ja	.L4973
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$1, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
.L4973:
	movl	$259, %eax
	cmpq	%rax, -16(%rbp)
	jne	.L4974
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$1, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$8, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
.L4974:
	movl	$260, %eax
	cmpq	%rax, -16(%rbp)
	jne	.L4975
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$2, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$64, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
.L4975:
	movl	$261, %eax
	cmpq	%rax, -16(%rbp)
	jne	.L4976
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$64, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
.L4976:
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	movabsq	$-648518346341351424, %rdx
	cmpq	%rdx, %rax
	jne	.L4977
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$32, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
.L4977:
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L4978
	movq	-16(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$277, %edx
	cmpq	%rdx, %rax
	jne	.L4978
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$4, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
.L4978:
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	movabsq	$-360287970189639680, %rdx
	cmpq	%rdx, %rax
	jne	.L4979
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$65536, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
.L4979:
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	movabsq	$-864691128455135232, %rdx
	cmpq	%rdx, %rax
	jne	.L4980
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$131072, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
.L4980:
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L4981
	movq	-16(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$276, %edx
	cmpq	%rdx, %rax
	jne	.L4981
	movq	-16(%rbp), %rax
	movl	%eax, %edx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, -8(%rbp)
	movl	$257, %eax
	cmpq	%rax, -8(%rbp)
	je	.L4982
	movl	$258, %eax
	cmpq	%rax, -8(%rbp)
	je	.L4982
	movl	$259, %edx
	movq	-8(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	je	.L4981
.L4982:
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$1, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	orl	$8, %eax
	movl	%eax, %edx
	movq	-48(%rbp), %rax
	movl	%edx, 16(%rax)
.L4981:
	addl	$1, -32(%rbp)
.L4972:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L4983
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE720:
	.size	init_flags, .-init_flags
	.type	init_table, @function
init_table:
.LFB721:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	entities_to_type
	movq	-64(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movq	-64(%rbp), %rax
	movq	$0, 32(%rax)
	movq	-64(%rbp), %rax
	movq	$0, 24(%rax)
	movq	-64(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-64(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-64(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-64(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-64(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-64(%rbp), %rax
	movq	$0, 88(%rax)
	movq	-64(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-64(%rbp), %rax
	movl	$0, 112(%rax)
	movq	-64(%rbp), %rax
	movl	$0, 132(%rax)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ensure_columns
	movq	-64(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	data_column_count
	movq	-64(%rbp), %rdx
	movl	%eax, 20(%rdx)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	switch_column_count
	movq	-64(%rbp), %rdx
	movl	%eax, 116(%rdx)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	bitset_column_count
	movq	-64(%rbp), %rdx
	movl	%eax, 124(%rdx)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	init_edges
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	init_flags
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_register_table
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movl	$3, -48(%rbp)
	leaq	-48(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_notify
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L4985
	call	__stack_chk_fail@PLT
.L4985:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE721:
	.size	init_table, .-init_table
	.section	.rodata
	.align 8
.LC721:
	.string	"table #[green][%s]#[normal] created [%p]"
	.text
	.type	create_table, @function
create_table:
.LFB722:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-72(%rbp), %rax
	movq	48(%rax), %rax
	movl	$136, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_add
	movq	%rax, -64(%rbp)
	movq	-72(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_last_id
	movq	-64(%rbp), %rdx
	movq	%rax, (%rdx)
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22534, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L4987
	leaq	__PRETTY_FUNCTION__.14951(%rip), %rcx
	movl	$22534, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L4987:
	movq	-80(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-72(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	init_table
	movq	-64(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_type_str
	movq	%rax, -56(%rbp)
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %r9
	movq	%rax, %r8
	leaq	.LC721(%rip), %rcx
	movl	$22539, %edx
	leaq	.LC74(%rip), %rsi
	movl	$2, %edi
	movl	$0, %eax
	call	_ecs_trace
	movq	40+ecs_os_api(%rip), %rdx
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	call	ecs_log_push
	movq	24(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -40(%rbp)
	movq	16(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_notify_queries
	call	ecs_log_pop
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L4989
	call	__stack_chk_fail@PLT
.L4989:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE722:
	.size	create_table, .-create_table
	.section	.rodata
.LC722:
	.string	"el <= out->count"
.LC723:
	.string	"out->count != 0"
	.text
	.type	add_entity_to_type, @function
add_entity_to_type:
.LFB723:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movb	$0, -29(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L4991
.L4995:
	movl	-28(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	-56(%rbp), %rax
	je	.L4998
	movq	-8(%rbp), %rax
	cmpq	-48(%rbp), %rax
	jbe	.L4994
	movzbl	-29(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L4994
	movq	-64(%rbp), %rax
	movq	(%rax), %rcx
	movl	-24(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -24(%rbp)
	cltq
	salq	$3, %rax
	leaq	(%rcx,%rax), %rdx
	movq	-48(%rbp), %rax
	movq	%rax, (%rdx)
	movb	$1, -29(%rbp)
.L4994:
	movq	-64(%rbp), %rax
	movq	(%rax), %rcx
	movl	-24(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -24(%rbp)
	cltq
	salq	$3, %rax
	leaq	(%rcx,%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, (%rdx)
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -24(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22589, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC722(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -24(%rbp)
	jle	.L4993
	leaq	__PRETTY_FUNCTION__.14968(%rip), %rcx
	movl	$22589, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC722(%rip), %rdi
	call	__assert_fail@PLT
.L4998:
	nop
.L4993:
	addl	$1, -28(%rbp)
.L4991:
	movl	-28(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L4995
	movzbl	-29(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L4996
	movq	-64(%rbp), %rax
	movq	(%rax), %rcx
	movl	-24(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -24(%rbp)
	cltq
	salq	$3, %rax
	leaq	(%rcx,%rax), %rdx
	movq	-48(%rbp), %rax
	movq	%rax, (%rdx)
.L4996:
	movq	-64(%rbp), %rax
	movl	-24(%rbp), %edx
	movl	%edx, 8(%rax)
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22598, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC723(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jne	.L4999
	leaq	__PRETTY_FUNCTION__.14968(%rip), %rcx
	movl	$22598, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC723(%rip), %rdi
	call	__assert_fail@PLT
.L4999:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE723:
	.size	add_entity_to_type, .-add_entity_to_type
	.section	.rodata
.LC724:
	.string	"el <= count"
	.text
	.type	remove_entity_from_type, @function
remove_entity_from_type:
.LFB724:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L5001
.L5003:
	movl	-28(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	-48(%rbp), %rax
	je	.L5002
	movq	-56(%rbp), %rax
	movq	(%rax), %rcx
	movl	-24(%rbp), %eax
	leal	1(%rax), %edx
	movl	%edx, -24(%rbp)
	cltq
	salq	$3, %rax
	leaq	(%rcx,%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, (%rdx)
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22615, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC724(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.L5002
	leaq	__PRETTY_FUNCTION__.14982(%rip), %rcx
	movl	$22615, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC724(%rip), %rdi
	call	__assert_fail@PLT
.L5002:
	addl	$1, -28(%rbp)
.L5001:
	movl	-28(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L5003
	movq	-56(%rbp), %rax
	movl	-24(%rbp), %edx
	movl	%edx, 8(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE724:
	.size	remove_entity_from_type, .-remove_entity_from_type
	.type	create_backlink_after_add, @function
create_backlink_after_add:
.LFB725:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_edge
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L5006
	movq	-8(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, 8(%rax)
.L5006:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE725:
	.size	create_backlink_after_add, .-create_backlink_after_add
	.type	create_backlink_after_remove, @function
create_backlink_after_remove:
.LFB726:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_edge
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L5009
	movq	-8(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, (%rax)
.L5009:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE726:
	.size	create_backlink_after_remove, .-create_backlink_after_remove
	.type	find_xor_replace, @function
find_xor_replace:
.LFB727:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	-64(%rbp), %rax
	movl	16(%rax), %eax
	andl	$32, %eax
	testl	%eax, %eax
	je	.L5011
	movq	-72(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -44(%rbp)
	movq	$0, -40(%rbp)
	movl	-44(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.L5012
.L5017:
	movl	-48(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-24(%rbp), %rax
	movabsq	$-648518346341351424, %rdx
	cmpq	%rdx, %rax
	jne	.L5013
	movabsq	$72057594037927935, %rax
	andq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	-56(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22663, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC77(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5014
	leaq	__PRETTY_FUNCTION__.15011(%rip), %rcx
	movl	$22663, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC78(%rip), %rdi
	call	__assert_fail@PLT
.L5014:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-80(%rbp), %rdx
	movq	-56(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	je	.L5015
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.L5015
.L5013:
	cmpq	$0, -40(%rbp)
	je	.L5015
	movq	-24(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	je	.L5015
	movq	-24(%rbp), %rax
	jmp	.L5016
.L5015:
	subl	$1, -48(%rbp)
.L5012:
	cmpl	$0, -48(%rbp)
	jns	.L5017
.L5011:
	movl	$0, %eax
.L5016:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE727:
	.size	find_xor_replace, .-find_xor_replace
	.globl	flecs_table_switch_from_case
	.type	flecs_table_switch_from_case, @function
flecs_table_switch_from_case:
.LFB728:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movq	-80(%rbp), %rax
	movl	116(%rax), %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22691, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC188(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -60(%rbp)
	jne	.L5019
	leaq	__PRETTY_FUNCTION__.15025(%rip), %rcx
	movl	$22691, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC188(%rip), %rdi
	call	__assert_fail@PLT
.L5019:
	movabsq	$72057594037927935, %rax
	andq	%rax, -88(%rbp)
	movq	$0, -32(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L5020
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L5020
	movl	$0, -64(%rbp)
	jmp	.L5021
.L5024:
	movl	-64(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-88(%rbp), %rdx
	movq	-24(%rbp), %rsi
	movq	-72(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	je	.L5022
	movl	-64(%rbp), %eax
	jmp	.L5023
.L5022:
	addl	$1, -64(%rbp)
.L5021:
	movl	-64(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jl	.L5024
	jmp	.L5025
.L5020:
	movl	$0, -64(%rbp)
	jmp	.L5026
.L5030:
	movq	-80(%rbp), %rax
	movl	120(%rax), %edx
	movl	-64(%rbp), %eax
	addl	%edx, %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	movabsq	$-360287970189639680, %rdx
	cmpq	%rdx, %rax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22710, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC75(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	movabsq	$-360287970189639680, %rdx
	cmpq	%rdx, %rax
	je	.L5027
	leaq	__PRETTY_FUNCTION__.15025(%rip), %rcx
	movl	$22710, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC76(%rip), %rdi
	call	__assert_fail@PLT
.L5027:
	movabsq	$72057594037927935, %rax
	andq	%rax, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	-72(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22714, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC77(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5028
	leaq	__PRETTY_FUNCTION__.15025(%rip), %rcx
	movl	$22714, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC78(%rip), %rdi
	call	__assert_fail@PLT
.L5028:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rsi
	movq	-88(%rbp), %rdx
	movq	-72(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	je	.L5029
	movl	-64(%rbp), %eax
	jmp	.L5023
.L5029:
	addl	$1, -64(%rbp)
.L5026:
	movl	-64(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jl	.L5030
.L5025:
	movl	$0, %ecx
	movl	$22725, %edx
	leaq	.LC74(%rip), %rsi
	movl	$62, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L5023:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE728:
	.size	flecs_table_switch_from_case, .-flecs_table_switch_from_case
	.section	.rodata
	.align 8
.LC725:
	.string	"(node->flags & EcsTableHasSwitch) != 0"
.LC726:
	.string	"(node->flags & 65536u) != 0"
	.text
	.type	find_or_create_table_include, @function
find_or_create_table_include:
.LFB729:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movabsq	$-72057594037927936, %rax
	andq	-88(%rbp), %rax
	movabsq	$-288230376151711744, %rdx
	cmpq	%rdx, %rax
	jne	.L5032
	movq	-80(%rbp), %rax
	movl	16(%rax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22738, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC725(%rip), %rdx
	movl	$62, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-80(%rbp), %rax
	movl	16(%rax), %eax
	andl	$65536, %eax
	testl	%eax, %eax
	jne	.L5033
	leaq	__PRETTY_FUNCTION__.15041(%rip), %rcx
	movl	$22738, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC726(%rip), %rdi
	call	__assert_fail@PLT
.L5033:
	movq	-80(%rbp), %rax
	jmp	.L5034
.L5032:
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	$1, %eax
	sall	$3, %eax
	cltq
	leaq	8(%rax), %rdx
	movl	$16, %eax
	subq	$1, %rax
	addq	%rdx, %rax
	movl	$16, %ecx
	movl	$0, %edx
	divq	%rcx
	imulq	$16, %rax, %rax
	movq	%rax, %rdx
	andq	$-4096, %rdx
	movq	%rsp, %rdi
	subq	%rdx, %rdi
	movq	%rdi, %rdx
.L5035:
	cmpq	%rdx, %rsp
	je	.L5036
	subq	$4096, %rsp
	orq	$0, 4088(%rsp)
	jmp	.L5035
.L5036:
	movq	%rax, %rdx
	andl	$4095, %edx
	subq	%rdx, %rsp
	movq	%rax, %rdx
	andl	$4095, %edx
	testq	%rdx, %rdx
	je	.L5037
	andl	$4095, %eax
	subq	$8, %rax
	addq	%rsp, %rax
	orq	$0, (%rax)
.L5037:
	movq	%rsp, %rax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	movq	%rax, -32(%rbp)
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-88(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	find_xor_replace
	movq	%rax, -48(%rbp)
	leaq	-32(%rbp), %rcx
	movq	-48(%rbp), %rdx
	movq	-88(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	add_entity_to_type
	leaq	-32(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_find_or_create
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	cmpq	-80(%rbp), %rax
	je	.L5038
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	create_backlink_after_add
.L5038:
	movq	-40(%rbp), %rax
.L5034:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5039
	call	__stack_chk_fail@PLT
.L5039:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE729:
	.size	find_or_create_table_include, .-find_or_create_table_include
	.type	find_or_create_table_exclude, @function
find_or_create_table_exclude:
.LFB730:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-80(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	sall	$3, %eax
	cltq
	leaq	8(%rax), %rdx
	movl	$16, %eax
	subq	$1, %rax
	addq	%rdx, %rax
	movl	$16, %esi
	movl	$0, %edx
	divq	%rsi
	imulq	$16, %rax, %rax
	movq	%rax, %rdx
	andq	$-4096, %rdx
	movq	%rsp, %rcx
	subq	%rdx, %rcx
	movq	%rcx, %rdx
.L5041:
	cmpq	%rdx, %rsp
	je	.L5042
	subq	$4096, %rsp
	orq	$0, 4088(%rsp)
	jmp	.L5041
.L5042:
	movq	%rax, %rdx
	andl	$4095, %edx
	subq	%rdx, %rsp
	movq	%rax, %rdx
	andl	$4095, %edx
	testq	%rdx, %rdx
	je	.L5043
	andl	$4095, %eax
	subq	$8, %rax
	addq	%rsp, %rax
	orq	$0, (%rax)
.L5043:
	movq	%rsp, %rax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	movq	%rax, -32(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-48(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	remove_entity_from_type
	leaq	-32(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_find_or_create
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L5044
	movl	$0, %eax
	jmp	.L5047
.L5044:
	movq	-40(%rbp), %rax
	cmpq	-80(%rbp), %rax
	je	.L5046
	movq	-88(%rbp), %rdx
	movq	-80(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	create_backlink_after_remove
.L5046:
	movq	-40(%rbp), %rax
.L5047:
	movq	-8(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L5048
	call	__stack_chk_fail@PLT
.L5048:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE730:
	.size	find_or_create_table_exclude, .-find_or_create_table_exclude
	.globl	flecs_table_traverse_remove
	.type	flecs_table_traverse_remove, @function
flecs_table_traverse_remove:
.LFB731:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22803, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L5050
	leaq	__PRETTY_FUNCTION__.15062(%rip), %rcx
	movl	$22803, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5050:
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22804, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5051
	leaq	__PRETTY_FUNCTION__.15062(%rip), %rcx
	movl	$22804, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5051:
	movq	-72(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -64(%rbp)
	jne	.L5052
	movq	-56(%rbp), %rax
	addq	$88, %rax
	jmp	.L5053
.L5052:
	movq	-64(%rbp), %rax
.L5053:
	movq	%rax, -64(%rbp)
	movl	$0, -40(%rbp)
	jmp	.L5054
.L5063:
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22814, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC386(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L5055
	leaq	__PRETTY_FUNCTION__.15062(%rip), %rcx
	movl	$22814, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC386(%rip), %rdi
	call	__assert_fail@PLT
.L5055:
	movq	-16(%rbp), %rdx
	movq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_edge
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L5056
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	cmpq	%rax, -64(%rbp)
	jne	.L5064
	movq	-16(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	find_or_create_table_exclude
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L5058
	movl	$0, %eax
	jmp	.L5059
.L5058:
	movq	-8(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, 8(%rax)
.L5056:
	movabsq	$-72057594037927936, %rax
	andq	-16(%rbp), %rax
	movabsq	$-288230376151711744, %rdx
	cmpq	%rdx, %rax
	sete	%al
	movb	%al, -41(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L5061
	movq	-64(%rbp), %rax
	cmpq	-32(%rbp), %rax
	jne	.L5062
	cmpb	$0, -41(%rbp)
	je	.L5061
.L5062:
	movq	-80(%rbp), %rax
	movq	(%rax), %rsi
	movq	-80(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %ecx
	movq	-80(%rbp), %rdx
	movl	%ecx, 8(%rdx)
	cltq
	salq	$3, %rax
	leaq	(%rsi,%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rax, (%rdx)
.L5061:
	movq	-32(%rbp), %rax
	movq	%rax, -64(%rbp)
	jmp	.L5060
.L5064:
	nop
.L5060:
	addl	$1, -40(%rbp)
.L5054:
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L5063
	movq	-64(%rbp), %rax
.L5059:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE731:
	.size	flecs_table_traverse_remove, .-flecs_table_traverse_remove
	.type	find_owned_components, @function
find_owned_components:
.LFB732:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	-88(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_type
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -56(%rbp)
	movq	-48(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movl	$0, -64(%rbp)
	jmp	.L5066
.L5072:
	movl	-64(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-32(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L5067
	movq	-32(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$277, %edx
	cmpq	%rdx, %rax
	jne	.L5067
	movq	-32(%rbp), %rax
	movl	%eax, %edi
	movq	-96(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	-72(%rbp), %rax
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	find_owned_components
	jmp	.L5068
.L5067:
	movabsq	$-72057594037927936, %rax
	andq	-32(%rbp), %rax
	movabsq	$-792633534417207296, %rdx
	cmpq	%rdx, %rax
	jne	.L5068
	movabsq	$72057594037927935, %rax
	andq	%rax, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-72(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L5069
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	$0, -60(%rbp)
	jmp	.L5070
.L5071:
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	leaq	(%rdx,%rax), %rsi
	movq	-96(%rbp), %rax
	movq	(%rax), %rdi
	movq	-96(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %ecx
	movq	-96(%rbp), %rdx
	movl	%ecx, 8(%rdx)
	cltq
	salq	$3, %rax
	leaq	(%rdi,%rax), %rdx
	movq	(%rsi), %rax
	movq	%rax, (%rdx)
	addl	$1, -60(%rbp)
.L5070:
	movl	-60(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jl	.L5071
	jmp	.L5068
.L5069:
	movq	-32(%rbp), %rax
	movl	%eax, %edi
	movq	-96(%rbp), %rax
	movq	(%rax), %rsi
	movq	-96(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %ecx
	movq	-96(%rbp), %rdx
	movl	%ecx, 8(%rdx)
	cltq
	salq	$3, %rax
	addq	%rsi, %rax
	movl	%edi, %edx
	movq	%rdx, (%rax)
.L5068:
	addl	$1, -64(%rbp)
.L5066:
	movl	-64(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jl	.L5072
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE732:
	.size	find_owned_components, .-find_owned_components
	.section	.rodata
.LC727:
	.string	"next != NULL"
.LC728:
	.string	"next != ((void *)0)"
	.text
	.globl	flecs_table_traverse_add
	.type	flecs_table_traverse_add, @function
flecs_table_traverse_add:
.LFB733:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$368, %rsp
	movq	%rdi, -344(%rbp)
	movq	%rsi, -352(%rbp)
	movq	%rdx, -360(%rbp)
	movq	%rcx, -368(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -344(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22889, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -344(%rbp)
	jne	.L5074
	leaq	__PRETTY_FUNCTION__.15102(%rip), %rcx
	movl	$22889, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5074:
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22890, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5075
	leaq	__PRETTY_FUNCTION__.15102(%rip), %rcx
	movl	$22890, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5075:
	movq	-360(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -324(%rbp)
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -312(%rbp)
	cmpq	$0, -352(%rbp)
	jne	.L5076
	movq	-344(%rbp), %rax
	addq	$88, %rax
	jmp	.L5077
.L5076:
	movq	-352(%rbp), %rax
.L5077:
	movq	%rax, -352(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -288(%rbp)
	movl	$0, -280(%rbp)
	movl	$0, -328(%rbp)
	jmp	.L5078
.L5085:
	movl	-328(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-312(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -304(%rbp)
	cmpq	$0, -304(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22906, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC386(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -304(%rbp)
	jne	.L5079
	leaq	__PRETTY_FUNCTION__.15102(%rip), %rcx
	movl	$22906, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC386(%rip), %rdi
	call	__assert_fail@PLT
.L5079:
	movq	-304(%rbp), %rdx
	movq	-352(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_edge
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -320(%rbp)
	cmpq	$0, -320(%rbp)
	jne	.L5080
	movq	-304(%rbp), %rdx
	movq	-352(%rbp), %rcx
	movq	-344(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	find_or_create_table_include
	movq	%rax, -320(%rbp)
	cmpq	$0, -320(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$22913, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC727(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -320(%rbp)
	jne	.L5081
	leaq	__PRETTY_FUNCTION__.15102(%rip), %rcx
	movl	$22913, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC728(%rip), %rdi
	call	__assert_fail@PLT
.L5081:
	movq	-296(%rbp), %rax
	movq	-320(%rbp), %rdx
	movq	%rdx, (%rax)
.L5080:
	movabsq	$-72057594037927936, %rax
	andq	-304(%rbp), %rax
	movabsq	$-288230376151711744, %rdx
	cmpq	%rdx, %rax
	sete	%al
	movb	%al, -329(%rbp)
	cmpq	$0, -368(%rbp)
	je	.L5082
	movq	-352(%rbp), %rax
	cmpq	-320(%rbp), %rax
	jne	.L5083
	cmpb	$0, -329(%rbp)
	je	.L5082
.L5083:
	movq	-368(%rbp), %rax
	movq	(%rax), %rsi
	movq	-368(%rbp), %rax
	movl	8(%rax), %eax
	leal	1(%rax), %ecx
	movq	-368(%rbp), %rdx
	movl	%ecx, 8(%rdx)
	cltq
	salq	$3, %rax
	leaq	(%rsi,%rax), %rdx
	movq	-304(%rbp), %rax
	movq	%rax, (%rdx)
.L5082:
	movq	-352(%rbp), %rax
	cmpq	-320(%rbp), %rax
	je	.L5084
	movabsq	$-72057594037927936, %rax
	andq	-304(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L5084
	movq	-304(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movl	$277, %edx
	cmpq	%rdx, %rax
	jne	.L5084
	movq	-304(%rbp), %rax
	movl	%eax, %edx
	movq	-344(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_alive
	movq	%rax, %rdi
	leaq	-288(%rbp), %rdx
	movq	-320(%rbp), %rsi
	movq	-344(%rbp), %rax
	movq	%rdx, %rcx
	movq	%rdi, %rdx
	movq	%rax, %rdi
	call	find_owned_components
.L5084:
	movq	-320(%rbp), %rax
	movq	%rax, -352(%rbp)
	addl	$1, -328(%rbp)
.L5078:
	movl	-328(%rbp), %eax
	cmpl	-324(%rbp), %eax
	jl	.L5085
	movl	-280(%rbp), %eax
	testl	%eax, %eax
	je	.L5086
	movq	-368(%rbp), %rcx
	leaq	-288(%rbp), %rdx
	movq	-352(%rbp), %rsi
	movq	-344(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	%rax, -352(%rbp)
.L5086:
	movq	-352(%rbp), %rax
	movq	-8(%rbp), %rdi
	xorq	%fs:40, %rdi
	je	.L5088
	call	__stack_chk_fail@PLT
.L5088:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE733:
	.size	flecs_table_traverse_add, .-flecs_table_traverse_add
	.type	ecs_entity_array_is_ordered, @function
ecs_entity_array_is_ordered:
.LFB734:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)
	movq	$0, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L5090
.L5095:
	movl	-24(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L5091
	cmpq	$0, -16(%rbp)
	je	.L5096
.L5091:
	movl	-24(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	cmpq	%rax, -16(%rbp)
	jb	.L5093
	movl	$0, %eax
	jmp	.L5094
.L5093:
	movl	-24(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.L5092
.L5096:
	nop
.L5092:
	addl	$1, -24(%rbp)
.L5090:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L5095
	movl	$1, %eax
.L5094:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE734:
	.size	ecs_entity_array_is_ordered, .-ecs_entity_array_is_ordered
	.type	ecs_entity_array_dedup, @function
ecs_entity_array_dedup:
.LFB735:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$1, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.L5098
.L5100:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jne	.L5099
	addl	$1, -20(%rbp)
.L5099:
	movl	-24(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rax, %rdx
	movq	-8(%rbp), %rax
	movq	%rax, (%rdx)
	movq	-8(%rbp), %rax
	movq	%rax, -16(%rbp)
	addl	$1, -24(%rbp)
	addl	$1, -20(%rbp)
.L5098:
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L5100
	movl	-20(%rbp), %eax
	subl	-24(%rbp), %eax
	movl	-44(%rbp), %edx
	subl	%eax, %edx
	movl	%edx, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE735:
	.size	ecs_entity_array_dedup, .-ecs_entity_array_dedup
	.section	.rodata
.LC729:
	.string	"flag must be applied to type"
	.text
	.type	count_occurrences, @function
count_occurrences:
.LFB736:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -60(%rbp)
	movq	-56(%rbp), %rcx
	movq	-40(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	leaq	.LC729(%rip), %r9
	movl	$22990, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC77(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5103
	leaq	__PRETTY_FUNCTION__.15144(%rip), %rcx
	movl	$22990, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC78(%rip), %rdi
	call	__assert_fail@PLT
.L5103:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L5104
.L5108:
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-8(%rbp), %rax
	testq	%rax, %rax
	jne	.L5110
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_type_has_id
	testb	%al, %al
	je	.L5107
	addl	$1, -32(%rbp)
.L5107:
	addl	$1, -28(%rbp)
.L5104:
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jl	.L5108
	jmp	.L5106
.L5110:
	nop
.L5106:
	movl	-32(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE736:
	.size	count_occurrences, .-count_occurrences
	.section	.rodata
.LC730:
	.string	"matches >= 1"
.LC731:
	.string	"matches == 1"
.LC732:
	.string	"matches == 0"
	.text
	.type	verify_constraints, @function
verify_constraints:
.LFB737:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.L5112
.L5122:
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L5123
	movabsq	$-576460752303423488, %rax
	cmpq	%rax, -16(%rbp)
	je	.L5114
	movabsq	$-648518346341351424, %rax
	cmpq	%rax, -16(%rbp)
	je	.L5114
	movabsq	$-720575940379279360, %rax
	cmpq	%rax, -16(%rbp)
	jne	.L5123
.L5114:
	movabsq	$72057594037927935, %rax
	andq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movl	-36(%rbp), %ecx
	movq	-8(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	count_occurrences
	movl	%eax, -28(%rbp)
	movabsq	$-576460752303423488, %rax
	cmpq	%rax, -16(%rbp)
	je	.L5115
	movabsq	$-576460752303423488, %rax
	cmpq	%rax, -16(%rbp)
	ja	.L5116
	movabsq	$-720575940379279360, %rax
	cmpq	%rax, -16(%rbp)
	je	.L5117
	movabsq	$-648518346341351424, %rax
	cmpq	%rax, -16(%rbp)
	je	.L5118
	jmp	.L5116
.L5115:
	cmpl	$0, -28(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23032, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC730(%rip), %rdx
	movl	$61, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -28(%rbp)
	jg	.L5124
	leaq	__PRETTY_FUNCTION__.15164(%rip), %rcx
	movl	$23032, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC730(%rip), %rdi
	call	__assert_fail@PLT
.L5118:
	cmpl	$1, -28(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23035, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC731(%rip), %rdx
	movl	$61, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$1, -28(%rbp)
	je	.L5125
	leaq	__PRETTY_FUNCTION__.15164(%rip), %rcx
	movl	$23035, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC731(%rip), %rdi
	call	__assert_fail@PLT
.L5117:
	cmpl	$0, -28(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23038, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC732(%rip), %rdx
	movl	$61, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -28(%rbp)
	je	.L5126
	leaq	__PRETTY_FUNCTION__.15164(%rip), %rcx
	movl	$23038, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC732(%rip), %rdi
	call	__assert_fail@PLT
.L5124:
	nop
	jmp	.L5116
.L5125:
	nop
	jmp	.L5116
.L5126:
	nop
.L5116:
	subl	$1, -36(%rbp)
.L5112:
	cmpl	$0, -36(%rbp)
	jns	.L5122
.L5123:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE737:
	.size	verify_constraints, .-verify_constraints
	.section	.rodata
	.align 8
.LC733:
	.string	"ordered_ids.count == ecs_vector_count(result->type)"
	.text
	.type	find_or_create, @function
find_or_create:
.LFB738:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23051, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -104(%rbp)
	jne	.L5128
	leaq	__PRETTY_FUNCTION__.15174(%rip), %rcx
	movl	$23051, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5128:
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23052, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5129
	leaq	__PRETTY_FUNCTION__.15174(%rip), %rcx
	movl	$23052, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5129:
	movq	-112(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -96(%rbp)
	movq	$0, -88(%rbp)
	cmpl	$0, -96(%rbp)
	jne	.L5130
	movq	-104(%rbp), %rax
	addq	$88, %rax
	jmp	.L5140
.L5130:
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_entity_array_is_ordered
	xorl	$1, %eax
	testb	%al, %al
	je	.L5132
	movl	-96(%rbp), %eax
	sall	$3, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	cltq
	leaq	8(%rax), %rdx
	movl	$16, %eax
	subq	$1, %rax
	addq	%rdx, %rax
	movl	$16, %ebx
	movl	$0, %edx
	divq	%rbx
	imulq	$16, %rax, %rax
	movq	%rax, %rdx
	andq	$-4096, %rdx
	movq	%rsp, %rbx
	subq	%rdx, %rbx
	movq	%rbx, %rdx
.L5133:
	cmpq	%rdx, %rsp
	je	.L5134
	subq	$4096, %rsp
	orq	$0, 4088(%rsp)
	jmp	.L5133
.L5134:
	movq	%rax, %rdx
	andl	$4095, %edx
	subq	%rdx, %rsp
	movq	%rax, %rdx
	andl	$4095, %edx
	testq	%rdx, %rdx
	je	.L5135
	andl	$4095, %eax
	subq	$8, %rax
	addq	%rsp, %rax
	orq	$0, (%rax)
.L5135:
	movq	%rsp, %rax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	movq	%rax, -88(%rbp)
	movl	-92(%rbp), %eax
	movslq	%eax, %rdx
	movq	-112(%rbp), %rax
	movq	(%rax), %rcx
	movq	-88(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movl	-96(%rbp), %eax
	movslq	%eax, %rsi
	movq	-88(%rbp), %rax
	leaq	flecs_entity_compare_qsort(%rip), %rcx
	movl	$8, %edx
	movq	%rax, %rdi
	call	qsort@PLT
	movl	-96(%rbp), %edx
	movq	-88(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_entity_array_dedup
	movl	%eax, -96(%rbp)
	jmp	.L5136
.L5132:
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
.L5136:
	movq	-88(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -56(%rbp)
	leaq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	movq	-104(%rbp), %rax
	pushq	80(%rax)
	pushq	72(%rax)
	pushq	64(%rax)
	pushq	56(%rax)
	movl	$8, %ecx
	movl	$16, %esi
	call	_flecs_hashmap_ensure
	addq	$32, %rsp
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L5137
	movq	-80(%rbp), %rax
	jmp	.L5140
.L5137:
	movq	-104(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23087, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-104(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5138
	leaq	__PRETTY_FUNCTION__.15174(%rip), %rcx
	movl	$23087, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L5138:
	leaq	-64(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	verify_constraints
	leaq	-64(%rbp), %rdx
	movq	-104(%rbp), %rax
	subq	$8, %rsp
	pushq	-32(%rbp)
	pushq	-40(%rbp)
	pushq	-48(%rbp)
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	create_table
	addq	$32, %rsp
	movq	%rax, -72(%rbp)
	movl	-56(%rbp), %ebx
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23097, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC733(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-56(%rbp), %ebx
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	je	.L5139
	leaq	__PRETTY_FUNCTION__.15174(%rip), %rcx
	movl	$23097, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC733(%rip), %rdi
	call	__assert_fail@PLT
.L5139:
	movq	-72(%rbp), %rax
.L5140:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L5141
	call	__stack_chk_fail@PLT
.L5141:
	movq	-8(%rbp), %rbx
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE738:
	.size	find_or_create, .-find_or_create
	.globl	flecs_table_find_or_create
	.type	flecs_table_find_or_create, @function
flecs_table_find_or_create:
.LFB739:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23107, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5143
	leaq	__PRETTY_FUNCTION__.15186(%rip), %rcx
	movl	$23107, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5143:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23108, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5144
	leaq	__PRETTY_FUNCTION__.15186(%rip), %rcx
	movl	$23108, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5144:
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	find_or_create
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE739:
	.size	flecs_table_find_or_create, .-flecs_table_find_or_create
	.globl	ecs_table_from_type
	.type	ecs_table_from_type, @function
ecs_table_from_type:
.LFB740:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_find_or_create
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5148
	call	__stack_chk_fail@PLT
.L5148:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE740:
	.size	ecs_table_from_type, .-ecs_table_from_type
	.globl	flecs_init_root_table
	.type	flecs_init_root_table, @function
flecs_init_root_table:
.LFB741:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23124, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L5150
	leaq	__PRETTY_FUNCTION__.15195(%rip), %rcx
	movl	$23124, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5150:
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23125, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5151
	leaq	__PRETTY_FUNCTION__.15195(%rip), %rcx
	movl	$23125, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5151:
	movq	$0, -32(%rbp)
	movl	$0, -24(%rbp)
	movq	-40(%rbp), %rax
	leaq	88(%rax), %rcx
	leaq	-32(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	init_table
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5152
	call	__stack_chk_fail@PLT
.L5152:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE741:
	.size	flecs_init_root_table, .-flecs_init_root_table
	.globl	flecs_table_clear_edges
	.type	flecs_table_clear_edges, @function
flecs_table_clear_edges:
.LFB742:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$144, %rsp
	movq	%rdi, -136(%rbp)
	movq	%rsi, -144(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -136(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23140, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -136(%rbp)
	jne	.L5154
	leaq	__PRETTY_FUNCTION__.15201(%rip), %rcx
	movl	$23140, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5154:
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23141, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5155
	leaq	__PRETTY_FUNCTION__.15201(%rip), %rcx
	movl	$23141, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5155:
	movq	-144(%rbp), %rax
	movq	40(%rax), %rax
	testq	%rax, %rax
	je	.L5156
	movl	$0, -124(%rbp)
	jmp	.L5157
.L5160:
	movq	-144(%rbp), %rax
	movq	40(%rax), %rax
	movl	-124(%rbp), %edx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	cmpq	$0, -104(%rbp)
	je	.L5158
	movq	-104(%rbp), %rax
	movq	40(%rax), %rax
	movl	-124(%rbp), %edx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	$0, 8(%rax)
.L5158:
	cmpq	$0, -96(%rbp)
	je	.L5159
	movq	-96(%rbp), %rax
	movq	40(%rax), %rax
	movl	-124(%rbp), %edx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	$0, (%rax)
.L5159:
	addl	$1, -124(%rbp)
.L5157:
	cmpl	$255, -124(%rbp)
	jbe	.L5160
.L5156:
	movq	-144(%rbp), %rax
	movq	48(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L5161
.L5163:
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	cmpq	$0, -80(%rbp)
	je	.L5162
	movq	-120(%rbp), %rdx
	movq	-80(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_edge
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L5162
	movq	-120(%rbp), %rdx
	movq	-80(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_remove
.L5162:
	cmpq	$0, -72(%rbp)
	je	.L5161
	movq	-120(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_edge
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	$0, (%rax)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L5161
	movq	-120(%rbp), %rdx
	movq	-72(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_remove
.L5161:
	leaq	-120(%rbp), %rdx
	leaq	-48(%rbp), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -88(%rbp)
	cmpq	$0, -88(%rbp)
	jne	.L5163
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5164
	call	__stack_chk_fail@PLT
.L5164:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE742:
	.size	flecs_table_clear_edges, .-flecs_table_clear_edges
	.globl	ecs_table_add_id
	.type	ecs_table_add_id, @function
ecs_table_add_id:
.LFB743:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5167
	call	__stack_chk_fail@PLT
.L5167:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE743:
	.size	ecs_table_add_id, .-ecs_table_add_id
	.globl	ecs_table_remove_id
	.type	ecs_table_remove_id, @function
ecs_table_remove_id:
.LFB744:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_table_traverse_remove
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5170
	call	__stack_chk_fail@PLT
.L5170:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE744:
	.size	ecs_table_remove_id, .-ecs_table_remove_id
	.type	get_bucket_count, @function
get_bucket_count:
.LFB745:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	cvtsi2ssl	-4(%rbp), %xmm1
	movss	.LC734(%rip), %xmm0
	mulss	%xmm1, %xmm0
	cvttss2sil	%xmm0, %eax
	movl	%eax, %edi
	call	flecs_next_pow_of_2
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE745:
	.size	get_bucket_count, .-get_bucket_count
	.section	.rodata
.LC735:
	.string	"bucket_count > 0"
.LC736:
	.string	"result < INT32_MAX"
.LC737:
	.string	"result < (2147483647)"
	.text
	.type	get_bucket_id, @function
get_bucket_id:
.LFB746:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$0, -20(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23234, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC735(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -20(%rbp)
	jg	.L5174
	leaq	__PRETTY_FUNCTION__.15246(%rip), %rcx
	movl	$23234, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC735(%rip), %rdi
	call	__assert_fail@PLT
.L5174:
	movq	-32(%rbp), %rax
	movl	%eax, %edx
	movl	-20(%rbp), %eax
	subl	$1, %eax
	andl	%edx, %eax
	movl	%eax, -4(%rbp)
	cmpl	$2147483647, -4(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23236, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC736(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$2147483647, -4(%rbp)
	jne	.L5175
	leaq	__PRETTY_FUNCTION__.15246(%rip), %rcx
	movl	$23236, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC737(%rip), %rdi
	call	__assert_fail@PLT
.L5175:
	movl	-4(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE746:
	.size	get_bucket_id, .-get_bucket_id
	.section	.rodata
.LC738:
	.string	"bucket_id < bucket_count"
	.text
	.type	get_bucket, @function
get_bucket:
.LFB747:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -8(%rbp)
	cmpl	$0, -8(%rbp)
	jne	.L5178
	movl	$0, %eax
	jmp	.L5179
.L5178:
	movq	-32(%rbp), %rdx
	movl	-8(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	get_bucket_id
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23252, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC738(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-4(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jl	.L5180
	leaq	__PRETTY_FUNCTION__.15254(%rip), %rcx
	movl	$23252, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC738(%rip), %rdi
	call	__assert_fail@PLT
.L5180:
	movq	-24(%rbp), %rax
	movq	(%rax), %rcx
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	addq	%rcx, %rax
.L5179:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE747:
	.size	get_bucket, .-get_bucket
	.type	ensure_buckets, @function
ensure_buckets:
.LFB748:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, %edi
	call	flecs_next_pow_of_2
	movl	%eax, -28(%rbp)
	cmpl	$0, -28(%rbp)
	je	.L5183
	movl	-28(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jle	.L5183
	movq	24+ecs_os_api(%rip), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	*%rcx
	movq	-24(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-24(%rbp), %rax
	movl	-28(%rbp), %edx
	movl	%edx, 12(%rax)
	movl	-28(%rbp), %eax
	subl	-4(%rbp), %eax
	movl	%eax, %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	movslq	%eax, %rcx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	movl	-4(%rbp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	cltq
	addq	%rsi, %rax
	movq	%rcx, %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
.L5183:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE748:
	.size	ensure_buckets, .-ensure_buckets
	.type	clear_bucket, @function
clear_bucket:
.LFB749:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE749:
	.size	clear_bucket, .-clear_bucket
	.type	clear_buckets, @function
clear_buckets:
.LFB750:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L5186
.L5187:
	movl	-16(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, %rdi
	call	clear_bucket
	addl	$1, -16(%rbp)
.L5186:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L5187
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-24(%rbp), %rax
	movq	$0, (%rax)
	movq	-24(%rbp), %rax
	movl	$0, 12(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE750:
	.size	clear_buckets, .-clear_buckets
	.section	.rodata
.LC739:
	.string	"bucket_id >= 0"
	.text
	.type	ensure_bucket, @function
ensure_bucket:
.LFB751:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	testl	%eax, %eax
	jne	.L5189
	movq	-24(%rbp), %rax
	movl	$2, %esi
	movq	%rax, %rdi
	call	ensure_buckets
.L5189:
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rdx
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	get_bucket_id
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23313, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC739(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -4(%rbp)
	jns	.L5190
	leaq	__PRETTY_FUNCTION__.15277(%rip), %rcx
	movl	$23313, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC739(%rip), %rdi
	call	__assert_fail@PLT
.L5190:
	movq	-24(%rbp), %rax
	movq	(%rax), %rcx
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	addq	%rcx, %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE751:
	.size	ensure_bucket, .-ensure_bucket
	.type	add_to_bucket, @function
add_to_bucket:
.LFB752:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	leal	1(%rax), %ecx
	movq	-24(%rbp), %rdx
	movl	%ecx, 16(%rdx)
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movq	24+ecs_os_api(%rip), %rdx
	movl	-12(%rbp), %eax
	leal	0(,%rax,8), %ecx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	*%rdx
	movq	-24(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	24+ecs_os_api(%rip), %rcx
	movl	-28(%rbp), %eax
	imull	-12(%rbp), %eax
	movl	%eax, %edx
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	*%rcx
	movq	-24(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	%rax, (%rdx)
	cmpq	$0, -48(%rbp)
	je	.L5193
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movl	-28(%rbp), %eax
	imull	-16(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L5193:
	movl	-16(%rbp), %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE752:
	.size	add_to_bucket, .-add_to_bucket
	.section	.rodata
.LC740:
	.string	"bucket->count != 0"
.LC741:
	.string	"index < bucket->count"
.LC742:
	.string	"key == bucket->keys[index]"
	.text
	.type	remove_from_bucket, @function
remove_from_bucket:
.LFB753:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -48(%rbp)
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23350, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC740(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	jne	.L5196
	leaq	__PRETTY_FUNCTION__.15293(%rip), %rcx
	movl	$23350, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC740(%rip), %rdi
	call	__assert_fail@PLT
.L5196:
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -48(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23351, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC741(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -48(%rbp)
	jl	.L5197
	leaq	__PRETTY_FUNCTION__.15293(%rip), %rcx
	movl	$23351, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC741(%rip), %rdi
	call	__assert_fail@PLT
.L5197:
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	leal	-1(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -48(%rbp)
	je	.L5200
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	cmpq	%rax, -56(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23356, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC742(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	cmpq	%rax, -56(%rbp)
	je	.L5199
	leaq	__PRETTY_FUNCTION__.15293(%rip), %rcx
	movl	$23356, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC742(%rip), %rdi
	call	__assert_fail@PLT
.L5199:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	leaq	(%rax,%rdx), %rcx
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rax, %rdx
	movq	(%rcx), %rax
	movq	%rax, (%rdx)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movl	-44(%rbp), %eax
	imull	-48(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	imull	-44(%rbp), %eax
	cltq
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L5200:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE753:
	.size	remove_from_bucket, .-remove_from_bucket
	.type	get_from_bucket, @function
get_from_bucket:
.LFB754:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L5202
.L5205:
	movl	-16(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	cmpq	%rax, -32(%rbp)
	jne	.L5203
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movl	-36(%rbp), %eax
	imull	-16(%rbp), %eax
	cltq
	addq	%rdx, %rax
	jmp	.L5204
.L5203:
	addl	$1, -16(%rbp)
.L5202:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L5205
	movl	$0, %eax
.L5204:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE754:
	.size	get_from_bucket, .-get_from_bucket
	.section	.rodata
.LC743:
	.string	"bucket_count != 0"
	.align 8
.LC744:
	.string	"bucket_count > map->bucket_count"
.LC745:
	.string	"buckets != NULL"
.LC746:
	.string	"buckets != ((void *)0)"
	.text
	.type	rehash, @function
rehash:
.LFB755:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -88(%rbp)
	movl	%esi, -92(%rbp)
	cmpl	$0, -92(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23390, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC743(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -92(%rbp)
	jne	.L5207
	leaq	__PRETTY_FUNCTION__.15312(%rip), %rcx
	movl	$23390, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC743(%rip), %rdi
	call	__assert_fail@PLT
.L5207:
	movq	-88(%rbp), %rax
	movl	12(%rax), %eax
	cmpl	%eax, -92(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23391, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC744(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	movl	12(%rax), %eax
	cmpl	%eax, -92(%rbp)
	jg	.L5208
	leaq	__PRETTY_FUNCTION__.15312(%rip), %rcx
	movl	$23391, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC744(%rip), %rdi
	call	__assert_fail@PLT
.L5208:
	movq	-88(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -64(%rbp)
	movl	-92(%rbp), %edx
	movq	-88(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ensure_buckets
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23398, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC745(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L5209
	leaq	__PRETTY_FUNCTION__.15312(%rip), %rcx
	movl	$23398, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC746(%rip), %rdi
	call	__assert_fail@PLT
.L5209:
	movl	-92(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.L5210
.L5215:
	movl	-76(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	$0, -72(%rbp)
	jmp	.L5211
.L5213:
	movl	-72(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-40(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-64(%rbp), %eax
	imull	-72(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rdx
	movl	-92(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	get_bucket_id
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-76(%rbp), %eax
	je	.L5212
	movl	-60(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movl	-64(%rbp), %esi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	add_to_bucket
	movl	-72(%rbp), %ecx
	movq	-24(%rbp), %rdx
	movl	-64(%rbp), %esi
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	remove_from_bucket
	subl	$1, -68(%rbp)
	subl	$1, -72(%rbp)
.L5212:
	addl	$1, -72(%rbp)
.L5211:
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jl	.L5213
	movq	-48(%rbp), %rax
	movl	16(%rax), %eax
	testl	%eax, %eax
	jne	.L5214
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	clear_bucket
.L5214:
	subl	$1, -76(%rbp)
.L5210:
	cmpl	$0, -76(%rbp)
	jns	.L5215
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE755:
	.size	rehash, .-rehash
	.globl	_ecs_map_new
	.type	_ecs_map_new, @function
_ecs_map_new:
.LFB756:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	32+ecs_os_api(%rip), %rax
	movl	$24, %edi
	call	*%rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23442, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5217
	leaq	__PRETTY_FUNCTION__.15337(%rip), %rcx
	movl	$23442, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L5217:
	movl	-28(%rbp), %eax
	movl	%eax, %edi
	call	get_bucket_count
	movl	%eax, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movl	-20(%rbp), %edx
	movl	%edx, 8(%rax)
	movl	-12(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ensure_buckets
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE756:
	.size	_ecs_map_new, .-_ecs_map_new
	.globl	ecs_map_free
	.type	ecs_map_free, @function
ecs_map_free:
.LFB757:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5221
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	clear_buckets
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5221:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE757:
	.size	ecs_map_free, .-ecs_map_free
	.section	.rodata
.LC747:
	.string	"elem_size == map->elem_size"
	.text
	.globl	_ecs_map_get
	.type	_ecs_map_get, @function
_ecs_map_get:
.LFB758:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -40(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L5223
	movl	$0, %eax
	jmp	.L5224
.L5223:
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -28(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23474, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC747(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -28(%rbp)
	je	.L5225
	leaq	__PRETTY_FUNCTION__.15347(%rip), %rcx
	movl	$23474, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC747(%rip), %rdi
	call	__assert_fail@PLT
.L5225:
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_bucket
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L5226
	movl	$0, %eax
	jmp	.L5224
.L5226:
	movl	-28(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	get_from_bucket
.L5224:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE758:
	.size	_ecs_map_get, .-_ecs_map_get
	.globl	_ecs_map_get_ptr
	.type	_ecs_map_get_ptr, @function
_ecs_map_get_ptr:
.LFB759:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5228
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	jmp	.L5229
.L5228:
	movl	$0, %eax
.L5229:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE759:
	.size	_ecs_map_get_ptr, .-_ecs_map_get_ptr
	.globl	ecs_map_has
	.type	ecs_map_has, @function
ecs_map_has:
.LFB760:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L5231
	movl	$0, %eax
	jmp	.L5232
.L5231:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_bucket
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L5233
	movl	$0, %eax
	jmp	.L5232
.L5233:
	movq	-32(%rbp), %rcx
	movq	-8(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	get_from_bucket
	testq	%rax, %rax
	setne	%al
.L5232:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE760:
	.size	ecs_map_has, .-ecs_map_has
	.globl	_ecs_map_ensure
	.type	_ecs_map_ensure, @function
_ecs_map_ensure:
.LFB761:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movl	-28(%rbp), %ecx
	movq	-24(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L5235
	movq	-40(%rbp), %rdx
	movl	-28(%rbp), %esi
	movq	-24(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	_ecs_map_set
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23521, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5236
	leaq	__PRETTY_FUNCTION__.15365(%rip), %rcx
	movl	$23521, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L5236:
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
.L5235:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE761:
	.size	_ecs_map_ensure, .-_ecs_map_ensure
	.section	.rodata
.LC748:
	.string	"map != NULL"
.LC749:
	.string	"map != ((void *)0)"
.LC750:
	.string	"bucket != NULL"
.LC751:
	.string	"bucket != ((void *)0)"
	.text
	.globl	_ecs_map_set
	.type	_ecs_map_set, @function
_ecs_map_set:
.LFB762:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23534, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC748(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L5239
	leaq	__PRETTY_FUNCTION__.15372(%rip), %rcx
	movl	$23534, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC749(%rip), %rdi
	call	__assert_fail@PLT
.L5239:
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -44(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23535, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC747(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -44(%rbp)
	je	.L5240
	leaq	__PRETTY_FUNCTION__.15372(%rip), %rcx
	movl	$23535, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC747(%rip), %rdi
	call	__assert_fail@PLT
.L5240:
	movq	-56(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ensure_bucket
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23538, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC750(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L5241
	leaq	__PRETTY_FUNCTION__.15372(%rip), %rcx
	movl	$23538, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC751(%rip), %rdi
	call	__assert_fail@PLT
.L5241:
	movl	-44(%rbp), %edx
	movq	-56(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	get_from_bucket
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L5242
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movl	-44(%rbp), %esi
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	add_to_bucket
	movl	%eax, -32(%rbp)
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	leal	1(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, %edi
	call	get_bucket_count
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.L5243
	movl	-24(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	rehash
	movq	-56(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ensure_bucket
	movq	%rax, -16(%rbp)
	movl	-44(%rbp), %edx
	movq	-56(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	get_from_bucket
	jmp	.L5244
.L5243:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movl	-44(%rbp), %eax
	imull	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
	jmp	.L5244
.L5242:
	cmpq	$0, -64(%rbp)
	je	.L5245
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	-64(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
.L5245:
	movq	-8(%rbp), %rax
.L5244:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE762:
	.size	_ecs_map_set, .-_ecs_map_set
	.globl	ecs_map_remove
	.type	ecs_map_remove, @function
ecs_map_remove:
.LFB763:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23567, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC748(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5247
	leaq	__PRETTY_FUNCTION__.15383(%rip), %rcx
	movl	$23567, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC749(%rip), %rdi
	call	__assert_fail@PLT
.L5247:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_bucket
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5253
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L5250
.L5252:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	cmpq	%rax, -32(%rbp)
	jne	.L5251
	movq	-24(%rbp), %rax
	movl	8(%rax), %esi
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	remove_from_bucket
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	leal	-1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 16(%rax)
.L5251:
	addl	$1, -16(%rbp)
.L5250:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L5252
	jmp	.L5246
.L5253:
	nop
.L5246:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE763:
	.size	ecs_map_remove, .-ecs_map_remove
	.globl	ecs_map_count
	.type	ecs_map_count, @function
ecs_map_count:
.LFB764:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5255
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	jmp	.L5257
.L5255:
	movl	$0, %eax
.L5257:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE764:
	.size	ecs_map_count, .-ecs_map_count
	.globl	ecs_map_bucket_count
	.type	ecs_map_bucket_count, @function
ecs_map_bucket_count:
.LFB765:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5259
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	jmp	.L5261
.L5259:
	movl	$0, %eax
.L5261:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE765:
	.size	ecs_map_bucket_count, .-ecs_map_bucket_count
	.globl	ecs_map_clear
	.type	ecs_map_clear, @function
ecs_map_clear:
.LFB766:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23598, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC748(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5263
	leaq	__PRETTY_FUNCTION__.15399(%rip), %rcx
	movl	$23598, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC749(%rip), %rdi
	call	__assert_fail@PLT
.L5263:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	clear_buckets
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE766:
	.size	ecs_map_clear, .-ecs_map_clear
	.globl	ecs_map_iter
	.type	ecs_map_iter, @function
ecs_map_iter:
.LFB767:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	movq	$0, 24(%rax)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE767:
	.size	ecs_map_iter, .-ecs_map_iter
	.section	.rodata
	.align 8
.LC752:
	.string	"!elem_size || elem_size == map->elem_size"
	.text
	.globl	_ecs_map_next
	.type	_ecs_map_next, @function
_ecs_map_next:
.LFB768:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L5267
	movl	$0, %eax
	jmp	.L5268
.L5267:
	cmpl	$0, -44(%rbp)
	je	.L5269
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -44(%rbp)
	jne	.L5270
.L5269:
	movl	$1, %eax
	jmp	.L5271
.L5270:
	movl	$0, %eax
.L5271:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23624, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC752(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -44(%rbp)
	je	.L5272
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	%eax, -44(%rbp)
	je	.L5272
	leaq	__PRETTY_FUNCTION__.15410(%rip), %rcx
	movl	$23624, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC752(%rip), %rdi
	call	__assert_fail@PLT
.L5272:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -44(%rbp)
.L5277:
	cmpq	$0, -24(%rbp)
	jne	.L5273
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jge	.L5274
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movl	$0, -32(%rbp)
	movq	-40(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.L5273
.L5274:
	movl	$0, %eax
	jmp	.L5268
.L5273:
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	cmpl	%eax, -32(%rbp)
	jge	.L5275
	movl	-32(%rbp), %eax
	leal	1(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 20(%rax)
	nop
	cmpq	$0, -56(%rbp)
	je	.L5278
	jmp	.L5279
.L5275:
	movq	$0, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	16(%rax), %eax
	leal	1(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 16(%rax)
	jmp	.L5277
.L5279:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, (%rax)
.L5278:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdx
	movl	-44(%rbp), %eax
	imull	-32(%rbp), %eax
	cltq
	addq	%rdx, %rax
.L5268:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE768:
	.size	_ecs_map_next, .-_ecs_map_next
	.globl	_ecs_map_next_ptr
	.type	_ecs_map_next_ptr, @function
_ecs_map_next_ptr:
.LFB769:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5281
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	jmp	.L5282
.L5281:
	movl	$0, %eax
.L5282:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE769:
	.size	_ecs_map_next_ptr, .-_ecs_map_next_ptr
	.globl	ecs_map_grow
	.type	ecs_map_grow, @function
ecs_map_grow:
.LFB770:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23677, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC748(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5284
	leaq	__PRETTY_FUNCTION__.15426(%rip), %rcx
	movl	$23677, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC749(%rip), %rdi
	call	__assert_fail@PLT
.L5284:
	movq	-24(%rbp), %rax
	movl	16(%rax), %edx
	movl	-28(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, %edi
	call	get_bucket_count
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jle	.L5286
	movl	-4(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	rehash
.L5286:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE770:
	.size	ecs_map_grow, .-ecs_map_grow
	.globl	ecs_map_set_size
	.type	ecs_map_set_size, @function
ecs_map_set_size:
.LFB771:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23690, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC748(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5288
	leaq	__PRETTY_FUNCTION__.15433(%rip), %rcx
	movl	$23690, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC749(%rip), %rdi
	call	__assert_fail@PLT
.L5288:
	movl	-28(%rbp), %eax
	movl	%eax, %edi
	call	get_bucket_count
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.L5290
	movl	-4(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	rehash
.L5290:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE771:
	.size	ecs_map_set_size, .-ecs_map_set_size
	.globl	ecs_map_memory
	.type	ecs_map_memory, @function
ecs_map_memory:
.LFB772:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23703, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC748(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5292
	leaq	__PRETTY_FUNCTION__.15440(%rip), %rcx
	movl	$23703, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC749(%rip), %rdi
	call	__assert_fail@PLT
.L5292:
	cmpq	$0, -40(%rbp)
	je	.L5293
	movq	-24(%rbp), %rax
	movl	16(%rax), %edx
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	imull	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, (%rax)
.L5293:
	cmpq	$0, -32(%rbp)
	je	.L5297
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	leal	24(%rax), %edx
	movq	-32(%rbp), %rax
	movl	%edx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -16(%rbp)
	jmp	.L5295
.L5296:
	movq	-24(%rbp), %rax
	movq	(%rax), %rcx
	movl	-16(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %edx
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	sall	$3, %eax
	addl	%eax, %edx
	movq	-32(%rbp), %rax
	movl	%edx, (%rax)
	movq	-32(%rbp), %rax
	movl	(%rax), %edx
	movq	-24(%rbp), %rax
	movl	8(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	imull	%ecx, %eax
	addl	%eax, %edx
	movq	-32(%rbp), %rax
	movl	%edx, (%rax)
	addl	$1, -16(%rbp)
.L5295:
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L5296
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	movl	-12(%rbp), %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$3, %eax
	leal	(%rcx,%rax), %edx
	movq	-32(%rbp), %rax
	movl	%edx, (%rax)
.L5297:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE772:
	.size	ecs_map_memory, .-ecs_map_memory
	.globl	ecs_iter_init
	.type	ecs_iter_init, @function
ecs_iter_init:
.LFB773:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	testq	%rax, %rax
	jne	.L5299
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	testl	%eax, %eax
	je	.L5299
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	$7, %eax
	jg	.L5300
	movq	-8(%rbp), %rax
	leaq	1960(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 64(%rax)
	movq	-8(%rbp), %rax
	movb	$0, 2280(%rax)
	jmp	.L5299
.L5300:
	movq	16+ecs_os_api(%rip), %rax
	movq	-8(%rbp), %rdx
	movl	136(%rdx), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, 64(%rdx)
	movq	-8(%rbp), %rax
	movb	$1, 2280(%rax)
.L5299:
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	testq	%rax, %rax
	jne	.L5301
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	testl	%eax, %eax
	je	.L5301
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	$7, %eax
	jg	.L5302
	movq	-8(%rbp), %rax
	leaq	2024(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 72(%rax)
	movq	-8(%rbp), %rax
	movb	$0, 2281(%rax)
	jmp	.L5301
.L5302:
	movq	16+ecs_os_api(%rip), %rax
	movq	-8(%rbp), %rdx
	movl	136(%rdx), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, 72(%rdx)
	movq	-8(%rbp), %rax
	movb	$1, 2281(%rax)
.L5301:
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	testq	%rax, %rax
	jne	.L5303
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	testl	%eax, %eax
	je	.L5303
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	$7, %eax
	jg	.L5304
	movq	-8(%rbp), %rax
	leaq	2088(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 80(%rax)
	movq	-8(%rbp), %rax
	movb	$0, 2282(%rax)
	jmp	.L5303
.L5304:
	movq	16+ecs_os_api(%rip), %rax
	movq	-8(%rbp), %rdx
	movl	136(%rdx), %edx
	sall	$2, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, 80(%rdx)
	movq	-8(%rbp), %rax
	movb	$1, 2282(%rax)
.L5303:
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	testq	%rax, %rax
	jne	.L5305
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	testl	%eax, %eax
	je	.L5305
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	$7, %eax
	jg	.L5306
	movq	-8(%rbp), %rax
	leaq	2120(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 88(%rax)
	movq	-8(%rbp), %rax
	movb	$0, 2283(%rax)
	jmp	.L5305
.L5306:
	movq	16+ecs_os_api(%rip), %rax
	movq	-8(%rbp), %rdx
	movl	136(%rdx), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, 88(%rdx)
	movq	-8(%rbp), %rax
	movb	$1, 2283(%rax)
.L5305:
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	testq	%rax, %rax
	jne	.L5307
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	testl	%eax, %eax
	je	.L5307
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	$7, %eax
	jg	.L5308
	movq	-8(%rbp), %rax
	leaq	2184(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 96(%rax)
	movq	-8(%rbp), %rax
	movb	$0, 2284(%rax)
	jmp	.L5307
.L5308:
	movq	16+ecs_os_api(%rip), %rax
	movq	-8(%rbp), %rdx
	movl	136(%rdx), %edx
	sall	$2, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, 96(%rdx)
	movq	-8(%rbp), %rax
	movb	$1, 2284(%rax)
.L5307:
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	testq	%rax, %rax
	jne	.L5309
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	testl	%eax, %eax
	je	.L5309
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	$7, %eax
	jg	.L5310
	movq	-8(%rbp), %rax
	leaq	2216(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, 104(%rax)
	movq	-8(%rbp), %rax
	movb	$0, 2285(%rax)
	jmp	.L5309
.L5310:
	movq	16+ecs_os_api(%rip), %rax
	movq	-8(%rbp), %rdx
	movl	136(%rdx), %edx
	sall	$3, %edx
	movl	%edx, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, 104(%rdx)
	movq	-8(%rbp), %rax
	movb	$1, 2285(%rax)
.L5309:
	movq	-8(%rbp), %rax
	movb	$1, 212(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE773:
	.size	ecs_iter_init, .-ecs_iter_init
	.section	.rodata
.LC753:
	.string	"it->is_valid == true"
.LC754:
	.string	"it->is_valid == 1"
	.text
	.globl	ecs_iter_fini
	.type	ecs_iter_fini, @function
ecs_iter_fini:
.LFB774:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23757, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC753(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5312
	leaq	__PRETTY_FUNCTION__.15453(%rip), %rcx
	movl	$23757, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC754(%rip), %rdi
	call	__assert_fail@PLT
.L5312:
	movq	-8(%rbp), %rax
	movb	$0, 212(%rax)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	testq	%rax, %rax
	je	.L5313
	movq	-8(%rbp), %rax
	movzbl	2280(%rax), %eax
	testb	%al, %al
	je	.L5313
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5313:
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	testq	%rax, %rax
	je	.L5314
	movq	-8(%rbp), %rax
	movzbl	2281(%rax), %eax
	testb	%al, %al
	je	.L5314
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5314:
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	testq	%rax, %rax
	je	.L5315
	movq	-8(%rbp), %rax
	movzbl	2282(%rax), %eax
	testb	%al, %al
	je	.L5315
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5315:
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	testq	%rax, %rax
	je	.L5316
	movq	-8(%rbp), %rax
	movzbl	2283(%rax), %eax
	testb	%al, %al
	je	.L5316
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5316:
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	testq	%rax, %rax
	je	.L5317
	movq	-8(%rbp), %rax
	movzbl	2284(%rax), %eax
	testb	%al, %al
	je	.L5317
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5317:
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	testq	%rax, %rax
	je	.L5319
	movq	-8(%rbp), %rax
	movzbl	2285(%rax), %eax
	testb	%al, %al
	je	.L5319
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5319:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE774:
	.size	ecs_iter_fini, .-ecs_iter_fini
	.section	.rodata
.LC755:
	.string	"it->is_valid"
	.align 8
.LC756:
	.string	"!size || ecs_term_size(it, term) == size"
	.text
	.globl	ecs_term_w_size
	.type	ecs_term_w_size, @function
ecs_term_w_size:
.LFB775:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23775, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5321
	leaq	__PRETTY_FUNCTION__.15459(%rip), %rcx
	movl	$23775, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5321:
	cmpq	$0, -16(%rbp)
	je	.L5322
	movl	-20(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_term_size
	cmpq	%rax, -16(%rbp)
	jne	.L5323
.L5322:
	movl	$1, %eax
	jmp	.L5324
.L5323:
	movl	$0, %eax
.L5324:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23776, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC756(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	je	.L5325
	movl	-20(%rbp), %edx
	movq	-8(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_term_size
	cmpq	%rax, -16(%rbp)
	je	.L5325
	leaq	__PRETTY_FUNCTION__.15459(%rip), %rcx
	movl	$23776, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC756(%rip), %rdi
	call	__assert_fail@PLT
.L5325:
	cmpl	$0, -20(%rbp)
	jne	.L5326
	movq	-8(%rbp), %rax
	movq	152(%rax), %rax
	jmp	.L5327
.L5326:
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	testq	%rax, %rax
	jne	.L5328
	movl	$0, %eax
	jmp	.L5327
.L5328:
	movq	-8(%rbp), %rax
	movq	104(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	subq	$8, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
.L5327:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE775:
	.size	ecs_term_w_size, .-ecs_term_w_size
	.section	.rodata
.LC757:
	.string	"term > 0"
	.text
	.globl	ecs_term_is_owned
	.type	ecs_term_is_owned, @function
ecs_term_is_owned:
.LFB776:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23796, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5330
	leaq	__PRETTY_FUNCTION__.15464(%rip), %rcx
	movl	$23796, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5330:
	cmpl	$0, -12(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23797, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC757(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -12(%rbp)
	jg	.L5331
	leaq	__PRETTY_FUNCTION__.15464(%rip), %rcx
	movl	$23797, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC757(%rip), %rdi
	call	__assert_fail@PLT
.L5331:
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	testq	%rax, %rax
	je	.L5332
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	subq	$8, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L5333
.L5332:
	movl	$1, %eax
	jmp	.L5334
.L5333:
	movl	$0, %eax
.L5334:
	andl	$1, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE776:
	.size	ecs_term_is_owned, .-ecs_term_is_owned
	.section	.rodata
.LC758:
	.string	"term_index > 0"
	.text
	.globl	ecs_term_is_readonly
	.type	ecs_term_is_readonly, @function
ecs_term_is_readonly:
.LFB777:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	-40(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23805, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5337
	leaq	__PRETTY_FUNCTION__.15469(%rip), %rcx
	movl	$23805, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5337:
	cmpl	$0, -44(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23806, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC758(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -44(%rbp)
	jg	.L5338
	leaq	__PRETTY_FUNCTION__.15469(%rip), %rcx
	movl	$23806, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC758(%rip), %rdi
	call	__assert_fail@PLT
.L5338:
	movq	-40(%rbp), %rax
	movq	120(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23811, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5339
	leaq	__PRETTY_FUNCTION__.15469(%rip), %rcx
	movl	$23811, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L5339:
	movq	-40(%rbp), %rax
	movq	120(%rax), %rax
	movq	(%rax), %rcx
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	subq	$192, %rax
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23815, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC489(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L5340
	leaq	__PRETTY_FUNCTION__.15469(%rip), %rcx
	movl	$23815, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC490(%rip), %rdi
	call	__assert_fail@PLT
.L5340:
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$2, %eax
	jne	.L5341
	movl	$1, %eax
	jmp	.L5342
.L5341:
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jne	.L5343
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L5344
	movl	$1, %eax
	jmp	.L5342
.L5344:
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	cmpb	$1, %al
	je	.L5343
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	testb	%al, %al
	je	.L5343
	movl	$1, %eax
	jmp	.L5342
.L5343:
	movl	$0, %eax
.L5342:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE777:
	.size	ecs_term_is_readonly, .-ecs_term_is_readonly
	.section	.rodata
.LC759:
	.string	"it->columns != NULL"
.LC760:
	.string	"it->columns != ((void *)0)"
	.text
	.globl	ecs_term_is_set
	.type	ecs_term_is_set, @function
ecs_term_is_set:
.LFB778:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23842, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5346
	leaq	__PRETTY_FUNCTION__.15477(%rip), %rcx
	movl	$23842, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5346:
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23843, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC759(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	testq	%rax, %rax
	jne	.L5347
	leaq	__PRETTY_FUNCTION__.15477(%rip), %rcx
	movl	$23843, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC760(%rip), %rdi
	call	__assert_fail@PLT
.L5347:
	cmpl	$0, -12(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23844, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC757(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -12(%rbp)
	jg	.L5348
	leaq	__PRETTY_FUNCTION__.15477(%rip), %rcx
	movl	$23844, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC757(%rip), %rdi
	call	__assert_fail@PLT
.L5348:
	movq	-8(%rbp), %rax
	movq	80(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	subq	$4, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	setne	%al
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE778:
	.size	ecs_term_is_set, .-ecs_term_is_set
	.section	.rodata
.LC761:
	.string	"term <= it->column_count"
	.text
	.globl	ecs_term_source
	.type	ecs_term_source, @function
ecs_term_source:
.LFB779:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23853, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5351
	leaq	__PRETTY_FUNCTION__.15482(%rip), %rcx
	movl	$23853, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5351:
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	%eax, -12(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23854, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC761(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jle	.L5352
	leaq	__PRETTY_FUNCTION__.15482(%rip), %rcx
	movl	$23854, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC761(%rip), %rdi
	call	__assert_fail@PLT
.L5352:
	cmpl	$0, -12(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23855, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC757(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -12(%rbp)
	jg	.L5353
	leaq	__PRETTY_FUNCTION__.15482(%rip), %rcx
	movl	$23855, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC757(%rip), %rdi
	call	__assert_fail@PLT
.L5353:
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	testq	%rax, %rax
	jne	.L5354
	movl	$0, %eax
	jmp	.L5355
.L5354:
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	subq	$8, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
.L5355:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE779:
	.size	ecs_term_source, .-ecs_term_source
	.section	.rodata
.LC762:
	.string	"it->ids != NULL"
.LC763:
	.string	"it->ids != ((void *)0)"
	.text
	.globl	ecs_term_id
	.type	ecs_term_id, @function
ecs_term_id:
.LFB780:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23868, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5357
	leaq	__PRETTY_FUNCTION__.15487(%rip), %rcx
	movl	$23868, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5357:
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	%eax, -12(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23869, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC382(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jle	.L5358
	leaq	__PRETTY_FUNCTION__.15487(%rip), %rcx
	movl	$23869, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC382(%rip), %rdi
	call	__assert_fail@PLT
.L5358:
	cmpl	$0, -12(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23870, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC383(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -12(%rbp)
	jg	.L5359
	leaq	__PRETTY_FUNCTION__.15487(%rip), %rcx
	movl	$23870, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC383(%rip), %rdi
	call	__assert_fail@PLT
.L5359:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23871, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC762(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	testq	%rax, %rax
	jne	.L5360
	leaq	__PRETTY_FUNCTION__.15487(%rip), %rcx
	movl	$23871, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC763(%rip), %rdi
	call	__assert_fail@PLT
.L5360:
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	subq	$8, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE780:
	.size	ecs_term_id, .-ecs_term_id
	.globl	ecs_term_size
	.type	ecs_term_size, @function
ecs_term_size:
.LFB781:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23879, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5363
	leaq	__PRETTY_FUNCTION__.15492(%rip), %rcx
	movl	$23879, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5363:
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	%eax, -12(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23880, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC382(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	136(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jle	.L5364
	leaq	__PRETTY_FUNCTION__.15492(%rip), %rcx
	movl	$23880, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC382(%rip), %rdi
	call	__assert_fail@PLT
.L5364:
	movl	-12(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23881, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC300(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -12(%rbp)
	jns	.L5365
	leaq	__PRETTY_FUNCTION__.15492(%rip), %rcx
	movl	$23881, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC300(%rip), %rdi
	call	__assert_fail@PLT
.L5365:
	cmpl	$0, -12(%rbp)
	jne	.L5366
	movl	$8, %eax
	jmp	.L5367
.L5366:
	movq	-8(%rbp), %rax
	movq	96(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rdx
	salq	$2, %rdx
	subq	$4, %rdx
	addq	%rdx, %rax
	movl	(%rax), %eax
	cltq
	movq	%rax, %rdi
	call	flecs_to_size_t
.L5367:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE781:
	.size	ecs_term_size, .-ecs_term_size
	.globl	ecs_iter_table
	.type	ecs_iter_table, @function
ecs_iter_table:
.LFB782:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23893, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5369
	leaq	__PRETTY_FUNCTION__.15496(%rip), %rcx
	movl	$23893, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5369:
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE782:
	.size	ecs_iter_table, .-ecs_iter_table
	.globl	ecs_iter_type
	.type	ecs_iter_type, @function
ecs_iter_type:
.LFB783:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23900, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5372
	leaq	__PRETTY_FUNCTION__.15500(%rip), %rcx
	movl	$23900, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5372:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_iter_table
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23907, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5373
	leaq	__PRETTY_FUNCTION__.15500(%rip), %rcx
	movl	$23907, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L5373:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE783:
	.size	ecs_iter_type, .-ecs_iter_type
	.globl	ecs_iter_find_column
	.type	ecs_iter_find_column, @function
ecs_iter_find_column:
.LFB784:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23915, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5376
	leaq	__PRETTY_FUNCTION__.15506(%rip), %rcx
	movl	$23915, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5376:
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23916, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC612(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	jne	.L5377
	leaq	__PRETTY_FUNCTION__.15506(%rip), %rcx
	movl	$23916, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC613(%rip), %rdi
	call	__assert_fail@PLT
.L5377:
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	8(%rax), %rax
	movq	-16(%rbp), %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE784:
	.size	ecs_iter_find_column, .-ecs_iter_find_column
	.section	.rodata
	.align 8
.LC764:
	.string	"column_index < ecs_vector_count(table->type)"
	.align 8
.LC765:
	.string	"!size || (ecs_size_t)size == column->size"
	.text
	.globl	ecs_iter_column_w_size
	.type	ecs_iter_column_w_size, @function
ecs_iter_column_w_size:
.LFB785:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	movq	-40(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23925, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5380
	leaq	__PRETTY_FUNCTION__.15512(%rip), %rcx
	movl	$23925, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5380:
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23926, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC612(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	jne	.L5381
	leaq	__PRETTY_FUNCTION__.15512(%rip), %rcx
	movl	$23926, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC613(%rip), %rdi
	call	__assert_fail@PLT
.L5381:
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -52(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23930, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC764(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -52(%rbp)
	jl	.L5382
	leaq	__PRETTY_FUNCTION__.15512(%rip), %rcx
	movl	$23930, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC764(%rip), %rdi
	call	__assert_fail@PLT
.L5382:
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -52(%rbp)
	jl	.L5383
	movl	$0, %eax
	jmp	.L5384
.L5383:
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-52(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L5385
	movq	-48(%rbp), %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movzwl	8(%rax), %eax
	cwtl
	cmpl	%eax, %edx
	jne	.L5386
.L5385:
	movl	$1, %eax
	jmp	.L5387
.L5386:
	movl	$0, %eax
.L5387:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23939, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC765(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	je	.L5388
	movq	-48(%rbp), %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movzwl	8(%rax), %eax
	cwtl
	cmpl	%eax, %edx
	je	.L5388
	leaq	__PRETTY_FUNCTION__.15512(%rip), %rcx
	movl	$23939, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC765(%rip), %rdi
	call	__assert_fail@PLT
.L5388:
	movq	-8(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-8(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %ecx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
.L5384:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE785:
	.size	ecs_iter_column_w_size, .-ecs_iter_column_w_size
	.globl	ecs_iter_column_size
	.type	ecs_iter_column_size, @function
ecs_iter_column_size:
.LFB786:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	-40(%rbp), %rax
	movzbl	212(%rax), %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23948, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC755(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movzbl	212(%rax), %eax
	testb	%al, %al
	jne	.L5390
	leaq	__PRETTY_FUNCTION__.15520(%rip), %rcx
	movl	$23948, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC755(%rip), %rdi
	call	__assert_fail@PLT
.L5390:
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23949, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC612(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	testq	%rax, %rax
	jne	.L5391
	leaq	__PRETTY_FUNCTION__.15520(%rip), %rcx
	movl	$23949, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC613(%rip), %rdi
	call	__assert_fail@PLT
.L5391:
	movq	-40(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -44(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23952, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC764(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, -44(%rbp)
	jl	.L5392
	leaq	__PRETTY_FUNCTION__.15520(%rip), %rcx
	movl	$23952, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC764(%rip), %rdi
	call	__assert_fail@PLT
.L5392:
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -44(%rbp)
	jl	.L5393
	movl	$0, %eax
	jmp	.L5394
.L5393:
	movq	-40(%rbp), %rax
	movq	144(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-44(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzwl	8(%rax), %eax
	movswq	%ax, %rax
	movq	%rax, %rdi
	call	flecs_to_size_t
.L5394:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE786:
	.size	ecs_iter_column_size, .-ecs_iter_column_size
	.type	count_events, @function
count_events:
.LFB787:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movl	$0, -4(%rbp)
	jmp	.L5396
.L5399:
	movl	-4(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L5401
	addl	$1, -4(%rbp)
.L5396:
	cmpl	$7, -4(%rbp)
	jle	.L5399
	jmp	.L5398
.L5401:
	nop
.L5398:
	movl	-4(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE787:
	.size	count_events, .-count_events
	.section	.rodata
.LC766:
	.string	"t != NULL"
.LC767:
	.string	"t != ((void *)0)"
	.text
	.type	register_id_trigger, @function
register_id_trigger:
.LFB788:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	320(%rax), %rdx
	movq	-24(%rbp), %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_map_ensure
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$23986, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC766(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5403
	leaq	__PRETTY_FUNCTION__.15536(%rip), %rcx
	movl	$23986, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC767(%rip), %rdi
	call	__assert_fail@PLT
.L5403:
	movq	-8(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, (%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE788:
	.size	register_id_trigger, .-register_id_trigger
	.type	unregister_id_trigger, @function
unregister_id_trigger:
.LFB789:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	320(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_remove
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_map_count
	testl	%eax, %eax
	jne	.L5405
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movl	$0, %eax
	jmp	.L5406
.L5405:
	movq	-8(%rbp), %rax
.L5406:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE789:
	.size	unregister_id_trigger, .-unregister_id_trigger
	.section	.rodata
.LC768:
	.string	"trigger != NULL"
.LC769:
	.string	"trigger != ((void *)0)"
.LC770:
	.string	"triggers != NULL"
.LC771:
	.string	"triggers != ((void *)0)"
.LC772:
	.string	"idt != NULL"
.LC773:
	.string	"idt != ((void *)0)"
.LC774:
	.string	"set != NULL"
.LC775:
	.string	"set != ((void *)0)"
	.text
	.type	register_trigger, @function
register_trigger:
.LFB790:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24010, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L5408
	leaq	__PRETTY_FUNCTION__.15545(%rip), %rcx
	movl	$24010, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5408:
	cmpq	$0, -96(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24011, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC768(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -96(%rbp)
	jne	.L5409
	leaq	__PRETTY_FUNCTION__.15545(%rip), %rcx
	movl	$24011, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC769(%rip), %rdi
	call	__assert_fail@PLT
.L5409:
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24014, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC770(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L5410
	leaq	__PRETTY_FUNCTION__.15545(%rip), %rcx
	movl	$24014, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC771(%rip), %rdi
	call	__assert_fail@PLT
.L5410:
	movq	-96(%rbp), %rax
	movq	(%rax), %rdx
	movq	-64(%rbp), %rax
	movl	$32, %esi
	movq	%rax, %rdi
	call	_ecs_map_ensure
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24018, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC772(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L5411
	leaq	__PRETTY_FUNCTION__.15545(%rip), %rcx
	movl	$24018, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC773(%rip), %rdi
	call	__assert_fail@PLT
.L5411:
	movl	$0, -76(%rbp)
	jmp	.L5412
.L5420:
	movq	$0, -72(%rbp)
	movq	-96(%rbp), %rax
	movl	-76(%rbp), %edx
	movslq	%edx, %rdx
	addq	$24, %rdx
	movq	(%rax,%rdx,8), %rax
	movl	$286, %edx
	cmpq	%rdx, %rax
	jne	.L5413
	movq	-56(%rbp), %rax
	movq	%rax, -72(%rbp)
	jmp	.L5414
.L5413:
	movq	-96(%rbp), %rax
	movl	-76(%rbp), %edx
	movslq	%edx, %rdx
	addq	$24, %rdx
	movq	(%rax,%rdx,8), %rax
	movl	$287, %edx
	cmpq	%rdx, %rax
	jne	.L5415
	movq	-56(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -72(%rbp)
	jmp	.L5414
.L5415:
	movq	-96(%rbp), %rax
	movl	-76(%rbp), %edx
	movslq	%edx, %rdx
	addq	$24, %rdx
	movq	(%rax,%rdx,8), %rax
	movl	$288, %edx
	cmpq	%rdx, %rax
	jne	.L5416
	movq	-56(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -72(%rbp)
	jmp	.L5414
.L5416:
	movq	-96(%rbp), %rax
	movl	-76(%rbp), %edx
	movslq	%edx, %rdx
	addq	$24, %rdx
	movq	(%rax,%rdx,8), %rax
	movl	$289, %edx
	cmpq	%rdx, %rax
	jne	.L5417
	movq	-56(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -72(%rbp)
	jmp	.L5414
.L5417:
	movl	$0, %ecx
	movl	$24033, %edx
	leaq	.LC74(%rip), %rsi
	movl	$2, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L5414:
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24036, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC774(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L5418
	leaq	__PRETTY_FUNCTION__.15545(%rip), %rcx
	movl	$24036, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC775(%rip), %rdi
	call	__assert_fail@PLT
.L5418:
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L5419
	movl	$1, %edx
	movl	$8, %esi
	movl	$8, %edi
	call	_ecs_map_new
	movq	-72(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	$0, -48(%rbp)
	movq	$0, -40(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movl	$2, -48(%rbp)
	movq	-96(%rbp), %rax
	movl	-76(%rbp), %edx
	movslq	%edx, %rdx
	addq	$24, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	%rax, -16(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rcx
	leaq	-48(%rbp), %rdx
	movq	-88(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_notify_tables
.L5419:
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	register_id_trigger
	addl	$1, -76(%rbp)
.L5412:
	movq	-96(%rbp), %rax
	movl	256(%rax), %eax
	cmpl	%eax, -76(%rbp)
	jl	.L5420
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5421
	call	__stack_chk_fail@PLT
.L5421:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE790:
	.size	register_trigger, .-register_trigger
	.type	unregister_trigger, @function
unregister_trigger:
.LFB791:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24057, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L5423
	leaq	__PRETTY_FUNCTION__.15558(%rip), %rcx
	movl	$24057, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5423:
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24058, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC768(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L5424
	leaq	__PRETTY_FUNCTION__.15558(%rip), %rcx
	movl	$24058, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC769(%rip), %rdi
	call	__assert_fail@PLT
.L5424:
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24061, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC770(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L5425
	leaq	__PRETTY_FUNCTION__.15558(%rip), %rcx
	movl	$24061, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC771(%rip), %rdi
	call	__assert_fail@PLT
.L5425:
	movq	-48(%rbp), %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movl	$32, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5436
	movl	$0, -28(%rbp)
	jmp	.L5428
.L5435:
	movq	$0, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$24, %rdx
	movq	(%rax,%rdx,8), %rax
	movl	$286, %edx
	cmpq	%rdx, %rax
	jne	.L5429
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	.L5430
.L5429:
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$24, %rdx
	movq	(%rax,%rdx,8), %rax
	movl	$287, %edx
	cmpq	%rdx, %rax
	jne	.L5431
	movq	-8(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	jmp	.L5430
.L5431:
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$24, %rdx
	movq	(%rax,%rdx,8), %rax
	movl	$288, %edx
	cmpq	%rdx, %rax
	jne	.L5432
	movq	-8(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	jmp	.L5430
.L5432:
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	addq	$24, %rdx
	movq	(%rax,%rdx,8), %rax
	movl	$289, %edx
	cmpq	%rdx, %rax
	jne	.L5433
	movq	-8(%rbp), %rax
	addq	$24, %rax
	movq	%rax, -24(%rbp)
	jmp	.L5430
.L5433:
	movl	$0, %ecx
	movl	$24082, %edx
	leaq	.LC74(%rip), %rsi
	movl	$2, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L5430:
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L5437
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	unregister_id_trigger
	movq	-24(%rbp), %rdx
	movq	%rax, (%rdx)
	addl	$1, -28(%rbp)
.L5428:
	movq	-48(%rbp), %rax
	movl	256(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L5435
	movq	-48(%rbp), %rax
	movq	320(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_remove
	jmp	.L5422
.L5436:
	nop
	jmp	.L5422
.L5437:
	nop
.L5422:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE791:
	.size	unregister_trigger, .-unregister_trigger
	.globl	flecs_triggers_get
	.type	flecs_triggers_get, @function
flecs_triggers_get:
.LFB792:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24099, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L5439
	leaq	__PRETTY_FUNCTION__.15571(%rip), %rcx
	movl	$24099, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5439:
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24100, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC516(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L5440
	leaq	__PRETTY_FUNCTION__.15571(%rip), %rcx
	movl	$24100, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC516(%rip), %rdi
	call	__assert_fail@PLT
.L5440:
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24103, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC770(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L5441
	leaq	__PRETTY_FUNCTION__.15571(%rip), %rcx
	movl	$24103, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC771(%rip), %rdi
	call	__assert_fail@PLT
.L5441:
	movq	-48(%rbp), %rdx
	movq	-16(%rbp), %rax
	movl	$32, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L5442
	movl	$0, %eax
	jmp	.L5443
.L5442:
	movq	$0, -24(%rbp)
	movl	$286, %eax
	cmpq	%rax, -56(%rbp)
	jne	.L5444
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.L5445
.L5444:
	movl	$287, %eax
	cmpq	%rax, -56(%rbp)
	jne	.L5446
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.L5445
.L5446:
	movl	$288, %eax
	cmpq	%rax, -56(%rbp)
	jne	.L5447
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.L5445
.L5447:
	movl	$289, %eax
	cmpq	%rax, -56(%rbp)
	jne	.L5445
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
.L5445:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_map_count
	testl	%eax, %eax
	je	.L5448
	movq	-24(%rbp), %rax
	jmp	.L5443
.L5448:
	movl	$0, %eax
.L5443:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE792:
	.size	flecs_triggers_get, .-flecs_triggers_get
	.type	notify_trigger_set, @function
notify_trigger_set:
.LFB793:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$2472, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -2440(%rbp)
	movq	%rsi, -2448(%rbp)
	movq	%rdx, -2456(%rbp)
	movq	%rcx, -2464(%rbp)
	movq	%r8, -2472(%rbp)
	movq	%r9, -2480(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -2464(%rbp)
	je	.L5464
	movq	-2440(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24144, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-2440(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5452
	leaq	__PRETTY_FUNCTION__.15585(%rip), %rcx
	movl	$24144, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L5452:
	movq	-2480(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -2416(%rbp)
	cmpq	$0, -2416(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24147, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC242(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2416(%rbp)
	jne	.L5453
	leaq	__PRETTY_FUNCTION__.15585(%rip), %rcx
	movl	$24147, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC243(%rip), %rdi
	call	__assert_fail@PLT
.L5453:
	cmpl	$0, 24(%rbp)
	setg	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24148, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC139(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, 24(%rbp)
	jg	.L5454
	leaq	__PRETTY_FUNCTION__.15585(%rip), %rcx
	movl	$24148, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC139(%rip), %rdi
	call	__assert_fail@PLT
.L5454:
	movq	-2480(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, 16(%rbp)
	setl	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24149, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC244(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-2480(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, 16(%rbp)
	jl	.L5455
	leaq	__PRETTY_FUNCTION__.15585(%rip), %rcx
	movl	$24149, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC244(%rip), %rdi
	call	__assert_fail@PLT
.L5455:
	movl	16(%rbp), %edx
	movl	24(%rbp), %eax
	leal	(%rdx,%rax), %ebx
	movq	-2480(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24150, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC245(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	16(%rbp), %edx
	movl	24(%rbp), %eax
	leal	(%rdx,%rax), %ebx
	movq	-2480(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	jle	.L5456
	leaq	__PRETTY_FUNCTION__.15585(%rip), %rcx
	movl	$24150, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC245(%rip), %rdi
	call	__assert_fail@PLT
.L5456:
	movl	16(%rbp), %eax
	sall	$3, %eax
	movslq	%eax, %rdx
	movq	-2416(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -2416(%rbp)
	movq	-2472(%rbp), %rax
	movq	8(%rax), %rax
	movq	-2448(%rbp), %rdx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -2428(%rbp)
	movl	-2428(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24155, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC300(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -2428(%rbp)
	jns	.L5457
	leaq	__PRETTY_FUNCTION__.15585(%rip), %rcx
	movl	$24155, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC300(%rip), %rdi
	call	__assert_fail@PLT
.L5457:
	addl	$1, -2428(%rbp)
	movq	-2448(%rbp), %rax
	movq	%rax, -2336(%rbp)
	movl	-2428(%rbp), %eax
	movl	%eax, -2344(%rbp)
	movl	$0, -2340(%rbp)
	movq	-2472(%rbp), %rax
	movl	20(%rax), %eax
	cmpl	%eax, -2428(%rbp)
	jle	.L5458
	movl	$0, -2344(%rbp)
	jmp	.L5459
.L5458:
	movq	-2480(%rbp), %rax
	movq	16(%rax), %rax
	movl	-2428(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	subq	$16, %rdx
	addq	%rdx, %rax
	movq	%rax, -2408(%rbp)
	movq	-2408(%rbp), %rax
	movzwl	8(%rax), %eax
	testw	%ax, %ax
	jne	.L5459
	movl	$0, -2344(%rbp)
.L5459:
	movq	$0, -2424(%rbp)
	movl	-2344(%rbp), %eax
	testl	%eax, %eax
	je	.L5460
	cmpq	$0, -2480(%rbp)
	je	.L5460
	movq	-2480(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L5460
	movq	-2480(%rbp), %rax
	movq	16(%rax), %rax
	movl	-2428(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	subq	$16, %rdx
	addq	%rdx, %rax
	movq	%rax, -2400(%rbp)
	movq	-2400(%rbp), %rax
	movzwl	10(%rax), %eax
	movl	$16, %edx
	cmpw	$16, %ax
	cmovl	%edx, %eax
	movswl	%ax, %edx
	movq	-2400(%rbp), %rax
	movzwl	8(%rax), %eax
	movswl	%ax, %esi
	movq	-2400(%rbp), %rax
	movq	(%rax), %rax
	movl	16(%rbp), %ecx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -2424(%rbp)
	movq	-2400(%rbp), %rax
	movzwl	8(%rax), %eax
	cwtl
	movl	%eax, -2340(%rbp)
.L5460:
	movq	-2448(%rbp), %rdx
	movq	-2440(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_type_from_id
	movq	%rax, -2328(%rbp)
	leaq	-2320(%rbp), %rdx
	movl	$0, %eax
	movl	$286, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-2440(%rbp), %rax
	movq	%rax, -2320(%rbp)
	movq	-2456(%rbp), %rax
	movq	%rax, -2296(%rbp)
	movq	-2448(%rbp), %rax
	movq	%rax, -2288(%rbp)
	movq	-2472(%rbp), %rax
	movq	%rax, -2272(%rbp)
	leaq	-2336(%rbp), %rax
	movq	%rax, -2256(%rbp)
	leaq	-2328(%rbp), %rax
	movq	%rax, -2248(%rbp)
	leaq	-2344(%rbp), %rax
	movq	%rax, -2240(%rbp)
	leaq	-2340(%rbp), %rax
	movq	%rax, -2224(%rbp)
	leaq	-2424(%rbp), %rax
	movq	%rax, -2216(%rbp)
	movl	$1, -2192(%rbp)
	movl	$1, -2184(%rbp)
	movq	-2480(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -2176(%rbp)
	movq	-2416(%rbp), %rax
	movq	%rax, -2168(%rbp)
	movl	16(%rbp), %eax
	movl	%eax, -2120(%rbp)
	movl	24(%rbp), %eax
	movl	%eax, -2116(%rbp)
	movb	$1, -2108(%rbp)
	leaq	-2384(%rbp), %rax
	movq	-2464(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L5461
.L5462:
	movq	-2392(%rbp), %rax
	movq	304(%rax), %rax
	movq	%rax, -2304(%rbp)
	movq	-2392(%rbp), %rax
	movq	312(%rax), %rax
	movq	%rax, -2280(%rbp)
	movq	-2392(%rbp), %rax
	movq	272(%rax), %rax
	movq	%rax, -2152(%rbp)
	movq	-2392(%rbp), %rax
	movq	280(%rax), %rax
	movq	%rax, -2144(%rbp)
	movq	-2392(%rbp), %rax
	movl	184(%rax), %eax
	movl	%eax, -2180(%rbp)
	movq	-2392(%rbp), %rax
	movq	264(%rax), %rdx
	leaq	-2320(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5461:
	leaq	-2384(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	_ecs_map_next_ptr
	movq	%rax, -2392(%rbp)
	cmpq	$0, -2392(%rbp)
	jne	.L5462
	jmp	.L5449
.L5464:
	nop
.L5449:
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5463
	call	__stack_chk_fail@PLT
.L5463:
	addq	$2472, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE793:
	.size	notify_trigger_set, .-notify_trigger_set
	.globl	flecs_triggers_notify
	.type	flecs_triggers_notify, @function
flecs_triggers_notify:
.LFB794:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movl	%r9d, -60(%rbp)
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_triggers_get
	movq	%rax, %rdi
	movq	-56(%rbp), %r9
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	16(%rbp), %ecx
	pushq	%rcx
	movl	-60(%rbp), %ecx
	pushq	%rcx
	movq	%rdi, %rcx
	movq	%rax, %rdi
	call	notify_trigger_set
	addq	$16, %rsp
	movabsq	$-72057594037927936, %rax
	andq	-32(%rbp), %rax
	movabsq	$-432345564227567616, %rdx
	cmpq	%rdx, %rax
	jne	.L5466
	movq	-32(%rbp), %rax
	shrq	$32, %rax
	movl	%eax, %eax
	andl	$16777215, %eax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	movq	%rdx, %rcx
	orq	%rax, %rcx
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_triggers_get
	movq	%rax, %rdi
	movq	-56(%rbp), %r9
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	16(%rbp), %ecx
	pushq	%rcx
	movl	-60(%rbp), %ecx
	pushq	%rcx
	movq	%rdi, %rcx
	movq	%rax, %rdi
	call	notify_trigger_set
	addq	$16, %rsp
	movl	$266, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	movq	%rdx, %rcx
	orq	%rax, %rcx
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_triggers_get
	movq	%rax, %rdi
	movq	-56(%rbp), %r9
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	16(%rbp), %ecx
	pushq	%rcx
	movl	-60(%rbp), %ecx
	pushq	%rcx
	movq	%rdi, %rcx
	movq	%rax, %rdi
	call	notify_trigger_set
	addq	$16, %rsp
	movl	$266, %eax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	movq	%rdx, %rcx
	orq	%rax, %rcx
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_triggers_get
	movq	%rax, %rdi
	movq	-56(%rbp), %r9
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	16(%rbp), %ecx
	pushq	%rcx
	movl	-60(%rbp), %ecx
	pushq	%rcx
	movq	%rdi, %rcx
	movq	%rax, %rdi
	call	notify_trigger_set
	addq	$16, %rsp
	jmp	.L5468
.L5466:
	movl	$266, %ecx
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_triggers_get
	movq	%rax, %rdi
	movq	-56(%rbp), %r9
	movq	-48(%rbp), %r8
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	16(%rbp), %ecx
	pushq	%rcx
	movl	-60(%rbp), %ecx
	pushq	%rcx
	movq	%rdi, %rcx
	movq	%rax, %rdi
	call	notify_trigger_set
	addq	$16, %rsp
.L5468:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE794:
	.size	flecs_triggers_notify, .-flecs_triggers_notify
	.section	.rodata
.LC776:
	.string	"desc->callback != NULL"
.LC777:
	.string	"desc->callback != ((void *)0)"
	.align 8
.LC778:
	.string	"invalid empty trigger expression"
	.align 8
.LC779:
	.string	"too many terms in trigger expression (expected 1)"
	.align 8
.LC780:
	.string	"term.args[0].entity == EcsThis"
.LC781:
	.string	"trigger->event_count != 0"
.LC782:
	.string	"comp->trigger != NULL"
.LC783:
	.string	"comp->trigger != ((void *)0)"
	.text
	.globl	ecs_trigger_init
	.type	ecs_trigger_init, @function
ecs_trigger_init:
.LFB795:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$488, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -296(%rbp)
	movq	%rsi, -304(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -296(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24253, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -296(%rbp)
	jne	.L5470
	leaq	__PRETTY_FUNCTION__.15616(%rip), %rcx
	movl	$24253, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5470:
	cmpq	$0, -304(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24254, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC262(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -304(%rbp)
	jne	.L5471
	leaq	__PRETTY_FUNCTION__.15616(%rip), %rcx
	movl	$24254, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC263(%rip), %rdi
	call	__assert_fail@PLT
.L5471:
	movq	-296(%rbp), %rax
	movzbl	682(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24255, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC539(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-296(%rbp), %rax
	movzbl	682(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5472
	leaq	__PRETTY_FUNCTION__.15616(%rip), %rcx
	movl	$24255, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC539(%rip), %rdi
	call	__assert_fail@PLT
.L5472:
	movq	$0, -280(%rbp)
	movq	-304(%rbp), %rax
	movq	768(%rax), %rax
	movq	%rax, -272(%rbp)
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -264(%rbp)
	movq	-304(%rbp), %rdx
	movq	-296(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_entity_init
	movq	%rax, -256(%rbp)
	movb	$0, -281(%rbp)
	leaq	-281(%rbp), %rdx
	movq	-256(%rbp), %rsi
	movq	-296(%rbp), %rax
	movq	%rdx, %rcx
	movl	$6, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -248(%rbp)
	movzbl	-281(%rbp), %eax
	testb	%al, %al
	je	.L5473
	movq	-304(%rbp), %rax
	movq	840(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24267, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC776(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-304(%rbp), %rax
	movq	840(%rax), %rax
	testq	%rax, %rax
	jne	.L5474
	leaq	__PRETTY_FUNCTION__.15616(%rip), %rcx
	movl	$24267, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC777(%rip), %rdi
	call	__assert_fail@PLT
.L5474:
	cmpq	$0, -256(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24270, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC280(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -256(%rbp)
	jne	.L5475
	leaq	__PRETTY_FUNCTION__.15616(%rip), %rcx
	movl	$24270, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC280(%rip), %rdi
	call	__assert_fail@PLT
.L5475:
	movq	-256(%rbp), %rdx
	movq	-296(%rbp), %rax
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_get_path_w_sep
	movq	%rax, -280(%rbp)
	cmpq	$0, -272(%rbp)
	je	.L5476
	leaq	-224(%rbp), %rdi
	movq	-272(%rbp), %rcx
	movq	-272(%rbp), %rdx
	movq	-280(%rbp), %rsi
	movq	-296(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	ecs_parse_term
	movq	%rax, -240(%rbp)
	cmpq	$0, -240(%rbp)
	je	.L5492
	leaq	-224(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_is_initialized
	xorl	$1, %eax
	testb	%al, %al
	je	.L5479
	movq	-272(%rbp), %rsi
	movq	-280(%rbp), %rax
	leaq	.LC778(%rip), %rcx
	movl	$0, %edx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L5479:
	movq	-240(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L5480
	movq	-272(%rbp), %rsi
	movq	-280(%rbp), %rax
	leaq	.LC779(%rip), %rcx
	movl	$0, %edx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L5476:
	movq	-304(%rbp), %rax
	leaq	576(%rax), %rdx
	leaq	-496(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_term_copy
	movq	-496(%rbp), %rax
	movq	-488(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-480(%rbp), %rax
	movq	-472(%rbp), %rdx
	movq	%rax, -208(%rbp)
	movq	%rdx, -200(%rbp)
	movq	-464(%rbp), %rax
	movq	-456(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, -176(%rbp)
	movq	%rdx, -168(%rbp)
	movq	-432(%rbp), %rax
	movq	-424(%rbp), %rdx
	movq	%rax, -160(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-416(%rbp), %rax
	movq	-408(%rbp), %rdx
	movq	%rax, -144(%rbp)
	movq	%rdx, -136(%rbp)
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, -128(%rbp)
	movq	%rdx, -120(%rbp)
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, -112(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, -96(%rbp)
	movq	%rdx, -88(%rbp)
	movq	-352(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rax, -80(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-320(%rbp), %rax
	movq	-312(%rbp), %rdx
	movq	%rax, -48(%rbp)
	movq	%rdx, -40(%rbp)
.L5480:
	leaq	-224(%rbp), %rcx
	movq	-272(%rbp), %rdx
	movq	-280(%rbp), %rsi
	movq	-296(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_finalize
	testl	%eax, %eax
	jne	.L5493
	movq	-160(%rbp), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24304, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC780(%rip), %rdx
	movl	$6, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-160(%rbp), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L5482
	leaq	__PRETTY_FUNCTION__.15616(%rip), %rcx
	movl	$24304, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC780(%rip), %rdi
	call	__assert_fail@PLT
.L5482:
	movq	-296(%rbp), %rax
	movq	232(%rax), %rax
	movl	$328, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_add
	movq	%rax, -232(%rbp)
	movq	-296(%rbp), %rax
	movq	232(%rax), %rax
	movq	%rax, %rdi
	call	flecs_sparse_last_id
	movq	-232(%rbp), %rdx
	movq	%rax, 320(%rdx)
	movq	-232(%rbp), %rbx
	leaq	-496(%rbp), %rax
	leaq	-224(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_term_move
	movq	-496(%rbp), %rax
	movq	-488(%rbp), %rdx
	movq	%rax, (%rbx)
	movq	%rdx, 8(%rbx)
	movq	-480(%rbp), %rax
	movq	-472(%rbp), %rdx
	movq	%rax, 16(%rbx)
	movq	%rdx, 24(%rbx)
	movq	-464(%rbp), %rax
	movq	-456(%rbp), %rdx
	movq	%rax, 32(%rbx)
	movq	%rdx, 40(%rbx)
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rdx
	movq	%rax, 48(%rbx)
	movq	%rdx, 56(%rbx)
	movq	-432(%rbp), %rax
	movq	-424(%rbp), %rdx
	movq	%rax, 64(%rbx)
	movq	%rdx, 72(%rbx)
	movq	-416(%rbp), %rax
	movq	-408(%rbp), %rdx
	movq	%rax, 80(%rbx)
	movq	%rdx, 88(%rbx)
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rdx
	movq	%rax, 96(%rbx)
	movq	%rdx, 104(%rbx)
	movq	-384(%rbp), %rax
	movq	-376(%rbp), %rdx
	movq	%rax, 112(%rbx)
	movq	%rdx, 120(%rbx)
	movq	-368(%rbp), %rax
	movq	-360(%rbp), %rdx
	movq	%rax, 128(%rbx)
	movq	%rdx, 136(%rbx)
	movq	-352(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rax, 144(%rbx)
	movq	%rdx, 152(%rbx)
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rdx
	movq	%rax, 160(%rbx)
	movq	%rdx, 168(%rbx)
	movq	-320(%rbp), %rax
	movq	-312(%rbp), %rdx
	movq	%rax, 176(%rbx)
	movq	%rdx, 184(%rbx)
	movq	-304(%rbp), %rax
	movq	840(%rax), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, 264(%rax)
	movq	-304(%rbp), %rax
	movq	856(%rax), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, 272(%rax)
	movq	-304(%rbp), %rax
	movq	864(%rax), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, 280(%rax)
	movq	-304(%rbp), %rax
	movq	872(%rax), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, 288(%rax)
	movq	-304(%rbp), %rax
	movq	880(%rax), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, 296(%rax)
	movq	-304(%rbp), %rax
	addq	$776, %rax
	movq	%rax, %rdi
	call	count_events
	movq	-232(%rbp), %rdx
	movl	%eax, 256(%rdx)
	movq	-232(%rbp), %rax
	movl	256(%rax), %eax
	sall	$3, %eax
	cltq
	movq	-304(%rbp), %rdx
	leaq	776(%rdx), %rsi
	movq	-232(%rbp), %rdx
	leaq	192(%rdx), %rcx
	movq	%rax, %rdx
	movq	%rcx, %rdi
	call	memcpy@PLT
	movq	-232(%rbp), %rax
	movq	-256(%rbp), %rdx
	movq	%rdx, 304(%rax)
	movq	-304(%rbp), %rax
	movq	848(%rax), %rdx
	movq	-232(%rbp), %rax
	movq	%rdx, 312(%rax)
	movq	-248(%rbp), %rax
	movq	-232(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-232(%rbp), %rax
	movl	256(%rax), %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24323, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC781(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-232(%rbp), %rax
	movl	256(%rax), %eax
	testl	%eax, %eax
	jne	.L5483
	leaq	__PRETTY_FUNCTION__.15616(%rip), %rcx
	movl	$24323, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC781(%rip), %rdi
	call	__assert_fail@PLT
.L5483:
	movq	-232(%rbp), %rdx
	movq	-296(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	register_trigger
	leaq	-224(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_fini
	jmp	.L5484
.L5492:
	nop
	jmp	.L5478
.L5493:
	nop
.L5478:
.L5485:
	endbr64
	movq	40+ecs_os_api(%rip), %rdx
	movq	-280(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movl	$0, %eax
	jmp	.L5490
.L5473:
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24329, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC782(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L5486
	leaq	__PRETTY_FUNCTION__.15616(%rip), %rcx
	movl	$24329, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC783(%rip), %rdi
	call	__assert_fail@PLT
.L5486:
	cmpq	$0, -264(%rbp)
	je	.L5484
	movq	-304(%rbp), %rax
	movq	840(%rax), %rax
	testq	%rax, %rax
	je	.L5487
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	-304(%rbp), %rdx
	movq	840(%rdx), %rdx
	movq	%rdx, 264(%rax)
.L5487:
	movq	-304(%rbp), %rax
	movq	856(%rax), %rax
	testq	%rax, %rax
	je	.L5488
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	-304(%rbp), %rdx
	movq	856(%rdx), %rdx
	movq	%rdx, 272(%rax)
.L5488:
	movq	-304(%rbp), %rax
	movq	864(%rax), %rax
	testq	%rax, %rax
	je	.L5484
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	-304(%rbp), %rdx
	movq	864(%rdx), %rdx
	movq	%rdx, 280(%rax)
.L5484:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-280(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-256(%rbp), %rax
.L5490:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L5491
	call	__stack_chk_fail@PLT
.L5491:
	addq	$488, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE795:
	.size	ecs_trigger_init, .-ecs_trigger_init
	.globl	ecs_get_trigger_ctx
	.type	ecs_get_trigger_ctx, @function
ecs_get_trigger_ctx:
.LFB796:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$6, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5495
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	272(%rax), %rax
	jmp	.L5496
.L5495:
	movl	$0, %eax
.L5496:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE796:
	.size	ecs_get_trigger_ctx, .-ecs_get_trigger_ctx
	.globl	ecs_get_trigger_binding_ctx
	.type	ecs_get_trigger_binding_ctx, @function
ecs_get_trigger_binding_ctx:
.LFB797:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$6, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5498
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	280(%rax), %rax
	jmp	.L5499
.L5498:
	movl	$0, %eax
.L5499:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE797:
	.size	ecs_get_trigger_binding_ctx, .-ecs_get_trigger_binding_ctx
	.globl	flecs_trigger_fini
	.type	flecs_trigger_fini, @function
flecs_trigger_fini:
.LFB798:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	unregister_trigger
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_fini
	movq	-16(%rbp), %rax
	movq	288(%rax), %rax
	testq	%rax, %rax
	je	.L5501
	movq	-16(%rbp), %rax
	movq	288(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	272(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5501:
	movq	-16(%rbp), %rax
	movq	296(%rax), %rax
	testq	%rax, %rax
	je	.L5502
	movq	-16(%rbp), %rax
	movq	296(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	280(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5502:
	movq	-16(%rbp), %rax
	movq	320(%rax), %rdx
	movq	-8(%rbp), %rax
	movq	232(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_sparse_remove
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE798:
	.size	flecs_trigger_fini, .-flecs_trigger_fini
	.section	.rodata
.LC784:
	.string	"v < INT8_MAX"
.LC785:
	.string	"v < (127)"
	.text
	.globl	flflecs_to_i8
	.type	flflecs_to_i8, @function
flflecs_to_i8:
.LFB799:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$126, -8(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24397, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC784(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$126, -8(%rbp)
	jle	.L5504
	leaq	__PRETTY_FUNCTION__.15644(%rip), %rcx
	movl	$24397, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC785(%rip), %rdi
	call	__assert_fail@PLT
.L5504:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE799:
	.size	flflecs_to_i8, .-flflecs_to_i8
	.section	.rodata
.LC786:
	.string	"v < INT16_MAX"
.LC787:
	.string	"v < (32767)"
	.text
	.globl	flecs_to_i16
	.type	flecs_to_i16, @function
flecs_to_i16:
.LFB800:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$32766, -8(%rbp)
	setle	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24404, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC786(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$32766, -8(%rbp)
	jle	.L5507
	leaq	__PRETTY_FUNCTION__.15648(%rip), %rcx
	movl	$24404, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC787(%rip), %rdi
	call	__assert_fail@PLT
.L5507:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE800:
	.size	flecs_to_i16, .-flecs_to_i16
	.section	.rodata
.LC788:
	.string	"v < UINT32_MAX"
.LC789:
	.string	"v < (4294967295U)"
	.text
	.globl	flecs_to_u32
	.type	flecs_to_u32, @function
flecs_to_u32:
.LFB801:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	$4294967294, %eax
	cmpq	%rax, -8(%rbp)
	setbe	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24411, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC788(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	$4294967294, %eax
	cmpq	%rax, -8(%rbp)
	jbe	.L5510
	leaq	__PRETTY_FUNCTION__.15652(%rip), %rcx
	movl	$24411, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC789(%rip), %rdi
	call	__assert_fail@PLT
.L5510:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE801:
	.size	flecs_to_u32, .-flecs_to_u32
	.section	.rodata
.LC790:
	.string	"size >= 0"
	.text
	.globl	flecs_to_size_t
	.type	flecs_to_size_t, @function
flecs_to_size_t:
.LFB802:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	notq	%rax
	shrq	$63, %rax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24418, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC790(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jns	.L5513
	leaq	__PRETTY_FUNCTION__.15656(%rip), %rcx
	movl	$24418, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC790(%rip), %rdi
	call	__assert_fail@PLT
.L5513:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE802:
	.size	flecs_to_size_t, .-flecs_to_size_t
	.section	.rodata
.LC791:
	.string	"size < INT32_MAX"
.LC792:
	.string	"size < (2147483647)"
	.text
	.globl	flecs_from_size_t
	.type	flecs_from_size_t, @function
flecs_from_size_t:
.LFB803:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$2147483646, -8(%rbp)
	setbe	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24425, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC791(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$2147483646, -8(%rbp)
	jbe	.L5516
	leaq	__PRETTY_FUNCTION__.15660(%rip), %rcx
	movl	$24425, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC792(%rip), %rdi
	call	__assert_fail@PLT
.L5516:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE803:
	.size	flecs_from_size_t, .-flecs_from_size_t
	.globl	flecs_next_pow_of_2
	.type	flecs_next_pow_of_2, @function
flecs_next_pow_of_2:
.LFB804:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, -4(%rbp)
	subl	$1, -4(%rbp)
	movl	-4(%rbp), %eax
	sarl	%eax
	orl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	sarl	$2, %eax
	orl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	sarl	$4, %eax
	orl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	sarl	$8, %eax
	orl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	sarl	$16, %eax
	orl	%eax, -4(%rbp)
	addl	$1, -4(%rbp)
	movl	-4(%rbp), %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE804:
	.size	flecs_next_pow_of_2, .-flecs_next_pow_of_2
	.globl	ecs_time_to_double
	.type	ecs_time_to_double, @function
ecs_time_to_double:
.LFB805:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, %eax
	testq	%rax, %rax
	js	.L5521
	cvtsi2sdq	%rax, %xmm0
	jmp	.L5522
.L5521:
	movq	%rax, %rdx
	shrq	%rdx
	andl	$1, %eax
	orq	%rax, %rdx
	cvtsi2sdq	%rdx, %xmm0
	addsd	%xmm0, %xmm0
.L5522:
	movsd	%xmm0, -8(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, %eax
	testq	%rax, %rax
	js	.L5523
	cvtsi2sdq	%rax, %xmm0
	jmp	.L5524
.L5523:
	movq	%rax, %rdx
	shrq	%rdx
	andl	$1, %eax
	orq	%rax, %rdx
	cvtsi2sdq	%rdx, %xmm0
	addsd	%xmm0, %xmm0
.L5524:
	movsd	.LC793(%rip), %xmm1
	divsd	%xmm1, %xmm0
	addsd	-8(%rbp), %xmm0
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE805:
	.size	ecs_time_to_double, .-ecs_time_to_double
	.globl	ecs_time_sub
	.type	ecs_time_sub, @function
ecs_time_sub:
.LFB806:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %eax
	cmpl	%eax, %edx
	jb	.L5527
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %eax
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -4(%rbp)
	movl	-24(%rbp), %edx
	movl	-32(%rbp), %eax
	subl	%eax, %edx
	movl	%edx, %eax
	movl	%eax, -8(%rbp)
	jmp	.L5528
.L5527:
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %eax
	subl	%eax, %edx
	movl	%edx, %eax
	addl	$1000000000, %eax
	movl	%eax, -4(%rbp)
	movl	-24(%rbp), %edx
	movl	-32(%rbp), %eax
	subl	%eax, %edx
	movl	%edx, %eax
	subl	$1, %eax
	movl	%eax, -8(%rbp)
.L5528:
	movq	-8(%rbp), %rax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE806:
	.size	ecs_time_sub, .-ecs_time_sub
	.globl	ecs_sleepf
	.type	ecs_sleepf, @function
ecs_sleepf:
.LFB807:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movsd	%xmm0, -24(%rbp)
	movsd	-24(%rbp), %xmm0
	pxor	%xmm1, %xmm1
	comisd	%xmm1, %xmm0
	ja	.L5533
	jmp	.L5534
.L5533:
	movsd	-24(%rbp), %xmm0
	cvttsd2sil	%xmm0, %eax
	movl	%eax, -8(%rbp)
	cvtsi2sdl	-8(%rbp), %xmm1
	movsd	-24(%rbp), %xmm0
	subsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
	movsd	.LC793(%rip), %xmm0
	mulsd	%xmm1, %xmm0
	cvttsd2sil	%xmm0, %eax
	movl	%eax, -4(%rbp)
	movq	160+ecs_os_api(%rip), %rcx
	movl	-4(%rbp), %edx
	movl	-8(%rbp), %eax
	movl	%edx, %esi
	movl	%eax, %edi
	call	*%rcx
.L5534:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE807:
	.size	ecs_sleepf, .-ecs_sleepf
	.globl	ecs_time_measure
	.type	ecs_time_measure, @function
ecs_time_measure:
.LFB808:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	168+ecs_os_api(%rip), %rdx
	leaq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	(%rdx), %rsi
	movq	%rax, %rdi
	call	ecs_time_sub
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_time_to_double
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5537
	call	__stack_chk_fail@PLT
.L5537:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE808:
	.size	ecs_time_measure, .-ecs_time_measure
	.globl	ecs_os_memdup
	.type	ecs_os_memdup, @function
ecs_os_memdup:
.LFB809:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L5539
	movl	$0, %eax
	jmp	.L5540
.L5539:
	movq	16+ecs_os_api(%rip), %rdx
	movl	-28(%rbp), %eax
	movl	%eax, %edi
	call	*%rdx
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24499, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC147(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5541
	leaq	__PRETTY_FUNCTION__.15688(%rip), %rcx
	movl	$24499, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC148(%rip), %rdi
	call	__assert_fail@PLT
.L5541:
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-8(%rbp), %rax
.L5540:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE809:
	.size	ecs_os_memdup, .-ecs_os_memdup
	.globl	flecs_entity_compare
	.type	flecs_entity_compare, @function
flecs_entity_compare:
.LFB810:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rax
	cmpq	-24(%rbp), %rax
	seta	%al
	movzbl	%al, %edx
	movq	-8(%rbp), %rax
	cmpq	-24(%rbp), %rax
	setb	%al
	movzbl	%al, %eax
	subl	%eax, %edx
	movl	%edx, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE810:
	.size	flecs_entity_compare, .-flecs_entity_compare
	.globl	flecs_entity_compare_qsort
	.type	flecs_entity_compare_qsort, @function
flecs_entity_compare_qsort:
.LFB811:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rax
	movl	$0, %ecx
	movl	$0, %esi
	movq	%rax, %rdi
	call	flecs_entity_compare
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE811:
	.size	flecs_entity_compare_qsort, .-flecs_entity_compare_qsort
	.section	.rodata
.LC795:
	.string	"str->hash != 0"
	.text
	.globl	flecs_string_hash
	.type	flecs_string_hash, @function
flecs_string_hash:
.LFB812:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24528, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC795(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L5547
	leaq	__PRETTY_FUNCTION__.15705(%rip), %rcx
	movl	$24528, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC795(%rip), %rdi
	call	__assert_fail@PLT
.L5547:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE812:
	.size	flecs_string_hash, .-flecs_string_hash
	.local	ecs_os_time_initialized
	.comm	ecs_os_time_initialized,4,4
	.local	_ecs_os_time_posix_start
	.comm	_ecs_os_time_posix_start,8,8
	.globl	flecs_os_time_setup
	.type	flecs_os_time_setup, @function
flecs_os_time_setup:
.LFB813:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	ecs_os_time_initialized(%rip), %eax
	testl	%eax, %eax
	jne	.L5553
	movl	$1, ecs_os_time_initialized(%rip)
	leaq	-32(%rbp), %rax
	movq	%rax, %rsi
	movl	$1, %edi
	call	clock_gettime@PLT
	movq	-32(%rbp), %rax
	imulq	$1000000000, %rax, %rax
	movq	-24(%rbp), %rdx
	addq	%rdx, %rax
	movq	%rax, _ecs_os_time_posix_start(%rip)
	jmp	.L5549
.L5553:
	nop
.L5549:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5552
	call	__stack_chk_fail@PLT
.L5552:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE813:
	.size	flecs_os_time_setup, .-flecs_os_time_setup
	.section	.rodata
.LC796:
	.string	"ecs_os_time_initialized != 0"
	.text
	.globl	flecs_os_time_now
	.type	flecs_os_time_now, @function
flecs_os_time_now:
.LFB814:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	ecs_os_time_initialized(%rip), %eax
	testl	%eax, %eax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24605, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC796(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	ecs_os_time_initialized(%rip), %eax
	testl	%eax, %eax
	jne	.L5555
	leaq	__PRETTY_FUNCTION__.15715(%rip), %rcx
	movl	$24605, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC796(%rip), %rdi
	call	__assert_fail@PLT
.L5555:
	leaq	-32(%rbp), %rax
	movq	%rax, %rsi
	movl	$1, %edi
	call	clock_gettime@PLT
	movq	-32(%rbp), %rax
	imulq	$1000000000, %rax, %rax
	movq	-24(%rbp), %rdx
	addq	%rdx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5557
	call	__stack_chk_fail@PLT
.L5557:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE814:
	.size	flecs_os_time_now, .-flecs_os_time_now
	.section	.rodata
.LC797:
	.string	"sec >= 0"
.LC798:
	.string	"nanosec >= 0"
.LC799:
	.string	"nanosleep failed"
	.text
	.globl	flecs_os_time_sleep
	.type	flecs_os_time_sleep, @function
flecs_os_time_sleep:
.LFB815:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movl	%edi, -36(%rbp)
	movl	%esi, -40(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	-36(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24630, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC797(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -36(%rbp)
	jns	.L5559
	leaq	__PRETTY_FUNCTION__.15723(%rip), %rcx
	movl	$24630, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC797(%rip), %rdi
	call	__assert_fail@PLT
.L5559:
	movl	-40(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24631, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC798(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -40(%rbp)
	jns	.L5560
	leaq	__PRETTY_FUNCTION__.15723(%rip), %rcx
	movl	$24631, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC798(%rip), %rdi
	call	__assert_fail@PLT
.L5560:
	movl	-36(%rbp), %eax
	cltq
	movq	%rax, -32(%rbp)
	movl	-40(%rbp), %eax
	cltq
	movq	%rax, -24(%rbp)
	leaq	-32(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	nanosleep@PLT
	testl	%eax, %eax
	je	.L5563
	leaq	.LC799(%rip), %rdi
	movl	$0, %eax
	call	ecs_os_err
.L5563:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5562
	call	__stack_chk_fail@PLT
.L5562:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE815:
	.size	flecs_os_time_sleep, .-flecs_os_time_sleep
	.globl	flecs_increase_timer_resolution
	.type	flecs_increase_timer_resolution, @function
flecs_increase_timer_resolution:
.LFB816:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movl	%edi, %eax
	movb	%al, -4(%rbp)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE816:
	.size	flecs_increase_timer_resolution, .-flecs_increase_timer_resolution
	.type	worker, @function
worker:
.LFB817:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	104+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-16(%rbp), %rax
	movl	496(%rax), %eax
	leal	1(%rax), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 496(%rax)
	movq	-16(%rbp), %rax
	movzbl	680(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L5567
	movq	152+ecs_os_api(%rip), %rcx
	movq	-16(%rbp), %rax
	movq	488(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	472(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
.L5567:
	movq	112+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	jmp	.L5568
.L5569:
	movq	-24(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_set_scope
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	564(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	264(%rax), %rdx
	movq	-24(%rbp), %rax
	movd	%ecx, %xmm0
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_pipeline_run
	movq	-8(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_set_scope
.L5568:
	movq	-16(%rbp), %rax
	movzbl	680(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5569
	movq	104+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-16(%rbp), %rax
	movl	496(%rax), %eax
	leal	-1(%rax), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 496(%rax)
	movq	112+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE817:
	.size	worker, .-worker
	.section	.rodata
	.align 8
.LC800:
	.string	"ecs_get_stage_count(world) == threads"
.LC801:
	.string	"stage->thread != 0"
	.text
	.type	start_workers, @function
start_workers:
.LFB818:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_set_stages
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	cmpl	%eax, -28(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24754, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC800(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	cmpl	%eax, -28(%rbp)
	je	.L5572
	leaq	__PRETTY_FUNCTION__.15740(%rip), %rcx
	movl	$24754, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC800(%rip), %rdi
	call	__assert_fail@PLT
.L5572:
	movl	$0, -12(%rbp)
	jmp	.L5573
.L5577:
	movl	-12(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	ecs_get_stage
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24759, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC323(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5574
	leaq	__PRETTY_FUNCTION__.15740(%rip), %rcx
	movl	$24759, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC324(%rip), %rdi
	call	__assert_fail@PLT
.L5574:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24760, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC330(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L5575
	leaq	__PRETTY_FUNCTION__.15740(%rip), %rcx
	movl	$24760, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC331(%rip), %rdi
	call	__assert_fail@PLT
.L5575:
	movq	-24(%rbp), %rax
	movq	456(%rax), %rax
	movl	-12(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$88, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	56+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rsi
	leaq	worker(%rip), %rdi
	call	*%rdx
	movq	-8(%rbp), %rdx
	movq	%rax, 40(%rdx)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24764, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC801(%rip), %rdx
	movl	$10, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	testq	%rax, %rax
	jne	.L5576
	leaq	__PRETTY_FUNCTION__.15740(%rip), %rcx
	movl	$24764, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC801(%rip), %rdi
	call	__assert_fail@PLT
.L5576:
	addl	$1, -12(%rbp)
.L5573:
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L5577
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE818:
	.size	start_workers, .-start_workers
	.type	wait_for_workers, @function
wait_for_workers:
.LFB819:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -4(%rbp)
	movb	$1, -5(%rbp)
.L5580:
	movq	104+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-24(%rbp), %rax
	movl	496(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jne	.L5579
	movb	$0, -5(%rbp)
.L5579:
	movq	112+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	cmpb	$0, -5(%rbp)
	jne	.L5580
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE819:
	.size	wait_for_workers, .-wait_for_workers
	.type	sync_worker, @function
sync_worker:
.LFB820:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -4(%rbp)
	movq	104+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	leal	1(%rax), %edx
	movq	-24(%rbp), %rax
	movl	%edx, 500(%rax)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	cmpl	%eax, -4(%rbp)
	jne	.L5582
	movq	136+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	480(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5582:
	movq	152+ecs_os_api(%rip), %rcx
	movq	-24(%rbp), %rax
	movq	488(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	472(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	movq	112+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE820:
	.size	sync_worker, .-sync_worker
	.section	.rodata
	.align 8
.LC802:
	.string	"world->workers_waiting == stage_count"
	.text
	.type	wait_for_sync, @function
wait_for_sync:
.LFB821:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -4(%rbp)
	movq	104+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	cmpl	%eax, -4(%rbp)
	je	.L5584
	movq	152+ecs_os_api(%rip), %rcx
	movq	-24(%rbp), %rax
	movq	488(%rax), %rdx
	movq	-24(%rbp), %rax
	movq	480(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
.L5584:
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	cmpl	%eax, -4(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24817, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC802(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	cmpl	%eax, -4(%rbp)
	je	.L5585
	leaq	__PRETTY_FUNCTION__.15761(%rip), %rcx
	movl	$24817, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC802(%rip), %rdi
	call	__assert_fail@PLT
.L5585:
	movq	112+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE821:
	.size	wait_for_sync, .-wait_for_sync
	.type	signal_workers, @function
signal_workers:
.LFB822:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	104+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	144+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	472(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	112+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE822:
	.size	signal_workers, .-signal_workers
	.section	.rodata
.LC803:
	.string	"world->workers_running == 0"
	.text
	.type	ecs_stop_threads, @function
ecs_stop_threads:
.LFB823:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movb	$0, -49(%rbp)
	movq	-72(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -40(%rbp)
	movq	-72(%rbp), %rax
	movq	456(%rax), %rax
	movl	$16, %edx
	movl	$88, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movl	$0, -48(%rbp)
	jmp	.L5588
.L5591:
	movl	-48(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	testq	%rax, %rax
	je	.L5589
	movb	$1, -49(%rbp)
	jmp	.L5590
.L5589:
	movq	-24(%rbp), %rax
	movq	$0, 40(%rax)
	addl	$1, -48(%rbp)
.L5588:
	movl	-48(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jl	.L5591
.L5590:
	movzbl	-49(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L5592
	movl	$0, %eax
	jmp	.L5593
.L5592:
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	wait_for_workers
	movq	-72(%rbp), %rax
	movb	$1, 680(%rax)
	movq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	signal_workers
	movq	-72(%rbp), %rax
	movq	456(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -36(%rbp)
	movq	-72(%rbp), %rax
	movq	456(%rax), %rax
	movl	$16, %edx
	movl	$88, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -44(%rbp)
	jmp	.L5594
.L5595:
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	64+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	addl	$1, -44(%rbp)
.L5594:
	movl	-44(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L5595
	movq	-72(%rbp), %rax
	movb	$0, 680(%rax)
	movq	-72(%rbp), %rax
	movl	496(%rax), %eax
	testl	%eax, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24869, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC803(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movl	496(%rax), %eax
	testl	%eax, %eax
	je	.L5596
	leaq	__PRETTY_FUNCTION__.15783(%rip), %rcx
	movl	$24869, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC803(%rip), %rdi
	call	__assert_fail@PLT
.L5596:
	movq	-72(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_set_stages
	movl	$1, %eax
.L5593:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE823:
	.size	ecs_stop_threads, .-ecs_stop_threads
	.section	.rodata
.LC804:
	.string	"stage_count != 0"
	.text
	.globl	ecs_worker_begin
	.type	ecs_worker_begin, @function
ecs_worker_begin:
.LFB824:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	leaq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24884, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC804(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -4(%rbp)
	jne	.L5598
	leaq	__PRETTY_FUNCTION__.15788(%rip), %rcx
	movl	$24884, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC804(%rip), %rdi
	call	__assert_fail@PLT
.L5598:
	cmpl	$1, -4(%rbp)
	jne	.L5600
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_staging_begin
.L5600:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE824:
	.size	ecs_worker_begin, .-ecs_worker_begin
	.globl	ecs_worker_sync
	.type	ecs_worker_sync, @function
ecs_worker_sync:
.LFB825:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	leaq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	-24(%rbp), %rax
	movl	604(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24898, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC804(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -4(%rbp)
	jne	.L5602
	leaq	__PRETTY_FUNCTION__.15794(%rip), %rcx
	movl	$24898, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC804(%rip), %rdi
	call	__assert_fail@PLT
.L5602:
	cmpl	$1, -4(%rbp)
	jne	.L5603
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_staging_end
	movq	-24(%rbp), %rax
	movq	264(%rax), %rcx
	movq	-24(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_pipeline_update
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_staging_begin
	jmp	.L5604
.L5603:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	sync_worker
.L5604:
	movq	-24(%rbp), %rax
	movl	604(%rax), %eax
	cmpl	%eax, -8(%rbp)
	setne	%al
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE825:
	.size	ecs_worker_sync, .-ecs_worker_sync
	.globl	ecs_worker_end
	.type	ecs_worker_end, @function
ecs_worker_end:
.LFB826:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	leaq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24921, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC804(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -4(%rbp)
	jne	.L5607
	leaq	__PRETTY_FUNCTION__.15799(%rip), %rcx
	movl	$24921, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC804(%rip), %rdi
	call	__assert_fail@PLT
.L5607:
	cmpl	$1, -4(%rbp)
	jne	.L5608
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_staging_end
	jmp	.L5610
.L5608:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	sync_worker
.L5610:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE826:
	.size	ecs_worker_end, .-ecs_worker_end
	.globl	ecs_workers_progress
	.type	ecs_workers_progress, @function
ecs_workers_progress:
.LFB827:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movss	%xmm0, -68(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24939, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5612
	leaq	__PRETTY_FUNCTION__.15805(%rip), %rcx
	movl	$24939, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5612:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -40(%rbp)
	movq	$0, -16(%rbp)
	movq	-56(%rbp), %rax
	movzbl	683(%rax), %eax
	testb	%al, %al
	je	.L5613
	leaq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_time_measure
.L5613:
	cmpl	$1, -40(%rbp)
	jne	.L5614
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_pipeline_update
	movq	-56(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_set_scope
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_get_stage
	movq	%rax, -24(%rbp)
	movl	-68(%rbp), %ecx
	movq	-64(%rbp), %rdx
	movq	-24(%rbp), %rax
	movd	%ecx, %xmm0
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_pipeline_run
	movq	-32(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_set_scope
	jmp	.L5615
.L5614:
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_pipeline_update
	movl	%eax, -44(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	wait_for_workers
	movl	$0, -48(%rbp)
	jmp	.L5616
.L5618:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_staging_begin
	movq	-56(%rbp), %rax
	movl	$0, 500(%rax)
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	signal_workers
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	wait_for_sync
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_staging_end
	movq	-64(%rbp), %rcx
	movq	-56(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_pipeline_update
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.L5617
	movl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
.L5617:
	addl	$1, -48(%rbp)
.L5616:
	movl	-48(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L5618
.L5615:
	movq	-56(%rbp), %rax
	movzbl	683(%rax), %eax
	testb	%al, %al
	je	.L5621
	leaq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_time_measure
	cvtsd2ss	%xmm0, %xmm1
	movq	-56(%rbp), %rax
	movss	580(%rax), %xmm0
	addss	%xmm1, %xmm0
	movq	-56(%rbp), %rax
	movss	%xmm0, 580(%rax)
.L5621:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5620
	call	__stack_chk_fail@PLT
.L5620:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE827:
	.size	ecs_workers_progress, .-ecs_workers_progress
	.section	.rodata
	.align 8
.LC805:
	.string	"threads <= 1 || ecs_os_has_threading()"
	.text
	.globl	ecs_set_threads
	.type	ecs_set_threads, @function
ecs_set_threads:
.LFB828:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	cmpl	$1, -28(%rbp)
	jle	.L5623
	call	ecs_os_has_threading
	testb	%al, %al
	je	.L5624
.L5623:
	movl	$1, %eax
	jmp	.L5625
.L5624:
	movl	$0, %eax
.L5625:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$24995, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC805(%rip), %rdx
	movl	$9, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$1, -28(%rbp)
	jle	.L5626
	call	ecs_os_has_threading
	testb	%al, %al
	jne	.L5626
	leaq	__PRETTY_FUNCTION__.15820(%rip), %rcx
	movl	$24995, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC805(%rip), %rdi
	call	__assert_fail@PLT
.L5626:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movl	620(%rax), %eax
	testl	%eax, %eax
	jne	.L5629
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	je	.L5629
	cmpl	$1, -4(%rbp)
	jle	.L5628
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_stop_threads
	testb	%al, %al
	je	.L5628
	movq	128+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	472(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	128+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	480(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	96+ecs_os_api(%rip), %rdx
	movq	-24(%rbp), %rax
	movq	488(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5628:
	cmpl	$1, -28(%rbp)
	jle	.L5629
	movq	120+ecs_os_api(%rip), %rax
	call	*%rax
	movq	-24(%rbp), %rdx
	movq	%rax, 472(%rdx)
	movq	120+ecs_os_api(%rip), %rax
	call	*%rax
	movq	-24(%rbp), %rdx
	movq	%rax, 480(%rdx)
	movq	88+ecs_os_api(%rip), %rax
	call	*%rax
	movq	-24(%rbp), %rdx
	movq	%rax, 488(%rdx)
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	start_workers
.L5629:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE828:
	.size	ecs_set_threads, .-ecs_set_threads
	.section	.rodata
	.align 8
	.type	__EcsPipelineQuery, @object
	.size	__EcsPipelineQuery, 8
__EcsPipelineQuery:
	.quad	12
	.globl	__FLECS__TEcsPipelineQuery_value
	.data
	.align 16
	.type	__FLECS__TEcsPipelineQuery_value, @object
	.size	__FLECS__TEcsPipelineQuery_value, 24
__FLECS__TEcsPipelineQuery_value:
	.long	1
	.long	1
	.quad	8
	.zero	8
	.globl	FLECS__TEcsPipelineQuery
	.section	.data.rel.local,"aw"
	.align 8
	.type	FLECS__TEcsPipelineQuery, @object
	.size	FLECS__TEcsPipelineQuery, 8
FLECS__TEcsPipelineQuery:
	.quad	__FLECS__TEcsPipelineQuery_value
	.text
	.type	EcsPipelineQuery_ctor, @function
EcsPipelineQuery_ctor:
.LFB829:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L5631
.L5632:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-20(%rbp), %eax
	cltq
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-72(%rbp), %rdx
	movq	-8(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	addl	$1, -20(%rbp)
.L5631:
	movl	-20(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L5632
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE829:
	.size	EcsPipelineQuery_ctor, .-EcsPipelineQuery_ctor
	.type	EcsPipelineQuery_dtor, @function
EcsPipelineQuery_dtor:
.LFB830:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L5634
.L5635:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-20(%rbp), %eax
	cltq
	salq	$5, %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	addl	$1, -20(%rbp)
.L5634:
	movl	-20(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L5635
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE830:
	.size	EcsPipelineQuery_dtor, .-EcsPipelineQuery_dtor
	.type	compare_entity, @function
compare_entity:
.LFB831:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rax
	cmpq	-24(%rbp), %rax
	seta	%al
	movzbl	%al, %edx
	movq	-8(%rbp), %rax
	cmpq	-24(%rbp), %rax
	setb	%al
	movzbl	%al, %eax
	subl	%eax, %edx
	movl	%edx, %eax
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE831:
	.size	compare_entity, .-compare_entity
	.section	.rodata
.LC806:
	.string	"pipeline_type != NULL"
.LC807:
	.string	"pipeline_type != ((void *)0)"
.LC808:
	.string	"result < INT_MAX"
.LC809:
	.string	"result < 0x7fffffff"
	.text
	.type	group_by_phase, @function
group_by_phase:
.LFB832:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	-88(%rbp), %rcx
	movq	-72(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25056, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC806(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L5639
	leaq	__PRETTY_FUNCTION__.15874(%rip), %rcx
	movl	$25056, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC807(%rip), %rdi
	call	__assert_fail@PLT
.L5639:
	movq	-80(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -44(%rbp)
	movq	$0, -40(%rbp)
	movl	$0, -56(%rbp)
	jmp	.L5640
.L5647:
	movl	-56(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movl	$0, -52(%rbp)
	jmp	.L5641
.L5644:
	movl	-52(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	cmpq	%rax, -8(%rbp)
	jne	.L5642
	movq	-8(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.L5643
.L5642:
	addl	$1, -52(%rbp)
.L5641:
	movl	-52(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jl	.L5644
.L5643:
	cmpq	$0, -40(%rbp)
	jne	.L5651
	addl	$1, -56(%rbp)
.L5640:
	movl	-56(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jl	.L5647
	jmp	.L5646
.L5651:
	nop
.L5646:
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25080, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC270(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L5648
	leaq	__PRETTY_FUNCTION__.15874(%rip), %rcx
	movl	$25080, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC270(%rip), %rdi
	call	__assert_fail@PLT
.L5648:
	cmpq	$2147483646, -40(%rbp)
	setbe	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25081, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC808(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$2147483646, -40(%rbp)
	jbe	.L5649
	leaq	__PRETTY_FUNCTION__.15874(%rip), %rcx
	movl	$25081, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC809(%rip), %rdi
	call	__assert_fail@PLT
.L5649:
	movq	-40(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE832:
	.size	group_by_phase, .-group_by_phase
	.type	get_write_state, @function
get_write_state:
.LFB833:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$4, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5653
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	jmp	.L5654
.L5653:
	movl	$0, %eax
.L5654:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE833:
	.size	get_write_state, .-get_write_state
	.section	.rodata
.LC810:
	.string	"value == WriteToStage"
	.text
	.type	set_write_state, @function
set_write_state:
.LFB834:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	$266, %eax
	cmpq	%rax, -16(%rbp)
	jne	.L5656
	movl	-20(%rbp), %eax
	cmpl	$2, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25117, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC810(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	-20(%rbp), %eax
	cmpl	$2, %eax
	je	.L5657
	leaq	__PRETTY_FUNCTION__.15908(%rip), %rcx
	movl	$25117, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC810(%rip), %rdi
	call	__assert_fail@PLT
.L5657:
	movq	-8(%rbp), %rax
	movb	$1, 8(%rax)
	jmp	.L5659
.L5656:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	leaq	-20(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movl	$4, %esi
	movq	%rax, %rdi
	call	_ecs_map_set
.L5659:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE834:
	.size	set_write_state, .-set_write_state
	.type	reset_write_state, @function
reset_write_state:
.LFB835:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_clear
	movq	-8(%rbp), %rax
	movb	$0, 8(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE835:
	.size	reset_write_state, .-reset_write_state
	.type	get_any_write_state, @function
get_any_write_state:
.LFB836:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-72(%rbp), %rax
	movzbl	8(%rax), %eax
	testb	%al, %al
	je	.L5662
	movl	$2, %eax
	jmp	.L5666
.L5662:
	movq	-72(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L5664
.L5665:
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$2, %eax
	jne	.L5664
	movl	$2, %eax
	jmp	.L5666
.L5664:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L5665
	movl	$0, %eax
.L5666:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5667
	call	__stack_chk_fail@PLT
.L5667:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE836:
	.size	get_any_write_state, .-get_any_write_state
	.type	check_term_component, @function
check_term_component:
.LFB837:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, %eax
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movb	%al, -28(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_write_state
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$1, %eax
	testl	%eax, %eax
	je	.L5669
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	jne	.L5669
	movq	-24(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$2, %eax
	je	.L5669
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$2, %eax
	jbe	.L5670
	cmpl	$3, %eax
	je	.L5671
	jmp	.L5686
.L5670:
	cmpl	$2, -12(%rbp)
	je	.L5673
	movq	-48(%rbp), %rax
	movzbl	8(%rax), %eax
	testb	%al, %al
	je	.L5671
.L5673:
	movl	$1, %eax
	jmp	.L5674
.L5671:
	cmpb	$0, -28(%rbp)
	je	.L5686
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$2, %eax
	je	.L5686
	movq	-40(%rbp), %rcx
	movq	-48(%rbp), %rax
	movl	$1, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	set_write_state
	jmp	.L5686
.L5669:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L5676
	movq	-24(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$2, %eax
	jne	.L5675
.L5676:
	movb	$0, -13(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$2, %eax
	ja	.L5687
	cmpl	$2, -12(%rbp)
	jne	.L5678
	movb	$1, -13(%rbp)
.L5678:
	movl	$266, %eax
	cmpq	%rax, -40(%rbp)
	jne	.L5688
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	get_any_write_state
	cmpl	$2, %eax
	jne	.L5688
	movb	$1, -13(%rbp)
	jmp	.L5688
.L5687:
	nop
	jmp	.L5680
.L5688:
	nop
.L5680:
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	cmpl	$3, %eax
	je	.L5681
	cmpl	$3, %eax
	ja	.L5689
	testl	%eax, %eax
	je	.L5683
	cmpl	$1, %eax
	je	.L5681
	jmp	.L5689
.L5683:
	movq	-8(%rbp), %rax
	movzbl	32(%rax), %eax
	movzbl	%al, %eax
	andl	$1, %eax
	testl	%eax, %eax
	je	.L5690
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L5690
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	jne	.L5690
.L5681:
	cmpb	$0, -28(%rbp)
	je	.L5691
	movq	-40(%rbp), %rcx
	movq	-48(%rbp), %rax
	movl	$2, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	set_write_state
	jmp	.L5691
.L5689:
	nop
	jmp	.L5684
.L5690:
	nop
	jmp	.L5684
.L5691:
	nop
.L5684:
	cmpb	$0, -13(%rbp)
	je	.L5675
	movl	$1, %eax
	jmp	.L5674
.L5686:
	nop
.L5675:
	movl	$0, %eax
.L5674:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE837:
	.size	check_term_component, .-check_term_component
	.type	check_term, @function
check_term:
.LFB838:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, %eax
	movq	%rdx, -24(%rbp)
	movb	%al, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	160(%rax), %eax
	cmpl	$1, %eax
	je	.L5693
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movzbl	-12(%rbp), %esi
	movq	-24(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	check_term_component
	jmp	.L5694
.L5693:
	movl	$0, %eax
.L5694:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE838:
	.size	check_term, .-check_term
	.section	.rodata
	.align 8
.LC811:
	.string	"rebuilding pipeline #[green]%s"
.LC812:
	.string	"needs_merge == false"
.LC813:
	.string	"needs_merge == 0"
	.text
	.type	build_pipeline, @function
build_pipeline:
.LFB839:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$4096, %rsp
	orq	$0, (%rsp)
	subq	$608, %rsp
	movq	%rdi, -2392(%rbp)
	movq	%rsi, -2400(%rbp)
	movq	%rdx, -2408(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-2408(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-4704(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_iter
	movq	-2408(%rbp), %rax
	movl	16(%rax), %edx
	movq	-2408(%rbp), %rax
	movq	(%rax), %rax
	movl	1732(%rax), %eax
	cmpl	%eax, %edx
	jne	.L5696
	movl	$0, %eax
	jmp	.L5712
.L5696:
	movq	-2400(%rbp), %rdx
	movq	-2392(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	movq	%rax, %r8
	leaq	.LC811(%rip), %rcx
	movl	$25251, %edx
	leaq	.LC74(%rip), %rsi
	movl	$2, %edi
	movl	$0, %eax
	call	_ecs_trace
	movq	-2392(%rbp), %rax
	movl	604(%rax), %eax
	leal	1(%rax), %edx
	movq	-2392(%rbp), %rax
	movl	%edx, 604(%rax)
	movl	$256, %edx
	movl	$4, %esi
	movl	$4, %edi
	call	_ecs_map_new
	movq	%rax, -2320(%rbp)
	movb	$0, -2312(%rbp)
	movq	$0, -2360(%rbp)
	movq	$0, -2368(%rbp)
	movq	-2408(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -2352(%rbp)
	movq	-2408(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L5698
	movq	-2408(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
.L5698:
	leaq	-2304(%rbp), %rax
	movq	-2352(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_iter
	jmp	.L5699
.L5711:
	leaq	-2304(%rbp), %rax
	movl	$1, %edx
	movl	$120, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -2344(%rbp)
	movl	$0, -2380(%rbp)
	jmp	.L5700
.L5710:
	movl	-2380(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-2344(%rbp), %rax
	addq	%rdx, %rax
	movq	16(%rax), %rax
	movq	%rax, -2336(%rbp)
	cmpq	$0, -2336(%rbp)
	je	.L5714
	movb	$0, -2382(%rbp)
	movl	$319, %esi
	movq	-2152(%rbp), %rax
	movl	-2380(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rcx
	movq	-2392(%rbp), %rax
	movq	%rsi, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	movb	%al, -2381(%rbp)
	andb	$1, -2381(%rbp)
	movq	-2336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -2328(%rbp)
	movq	-2336(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -2372(%rbp)
	movl	$0, -2376(%rbp)
	jmp	.L5703
.L5704:
	movzbl	-2381(%rbp), %ecx
	movl	-2376(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-2328(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	leaq	-2320(%rbp), %rax
	movq	%rax, %rdx
	movl	%ecx, %esi
	call	check_term
	orb	-2382(%rbp), %al
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	movb	%al, -2382(%rbp)
	addl	$1, -2376(%rbp)
.L5703:
	movl	-2376(%rbp), %eax
	cmpl	-2372(%rbp), %eax
	jl	.L5704
	cmpb	$0, -2382(%rbp)
	je	.L5705
	leaq	-2320(%rbp), %rax
	movq	%rax, %rdi
	call	reset_write_state
	movq	$0, -2360(%rbp)
	movb	$0, -2382(%rbp)
	cmpb	$0, -2381(%rbp)
	je	.L5706
	movl	$0, -2376(%rbp)
	jmp	.L5707
.L5708:
	movl	-2376(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-2328(%rbp), %rax
	leaq	(%rdx,%rax), %rcx
	leaq	-2320(%rbp), %rax
	movq	%rax, %rdx
	movl	$1, %esi
	movq	%rcx, %rdi
	call	check_term
	orb	-2382(%rbp), %al
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	movb	%al, -2382(%rbp)
	addl	$1, -2376(%rbp)
.L5707:
	movl	-2376(%rbp), %eax
	cmpl	-2372(%rbp), %eax
	jl	.L5708
.L5706:
	movzbl	-2382(%rbp), %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25308, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC812(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movzbl	-2382(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5705
	leaq	__PRETTY_FUNCTION__.15973(%rip), %rcx
	movl	$25308, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC813(%rip), %rdi
	call	__assert_fail@PLT
.L5705:
	cmpq	$0, -2360(%rbp)
	jne	.L5709
	leaq	-2368(%rbp), %rax
	movl	$16, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -2360(%rbp)
	movq	-2360(%rbp), %rax
	movl	$0, (%rax)
.L5709:
	cmpb	$0, -2381(%rbp)
	je	.L5702
	movq	-2360(%rbp), %rax
	movl	(%rax), %eax
	leal	1(%rax), %edx
	movq	-2360(%rbp), %rax
	movl	%edx, (%rax)
	jmp	.L5702
.L5714:
	nop
.L5702:
	addl	$1, -2380(%rbp)
.L5700:
	movl	-2100(%rbp), %eax
	cmpl	%eax, -2380(%rbp)
	jl	.L5710
.L5699:
	leaq	-2304(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_next
	testb	%al, %al
	jne	.L5711
	movq	-2320(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	movq	-2408(%rbp), %rax
	movq	(%rax), %rax
	movl	1732(%rax), %edx
	movq	-2408(%rbp), %rax
	movl	%edx, 16(%rax)
	movq	-2368(%rbp), %rdx
	movq	-2408(%rbp), %rax
	movq	%rdx, 24(%rax)
	movl	$1, %eax
.L5712:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5713
	call	__stack_chk_fail@PLT
.L5713:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE839:
	.size	build_pipeline, .-build_pipeline
	.type	iter_reset, @function
iter_reset:
.LFB840:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$2360, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movl	$16, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -40(%rbp)
	movl	$0, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rdx
	movq	-64(%rbp), %rbx
	leaq	-2368(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_iter
	movq	%rbx, %rdi
	leaq	-2368(%rbp), %rax
	movl	$286, %edx
	movq	%rax, %rsi
	movq	%rdx, %rcx
	rep movsq
	jmp	.L5716
.L5722:
	movl	$0, -44(%rbp)
	jmp	.L5717
.L5721:
	movq	-64(%rbp), %rax
	movq	152(%rax), %rax
	movl	-44(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	addl	$1, -48(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -48(%rbp)
	jne	.L5718
	movl	$0, -48(%rbp)
	addq	$4, -40(%rbp)
.L5718:
	movq	-32(%rbp), %rax
	cmpq	-80(%rbp), %rax
	jne	.L5719
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, (%rax)
	movl	-44(%rbp), %eax
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L5723
	jmp	.L5724
.L5719:
	addl	$1, -44(%rbp)
.L5717:
	movq	-64(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -44(%rbp)
	jl	.L5721
.L5716:
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_next
	testb	%al, %al
	jne	.L5722
	movl	$0, %ecx
	movl	$25362, %edx
	leaq	.LC74(%rip), %rsi
	movl	$6, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L5724:
	call	__stack_chk_fail@PLT
.L5723:
	addq	$2360, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE840:
	.size	iter_reset, .-iter_reset
	.section	.rodata
.LC814:
	.string	"added == false"
.LC815:
	.string	"added == 0"
.LC816:
	.string	"pq != NULL"
.LC817:
	.string	"pq != ((void *)0)"
.LC818:
	.string	"pq->query != NULL"
.LC819:
	.string	"pq->query != ((void *)0)"
	.text
	.globl	ecs_pipeline_update
	.type	ecs_pipeline_update, @function
ecs_pipeline_update:
.LFB841:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, %eax
	movb	%al, -52(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25372, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L5726
	leaq	__PRETTY_FUNCTION__.16001(%rip), %rcx
	movl	$25372, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5726:
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25373, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5727
	leaq	__PRETTY_FUNCTION__.16001(%rip), %rcx
	movl	$25373, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5727:
	movq	-40(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25374, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5728
	leaq	__PRETTY_FUNCTION__.16001(%rip), %rcx
	movl	$25374, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L5728:
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25375, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC417(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L5729
	leaq	__PRETTY_FUNCTION__.16001(%rip), %rcx
	movl	$25375, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC417(%rip), %rdi
	call	__assert_fail@PLT
.L5729:
	cmpb	$0, -52(%rbp)
	je	.L5730
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_eval_component_monitors
.L5730:
	movb	$0, -17(%rbp)
	leaq	-17(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	-40(%rbp), %rax
	movq	%rdx, %rcx
	movl	$12, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -16(%rbp)
	movzbl	-17(%rbp), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25386, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC814(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movzbl	-17(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5731
	leaq	__PRETTY_FUNCTION__.16001(%rip), %rcx
	movl	$25386, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC815(%rip), %rdi
	call	__assert_fail@PLT
.L5731:
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25387, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC816(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L5732
	leaq	__PRETTY_FUNCTION__.16001(%rip), %rcx
	movl	$25387, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC817(%rip), %rdi
	call	__assert_fail@PLT
.L5732:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25388, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC818(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L5733
	leaq	__PRETTY_FUNCTION__.16001(%rip), %rcx
	movl	$25388, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC819(%rip), %rdi
	call	__assert_fail@PLT
.L5733:
	movq	-16(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	build_pipeline
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5735
	call	__stack_chk_fail@PLT
.L5735:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE841:
	.size	ecs_pipeline_update, .-ecs_pipeline_update
	.globl	ecs_pipeline_run
	.type	ecs_pipeline_run, @function
ecs_pipeline_run:
.LFB842:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$2416, %rsp
	movq	%rdi, -2392(%rbp)
	movq	%rsi, -2400(%rbp)
	movss	%xmm0, -2404(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-2392(%rbp), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25400, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-2392(%rbp), %rax
	testq	%rax, %rax
	jne	.L5737
	leaq	__PRETTY_FUNCTION__.16009(%rip), %rcx
	movl	$25400, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5737:
	cmpq	$0, -2400(%rbp)
	jne	.L5738
	movq	-2392(%rbp), %rax
	movq	264(%rax), %rax
	movq	%rax, -2400(%rbp)
.L5738:
	movq	-2392(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	jne	.L5739
	movq	-2392(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25409, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-2392(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5740
	leaq	__PRETTY_FUNCTION__.16009(%rip), %rcx
	movl	$25409, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L5740:
	movq	-2392(%rbp), %rax
	movl	-2404(%rbp), %ecx
	movq	-2400(%rbp), %rdx
	movd	%ecx, %xmm0
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_workers_progress
	jmp	.L5736
.L5739:
	movq	-2392(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25420, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC341(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-2392(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016436, %eax
	je	.L5742
	leaq	__PRETTY_FUNCTION__.16009(%rip), %rcx
	movl	$25420, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC342(%rip), %rdi
	call	__assert_fail@PLT
.L5742:
	leaq	-2392(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -2336(%rbp)
	movq	-2392(%rbp), %rax
	movq	-2400(%rbp), %rcx
	movl	$12, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -2328(%rbp)
	cmpq	$0, -2328(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25426, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC816(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2328(%rbp)
	jne	.L5743
	leaq	__PRETTY_FUNCTION__.16009(%rip), %rcx
	movl	$25426, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC817(%rip), %rdi
	call	__assert_fail@PLT
.L5743:
	movq	-2328(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25427, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC818(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-2328(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	jne	.L5744
	leaq	__PRETTY_FUNCTION__.16009(%rip), %rcx
	movl	$25427, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC819(%rip), %rdi
	call	__assert_fail@PLT
.L5744:
	movq	-2328(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -2320(%rbp)
	movq	-2320(%rbp), %rax
	movl	$16, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -2360(%rbp)
	movq	-2320(%rbp), %rax
	movl	$16, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	_ecs_vector_last
	movq	%rax, -2352(%rbp)
	movl	$0, -2376(%rbp)
	movq	-2336(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_id
	movl	%eax, -2368(%rbp)
	movq	-2392(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	movl	%eax, -2364(%rbp)
	movq	-2336(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_worker_begin
	movq	-2328(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-2304(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_iter
	jmp	.L5745
.L5749:
	leaq	-2304(%rbp), %rax
	movl	$1, %edx
	movl	$120, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -2344(%rbp)
	movl	$0, -2372(%rbp)
	jmp	.L5746
.L5748:
	movq	-2152(%rbp), %rax
	movl	-2372(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -2312(%rbp)
	movl	-2372(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-2344(%rbp), %rax
	leaq	(%rdx,%rax), %rdi
	movq	-2392(%rbp), %rax
	movl	-2404(%rbp), %ecx
	movl	-2364(%rbp), %r9d
	movl	-2368(%rbp), %r8d
	movq	-2312(%rbp), %rdx
	movq	-2336(%rbp), %rsi
	pushq	$0
	pushq	$0
	pushq	$0
	pushq	$0
	movd	%ecx, %xmm0
	movq	%rdi, %rcx
	movq	%rax, %rdi
	call	ecs_run_intern
	addq	$32, %rsp
	addl	$1, -2376(%rbp)
	movq	-2392(%rbp), %rax
	movl	608(%rax), %edx
	addl	$1, %edx
	movl	%edx, 608(%rax)
	movq	-2360(%rbp), %rax
	cmpq	%rax, -2352(%rbp)
	je	.L5747
	movq	-2360(%rbp), %rax
	movl	(%rax), %eax
	cmpl	%eax, -2376(%rbp)
	jne	.L5747
	movl	$0, -2376(%rbp)
	movq	-2360(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -2360(%rbp)
	movq	-2336(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_worker_sync
	testb	%al, %al
	je	.L5747
	movq	-2312(%rbp), %rcx
	leaq	-2360(%rbp), %rdx
	leaq	-2304(%rbp), %rsi
	movq	-2328(%rbp), %rax
	movq	%rax, %rdi
	call	iter_reset
	movl	%eax, -2372(%rbp)
	movq	-2328(%rbp), %rax
	movq	24(%rax), %rax
	movl	$16, %edx
	movl	$4, %esi
	movq	%rax, %rdi
	call	_ecs_vector_last
	movq	%rax, -2352(%rbp)
	leaq	-2304(%rbp), %rax
	movl	$1, %edx
	movl	$120, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -2344(%rbp)
.L5747:
	addl	$1, -2372(%rbp)
.L5746:
	movl	-2100(%rbp), %eax
	cmpl	%eax, -2372(%rbp)
	jl	.L5748
.L5745:
	leaq	-2304(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_next
	testb	%al, %al
	jne	.L5749
	movq	-2336(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_worker_end
.L5736:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5750
	call	__stack_chk_fail@PLT
.L5750:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE842:
	.size	ecs_pipeline_run, .-ecs_pipeline_run
	.type	add_pipeline_tags_to_sig, @function
add_pipeline_tags_to_sig:
.LFB843:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$256, %rsp
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	%rdx, -248(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-248(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -220(%rbp)
	movq	-248(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -216(%rbp)
	movl	$0, -224(%rbp)
	jmp	.L5752
.L5753:
	movl	-224(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-240(%rbp), %rax
	addq	%rax, %rdx
	movl	-224(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rcx
	movq	-216(%rbp), %rax
	addq	%rcx, %rax
	movq	(%rax), %r8
	movl	$267, %r9d
	movq	%rdx, %rsi
	movl	$0, %eax
	movl	$24, %ecx
	movq	%rsi, %rdi
	rep stosq
	movl	$2, 8(%rdx)
	movq	%r8, 16(%rdx)
	movq	%r9, 64(%rdx)
	movb	$3, 96(%rdx)
	movl	$1, 160(%rdx)
	addl	$1, -224(%rbp)
.L5752:
	movl	-224(%rbp), %eax
	cmpl	-220(%rbp), %eax
	jl	.L5753
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5754
	call	__stack_chk_fail@PLT
.L5754:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE843:
	.size	add_pipeline_tags_to_sig, .-add_pipeline_tags_to_sig
	.type	build_pipeline_query, @function
build_pipeline_query:
.LFB844:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$3248, %rsp
	movq	%rdi, -3224(%rbp)
	movq	%rsi, -3232(%rbp)
	movq	%rdx, -3240(%rbp)
	movl	%ecx, %eax
	movb	%al, -3244(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-3232(%rbp), %rcx
	movq	-3224(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -3208(%rbp)
	cmpq	$0, -3208(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25506, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC77(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -3208(%rbp)
	jne	.L5756
	leaq	__PRETTY_FUNCTION__.16047(%rip), %rcx
	movl	$25506, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC78(%rip), %rdi
	call	__assert_fail@PLT
.L5756:
	movq	-3208(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -3212(%rbp)
	movl	$2, -3216(%rbp)
	cmpb	$0, -3244(%rbp)
	je	.L5757
	addl	$1, -3216(%rbp)
.L5757:
	movq	16+ecs_os_api(%rip), %rcx
	movl	-3212(%rbp), %edx
	movl	-3216(%rbp), %eax
	addl	%eax, %edx
	movl	%edx, %eax
	addl	%eax, %eax
	addl	%edx, %eax
	sall	$6, %eax
	movl	%eax, %edi
	call	*%rcx
	movq	%rax, -3200(%rbp)
	movl	$267, %r8d
	movq	-3200(%rbp), %rax
	movq	%rax, %rsi
	movl	$0, %eax
	movl	$24, %edx
	movq	%rsi, %rdi
	movq	%rdx, %rcx
	rep stosq
	movq	-3200(%rbp), %rax
	movl	$2, 8(%rax)
	movq	-3200(%rbp), %rax
	movq	$10, 16(%rax)
	movq	-3200(%rbp), %rax
	movq	%r8, 64(%rax)
	movq	-3200(%rbp), %rax
	movb	$3, 96(%rax)
	movq	-3200(%rbp), %rax
	leaq	192(%rax), %rdx
	movl	$318, %r9d
	movl	$267, %r8d
	movq	%rdx, %rsi
	movl	$0, %eax
	movl	$24, %ecx
	movq	%rsi, %rdi
	rep stosq
	movl	$2, 8(%rdx)
	movq	%r9, 16(%rdx)
	movq	%r8, 64(%rdx)
	movb	$3, 96(%rdx)
	movl	$2, 160(%rdx)
	cmpb	$0, -3244(%rbp)
	je	.L5758
	movq	-3200(%rbp), %rax
	leaq	384(%rax), %rdx
	movl	$319, %r9d
	movl	$267, %r8d
	movq	%rdx, %rsi
	movl	$0, %eax
	movl	$24, %ecx
	movq	%rsi, %rdi
	rep stosq
	movl	$2, 8(%rdx)
	movq	%r9, 16(%rdx)
	movq	%r8, 64(%rdx)
	movb	$3, 96(%rdx)
	movl	$2, 160(%rdx)
.L5758:
	movq	-3208(%rbp), %rax
	movq	8(%rax), %rcx
	movl	-3216(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-3200(%rbp), %rax
	leaq	(%rdx,%rax), %rsi
	movq	-3224(%rbp), %rax
	movq	%rcx, %rdx
	movq	%rax, %rdi
	call	add_pipeline_tags_to_sig
	leaq	-3184(%rbp), %rdx
	movl	$0, %eax
	movl	$396, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-3200(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	-3216(%rbp), %edx
	movl	-3212(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	movq	-3240(%rbp), %rax
	movq	%rax, -88(%rbp)
	leaq	compare_entity(%rip), %rax
	movq	%rax, -72(%rbp)
	movq	-3232(%rbp), %rax
	movq	%rax, -64(%rbp)
	leaq	group_by_phase(%rip), %rax
	movq	%rax, -56(%rbp)
	leaq	-3184(%rbp), %rdx
	movq	-3224(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_init
	movq	%rax, -3192(%rbp)
	cmpq	$0, -3192(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25563, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC345(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -3192(%rbp)
	jne	.L5759
	leaq	__PRETTY_FUNCTION__.16047(%rip), %rcx
	movl	$25563, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC346(%rip), %rdi
	call	__assert_fail@PLT
.L5759:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-3200(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-3192(%rbp), %rax
	movq	-8(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L5761
	call	__stack_chk_fail@PLT
.L5761:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE844:
	.size	build_pipeline_query, .-build_pipeline_query
	.section	.rodata
	.align 8
.LC820:
	.string	"pipeline #[green]%s#[normal] created"
.LC821:
	.string	"BuiltinPipelineQuery"
.LC822:
	.string	"BuiltinPipelineBuildQuery"
.LC823:
	.string	"build_query != NULL"
.LC824:
	.string	"build_query != ((void *)0)"
.LC825:
	.string	"pq->ops == NULL"
.LC826:
	.string	"pq->ops == ((void *)0)"
	.text
	.type	EcsOnUpdatePipeline, @function
EcsOnUpdatePipeline:
.LFB845:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-72(%rbp), %rax
	movq	152(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-72(%rbp), %rax
	movl	204(%rax), %eax
	subl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.L5763
.L5770:
	movl	-60(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	movq	%rax, %r8
	leaq	.LC820(%rip), %rcx
	movl	$25582, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
	call	ecs_log_push
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$1, %ecx
	leaq	.LC821(%rip), %rdx
	movq	%rax, %rdi
	call	build_pipeline_query
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25593, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L5764
	leaq	__PRETTY_FUNCTION__.16064(%rip), %rcx
	movl	$25593, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L5764:
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %ecx
	leaq	.LC822(%rip), %rdx
	movq	%rax, %rdi
	call	build_pipeline_query
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25601, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC823(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5765
	leaq	__PRETTY_FUNCTION__.16064(%rip), %rcx
	movl	$25601, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC824(%rip), %rdi
	call	__assert_fail@PLT
.L5765:
	movb	$0, -61(%rbp)
	leaq	-61(%rbp), %rdx
	movq	-40(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rdx, %rcx
	movl	$12, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25606, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC816(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L5766
	leaq	__PRETTY_FUNCTION__.16064(%rip), %rcx
	movl	$25606, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC817(%rip), %rdi
	call	__assert_fail@PLT
.L5766:
	movzbl	-61(%rbp), %eax
	testb	%al, %al
	je	.L5767
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25610, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC825(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	je	.L5768
	leaq	__PRETTY_FUNCTION__.16064(%rip), %rcx
	movl	$25610, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC826(%rip), %rdi
	call	__assert_fail@PLT
.L5768:
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L5769
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_query_fini
.L5769:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L5767
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_query_fini
.L5767:
	movq	-16(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-16(%rbp), %rax
	movq	-24(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$-1, 16(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 24(%rax)
	call	ecs_log_pop
	subl	$1, -60(%rbp)
.L5763:
	cmpl	$0, -60(%rbp)
	jns	.L5770
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5771
	call	__stack_chk_fail@PLT
.L5771:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE845:
	.size	EcsOnUpdatePipeline, .-EcsOnUpdatePipeline
	.globl	ecs_progress
	.type	ecs_progress, @function
ecs_progress:
.LFB846:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movss	%xmm0, -28(%rbp)
	movl	-28(%rbp), %edx
	movq	-24(%rbp), %rax
	movd	%edx, %xmm0
	movq	%rax, %rdi
	call	ecs_frame_begin
	movd	%xmm0, %eax
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %edx
	movq	-24(%rbp), %rax
	movd	%edx, %xmm0
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_pipeline_run
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_frame_end
	movq	-24(%rbp), %rax
	movzbl	685(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE846:
	.size	ecs_progress, .-ecs_progress
	.globl	ecs_set_time_scale
	.type	ecs_set_time_scale, @function
ecs_set_time_scale:
.LFB847:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movss	%xmm0, -12(%rbp)
	movq	-8(%rbp), %rax
	movss	-12(%rbp), %xmm0
	movss	%xmm0, 568(%rax)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE847:
	.size	ecs_set_time_scale, .-ecs_set_time_scale
	.globl	ecs_reset_clock
	.type	ecs_reset_clock, @function
ecs_reset_clock:
.LFB848:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 588(%rax)
	movq	-8(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 592(%rax)
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE848:
	.size	ecs_reset_clock, .-ecs_reset_clock
	.globl	ecs_deactivate_systems
	.type	ecs_deactivate_systems, @function
ecs_deactivate_systems:
.LFB849:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$2368, %rsp
	movq	%rdi, -2360(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-2360(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25661, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$70, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-2360(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5777
	leaq	__PRETTY_FUNCTION__.16086(%rip), %rcx
	movl	$25661, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L5777:
	movq	-2360(%rbp), %rax
	movq	264(%rax), %rax
	movq	%rax, -2336(%rbp)
	movq	-2336(%rbp), %rcx
	movq	-2360(%rbp), %rax
	movl	$12, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -2328(%rbp)
	cmpq	$0, -2328(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25665, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC816(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2328(%rbp)
	jne	.L5778
	leaq	__PRETTY_FUNCTION__.16086(%rip), %rcx
	movl	$25665, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC817(%rip), %rdi
	call	__assert_fail@PLT
.L5778:
	movq	-2328(%rbp), %rax
	movq	8(%rax), %rdx
	leaq	-2304(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_iter
	movq	-2360(%rbp), %rax
	leaq	368(%rax), %rdx
	movq	-2360(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_none
	jmp	.L5779
.L5783:
	leaq	-2304(%rbp), %rax
	movl	$1, %edx
	movl	$120, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -2320(%rbp)
	movl	$0, -2340(%rbp)
	jmp	.L5780
.L5782:
	movl	-2340(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-2320(%rbp), %rax
	addq	%rdx, %rax
	movq	16(%rax), %rax
	movq	%rax, -2312(%rbp)
	cmpq	$0, -2312(%rbp)
	je	.L5781
	movq	-2312(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	jne	.L5781
	movl	$319, %esi
	movq	-2152(%rbp), %rax
	movl	-2340(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rcx
	movq	-2360(%rbp), %rax
	movq	%rsi, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L5781:
	addl	$1, -2340(%rbp)
.L5780:
	movl	-2100(%rbp), %eax
	cmpl	%eax, -2340(%rbp)
	jl	.L5782
.L5779:
	leaq	-2304(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_query_next
	testb	%al, %al
	jne	.L5783
	movq	-2360(%rbp), %rax
	leaq	368(%rax), %rdx
	movq	-2360(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_defer_flush
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5784
	call	__stack_chk_fail@PLT
.L5784:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE849:
	.size	ecs_deactivate_systems, .-ecs_deactivate_systems
	.section	.rodata
	.align 8
.LC827:
	.string	"ecs_get(world, pipeline, EcsPipelineQuery) != NULL"
	.align 8
.LC828:
	.string	"(((const EcsPipelineQuery*)(ecs_get_id(world, pipeline, (12))))) != ((void *)0)"
	.text
	.globl	ecs_set_pipeline
	.type	ecs_set_pipeline, @function
ecs_set_pipeline:
.LFB850:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25696, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5786
	leaq	__PRETTY_FUNCTION__.16103(%rip), %rcx
	movl	$25696, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5786:
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25697, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5787
	leaq	__PRETTY_FUNCTION__.16103(%rip), %rcx
	movl	$25697, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5787:
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movl	$12, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25698, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC827(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rax
	movl	$12, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	testq	%rax, %rax
	jne	.L5788
	leaq	__PRETTY_FUNCTION__.16103(%rip), %rcx
	movl	$25698, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC828(%rip), %rdi
	call	__assert_fail@PLT
.L5788:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, 264(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE850:
	.size	ecs_set_pipeline, .-ecs_set_pipeline
	.globl	ecs_get_pipeline
	.type	ecs_get_pipeline, @function
ecs_get_pipeline:
.LFB851:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25707, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5790
	leaq	__PRETTY_FUNCTION__.16107(%rip), %rcx
	movl	$25707, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5790:
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	264(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE851:
	.size	ecs_get_pipeline, .-ecs_get_pipeline
	.type	FlecsPipelineFini, @function
FlecsPipelineFini:
.LFB852:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_stage_count
	testl	%eax, %eax
	je	.L5794
	movq	-8(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_set_threads
.L5794:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE852:
	.size	FlecsPipelineFini, .-FlecsPipelineFini
	.section	.rodata
.LC829:
	.string	"FlecsSystem"
.LC830:
	.string	"Ecs"
.LC831:
	.string	"EcsPipeline"
.LC832:
	.string	"EcsPipelineQuery"
.LC833:
	.string	"EcsPreFrame"
.LC834:
	.string	"EcsOnLoad"
.LC835:
	.string	"EcsPostLoad"
.LC836:
	.string	"EcsPreUpdate"
.LC837:
	.string	"EcsOnUpdate"
.LC838:
	.string	"EcsOnValidate"
.LC839:
	.string	"EcsPostUpdate"
.LC840:
	.string	"EcsPreStore"
.LC841:
	.string	"EcsOnStore"
.LC842:
	.string	"EcsPostFrame"
.LC843:
	.string	"EcsOnUpdatePipeline"
.LC844:
	.string	"Pipeline, Type"
.LC845:
	.string	"EcsOnUpdatePipeline != 0"
.LC846:
	.string	"BuiltinPipeline"
	.text
	.globl	FlecsPipelineImport
	.type	FlecsPipelineImport, @function
FlecsPipelineImport:
.LFB853:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$4096, %rsp
	orq	$0, (%rsp)
	subq	$2024, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -6120(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	leaq	-5888(%rbp), %rdx
	movl	$0, %eax
	movl	$74, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC523(%rip), %rax
	movq	%rax, -5880(%rbp)
	movl	$259, %eax
	movq	%rax, -5840(%rbp)
	movq	$4, -5312(%rbp)
	movq	$4, -5304(%rbp)
	leaq	-5888(%rbp), %rdx
	movq	-6120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_module_init
	movq	%rax, -6096(%rbp)
	movq	$0, -5952(%rbp)
	movq	$0, -5944(%rbp)
	movq	$0, -5936(%rbp)
	movl	$1, -5952(%rbp)
	movl	$1, -5948(%rbp)
	movq	$8, -5944(%rbp)
	leaq	-5952(%rbp), %rax
	movq	%rax, -6080(%rbp)
	movq	-6096(%rbp), %rax
	movq	%rax, -5936(%rbp)
	movq	-6096(%rbp), %rdx
	movq	-6096(%rbp), %rsi
	movq	-6120(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -6072(%rbp)
	movq	-6096(%rbp), %rdx
	movq	-6120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_set_scope
	leaq	.LC829(%rip), %rdi
	call	ecs_module_path_from_c
	movq	%rax, -6064(%rbp)
	leaq	-6100(%rbp), %rcx
	movq	-6064(%rbp), %rdx
	movq	-6120(%rbp), %rax
	movl	$4, %r8d
	leaq	FlecsSystemImport(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_import
	movq	%rax, -6088(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-6064(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	$0, -5920(%rbp)
	movq	$0, -5912(%rbp)
	movq	$0, -5904(%rbp)
	movl	$1, -5920(%rbp)
	movl	$1, -5916(%rbp)
	movq	$8, -5912(%rbp)
	leaq	-5920(%rbp), %rax
	movq	%rax, -6056(%rbp)
	movq	-6088(%rbp), %rax
	movq	%rax, -5904(%rbp)
	movq	-6120(%rbp), %rax
	leaq	.LC830(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_set_name_prefix
	movl	$320, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC831(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$320, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC831(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$320, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	leaq	-5296(%rbp), %rdx
	movl	$0, %eax
	movl	$74, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	$12, -5296(%rbp)
	leaq	.LC832(%rip), %rax
	movq	%rax, -5288(%rbp)
	leaq	.LC832(%rip), %rax
	movq	%rax, -5264(%rbp)
	movq	$32, -4720(%rbp)
	movq	$8, -4712(%rbp)
	leaq	-5296(%rbp), %rdx
	movq	-6120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_component_init
	movl	$321, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC833(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$321, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC833(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$321, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$322, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC834(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$322, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC834(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$322, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$323, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC835(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$323, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC835(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$323, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$324, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC836(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$324, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC836(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$324, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$325, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC837(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$325, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC837(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$325, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$326, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC838(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$326, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC838(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$326, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$327, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC839(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$327, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC839(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$327, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$328, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC840(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$328, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC840(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$328, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$329, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC841(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$329, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC841(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$329, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$330, %ecx
	movq	-6120(%rbp), %rax
	leaq	3+.LC842(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$330, %ecx
	movq	-6120(%rbp), %rax
	leaq	.LC842(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-6120(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$330, %ecx
	movq	-6120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$12, %eax
	movq	%rax, 16+__FLECS__TEcsPipelineQuery_value(%rip)
	movq	$0, -6032(%rbp)
	movq	$0, -6024(%rbp)
	movq	$0, -6016(%rbp)
	movq	$0, -6008(%rbp)
	movq	$0, -6000(%rbp)
	movq	$0, -5992(%rbp)
	movq	$0, -5984(%rbp)
	movq	$0, -5976(%rbp)
	movq	$0, -5968(%rbp)
	movq	$0, -5960(%rbp)
	leaq	EcsPipelineQuery_ctor(%rip), %rax
	movq	%rax, -6032(%rbp)
	leaq	EcsPipelineQuery_dtor(%rip), %rax
	movq	%rax, -6024(%rbp)
	leaq	-6032(%rbp), %rdx
	movq	-6120(%rbp), %rax
	movq	%rdx, %r8
	movl	$80, %ecx
	movl	$2, %edx
	movl	$12, %esi
	movq	%rax, %rdi
	call	ecs_set_id
	leaq	EcsOnUpdatePipeline(%rip), %rax
	movq	%rax, -6048(%rbp)
	leaq	-3856(%rbp), %rdx
	movl	$0, %eax
	movl	$479, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC843(%rip), %rax
	movq	%rax, -3848(%rbp)
	movl	$288, %eax
	movq	%rax, -3808(%rbp)
	leaq	.LC844(%rip), %rax
	movq	%rax, -192(%rbp)
	movq	-6048(%rbp), %rax
	movq	%rax, -112(%rbp)
	leaq	-3856(%rbp), %rdx
	movq	-6120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_system_init
	movq	%rax, -6040(%rbp)
	cmpq	$0, -6040(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25759, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC845(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -6040(%rbp)
	jne	.L5796
	leaq	__PRETTY_FUNCTION__.16142(%rip), %rcx
	movl	$25759, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC845(%rip), %rdi
	call	__assert_fail@PLT
.L5796:
	leaq	-4704(%rbp), %rdx
	movl	$0, %eax
	movl	$105, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC846(%rip), %rax
	movq	%rax, -4696(%rbp)
	movl	$320, %eax
	movq	%rax, -4656(%rbp)
	movl	$321, %eax
	movq	%rax, -4128(%rbp)
	movl	$322, %eax
	movq	%rax, -4120(%rbp)
	movl	$323, %eax
	movq	%rax, -4112(%rbp)
	movl	$324, %eax
	movq	%rax, -4104(%rbp)
	movl	$325, %eax
	movq	%rax, -4096(%rbp)
	movl	$326, %eax
	movq	%rax, -4088(%rbp)
	movl	$327, %eax
	movq	%rax, -4080(%rbp)
	movl	$328, %eax
	movq	%rax, -4072(%rbp)
	movl	$329, %eax
	movq	%rax, -4064(%rbp)
	movl	$330, %eax
	movq	%rax, -4056(%rbp)
	leaq	-4704(%rbp), %rdx
	movq	-6120(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_type_init
	movq	-6120(%rbp), %rdx
	movq	%rax, 264(%rdx)
	movq	-6120(%rbp), %rax
	movl	$0, %edx
	leaq	FlecsPipelineFini(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_atfini
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5797
	call	__stack_chk_fail@PLT
.L5797:
	addq	$6120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE853:
	.size	FlecsPipelineImport, .-FlecsPipelineImport
	.comm	FLECS__TEcsTimer,8,8
	.comm	FLECS__TEcsRateFilter,8,8
	.type	AddTickSource, @function
AddTickSource:
.LFB854:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$0, -20(%rbp)
	jmp	.L5799
.L5800:
	movq	$0, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	152(%rax), %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rsi
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	leaq	-16(%rbp), %rdx
	movq	%rdx, %r8
	movl	$8, %ecx
	movl	$11, %edx
	movq	%rax, %rdi
	call	ecs_set_id
	addl	$1, -20(%rbp)
.L5799:
	movq	-40(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -20(%rbp)
	jl	.L5800
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5801
	call	__stack_chk_fail@PLT
.L5801:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE854:
	.size	AddTickSource, .-AddTickSource
	.section	.rodata
.LC847:
	.string	"timer != NULL"
.LC848:
	.string	"timer != ((void *)0)"
	.text
	.type	ProgressTimers, @function
ProgressTimers:
.LFB855:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	$1, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	$2, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -16(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25798, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC847(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5803
	leaq	__PRETTY_FUNCTION__.16159(%rip), %rcx
	movl	$25798, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC848(%rip), %rdi
	call	__assert_fail@PLT
.L5803:
	movl	$0, -40(%rbp)
	jmp	.L5804
.L5811:
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movl	-40(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	12(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5815
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_get_world_info
	movq	%rax, -8(%rbp)
	movl	-40(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movss	4(%rax), %xmm1
	movq	-8(%rbp), %rax
	movss	32(%rax), %xmm0
	addss	%xmm1, %xmm0
	movss	%xmm0, -32(%rbp)
	movl	-40(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movss	(%rax), %xmm0
	movss	%xmm0, -28(%rbp)
	movss	-32(%rbp), %xmm0
	comiss	-28(%rbp), %xmm0
	jb	.L5814
	movss	-32(%rbp), %xmm0
	subss	-28(%rbp), %xmm0
	movss	%xmm0, -36(%rbp)
	movss	-36(%rbp), %xmm0
	comiss	-28(%rbp), %xmm0
	jbe	.L5809
	pxor	%xmm0, %xmm0
	movss	%xmm0, -36(%rbp)
.L5809:
	movl	-40(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movss	-36(%rbp), %xmm0
	movss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movb	$1, (%rax)
	movl	-40(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movss	-32(%rbp), %xmm0
	movss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	13(%rax), %eax
	testb	%al, %al
	je	.L5806
	movl	-40(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, 12(%rax)
	jmp	.L5806
.L5814:
	movl	-40(%rbp), %eax
	cltq
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movss	-32(%rbp), %xmm0
	movss	%xmm0, 4(%rax)
	jmp	.L5806
.L5815:
	nop
.L5806:
	addl	$1, -40(%rbp)
.L5804:
	movq	-56(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -40(%rbp)
	jl	.L5811
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE855:
	.size	ProgressTimers, .-ProgressTimers
	.type	ProgressRateFilters, @function
ProgressRateFilters:
.LFB856:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rax
	movl	$1, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	$2, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -24(%rbp)
	movl	$0, -36(%rbp)
	jmp	.L5817
.L5823:
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movb	$0, -38(%rbp)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movss	16(%rax), %xmm1
	movq	-56(%rbp), %rax
	movss	184(%rax), %xmm0
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	addss	%xmm1, %xmm0
	movss	%xmm0, 16(%rax)
	cmpq	$0, -16(%rbp)
	je	.L5818
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movl	$11, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5819
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -38(%rbp)
	jmp	.L5820
.L5819:
	movb	$1, -38(%rbp)
	jmp	.L5820
.L5818:
	movb	$1, -38(%rbp)
.L5820:
	cmpb	$0, -38(%rbp)
	je	.L5821
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	12(%rax), %edx
	addl	$1, %edx
	movl	%edx, 12(%rax)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	12(%rax), %ecx
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movl	8(%rax), %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%edx, %eax
	testl	%eax, %eax
	sete	%al
	movb	%al, -37(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rax, %rdx
	movzbl	-37(%rbp), %eax
	movb	%al, (%rdx)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rax, %rdx
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rcx
	movq	-24(%rbp), %rax
	addq	%rcx, %rax
	movss	16(%rdx), %xmm0
	movss	%xmm0, 4(%rax)
	cmpb	$0, -37(%rbp)
	je	.L5822
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 16(%rax)
	jmp	.L5822
.L5821:
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
.L5822:
	addl	$1, -36(%rbp)
.L5817:
	movq	-56(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -36(%rbp)
	jl	.L5823
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE856:
	.size	ProgressRateFilters, .-ProgressRateFilters
	.type	ProgressTickSource, @function
ProgressTickSource:
.LFB857:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -8(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L5825
.L5826:
	movl	-12(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movb	$1, (%rax)
	movl	-12(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rax, %rdx
	movq	-24(%rbp), %rax
	movss	184(%rax), %xmm0
	movss	%xmm0, 4(%rdx)
	addl	$1, -12(%rbp)
.L5825:
	movq	-24(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L5826
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE857:
	.size	ProgressTickSource, .-ProgressTickSource
	.globl	ecs_set_timeout
	.type	ecs_set_timeout, @function
ecs_set_timeout:
.LFB858:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movss	%xmm0, -68(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25886, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L5828
	leaq	__PRETTY_FUNCTION__.16195(%rip), %rcx
	movl	$25886, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5828:
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movss	-68(%rbp), %xmm0
	movss	%xmm0, -32(%rbp)
	movb	$1, -20(%rbp)
	movb	$1, -19(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rdx, %r8
	movl	$16, %ecx
	movl	$13, %edx
	movq	%rax, %rdi
	call	ecs_set_id
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %ecx
	movl	$10, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L5829
	movq	-40(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, 40(%rax)
.L5829:
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5831
	call	__stack_chk_fail@PLT
.L5831:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE858:
	.size	ecs_set_timeout, .-ecs_set_timeout
	.section	.rodata
.LC849:
	.string	"timer != 0"
	.text
	.globl	ecs_get_timeout
	.type	ecs_get_timeout, @function
ecs_get_timeout:
.LFB859:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25906, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5833
	leaq	__PRETTY_FUNCTION__.16202(%rip), %rcx
	movl	$25906, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5833:
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25907, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC849(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L5834
	leaq	__PRETTY_FUNCTION__.16202(%rip), %rcx
	movl	$25907, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC849(%rip), %rdi
	call	__assert_fail@PLT
.L5834:
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$13, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5835
	movq	-8(%rbp), %rax
	movss	(%rax), %xmm0
	jmp	.L5836
.L5835:
	pxor	%xmm0, %xmm0
.L5836:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE859:
	.size	ecs_get_timeout, .-ecs_get_timeout
	.globl	ecs_set_interval
	.type	ecs_set_interval, @function
ecs_set_interval:
.LFB860:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movss	%xmm0, -68(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25922, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L5838
	leaq	__PRETTY_FUNCTION__.16209(%rip), %rcx
	movl	$25922, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5838:
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movss	-68(%rbp), %xmm0
	movss	%xmm0, -32(%rbp)
	movb	$1, -20(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rdx, %r8
	movl	$16, %ecx
	movl	$13, %edx
	movq	%rax, %rdi
	call	ecs_set_id
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %ecx
	movl	$10, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L5839
	movq	-40(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, 40(%rax)
.L5839:
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5841
	call	__stack_chk_fail@PLT
.L5841:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE860:
	.size	ecs_set_interval, .-ecs_set_interval
	.globl	ecs_get_interval
	.type	ecs_get_interval, @function
ecs_get_interval:
.LFB861:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25941, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5843
	leaq	__PRETTY_FUNCTION__.16216(%rip), %rcx
	movl	$25941, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5843:
	cmpq	$0, -32(%rbp)
	jne	.L5844
	pxor	%xmm0, %xmm0
	jmp	.L5845
.L5844:
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$13, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5846
	movq	-8(%rbp), %rax
	movss	(%rax), %xmm0
	jmp	.L5845
.L5846:
	pxor	%xmm0, %xmm0
.L5845:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE861:
	.size	ecs_get_interval, .-ecs_get_interval
	.globl	ecs_start_timer
	.type	ecs_start_timer, @function
ecs_start_timer:
.LFB862:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$0, %ecx
	movl	$13, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25960, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC98(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5848
	leaq	__PRETTY_FUNCTION__.16223(%rip), %rcx
	movl	$25960, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC99(%rip), %rdi
	call	__assert_fail@PLT
.L5848:
	movq	-8(%rbp), %rax
	movb	$1, 12(%rax)
	movq	-8(%rbp), %rax
	pxor	%xmm0, %xmm0
	movss	%xmm0, 4(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE862:
	.size	ecs_start_timer, .-ecs_start_timer
	.globl	ecs_stop_timer
	.type	ecs_stop_timer, @function
ecs_stop_timer:
.LFB863:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$0, %ecx
	movl	$13, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25971, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC98(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5850
	leaq	__PRETTY_FUNCTION__.16229(%rip), %rcx
	movl	$25971, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC99(%rip), %rdi
	call	__assert_fail@PLT
.L5850:
	movq	-8(%rbp), %rax
	movb	$0, 12(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE863:
	.size	ecs_stop_timer, .-ecs_stop_timer
	.globl	ecs_set_rate
	.type	ecs_set_rate, @function
ecs_set_rate:
.LFB864:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$25982, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L5852
	leaq	__PRETTY_FUNCTION__.16236(%rip), %rcx
	movl	$25982, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5852:
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%rdx, %r8
	movl	$24, %ecx
	movl	$14, %edx
	movq	%rax, %rdi
	call	ecs_set_id
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %ecx
	movl	$10, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.L5853
	movq	-40(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, 40(%rax)
.L5853:
	movq	-64(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5855
	call	__stack_chk_fail@PLT
.L5855:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE864:
	.size	ecs_set_rate, .-ecs_set_rate
	.globl	ecs_set_rate_filter
	.type	ecs_set_rate_filter, @function
ecs_set_rate_filter:
.LFB865:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movl	-20(%rbp), %edx
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_set_rate
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE865:
	.size	ecs_set_rate_filter, .-ecs_set_rate_filter
	.section	.rodata
.LC850:
	.string	"tick_source != 0"
.LC851:
	.string	"system_data != NULL"
.LC852:
	.string	"system_data != ((void *)0)"
	.text
	.globl	ecs_set_tick_source
	.type	ecs_set_tick_source, @function
ecs_set_tick_source:
.LFB866:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26012, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L5859
	leaq	__PRETTY_FUNCTION__.16250(%rip), %rcx
	movl	$26012, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L5859:
	cmpq	$0, -32(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26013, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC248(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -32(%rbp)
	jne	.L5860
	leaq	__PRETTY_FUNCTION__.16250(%rip), %rcx
	movl	$26013, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC248(%rip), %rdi
	call	__assert_fail@PLT
.L5860:
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26014, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC850(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L5861
	leaq	__PRETTY_FUNCTION__.16250(%rip), %rcx
	movl	$26014, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC850(%rip), %rdi
	call	__assert_fail@PLT
.L5861:
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$0, %ecx
	movl	$10, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26017, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC851(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L5862
	leaq	__PRETTY_FUNCTION__.16250(%rip), %rcx
	movl	$26017, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC852(%rip), %rdi
	call	__assert_fail@PLT
.L5862:
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, 40(%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE866:
	.size	ecs_set_tick_source, .-ecs_set_tick_source
	.section	.rodata
.LC853:
	.string	"EcsTimer"
.LC854:
	.string	"EcsRateFilter"
.LC855:
	.string	"AddTickSource"
	.align 8
.LC856:
	.string	"[in] Timer || RateFilter, [out] !flecs.system.TickSource"
.LC857:
	.string	"AddTickSource != 0"
.LC858:
	.string	"ProgressTimers"
	.align 8
.LC859:
	.string	"Timer, flecs.system.TickSource"
.LC860:
	.string	"ProgressTimers != 0"
.LC861:
	.string	"ProgressRateFilters"
	.align 8
.LC862:
	.string	"[in] RateFilter, [out] flecs.system.TickSource"
.LC863:
	.string	"ProgressRateFilters != 0"
.LC864:
	.string	"ProgressTickSource"
	.align 8
.LC865:
	.string	"[out] flecs.system.TickSource, !RateFilter, !Timer"
.LC866:
	.string	"ProgressTickSource != 0"
	.text
	.globl	FlecsTimerImport
	.type	FlecsTimerImport, @function
FlecsTimerImport:
.LFB867:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	leaq	-16384(%rsp), %r11
.LPSRL0:
	subq	$4096, %rsp
	orq	$0, (%rsp)
	cmpq	%r11, %rsp
	jne	.LPSRL0
	subq	$960, %rsp
	movq	%rdi, -17336(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-17136(%rbp), %rdx
	movl	$0, %eax
	movl	$74, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC524(%rip), %rax
	movq	%rax, -17128(%rbp)
	movl	$259, %eax
	movq	%rax, -17088(%rbp)
	movq	$4, -16560(%rbp)
	movq	$4, -16552(%rbp)
	leaq	-17136(%rbp), %rdx
	movq	-17336(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_module_init
	movq	%rax, -17312(%rbp)
	movq	$0, -17200(%rbp)
	movq	$0, -17192(%rbp)
	movq	$0, -17184(%rbp)
	movl	$1, -17200(%rbp)
	movl	$1, -17196(%rbp)
	movq	$8, -17192(%rbp)
	leaq	-17200(%rbp), %rax
	movq	%rax, -17296(%rbp)
	movq	-17312(%rbp), %rax
	movq	%rax, -17184(%rbp)
	movq	-17312(%rbp), %rdx
	movq	-17312(%rbp), %rsi
	movq	-17336(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -17288(%rbp)
	movq	-17312(%rbp), %rdx
	movq	-17336(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_set_scope
	leaq	.LC523(%rip), %rdi
	call	ecs_module_path_from_c
	movq	%rax, -17280(%rbp)
	leaq	-17316(%rbp), %rcx
	movq	-17280(%rbp), %rdx
	movq	-17336(%rbp), %rax
	movl	$4, %r8d
	leaq	FlecsPipelineImport(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_import
	movq	%rax, -17304(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-17280(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	$0, -17168(%rbp)
	movq	$0, -17160(%rbp)
	movq	$0, -17152(%rbp)
	movl	$1, -17168(%rbp)
	movl	$1, -17164(%rbp)
	movq	$8, -17160(%rbp)
	leaq	-17168(%rbp), %rax
	movq	%rax, -17272(%rbp)
	movq	-17304(%rbp), %rax
	movq	%rax, -17152(%rbp)
	movq	-17336(%rbp), %rax
	leaq	.LC830(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_set_name_prefix
	leaq	-16544(%rbp), %rdx
	movl	$0, %eax
	movl	$74, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	$13, -16544(%rbp)
	leaq	.LC853(%rip), %rax
	movq	%rax, -16536(%rbp)
	leaq	.LC853(%rip), %rax
	movq	%rax, -16512(%rbp)
	movq	$16, -15968(%rbp)
	movq	$4, -15960(%rbp)
	leaq	-16544(%rbp), %rdx
	movq	-17336(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_component_init
	leaq	-15952(%rbp), %rdx
	movl	$0, %eax
	movl	$74, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	$14, -15952(%rbp)
	leaq	.LC854(%rip), %rax
	movq	%rax, -15944(%rbp)
	leaq	.LC854(%rip), %rax
	movq	%rax, -15920(%rbp)
	movq	$24, -15376(%rbp)
	movq	$8, -15368(%rbp)
	leaq	-15952(%rbp), %rdx
	movq	-17336(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_component_init
	leaq	AddTickSource(%rip), %rax
	movq	%rax, -17264(%rbp)
	leaq	-15360(%rbp), %rdx
	movl	$0, %eax
	movl	$479, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC855(%rip), %rax
	movq	%rax, -15352(%rbp)
	movl	$321, %eax
	movq	%rax, -15312(%rbp)
	leaq	.LC856(%rip), %rax
	movq	%rax, -11696(%rbp)
	movq	-17264(%rbp), %rax
	movq	%rax, -11616(%rbp)
	leaq	-15360(%rbp), %rdx
	movq	-17336(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_system_init
	movq	%rax, -17256(%rbp)
	cmpq	$0, -17256(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26035, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC857(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -17256(%rbp)
	jne	.L5864
	leaq	__PRETTY_FUNCTION__.16282(%rip), %rcx
	movl	$26035, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC857(%rip), %rdi
	call	__assert_fail@PLT
.L5864:
	leaq	ProgressTimers(%rip), %rax
	movq	%rax, -17248(%rbp)
	leaq	-11520(%rbp), %rdx
	movl	$0, %eax
	movl	$479, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC858(%rip), %rax
	movq	%rax, -11512(%rbp)
	movl	$321, %eax
	movq	%rax, -11472(%rbp)
	leaq	.LC859(%rip), %rax
	movq	%rax, -7856(%rbp)
	movq	-17248(%rbp), %rax
	movq	%rax, -7776(%rbp)
	leaq	-11520(%rbp), %rdx
	movq	-17336(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_system_init
	movq	%rax, -17240(%rbp)
	cmpq	$0, -17240(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26038, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC860(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -17240(%rbp)
	jne	.L5865
	leaq	__PRETTY_FUNCTION__.16282(%rip), %rcx
	movl	$26038, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC860(%rip), %rdi
	call	__assert_fail@PLT
.L5865:
	leaq	ProgressRateFilters(%rip), %rax
	movq	%rax, -17232(%rbp)
	leaq	-7680(%rbp), %rdx
	movl	$0, %eax
	movl	$479, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC861(%rip), %rax
	movq	%rax, -7672(%rbp)
	movl	$321, %eax
	movq	%rax, -7632(%rbp)
	leaq	.LC862(%rip), %rax
	movq	%rax, -4016(%rbp)
	movq	-17232(%rbp), %rax
	movq	%rax, -3936(%rbp)
	leaq	-7680(%rbp), %rdx
	movq	-17336(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_system_init
	movq	%rax, -17224(%rbp)
	cmpq	$0, -17224(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26041, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC863(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -17224(%rbp)
	jne	.L5866
	leaq	__PRETTY_FUNCTION__.16282(%rip), %rcx
	movl	$26041, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC863(%rip), %rdi
	call	__assert_fail@PLT
.L5866:
	leaq	ProgressTickSource(%rip), %rax
	movq	%rax, -17216(%rbp)
	leaq	-3840(%rbp), %rdx
	movl	$0, %eax
	movl	$479, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC864(%rip), %rax
	movq	%rax, -3832(%rbp)
	movl	$321, %eax
	movq	%rax, -3792(%rbp)
	leaq	.LC865(%rip), %rax
	movq	%rax, -176(%rbp)
	movq	-17216(%rbp), %rax
	movq	%rax, -96(%rbp)
	leaq	-3840(%rbp), %rdx
	movq	-17336(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_system_init
	movq	%rax, -17208(%rbp)
	cmpq	$0, -17208(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26044, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC866(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -17208(%rbp)
	jne	.L5869
	leaq	__PRETTY_FUNCTION__.16282(%rip), %rcx
	movl	$26044, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC866(%rip), %rdi
	call	__assert_fail@PLT
.L5869:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5868
	call	__stack_chk_fail@PLT
.L5868:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE867:
	.size	FlecsTimerImport, .-FlecsTimerImport
	.section	.rodata
	.align 8
	.type	__EcsComponentLifecycle, @object
	.size	__EcsComponentLifecycle, 8
__EcsComponentLifecycle:
	.quad	2
	.globl	__FLECS__TEcsComponentLifecycle_value
	.data
	.align 16
	.type	__FLECS__TEcsComponentLifecycle_value, @object
	.size	__FLECS__TEcsComponentLifecycle_value, 24
__FLECS__TEcsComponentLifecycle_value:
	.long	1
	.long	1
	.quad	8
	.zero	8
	.globl	FLECS__TEcsComponentLifecycle
	.section	.data.rel.local
	.align 8
	.type	FLECS__TEcsComponentLifecycle, @object
	.size	FLECS__TEcsComponentLifecycle, 8
FLECS__TEcsComponentLifecycle:
	.quad	__FLECS__TEcsComponentLifecycle_value
	.section	.rodata
	.align 8
	.type	__EcsSystem, @object
	.size	__EcsSystem, 8
__EcsSystem:
	.quad	10
	.globl	__FLECS__TEcsSystem_value
	.data
	.align 16
	.type	__FLECS__TEcsSystem_value, @object
	.size	__FLECS__TEcsSystem_value, 24
__FLECS__TEcsSystem_value:
	.long	1
	.long	1
	.quad	8
	.zero	8
	.globl	FLECS__TEcsSystem
	.section	.data.rel.local
	.align 8
	.type	FLECS__TEcsSystem, @object
	.size	FLECS__TEcsSystem, 8
FLECS__TEcsSystem:
	.quad	__FLECS__TEcsSystem_value
	.section	.rodata
	.align 8
	.type	__EcsTickSource, @object
	.size	__EcsTickSource, 8
__EcsTickSource:
	.quad	11
	.globl	__FLECS__TEcsTickSource_value
	.data
	.align 16
	.type	__FLECS__TEcsTickSource_value, @object
	.size	__FLECS__TEcsTickSource_value, 24
__FLECS__TEcsTickSource_value:
	.long	1
	.long	1
	.quad	8
	.zero	8
	.globl	FLECS__TEcsTickSource
	.section	.data.rel.local
	.align 8
	.type	FLECS__TEcsTickSource, @object
	.size	FLECS__TEcsTickSource, 8
FLECS__TEcsTickSource:
	.quad	__FLECS__TEcsTickSource_value
	.section	.rodata
.LC867:
	.string	"in != NULL"
.LC868:
	.string	"in != ((void *)0)"
	.text
	.type	get_in_component, @function
get_in_component:
.LFB868:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L5871
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	leaq	-32(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_set
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26068, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC867(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L5871
	leaq	__PRETTY_FUNCTION__.16325(%rip), %rcx
	movl	$26068, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC868(%rip), %rdi
	call	__assert_fail@PLT
.L5871:
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5874
	call	__stack_chk_fail@PLT
.L5874:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE868:
	.size	get_in_component, .-get_in_component
	.section	.rodata
.LC869:
	.string	"in->count >= 0"
	.text
	.type	activate_in_columns, @function
activate_in_columns:
.LFB869:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movl	%ecx, %eax
	movb	%al, -76(%rbp)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-64(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -40(%rbp)
	jmp	.L5876
.L5890:
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movl	8(%rax), %eax
	cmpl	$2, %eax
	jne	.L5877
	movl	-40(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-72(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_in_component
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26088, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC867(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L5878
	leaq	__PRETTY_FUNCTION__.16336(%rip), %rcx
	movl	$26088, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC868(%rip), %rdi
	call	__assert_fail@PLT
.L5878:
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpb	$0, -76(%rbp)
	je	.L5879
	movl	$1, %edx
	jmp	.L5880
.L5879:
	movl	$-1, %edx
.L5880:
	addl	%eax, %edx
	movq	-16(%rbp), %rax
	movl	%edx, (%rax)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26092, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC869(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jns	.L5881
	leaq	__PRETTY_FUNCTION__.16336(%rip), %rcx
	movl	$26092, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC869(%rip), %rdi
	call	__assert_fail@PLT
.L5881:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	je	.L5877
	cmpb	$0, -76(%rbp)
	je	.L5882
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1, %eax
	je	.L5883
.L5882:
	movzbl	-76(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L5877
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	jne	.L5877
.L5883:
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movl	$0, -36(%rbp)
	jmp	.L5884
.L5889:
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	8(%rax), %edx
	cmpb	$0, -76(%rbp)
	je	.L5885
	movl	$1, %esi
	jmp	.L5886
.L5885:
	movl	$-1, %esi
.L5886:
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rcx
	movq	-8(%rbp), %rax
	addq	%rcx, %rax
	movq	(%rax), %rax
	addl	%esi, %edx
	movl	%edx, 8(%rax)
	cmpb	$0, -76(%rbp)
	je	.L5887
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	cmpl	$1, %eax
	jne	.L5887
	movl	$318, %esi
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	movq	-56(%rbp), %rax
	movq	%rsi, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_remove_id
	jmp	.L5888
.L5887:
	movzbl	-76(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L5888
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jne	.L5888
	movl	$318, %esi
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	(%rax), %rcx
	movq	-56(%rbp), %rax
	movq	%rsi, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L5888:
	addl	$1, -36(%rbp)
.L5884:
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L5889
.L5877:
	addl	$1, -40(%rbp)
.L5876:
	movl	-40(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jl	.L5890
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE869:
	.size	activate_in_columns, .-activate_in_columns
	.type	register_out_column, @function
register_out_column:
.LFB870:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	get_in_component
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26128, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC867(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -16(%rbp)
	jne	.L5892
	leaq	__PRETTY_FUNCTION__.16352(%rip), %rcx
	movl	$26128, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC868(%rip), %rdi
	call	__assert_fail@PLT
.L5892:
	movq	-40(%rbp), %rax
	movl	8(%rax), %edx
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	addl	%eax, %edx
	movq	-40(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, (%rax)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE870:
	.size	register_out_column, .-register_out_column
	.section	.rodata
	.align 8
.LC870:
	.string	"system_data->on_demand != NULL"
	.align 8
.LC871:
	.string	"system_data->on_demand != ((void *)0)"
.LC872:
	.string	"out_count != 0"
	.text
	.type	register_out_columns, @function
register_out_columns:
.LFB871:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movl	$0, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L5894
.L5900:
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movl	8(%rax), %eax
	cmpl	$3, %eax
	jne	.L5895
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	jne	.L5896
	movq	16+ecs_os_api(%rip), %rax
	movl	$16, %edi
	call	*%rax
	movq	-72(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26149, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC870(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	jne	.L5897
	leaq	__PRETTY_FUNCTION__.16364(%rip), %rcx
	movl	$26149, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC871(%rip), %rdi
	call	__assert_fail@PLT
.L5897:
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movl	$0, 8(%rax)
.L5896:
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movl	160(%rax), %eax
	cmpl	$2, %eax
	jne	.L5898
	movq	-56(%rbp), %rax
	movq	280(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.L5899
.L5898:
	movq	-56(%rbp), %rax
	movq	272(%rax), %rax
	movq	%rax, -24(%rbp)
.L5899:
	movq	-72(%rbp), %rax
	movq	24(%rax), %rsi
	movl	-32(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$6, %rax
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rcx
	movq	-24(%rbp), %rax
	movq	%rsi, %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	register_out_column
	addl	$1, -36(%rbp)
.L5895:
	addl	$1, -32(%rbp)
.L5894:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L5900
	movq	-64(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	movq	%rax, %rdx
	cmpl	$0, -36(%rbp)
	setne	%al
	movzbl	%al, %eax
	movq	%rdx, %r9
	movl	$26179, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC872(%rip), %rdx
	movl	$46, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -36(%rbp)
	jne	.L5902
	leaq	__PRETTY_FUNCTION__.16364(%rip), %rcx
	movl	$26179, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC872(%rip), %rdi
	call	__assert_fail@PLT
.L5902:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE871:
	.size	register_out_columns, .-register_out_columns
	.type	invoke_status_action, @function
invoke_status_action:
.LFB872:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5905
	movq	-40(%rbp), %rax
	movq	80(%rax), %rcx
	movl	-44(%rbp), %edx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	-8(%rbp), %r8
	movq	%rax, %rdi
	call	*%r8
.L5905:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE872:
	.size	invoke_status_action, .-invoke_status_action
	.section	.rodata
.LC873:
	.string	"activated"
.LC874:
	.string	"deactivated"
.LC875:
	.string	"system #[green]%s#[reset] %s"
	.text
	.globl	ecs_system_activate
	.type	ecs_system_activate, @function
ecs_system_activate:
.LFB873:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, %eax
	movq	%rcx, -48(%rbp)
	movb	%al, -36(%rbp)
	movq	-24(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26202, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5907
	leaq	__PRETTY_FUNCTION__.16382(%rip), %rcx
	movl	$26202, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L5907:
	cmpb	$0, -36(%rbp)
	je	.L5908
	movl	$319, %edx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_remove_id
.L5908:
	cmpq	$0, -48(%rbp)
	jne	.L5909
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$10, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -48(%rbp)
.L5909:
	cmpq	$0, -48(%rbp)
	je	.L5919
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L5919
	movzbl	-36(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L5913
	movl	$261, %edx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	jne	.L5914
	movl	$318, %edx
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	je	.L5913
.L5914:
	movq	-48(%rbp), %rax
	movq	16(%rax), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	je	.L5920
.L5913:
	movzbl	-36(%rbp), %ecx
	movq	-24(%rbp), %rax
	movq	272(%rax), %rdx
	movq	-48(%rbp), %rax
	movq	16(%rax), %rsi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	activate_in_columns
	cmpb	$0, -36(%rbp)
	je	.L5915
	movl	$3, %ecx
	jmp	.L5916
.L5915:
	movl	$4, %ecx
.L5916:
	movq	-48(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	invoke_status_action
	cmpb	$0, -36(%rbp)
	je	.L5917
	leaq	.LC873(%rip), %rbx
	jmp	.L5918
.L5917:
	leaq	.LC874(%rip), %rbx
.L5918:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	movq	%rbx, %r9
	movq	%rax, %r8
	leaq	.LC875(%rip), %rcx
	movl	$26242, %edx
	leaq	.LC74(%rip), %rsi
	movl	$2, %edi
	movl	$0, %eax
	call	_ecs_trace
	jmp	.L5906
.L5919:
	nop
	jmp	.L5906
.L5920:
	nop
.L5906:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE873:
	.size	ecs_system_activate, .-ecs_system_activate
	.type	ecs_enable_system, @function
ecs_enable_system:
.LFB874:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movl	%ecx, %eax
	movb	%al, -44(%rbp)
	movq	-24(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26255, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5922
	leaq	__PRETTY_FUNCTION__.16389(%rip), %rcx
	movl	$26255, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L5922:
	movq	-40(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5928
	movq	-8(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	je	.L5925
	movzbl	-44(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_system_activate
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movl	$0, %ecx
	movl	$10, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -40(%rbp)
.L5925:
	movzbl	-44(%rbp), %ecx
	movq	-24(%rbp), %rax
	movq	280(%rax), %rdx
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	activate_in_columns
	cmpb	$0, -44(%rbp)
	je	.L5926
	movl	$1, %ecx
	jmp	.L5927
.L5926:
	movl	$2, %ecx
.L5927:
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	invoke_status_action
	jmp	.L5921
.L5928:
	nop
.L5921:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE874:
	.size	ecs_enable_system, .-ecs_enable_system
	.globl	ecs_enable
	.type	ecs_enable, @function
ecs_enable:
.LFB875:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, %eax
	movb	%al, -52(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26288, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5930
	leaq	__PRETTY_FUNCTION__.16396(%rip), %rcx
	movl	$26288, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5930:
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	je	.L5931
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -32(%rbp)
	jmp	.L5932
.L5933:
	movl	-32(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movzbl	-52(%rbp), %edx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_enable
	addl	$1, -32(%rbp)
.L5932:
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jl	.L5933
	jmp	.L5936
.L5931:
	cmpb	$0, -52(%rbp)
	je	.L5935
	movl	$261, %edx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_remove_id
	jmp	.L5936
.L5935:
	movl	$261, %edx
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L5936:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE875:
	.size	ecs_enable, .-ecs_enable
	.globl	ecs_run_intern
	.type	ecs_run_intern, @function
ecs_run_intern:
.LFB876:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$2416, %rsp
	movq	%rdi, -2360(%rbp)
	movq	%rsi, -2368(%rbp)
	movq	%rdx, -2376(%rbp)
	movq	%rcx, -2384(%rbp)
	movl	%r8d, -2388(%rbp)
	movl	%r9d, -2392(%rbp)
	movss	%xmm0, -2396(%rbp)
	movq	32(%rbp), %rax
	movq	%rax, -2408(%rbp)
	movq	40(%rbp), %rax
	movq	%rax, -2416(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movss	-2396(%rbp), %xmm0
	movss	%xmm0, -2340(%rbp)
	movq	-2384(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -2336(%rbp)
	cmpq	$0, -2416(%rbp)
	jne	.L5938
	movq	-2384(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -2416(%rbp)
.L5938:
	cmpq	$0, -2336(%rbp)
	je	.L5939
	movq	-2336(%rbp), %rcx
	movq	-2360(%rbp), %rax
	movl	$11, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -2328(%rbp)
	cmpq	$0, -2328(%rbp)
	je	.L5940
	movq	-2328(%rbp), %rax
	movss	4(%rax), %xmm0
	movss	%xmm0, -2340(%rbp)
	movq	-2328(%rbp), %rax
	movzbl	(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L5939
	movl	$0, %eax
	jmp	.L5950
.L5940:
	movl	$0, %eax
	jmp	.L5950
.L5939:
	movq	-2360(%rbp), %rax
	movzbl	684(%rax), %eax
	movb	%al, -2341(%rbp)
	cmpb	$0, -2341(%rbp)
	je	.L5942
	movq	168+ecs_os_api(%rip), %rdx
	leaq	-2312(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5942:
	movq	-2368(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_defer_begin
	movq	-2384(%rbp), %rax
	movq	16(%rax), %rsi
	leaq	-2304(%rbp), %rax
	movl	24(%rbp), %edx
	movl	%edx, %ecx
	movl	16(%rbp), %edx
	movq	%rax, %rdi
	call	ecs_query_iter_page
	movq	-2368(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -2304(%rbp)
	movq	-2376(%rbp), %rax
	movq	%rax, -2288(%rbp)
	movq	-2384(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -2264(%rbp)
	movss	-2396(%rbp), %xmm0
	movss	%xmm0, -2120(%rbp)
	movss	-2340(%rbp), %xmm0
	movss	%xmm0, -2116(%rbp)
	movq	-2360(%rbp), %rax
	movss	588(%rax), %xmm0
	movss	%xmm0, -2112(%rbp)
	movl	16(%rbp), %eax
	movl	%eax, -2108(%rbp)
	movq	-2416(%rbp), %rax
	movq	%rax, -2144(%rbp)
	movq	-2384(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -2136(%rbp)
	movq	-2384(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -2128(%rbp)
	movq	-2384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -2320(%rbp)
	cmpl	$1, -2392(%rbp)
	jg	.L5947
	jmp	.L5944
.L5945:
	leaq	-2304(%rbp), %rax
	movq	-2320(%rbp), %rdx
	movq	%rax, %rdi
	call	*%rdx
.L5944:
	movq	-2408(%rbp), %rdx
	leaq	-2304(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_next_w_filter
	testb	%al, %al
	jne	.L5945
	jmp	.L5946
.L5948:
	leaq	-2304(%rbp), %rax
	movq	-2320(%rbp), %rdx
	movq	%rax, %rdi
	call	*%rdx
.L5947:
	movl	-2392(%rbp), %edx
	movl	-2388(%rbp), %ecx
	leaq	-2304(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	ecs_query_next_worker
	testb	%al, %al
	jne	.L5948
.L5946:
	movq	-2368(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	ecs_defer_end
	cmpb	$0, -2341(%rbp)
	je	.L5949
	leaq	-2312(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_time_measure
	cvtsd2ss	%xmm0, %xmm1
	movq	-2384(%rbp), %rax
	movss	52(%rax), %xmm0
	addss	%xmm1, %xmm0
	movq	-2384(%rbp), %rax
	movss	%xmm0, 52(%rax)
.L5949:
	movq	-2384(%rbp), %rax
	movl	48(%rax), %eax
	leal	1(%rax), %edx
	movq	-2384(%rbp), %rax
	movl	%edx, 48(%rax)
	movq	-2080(%rbp), %rax
.L5950:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L5951
	call	__stack_chk_fail@PLT
.L5951:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE876:
	.size	ecs_run_intern, .-ecs_run_intern
	.globl	ecs_run_w_filter
	.type	ecs_run_w_filter, @function
ecs_run_w_filter:
.LFB877:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movss	%xmm0, -36(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -64(%rbp)
	leaq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movl	$10, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L5953
	leaq	__PRETTY_FUNCTION__.16442(%rip), %rcx
	movl	$26407, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC851(%rip), %rdi
	call	__assert_fail@PLT
.L5953:
	movq	-24(%rbp), %rax
	movl	-36(%rbp), %edi
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	pushq	-64(%rbp)
	pushq	-56(%rbp)
	movl	-44(%rbp), %r8d
	pushq	%r8
	movl	-40(%rbp), %r8d
	pushq	%r8
	movd	%edi, %xmm0
	movl	$0, %r9d
	movl	$0, %r8d
	movq	%rax, %rdi
	call	ecs_run_intern
	addq	$32, %rsp
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE877:
	.size	ecs_run_w_filter, .-ecs_run_w_filter
	.globl	ecs_run_worker
	.type	ecs_run_worker, @function
ecs_run_worker:
.LFB878:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movss	%xmm0, -44(%rbp)
	movq	%r8, -56(%rbp)
	leaq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movl	$10, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L5956
	leaq	__PRETTY_FUNCTION__.16453(%rip), %rcx
	movl	$26426, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC851(%rip), %rdi
	call	__assert_fail@PLT
.L5956:
	movq	-24(%rbp), %rax
	movl	-44(%rbp), %edi
	movl	-40(%rbp), %r9d
	movl	-36(%rbp), %r8d
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	-16(%rbp), %rsi
	pushq	-56(%rbp)
	pushq	$0
	pushq	$0
	pushq	$0
	movd	%edi, %xmm0
	movq	%rax, %rdi
	call	ecs_run_intern
	addq	$32, %rsp
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE878:
	.size	ecs_run_worker, .-ecs_run_worker
	.globl	ecs_run
	.type	ecs_run, @function
ecs_run:
.LFB879:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movss	%xmm0, -20(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-32(%rbp), %rdx
	movl	-20(%rbp), %edi
	movq	-16(%rbp), %rsi
	movq	-8(%rbp), %rax
	movq	%rdx, %r9
	movl	$0, %r8d
	movl	$0, %ecx
	movl	$0, %edx
	movd	%edi, %xmm0
	movq	%rax, %rdi
	call	ecs_run_w_filter
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE879:
	.size	ecs_run, .-ecs_run
	.globl	flecs_run_monitor
	.type	flecs_run_monitor, @function
flecs_run_monitor:
.LFB880:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$2384, %rsp
	movq	%rdi, -2344(%rbp)
	movq	%rsi, -2352(%rbp)
	movq	%rdx, -2360(%rbp)
	movl	%ecx, -2364(%rbp)
	movl	%r8d, -2368(%rbp)
	movq	%r9, -2376(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-2352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -2328(%rbp)
	cmpq	$0, -2328(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26451, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC88(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2328(%rbp)
	jne	.L5961
	leaq	__PRETTY_FUNCTION__.16469(%rip), %rcx
	movl	$26451, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC89(%rip), %rdi
	call	__assert_fail@PLT
.L5961:
	movq	-2328(%rbp), %rax
	movq	1632(%rax), %rax
	movq	%rax, -2320(%rbp)
	movq	-2320(%rbp), %rcx
	movq	-2344(%rbp), %rax
	movl	$10, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -2312(%rbp)
	cmpq	$0, -2312(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26455, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC851(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2312(%rbp)
	jne	.L5962
	leaq	__PRETTY_FUNCTION__.16469(%rip), %rcx
	movl	$26455, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC852(%rip), %rdi
	call	__assert_fail@PLT
.L5962:
	movq	-2312(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L5967
	leaq	-2304(%rbp), %rdx
	movl	$0, %eax
	movl	$286, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-2352(%rbp), %rax
	movl	8(%rax), %ecx
	movl	-2368(%rbp), %r8d
	movl	-2364(%rbp), %edi
	leaq	-2304(%rbp), %rdx
	movq	-2328(%rbp), %rsi
	movq	-2344(%rbp), %rax
	movl	%r8d, %r9d
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	flecs_query_set_iter
	movq	-2344(%rbp), %rax
	movq	%rax, -2304(%rbp)
	movq	-2360(%rbp), %rax
	movq	%rax, -2088(%rbp)
	movb	$1, -2092(%rbp)
	movq	-2312(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, -2136(%rbp)
	movq	-2312(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, -2128(%rbp)
	cmpq	$0, -2376(%rbp)
	je	.L5965
	movq	-2376(%rbp), %rax
	movq	%rax, -2152(%rbp)
.L5965:
	movq	-2320(%rbp), %rax
	movq	%rax, -2288(%rbp)
	movq	-2312(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-2304(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	jmp	.L5960
.L5967:
	nop
.L5960:
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L5966
	call	__stack_chk_fail@PLT
.L5966:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE880:
	.size	flecs_run_monitor, .-flecs_run_monitor
	.globl	ecs_get_system_query
	.type	ecs_get_system_query, @function
ecs_get_system_query:
.LFB881:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$7, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	je	.L5969
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	jmp	.L5970
.L5969:
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$10, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5971
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	jmp	.L5970
.L5971:
	movl	$0, %eax
.L5970:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE881:
	.size	ecs_get_system_query, .-ecs_get_system_query
	.globl	ecs_get_system_ctx
	.type	ecs_get_system_ctx, @function
ecs_get_system_ctx:
.LFB882:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$10, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5973
	movq	-8(%rbp), %rax
	movq	72(%rax), %rax
	jmp	.L5974
.L5973:
	movl	$0, %eax
.L5974:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE882:
	.size	ecs_get_system_ctx, .-ecs_get_system_ctx
	.globl	ecs_get_system_binding_ctx
	.type	ecs_get_system_binding_ctx, @function
ecs_get_system_binding_ctx:
.LFB883:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	-24(%rbp), %rax
	movl	$10, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L5976
	movq	-8(%rbp), %rax
	movq	88(%rax), %rax
	jmp	.L5977
.L5976:
	movl	$0, %eax
.L5977:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE883:
	.size	ecs_get_system_binding_ctx, .-ecs_get_system_binding_ctx
	.type	sys_ctor_init_zero, @function
sys_ctor_init_zero:
.LFB884:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movl	%r9d, -44(%rbp)
	movl	-44(%rbp), %eax
	cltq
	imulq	-40(%rbp), %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE884:
	.size	sys_ctor_init_zero, .-sys_ctor_init_zero
	.type	ecs_colsystem_dtor, @function
ecs_colsystem_dtor:
.LFB885:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L5980
.L5987:
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movl	-28(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L5981
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	je	.L5981
	movq	-64(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$4, %ecx
	movq	%rax, %rdi
	call	invoke_status_action
.L5981:
	movl	$261, %edx
	movq	-8(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	xorl	$1, %eax
	testb	%al, %al
	je	.L5982
	movl	$318, %edx
	movq	-8(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	xorl	$1, %eax
	testb	%al, %al
	je	.L5982
	movq	-64(%rbp), %rdx
	movq	-8(%rbp), %rsi
	movq	-40(%rbp), %rax
	movl	$2, %ecx
	movq	%rax, %rdi
	call	invoke_status_action
.L5982:
	movq	40+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-16(%rbp), %rax
	movq	96(%rax), %rax
	testq	%rax, %rax
	je	.L5983
	movq	-16(%rbp), %rax
	movq	96(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	72(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5983:
	movq	-16(%rbp), %rax
	movq	104(%rax), %rax
	testq	%rax, %rax
	je	.L5984
	movq	-16(%rbp), %rax
	movq	104(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	80(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5984:
	movq	-16(%rbp), %rax
	movq	112(%rax), %rax
	testq	%rax, %rax
	je	.L5985
	movq	-16(%rbp), %rax
	movq	112(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	88(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
.L5985:
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	je	.L5986
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, %rdi
	call	ecs_query_fini
.L5986:
	addl	$1, -28(%rbp)
.L5980:
	movl	-28(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L5987
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE885:
	.size	ecs_colsystem_dtor, .-ecs_colsystem_dtor
	.type	DisableSystem, @function
DisableSystem:
.LFB886:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, %edx
	movl	$120, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -8(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L5989
.L5990:
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	addq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	152(%rax), %rax
	movl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	salq	$3, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_enable_system
	addl	$1, -12(%rbp)
.L5989:
	movq	-24(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L5990
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE886:
	.size	DisableSystem, .-DisableSystem
	.type	EnableSystem, @function
EnableSystem:
.LFB887:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, %edx
	movl	$120, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -8(%rbp)
	movl	$0, -12(%rbp)
	jmp	.L5992
.L5993:
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	subq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-8(%rbp), %rax
	addq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	152(%rax), %rax
	movl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	salq	$3, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	ecs_enable_system
	addl	$1, -12(%rbp)
.L5992:
	movq	-24(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -12(%rbp)
	jl	.L5993
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE887:
	.size	EnableSystem, .-EnableSystem
	.section	.rodata
.LC876:
	.string	"system->on_demand != NULL"
	.align 8
.LC877:
	.string	"system->on_demand != ((void *)0)"
	.align 8
.LC878:
	.string	"system #[green]%s#[reset] created with #[red]%s"
	.text
	.globl	ecs_system_init
	.type	ecs_system_init, @function
ecs_system_init:
.LFB888:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$3272, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -3272(%rbp)
	movq	%rsi, -3280(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	-3272(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26624, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$72, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-3272(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L5995
	leaq	__PRETTY_FUNCTION__.16534(%rip), %rcx
	movl	$26624, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L5995:
	movq	-3272(%rbp), %rax
	movzbl	681(%rax), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26625, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC217(%rip), %rdx
	movl	$70, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-3272(%rbp), %rax
	movzbl	681(%rax), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L5996
	leaq	__PRETTY_FUNCTION__.16534(%rip), %rcx
	movl	$26625, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC217(%rip), %rdi
	call	__assert_fail@PLT
.L5996:
	movq	-3280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -3232(%rbp)
	movq	-3280(%rbp), %rdx
	movq	-3272(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_entity_init
	movq	%rax, -3224(%rbp)
	cmpq	$0, -3224(%rbp)
	jne	.L5997
	movl	$0, %eax
	jmp	.L6023
.L5997:
	movb	$0, -3249(%rbp)
	leaq	-3249(%rbp), %rdx
	movq	-3224(%rbp), %rsi
	movq	-3272(%rbp), %rax
	movq	%rdx, %rcx
	movl	$10, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -3216(%rbp)
	movzbl	-3249(%rbp), %eax
	testb	%al, %al
	je	.L5999
	movq	-3280(%rbp), %rax
	movq	3744(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26636, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC776(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-3280(%rbp), %rax
	movq	3744(%rax), %rax
	testq	%rax, %rax
	jne	.L6000
	leaq	__PRETTY_FUNCTION__.16534(%rip), %rcx
	movl	$26636, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC777(%rip), %rdi
	call	__assert_fail@PLT
.L6000:
	movq	-3216(%rbp), %rax
	movl	$120, %edx
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	movq	-3280(%rbp), %rdx
	leaq	-3200(%rbp), %rax
	addq	$576, %rdx
	movl	$396, %ecx
	movq	%rax, %rdi
	movq	%rdx, %rsi
	rep movsq
	movq	-3280(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-3224(%rbp), %rax
	movq	%rax, -40(%rbp)
	leaq	-3200(%rbp), %rdx
	movq	-3272(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_query_init
	movq	%rax, -3208(%rbp)
	cmpq	$0, -3208(%rbp)
	jne	.L6001
	movq	-3224(%rbp), %rdx
	movq	-3272(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_delete
	movl	$0, %eax
	jmp	.L6023
.L6001:
	leaq	-3249(%rbp), %rdx
	movq	-3224(%rbp), %rsi
	movq	-3272(%rbp), %rax
	movq	%rdx, %rcx
	movl	$10, %edx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -3216(%rbp)
	movzbl	-3249(%rbp), %eax
	movzbl	%al, %eax
	testl	%eax, %eax
	setne	%al
	xorl	$1, %eax
	movzbl	%al, %eax
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26652, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC814(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movzbl	-3249(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	jne	.L6002
	leaq	__PRETTY_FUNCTION__.16534(%rip), %rcx
	movl	$26652, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC815(%rip), %rdi
	call	__assert_fail@PLT
.L6002:
	movq	-3272(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_defer_begin
	movq	-3216(%rbp), %rax
	movq	-3224(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-3216(%rbp), %rax
	movq	-3208(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-3280(%rbp), %rax
	movq	3744(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-3280(%rbp), %rax
	movq	3752(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 32(%rax)
	movq	-3280(%rbp), %rax
	movq	3760(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 64(%rax)
	movq	-3280(%rbp), %rax
	movq	3768(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 72(%rax)
	movq	-3280(%rbp), %rax
	movq	3776(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 80(%rax)
	movq	-3280(%rbp), %rax
	movq	3784(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 88(%rax)
	movq	-3280(%rbp), %rax
	movq	3792(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 96(%rax)
	movq	-3280(%rbp), %rax
	movq	3800(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 104(%rax)
	movq	-3280(%rbp), %rax
	movq	3808(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 112(%rax)
	movq	-3280(%rbp), %rax
	movq	3824(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 40(%rax)
	movq	-3208(%rbp), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	je	.L6003
	movq	-3216(%rbp), %rdx
	movq	-3224(%rbp), %rsi
	movq	-3272(%rbp), %rax
	movq	%rdx, %rcx
	movl	$1, %edx
	movq	%rax, %rdi
	call	ecs_system_activate
	jmp	.L6004
.L6003:
	movl	$319, %edx
	movq	-3224(%rbp), %rcx
	movq	-3272(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L6004:
	movq	-3272(%rbp), %rax
	movq	280(%rax), %rdx
	movq	-3208(%rbp), %rsi
	movq	-3272(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	activate_in_columns
	movl	$316, %edx
	movq	-3224(%rbp), %rcx
	movq	-3272(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	testb	%al, %al
	je	.L6005
	movq	-3216(%rbp), %rdx
	movq	-3224(%rbp), %rcx
	movq	-3272(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	register_out_columns
	movq	-3216(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26692, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC876(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-3216(%rbp), %rax
	movq	24(%rax), %rax
	testq	%rax, %rax
	jne	.L6006
	leaq	__PRETTY_FUNCTION__.16534(%rip), %rcx
	movl	$26692, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC877(%rip), %rdi
	call	__assert_fail@PLT
.L6006:
	movq	-3216(%rbp), %rax
	movq	24(%rax), %rax
	movl	8(%rax), %eax
	testl	%eax, %eax
	jne	.L6005
	movl	$318, %edx
	movq	-3224(%rbp), %rcx
	movq	-3272(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L6005:
	movl	$261, %edx
	movq	-3224(%rbp), %rcx
	movq	-3272(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_has_id
	xorl	$1, %eax
	testb	%al, %al
	je	.L6007
	movq	-3216(%rbp), %rdx
	movq	-3224(%rbp), %rsi
	movq	-3272(%rbp), %rax
	movl	$1, %ecx
	movq	%rax, %rdi
	call	invoke_status_action
	movq	-3216(%rbp), %rax
	movq	16(%rax), %rax
	movq	1608(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	je	.L6007
	movq	-3216(%rbp), %rdx
	movq	-3224(%rbp), %rsi
	movq	-3272(%rbp), %rax
	movl	$3, %ecx
	movq	%rax, %rdi
	call	invoke_status_action
.L6007:
	movq	-3280(%rbp), %rax
	movss	3816(%rax), %xmm0
	pxor	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	jp	.L6008
	pxor	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	jne	.L6008
	movq	-3280(%rbp), %rax
	movl	3820(%rax), %eax
	testl	%eax, %eax
	jne	.L6008
	movq	-3280(%rbp), %rax
	movq	3824(%rax), %rax
	testq	%rax, %rax
	je	.L6009
.L6008:
	movq	-3280(%rbp), %rax
	movss	3816(%rax), %xmm0
	pxor	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	jp	.L6025
	pxor	%xmm1, %xmm1
	ucomiss	%xmm1, %xmm0
	je	.L6010
.L6025:
	movq	-3280(%rbp), %rax
	movl	3816(%rax), %ecx
	movq	-3224(%rbp), %rdx
	movq	-3272(%rbp), %rax
	movd	%ecx, %xmm0
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_set_interval
.L6010:
	movq	-3280(%rbp), %rax
	movl	3820(%rax), %eax
	testl	%eax, %eax
	je	.L6012
	movq	-3280(%rbp), %rax
	movq	3824(%rax), %rcx
	movq	-3280(%rbp), %rax
	movl	3820(%rax), %edx
	movq	-3224(%rbp), %rsi
	movq	-3272(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_set_rate
	jmp	.L6009
.L6012:
	movq	-3280(%rbp), %rax
	movq	3824(%rax), %rax
	testq	%rax, %rax
	je	.L6009
	movq	-3280(%rbp), %rax
	movq	3824(%rax), %rdx
	movq	-3224(%rbp), %rcx
	movq	-3272(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_tick_source
.L6009:
	movq	-3224(%rbp), %rcx
	movq	-3272(%rbp), %rax
	movl	$10, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_modified_id
	movq	-3208(%rbp), %rax
	movq	1568(%rax), %rbx
	movq	-3224(%rbp), %rdx
	movq	-3272(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	movq	%rbx, %r9
	movq	%rax, %r8
	leaq	.LC878(%rip), %rcx
	movl	$26732, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
	movq	-3272(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_defer_end
	jmp	.L6013
.L5999:
	movq	-3280(%rbp), %rax
	movq	3664(%rax), %rax
	movq	%rax, -3248(%rbp)
	movq	-3216(%rbp), %rax
	movq	16(%rax), %rax
	movq	1568(%rax), %rax
	movq	%rax, -3240(%rbp)
	cmpq	$0, -3248(%rbp)
	je	.L6014
	cmpq	$0, -3240(%rbp)
	je	.L6015
	movq	-3240(%rbp), %rax
	leaq	.LC293(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L6015
	movq	$0, -3240(%rbp)
.L6015:
	cmpq	$0, -3248(%rbp)
	je	.L6016
	movq	-3248(%rbp), %rax
	leaq	.LC293(%rip), %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L6016
	movq	$0, -3248(%rbp)
.L6016:
	cmpq	$0, -3240(%rbp)
	je	.L6017
	cmpq	$0, -3248(%rbp)
	je	.L6017
	movq	-3248(%rbp), %rdx
	movq	-3240(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	je	.L6020
	movq	-3280(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	movl	$26747, %edx
	leaq	.LC74(%rip), %rsi
	movl	$8, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L6017:
	movq	-3240(%rbp), %rax
	cmpq	-3248(%rbp), %rax
	je	.L6020
	movq	-3280(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	movl	$26751, %edx
	leaq	.LC74(%rip), %rsi
	movl	$8, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L6014:
	cmpq	$0, -3232(%rbp)
	jne	.L6020
	cmpq	$0, -3240(%rbp)
	je	.L6020
	movq	-3280(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rcx
	movl	$26762, %edx
	leaq	.LC74(%rip), %rsi
	movl	$8, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L6020:
	movq	-3280(%rbp), %rax
	movq	3744(%rax), %rax
	testq	%rax, %rax
	je	.L6021
	movq	-3280(%rbp), %rax
	movq	3744(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, (%rax)
.L6021:
	movq	-3280(%rbp), %rax
	movq	3768(%rax), %rax
	testq	%rax, %rax
	je	.L6022
	movq	-3280(%rbp), %rax
	movq	3768(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 72(%rax)
.L6022:
	movq	-3280(%rbp), %rax
	movq	3784(%rax), %rax
	testq	%rax, %rax
	je	.L6013
	movq	-3280(%rbp), %rax
	movq	3784(%rax), %rdx
	movq	-3216(%rbp), %rax
	movq	%rdx, 88(%rax)
.L6013:
	movq	-3224(%rbp), %rax
.L6023:
	movq	-24(%rbp), %rbx
	xorq	%fs:40, %rbx
	je	.L6024
	call	__stack_chk_fail@PLT
.L6024:
	addq	$3272, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE888:
	.size	ecs_system_init, .-ecs_system_init
	.section	.rodata
.LC879:
	.string	"EcsSystem"
.LC880:
	.string	"EcsTickSource"
.LC881:
	.string	"EcsOnAdd"
.LC882:
	.string	"EcsOnRemove"
.LC883:
	.string	"EcsOnSet"
.LC884:
	.string	"EcsUnSet"
.LC885:
	.string	"EcsDisabledIntern"
.LC886:
	.string	"EcsInactive"
.LC887:
	.string	"EcsOnDemand"
.LC888:
	.string	"EcsMonitor"
.LC889:
	.string	"DisableSystem"
	.align 8
.LC890:
	.string	"System, Disabled || DisabledIntern, SYSTEM:Hidden"
.LC891:
	.string	"DisableSystem != 0"
.LC892:
	.string	"EnableSystem"
	.align 8
.LC893:
	.string	"System, !Disabled, !DisabledIntern, SYSTEM:Hidden"
.LC894:
	.string	"EnableSystem != 0"
	.text
	.globl	FlecsSystemImport
	.type	FlecsSystemImport, @function
FlecsSystemImport:
.LFB889:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$4096, %rsp
	orq	$0, (%rsp)
	subq	$4096, %rsp
	orq	$0, (%rsp)
	subq	$1464, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -9656(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	leaq	-9472(%rbp), %rdx
	movl	$0, %eax
	movl	$74, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC829(%rip), %rax
	movq	%rax, -9464(%rbp)
	movl	$259, %eax
	movq	%rax, -9424(%rbp)
	movq	$4, -8896(%rbp)
	movq	$4, -8888(%rbp)
	leaq	-9472(%rbp), %rdx
	movq	-9656(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_module_init
	movq	%rax, -9648(%rbp)
	movq	$0, -9504(%rbp)
	movq	$0, -9496(%rbp)
	movq	$0, -9488(%rbp)
	movl	$1, -9504(%rbp)
	movl	$1, -9500(%rbp)
	movq	$8, -9496(%rbp)
	leaq	-9504(%rbp), %rax
	movq	%rax, -9640(%rbp)
	movq	-9648(%rbp), %rax
	movq	%rax, -9488(%rbp)
	movq	-9648(%rbp), %rdx
	movq	-9648(%rbp), %rsi
	movq	-9656(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_get_mut_id
	movq	%rax, -9632(%rbp)
	movq	-9648(%rbp), %rdx
	movq	-9656(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_set_scope
	movq	-9656(%rbp), %rax
	leaq	.LC830(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_set_name_prefix
	leaq	-8880(%rbp), %rdx
	movl	$0, %eax
	movl	$74, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	$10, -8880(%rbp)
	leaq	.LC879(%rip), %rax
	movq	%rax, -8872(%rbp)
	leaq	.LC879(%rip), %rax
	movq	%rax, -8848(%rbp)
	movq	$120, -8304(%rbp)
	movq	$8, -8296(%rbp)
	leaq	-8880(%rbp), %rdx
	movq	-9656(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_component_init
	leaq	-8288(%rbp), %rdx
	movl	$0, %eax
	movl	$74, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	$11, -8288(%rbp)
	leaq	.LC880(%rip), %rax
	movq	%rax, -8280(%rbp)
	leaq	.LC880(%rip), %rax
	movq	%rax, -8256(%rbp)
	movq	$8, -7712(%rbp)
	movq	$4, -7704(%rbp)
	leaq	-8288(%rbp), %rdx
	movq	-9656(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_component_init
	movl	$286, %ecx
	movq	-9656(%rbp), %rax
	leaq	3+.LC881(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$286, %ecx
	movq	-9656(%rbp), %rax
	leaq	.LC881(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-9656(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$286, %ecx
	movq	-9656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$287, %ecx
	movq	-9656(%rbp), %rax
	leaq	3+.LC882(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$287, %ecx
	movq	-9656(%rbp), %rax
	leaq	.LC882(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-9656(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$287, %ecx
	movq	-9656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$288, %ecx
	movq	-9656(%rbp), %rax
	leaq	3+.LC883(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$288, %ecx
	movq	-9656(%rbp), %rax
	leaq	.LC883(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-9656(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$288, %ecx
	movq	-9656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$289, %ecx
	movq	-9656(%rbp), %rax
	leaq	3+.LC884(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$289, %ecx
	movq	-9656(%rbp), %rax
	leaq	.LC884(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-9656(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$289, %ecx
	movq	-9656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$258, %edx
	movq	-9656(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_set_scope
	movq	%rax, -9624(%rbp)
	movl	$318, %ecx
	movq	-9656(%rbp), %rax
	leaq	3+.LC885(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$318, %ecx
	movq	-9656(%rbp), %rax
	leaq	.LC885(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-9656(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$318, %ecx
	movq	-9656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$319, %ecx
	movq	-9656(%rbp), %rax
	leaq	3+.LC886(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$319, %ecx
	movq	-9656(%rbp), %rax
	leaq	.LC886(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-9656(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$319, %ecx
	movq	-9656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$316, %ecx
	movq	-9656(%rbp), %rax
	leaq	3+.LC887(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$316, %ecx
	movq	-9656(%rbp), %rax
	leaq	.LC887(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-9656(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$316, %ecx
	movq	-9656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$317, %ecx
	movq	-9656(%rbp), %rax
	leaq	3+.LC888(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$317, %ecx
	movq	-9656(%rbp), %rax
	leaq	.LC888(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-9656(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$317, %ecx
	movq	-9656(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movq	-9624(%rbp), %rdx
	movq	-9656(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_set_scope
	movl	$2, %eax
	movq	%rax, 16+__FLECS__TEcsComponentLifecycle_value(%rip)
	movl	$10, %eax
	movq	%rax, 16+__FLECS__TEcsSystem_value(%rip)
	movl	$11, %eax
	movq	%rax, 16+__FLECS__TEcsTickSource_value(%rip)
	movq	$0, -9584(%rbp)
	movq	$0, -9576(%rbp)
	movq	$0, -9568(%rbp)
	movq	$0, -9560(%rbp)
	movq	$0, -9552(%rbp)
	movq	$0, -9544(%rbp)
	movq	$0, -9536(%rbp)
	movq	$0, -9528(%rbp)
	movq	$0, -9520(%rbp)
	movq	$0, -9512(%rbp)
	leaq	sys_ctor_init_zero(%rip), %rax
	movq	%rax, -9584(%rbp)
	leaq	ecs_colsystem_dtor(%rip), %rax
	movq	%rax, -9576(%rbp)
	leaq	-9584(%rbp), %rdx
	movq	-9656(%rbp), %rax
	movl	$10, %esi
	movq	%rax, %rdi
	call	ecs_set_component_actions_w_id
	leaq	DisableSystem(%rip), %rax
	movq	%rax, -9616(%rbp)
	leaq	-7696(%rbp), %rdx
	movl	$0, %eax
	movl	$479, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC889(%rip), %rax
	movq	%rax, -7688(%rbp)
	movl	$317, %eax
	movq	%rax, -7648(%rbp)
	leaq	.LC890(%rip), %rax
	movq	%rax, -4032(%rbp)
	movq	-9616(%rbp), %rax
	movq	%rax, -3952(%rbp)
	leaq	-7696(%rbp), %rdx
	movq	-9656(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_system_init
	movq	%rax, -9608(%rbp)
	cmpq	$0, -9608(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26817, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC891(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -9608(%rbp)
	jne	.L6027
	leaq	__PRETTY_FUNCTION__.16564(%rip), %rcx
	movl	$26817, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC891(%rip), %rdi
	call	__assert_fail@PLT
.L6027:
	leaq	EnableSystem(%rip), %rax
	movq	%rax, -9600(%rbp)
	leaq	-3856(%rbp), %rdx
	movl	$0, %eax
	movl	$479, %ecx
	movq	%rdx, %rdi
	rep stosq
	leaq	.LC892(%rip), %rax
	movq	%rax, -3848(%rbp)
	movl	$317, %eax
	movq	%rax, -3808(%rbp)
	leaq	.LC893(%rip), %rax
	movq	%rax, -192(%rbp)
	movq	-9600(%rbp), %rax
	movq	%rax, -112(%rbp)
	leaq	-3856(%rbp), %rdx
	movq	-9656(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_system_init
	movq	%rax, -9592(%rbp)
	cmpq	$0, -9592(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$26820, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC894(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -9592(%rbp)
	jne	.L6030
	leaq	__PRETTY_FUNCTION__.16564(%rip), %rcx
	movl	$26820, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC894(%rip), %rdi
	call	__assert_fail@PLT
.L6030:
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6029
	call	__stack_chk_fail@PLT
.L6029:
	addq	$9656, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE889:
	.size	FlecsSystemImport, .-FlecsSystemImport
	.type	sort_and_dedup, @function
sort_and_dedup:
.LFB890:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	leaq	flecs_entity_compare_qsort(%rip), %rcx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_sort
	movq	-40(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -8(%rbp)
	movl	$0, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -12(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L6032
.L6036:
	cmpl	$0, -20(%rbp)
	je	.L6033
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movl	-20(%rbp), %eax
	cltq
	salq	$3, %rax
	leaq	-8(%rax), %rcx
	movq	-8(%rbp), %rax
	addq	%rcx, %rax
	movq	(%rax), %rax
	cmpq	%rax, %rdx
	jne	.L6033
	addl	$1, -16(%rbp)
.L6033:
	movl	-20(%rbp), %edx
	movl	-16(%rbp), %eax
	addl	%edx, %eax
	cmpl	%eax, -12(%rbp)
	jle	.L6038
	movl	-20(%rbp), %edx
	movl	-16(%rbp), %eax
	addl	%edx, %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-8(%rbp), %rax
	addq	%rdx, %rax
	movl	-20(%rbp), %edx
	movslq	%edx, %rdx
	leaq	0(,%rdx,8), %rcx
	movq	-8(%rbp), %rdx
	addq	%rcx, %rdx
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	addl	$1, -20(%rbp)
.L6032:
	movl	-20(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.L6036
	jmp	.L6035
.L6038:
	nop
.L6035:
	movl	-20(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, %edx
	leaq	-40(%rbp), %rax
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_set_count
	movq	-40(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE890:
	.size	sort_and_dedup, .-sort_and_dedup
	.section	.rodata
	.align 8
.LC895:
	.string	"column names not supported in type expression"
	.align 8
.LC896:
	.string	"operator other than AND not supported in type expression"
	.align 8
.LC897:
	.string	"source modifiers not supported for type expressions"
	.align 8
.LC898:
	.string	"subject other than this not supported in type expression"
	.text
	.type	expr_to_ids, @function
expr_to_ids:
.LFB891:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$272, %rsp
	movq	%rdi, -248(%rbp)
	movq	%rsi, -256(%rbp)
	movq	%rdx, -264(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	$0, -232(%rbp)
	movq	-264(%rbp), %rax
	movq	%rax, -224(%rbp)
	leaq	-208(%rbp), %rdx
	movl	$0, %eax
	movl	$24, %ecx
	movq	%rdx, %rdi
	rep stosq
	cmpq	$0, -224(%rbp)
	jne	.L6042
	movl	$0, %eax
	jmp	.L6054
.L6053:
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	je	.L6043
	movq	-224(%rbp), %rax
	subq	-264(%rbp), %rax
	movq	%rax, %rdx
	movq	-264(%rbp), %rsi
	movq	-256(%rbp), %rax
	leaq	.LC895(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L6043:
	movl	-48(%rbp), %eax
	testl	%eax, %eax
	je	.L6044
	movl	-48(%rbp), %eax
	cmpl	$4, %eax
	je	.L6044
	movq	-224(%rbp), %rax
	subq	-264(%rbp), %rax
	movq	%rax, %rdx
	movq	-264(%rbp), %rsi
	movq	-256(%rbp), %rax
	leaq	.LC896(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L6044:
	leaq	-208(%rbp), %rcx
	movq	-264(%rbp), %rdx
	movq	-256(%rbp), %rsi
	movq	-248(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_finalize
	testl	%eax, %eax
	jne	.L6057
	movq	-144(%rbp), %rax
	testq	%rax, %rax
	je	.L6058
	movzbl	-112(%rbp), %eax
	testb	%al, %al
	je	.L6049
	movq	-224(%rbp), %rax
	subq	-264(%rbp), %rax
	movq	%rax, %rdx
	movq	-264(%rbp), %rsi
	movq	-256(%rbp), %rax
	leaq	.LC897(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L6049:
	movq	-144(%rbp), %rax
	movl	$267, %edx
	cmpq	%rdx, %rax
	je	.L6050
	movq	-224(%rbp), %rax
	subq	-264(%rbp), %rax
	movq	%rax, %rdx
	movq	-264(%rbp), %rsi
	movq	-256(%rbp), %rax
	leaq	.LC898(%rip), %rcx
	movq	%rax, %rdi
	movl	$0, %eax
	call	_ecs_parser_error
	call	abort@PLT
.L6050:
	movl	-48(%rbp), %eax
	cmpl	$4, %eax
	jne	.L6051
	movabsq	$-504403158265495552, %rax
	movq	%rax, -40(%rbp)
.L6051:
	leaq	-232(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -216(%rbp)
	movq	-208(%rbp), %rdx
	movq	-40(%rbp), %rax
	orq	%rax, %rdx
	movq	-216(%rbp), %rax
	movq	%rdx, (%rax)
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_fini
.L6042:
	movq	-224(%rbp), %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	je	.L6052
	leaq	-208(%rbp), %rdi
	movq	-224(%rbp), %rcx
	movq	-264(%rbp), %rdx
	movq	-256(%rbp), %rsi
	movq	-248(%rbp), %rax
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	ecs_parse_term
	movq	%rax, -224(%rbp)
	cmpq	$0, -224(%rbp)
	jne	.L6053
.L6052:
	movq	-232(%rbp), %rax
	movq	%rax, %rdi
	call	sort_and_dedup
	movq	%rax, -232(%rbp)
	jmp	.L6048
.L6058:
	nop
.L6048:
	movq	-232(%rbp), %rax
	jmp	.L6054
.L6057:
	nop
.L6046:
	endbr64
	leaq	-208(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_term_fini
	movq	-232(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movl	$0, %eax
.L6054:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6055
	call	__stack_chk_fail@PLT
.L6055:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE891:
	.size	expr_to_ids, .-expr_to_ids
	.type	ids_to_normalized_ids, @function
ids_to_normalized_ids:
.LFB892:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	$0, -80(%rbp)
	movq	-112(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -72(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -88(%rbp)
	movl	$0, -96(%rbp)
	jmp	.L6060
.L6066:
	movl	-96(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movabsq	$-72057594037927936, %rax
	andq	-64(%rbp), %rax
	movabsq	$-504403158265495552, %rdx
	cmpq	%rdx, %rax
	jne	.L6061
	movq	-64(%rbp), %rax
	movl	%eax, %eax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	-104(%rbp), %rax
	movl	$3, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_get_id
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	leaq	.LC729(%rip), %r9
	movl	$26950, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC77(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L6062
	leaq	__PRETTY_FUNCTION__.16603(%rip), %rcx
	movl	$26950, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC78(%rip), %rdi
	call	__assert_fail@PLT
.L6062:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -84(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movl	$0, -92(%rbp)
	jmp	.L6063
.L6064:
	movl	-92(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	leaq	-80(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, (%rax)
	addl	$1, -92(%rbp)
.L6063:
	movl	-92(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jl	.L6064
	jmp	.L6065
.L6061:
	leaq	-80(%rbp), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, (%rax)
.L6065:
	addl	$1, -96(%rbp)
.L6060:
	movl	-96(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jl	.L6066
	movq	-80(%rbp), %rax
	movq	%rax, %rdi
	call	sort_and_dedup
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6068
	call	__stack_chk_fail@PLT
.L6068:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE892:
	.size	ids_to_normalized_ids, .-ids_to_normalized_ids
	.type	table_from_ids, @function
table_from_ids:
.LFB893:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_type_to_ids
	movq	%rax, -32(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_find_or_create
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6071
	call	__stack_chk_fail@PLT
.L6071:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE893:
	.size	table_from_ids, .-table_from_ids
	.globl	flecs_name_from_symbol
	.type	flecs_name_from_symbol, @function
flecs_name_from_symbol:
.LFB894:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L6073
	cmpq	$0, -8(%rbp)
	je	.L6073
	movq	-8(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L6073
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movl	-12(%rbp), %edx
	movslq	%edx, %rcx
	movq	-32(%rbp), %rdx
	addq	%rcx, %rdx
	movzbl	(%rdx), %edx
	movsbq	%dl, %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$256, %eax
	testl	%eax, %eax
	jne	.L6074
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$95, %al
	jne	.L6073
.L6074:
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	cmpb	$95, %al
	jne	.L6075
	movl	-12(%rbp), %eax
	cltq
	leaq	1(%rax), %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	jmp	.L6076
.L6075:
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	-32(%rbp), %rax
	addq	%rdx, %rax
	jmp	.L6076
.L6073:
	movq	-32(%rbp), %rax
.L6076:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE894:
	.size	flecs_name_from_symbol, .-flecs_name_from_symbol
	.globl	ecs_type_from_str
	.type	ecs_type_from_str, @function
ecs_type_from_str:
.LFB895:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdx
	movq	-40(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	expr_to_ids
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L6078
	movl	$0, %eax
	jmp	.L6079
.L6078:
	movq	-24(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ids_to_normalized_ids
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-16(%rbp), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	table_from_ids
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
.L6079:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE895:
	.size	ecs_type_from_str, .-ecs_type_from_str
	.globl	ecs_table_from_str
	.type	ecs_table_from_str, @function
ecs_table_from_str:
.LFB896:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27025, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$1, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L6081
	leaq	__PRETTY_FUNCTION__.16639(%rip), %rcx
	movl	$27025, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L6081:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	expr_to_ids
	movq	%rax, -16(%rbp)
	cmpq	$0, -16(%rbp)
	jne	.L6082
	movl	$0, %eax
	jmp	.L6083
.L6082:
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	table_from_ids
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-8(%rbp), %rax
.L6083:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE896:
	.size	ecs_table_from_str, .-ecs_table_from_str
	.type	find_key, @function
find_key:
.LFB897:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -20(%rbp)
	movl	-44(%rbp), %ecx
	movq	-40(%rbp), %rax
	movl	$16, %edx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.L6085
.L6088:
	movl	-44(%rbp), %eax
	imull	-24(%rbp), %eax
	movslq	%eax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	24(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	*%rcx
	testl	%eax, %eax
	jne	.L6086
	movl	-24(%rbp), %eax
	jmp	.L6087
.L6086:
	addl	$1, -24(%rbp)
.L6085:
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jl	.L6088
	movl	$-1, %eax
.L6087:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE897:
	.size	find_key, .-find_key
	.globl	_flecs_hashmap_new
	.type	_flecs_hashmap_new, @function
_flecs_hashmap_new:
.LFB898:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movl	%edx, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -64(%rbp)
	movl	$0, %edx
	movl	$8, %esi
	movl	$16, %edi
	call	_ecs_map_new
	movq	-40(%rbp), %rdx
	movq	-56(%rbp), %rcx
	movq	%rcx, (%rdx)
	movq	-40(%rbp), %rdx
	movq	-64(%rbp), %rcx
	movq	%rcx, 8(%rdx)
	movq	-40(%rbp), %rdx
	movl	-44(%rbp), %ecx
	movl	%ecx, 16(%rdx)
	movq	-40(%rbp), %rdx
	movl	-48(%rbp), %ecx
	movl	%ecx, 20(%rdx)
	movq	-40(%rbp), %rdx
	movq	%rax, 24(%rdx)
	movq	-40(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE898:
	.size	_flecs_hashmap_new, .-_flecs_hashmap_new
	.globl	flecs_hashmap_free
	.type	flecs_hashmap_free, @function
flecs_hashmap_free:
.LFB899:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	40(%rbp), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L6092
.L6093:
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
.L6092:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L6093
	movq	40(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_map_free
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6094
	call	__stack_chk_fail@PLT
.L6094:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE899:
	.size	flecs_hashmap_free, .-flecs_hashmap_free
	.section	.rodata
.LC899:
	.string	"map.key_size == key_size"
.LC900:
	.string	"map.value_size == value_size"
	.text
	.globl	_flecs_hashmap_get
	.type	_flecs_hashmap_get, @function
_flecs_hashmap_get:
.LFB900:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movl	%edi, -36(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -40(%rbp)
	movl	32(%rbp), %eax
	cmpl	%eax, -36(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27095, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC899(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	32(%rbp), %eax
	cmpl	%eax, -36(%rbp)
	je	.L6096
	leaq	__PRETTY_FUNCTION__.16679(%rip), %rcx
	movl	$27095, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC899(%rip), %rdi
	call	__assert_fail@PLT
.L6096:
	movl	36(%rbp), %eax
	cmpl	%eax, -40(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27096, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC900(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	36(%rbp), %eax
	cmpl	%eax, -40(%rbp)
	je	.L6097
	leaq	__PRETTY_FUNCTION__.16679(%rip), %rcx
	movl	$27096, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC900(%rip), %rdi
	call	__assert_fail@PLT
.L6097:
	movq	16(%rbp), %rdx
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -16(%rbp)
	movq	40(%rbp), %rax
	movq	-16(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	jne	.L6098
	movl	$0, %eax
	jmp	.L6099
.L6098:
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-48(%rbp), %rdx
	movl	-36(%rbp), %ecx
	pushq	40(%rbp)
	pushq	32(%rbp)
	pushq	24(%rbp)
	pushq	16(%rbp)
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	find_key
	addq	$32, %rsp
	movl	%eax, -20(%rbp)
	cmpl	$-1, -20(%rbp)
	jne	.L6100
	movl	$0, %eax
	jmp	.L6099
.L6100:
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %edx
	movl	-40(%rbp), %esi
	movl	%edx, %ecx
	movl	$16, %edx
	movq	%rax, %rdi
	call	_ecs_vector_get
.L6099:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE900:
	.size	_flecs_hashmap_get, .-_flecs_hashmap_get
	.section	.rodata
.LC901:
	.string	"value_ptr != NULL"
.LC902:
	.string	"value_ptr != ((void *)0)"
	.text
	.globl	_flecs_hashmap_ensure
	.type	_flecs_hashmap_ensure, @function
_flecs_hashmap_ensure:
.LFB901:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movl	%esi, -92(%rbp)
	movq	%rdx, -104(%rbp)
	movl	%ecx, -96(%rbp)
	movl	32(%rbp), %eax
	cmpl	%eax, -92(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27118, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC899(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	32(%rbp), %eax
	cmpl	%eax, -92(%rbp)
	je	.L6102
	leaq	__PRETTY_FUNCTION__.16689(%rip), %rcx
	movl	$27118, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC899(%rip), %rdi
	call	__assert_fail@PLT
.L6102:
	movl	36(%rbp), %eax
	cmpl	%eax, -96(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27119, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC900(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	36(%rbp), %eax
	cmpl	%eax, -96(%rbp)
	je	.L6103
	leaq	__PRETTY_FUNCTION__.16689(%rip), %rcx
	movl	$27119, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC900(%rip), %rdi
	call	__assert_fail@PLT
.L6103:
	movq	16(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -56(%rbp)
	movq	40(%rbp), %rax
	movq	-56(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_ensure
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27123, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC750(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -48(%rbp)
	jne	.L6104
	leaq	__PRETTY_FUNCTION__.16689(%rip), %rcx
	movl	$27123, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC751(%rip), %rdi
	call	__assert_fail@PLT
.L6104:
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L6105
	movl	-92(%rbp), %eax
	movl	$1, %edx
	movl	$16, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	-48(%rbp), %rdx
	movq	%rax, (%rdx)
	movl	-96(%rbp), %eax
	movl	$1, %edx
	movl	$16, %esi
	movl	%eax, %edi
	call	_ecs_vector_new
	movq	-48(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movq	-48(%rbp), %rax
	movl	-92(%rbp), %ecx
	movl	$16, %edx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -64(%rbp)
	movl	-92(%rbp), %eax
	movslq	%eax, %rdx
	movq	-104(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-48(%rbp), %rax
	leaq	8(%rax), %rcx
	movl	-96(%rbp), %eax
	movl	$16, %edx
	movl	%eax, %esi
	movq	%rcx, %rdi
	call	_ecs_vector_add
	movq	%rax, -72(%rbp)
	movl	-96(%rbp), %eax
	movslq	%eax, %rdx
	movq	-72(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	jmp	.L6106
.L6105:
	movq	-104(%rbp), %rdx
	movl	-92(%rbp), %ecx
	movq	-40(%rbp), %rax
	pushq	40(%rbp)
	pushq	32(%rbp)
	pushq	24(%rbp)
	pushq	16(%rbp)
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	find_key
	addq	$32, %rsp
	movl	%eax, -76(%rbp)
	cmpl	$-1, -76(%rbp)
	jne	.L6107
	movq	-48(%rbp), %rax
	movl	-92(%rbp), %ecx
	movl	$16, %edx
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	_ecs_vector_add
	movq	%rax, -64(%rbp)
	movl	-92(%rbp), %eax
	movslq	%eax, %rdx
	movq	-104(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movq	-48(%rbp), %rax
	leaq	8(%rax), %rcx
	movl	-96(%rbp), %eax
	movl	$16, %edx
	movl	%eax, %esi
	movq	%rcx, %rdi
	call	_ecs_vector_add
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27141, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC901(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L6108
	leaq	__PRETTY_FUNCTION__.16689(%rip), %rcx
	movl	$27141, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC902(%rip), %rdi
	call	__assert_fail@PLT
.L6108:
	movl	-96(%rbp), %eax
	movslq	%eax, %rdx
	movq	-72(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	memset@PLT
	jmp	.L6106
.L6107:
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movl	-76(%rbp), %edx
	movl	-92(%rbp), %esi
	movl	%edx, %ecx
	movl	$16, %edx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -64(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movl	-76(%rbp), %edx
	movl	-96(%rbp), %esi
	movl	%edx, %ecx
	movl	$16, %edx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	%rax, -72(%rbp)
.L6106:
	movq	-88(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-88(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	-88(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-88(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE901:
	.size	_flecs_hashmap_ensure, .-_flecs_hashmap_ensure
	.globl	_flecs_hashmap_set
	.type	_flecs_hashmap_set, @function
_flecs_hashmap_set:
.LFB902:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movl	%edi, -52(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -56(%rbp)
	movq	%rcx, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-32(%rbp), %rax
	movl	-56(%rbp), %ecx
	movq	-64(%rbp), %rdx
	movl	-52(%rbp), %esi
	pushq	40(%rbp)
	pushq	32(%rbp)
	pushq	24(%rbp)
	pushq	16(%rbp)
	movq	%rax, %rdi
	call	_flecs_hashmap_ensure
	addq	$32, %rsp
	movq	-24(%rbp), %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27164, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC901(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L6111
	leaq	__PRETTY_FUNCTION__.16705(%rip), %rcx
	movl	$27164, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC902(%rip), %rdi
	call	__assert_fail@PLT
.L6111:
	movl	-56(%rbp), %eax
	movslq	%eax, %rdx
	movq	-72(%rbp), %rcx
	movq	-40(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6112
	call	__stack_chk_fail@PLT
.L6112:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE902:
	.size	_flecs_hashmap_set, .-_flecs_hashmap_set
	.globl	_flecs_hashmap_remove_w_hash
	.type	_flecs_hashmap_remove_w_hash, @function
_flecs_hashmap_remove_w_hash:
.LFB903:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movl	%edi, -20(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movq	40(%rbp), %rax
	movq	-40(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_get
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L6117
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	-32(%rbp), %rdx
	movl	-20(%rbp), %ecx
	pushq	40(%rbp)
	pushq	32(%rbp)
	pushq	24(%rbp)
	pushq	16(%rbp)
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	find_key
	addq	$32, %rsp
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	je	.L6118
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	-12(%rbp), %edx
	movl	-20(%rbp), %esi
	movl	%edx, %ecx
	movl	$16, %edx
	movq	%rax, %rdi
	call	_ecs_vector_remove
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movl	-12(%rbp), %edx
	movl	-24(%rbp), %esi
	movl	%edx, %ecx
	movl	$16, %edx
	movq	%rax, %rdi
	call	_ecs_vector_remove
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	testl	%eax, %eax
	jne	.L6113
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_free
	movq	40(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_remove
	jmp	.L6113
.L6117:
	nop
	jmp	.L6113
.L6118:
	nop
.L6113:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE903:
	.size	_flecs_hashmap_remove_w_hash, .-_flecs_hashmap_remove_w_hash
	.globl	_flecs_hashmap_remove
	.type	_flecs_hashmap_remove, @function
_flecs_hashmap_remove:
.LFB904:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movl	%edi, -20(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, -24(%rbp)
	movl	32(%rbp), %eax
	cmpl	%eax, -20(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27201, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC899(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	32(%rbp), %eax
	cmpl	%eax, -20(%rbp)
	je	.L6120
	leaq	__PRETTY_FUNCTION__.16721(%rip), %rcx
	movl	$27201, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC899(%rip), %rdi
	call	__assert_fail@PLT
.L6120:
	movl	36(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27202, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC900(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movl	36(%rbp), %eax
	cmpl	%eax, -24(%rbp)
	je	.L6121
	leaq	__PRETTY_FUNCTION__.16721(%rip), %rcx
	movl	$27202, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC900(%rip), %rdi
	call	__assert_fail@PLT
.L6121:
	movq	16(%rbp), %rdx
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rcx
	movl	-24(%rbp), %edx
	movq	-32(%rbp), %rsi
	movl	-20(%rbp), %eax
	pushq	40(%rbp)
	pushq	32(%rbp)
	pushq	24(%rbp)
	pushq	16(%rbp)
	movl	%eax, %edi
	call	_flecs_hashmap_remove_w_hash
	addq	$32, %rsp
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE904:
	.size	_flecs_hashmap_remove, .-_flecs_hashmap_remove
	.globl	flecs_hashmap_iter
	.type	flecs_hashmap_iter, @function
flecs_hashmap_iter:
.LFB905:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	40(%rbp), %rdx
	leaq	-64(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	movq	-72(%rbp), %rax
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	movq	$0, 16(%rax)
	movq	$0, 24(%rax)
	movq	$0, 32(%rax)
	movq	$0, 40(%rax)
	movq	-72(%rbp), %rcx
	movq	-64(%rbp), %rax
	movq	-56(%rbp), %rdx
	movq	%rax, (%rcx)
	movq	%rdx, 8(%rcx)
	movq	-48(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, 16(%rcx)
	movq	%rdx, 24(%rcx)
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6124
	call	__stack_chk_fail@PLT
.L6124:
	movq	-72(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE905:
	.size	flecs_hashmap_iter, .-flecs_hashmap_iter
	.globl	_flecs_hashmap_next
	.type	_flecs_hashmap_next, @function
_flecs_hashmap_next:
.LFB906:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -40(%rbp)
	movl	%esi, -44(%rbp)
	movq	%rdx, -56(%rbp)
	movl	%ecx, -48(%rbp)
	movq	-40(%rbp), %rax
	movl	40(%rax), %eax
	leal	1(%rax), %edx
	movq	-40(%rbp), %rax
	movl	%edx, 40(%rax)
	movq	-40(%rbp), %rax
	movl	40(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.L6126
.L6129:
	movq	-40(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	-40(%rbp), %rdx
	movq	%rax, 32(%rdx)
	movq	-40(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.L6127
	movl	$0, %eax
	jmp	.L6128
.L6127:
	movq	-40(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-40(%rbp), %rax
	movl	40(%rax), %eax
	movl	%eax, -28(%rbp)
.L6126:
	cmpq	$0, -24(%rbp)
	je	.L6129
	movq	-40(%rbp), %rax
	movl	40(%rax), %ebx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	cmpl	%eax, %ebx
	jge	.L6129
	cmpq	$0, -56(%rbp)
	je	.L6130
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %esi
	movl	%edx, %ecx
	movl	$16, %edx
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	-56(%rbp), %rdx
	movq	%rax, (%rdx)
.L6130:
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movl	-28(%rbp), %edx
	movl	-48(%rbp), %esi
	movl	%edx, %ecx
	movl	$16, %edx
	movq	%rax, %rdi
	call	_ecs_vector_get
.L6128:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE906:
	.size	_flecs_hashmap_next, .-_flecs_hashmap_next
	.comm	FLECS__TEcsComponent,8,8
	.comm	FLECS__TEcsType,8,8
	.comm	FLECS__TEcsIdentifier,8,8
	.comm	FLECS__TEcsQuery,8,8
	.comm	FLECS__TEcsTrigger,8,8
	.comm	FLECS__TEcsObserver,8,8
	.comm	FLECS__TEcsPrefab,8,8
	.type	EcsIdentifier_ctor, @function
EcsIdentifier_ctor:
.LFB907:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L6132
.L6133:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	addl	$1, -20(%rbp)
.L6132:
	movl	-20(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L6133
	nop
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE907:
	.size	EcsIdentifier_ctor, .-EcsIdentifier_ctor
	.type	EcsIdentifier_dtor, @function
EcsIdentifier_dtor:
.LFB908:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L6135
.L6136:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	48+ecs_os_api(%rip), %rax
	movl	$0, %edi
	call	*%rax
	movq	-8(%rbp), %rdx
	movq	%rax, (%rdx)
	addl	$1, -20(%rbp)
.L6135:
	movl	-20(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L6136
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE908:
	.size	EcsIdentifier_dtor, .-EcsIdentifier_dtor
	.type	EcsIdentifier_copy, @function
EcsIdentifier_copy:
.LFB909:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movl	$0, -36(%rbp)
	jmp	.L6138
.L6139:
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	48+ecs_os_api(%rip), %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	-16(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, 16(%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 8(%rax)
	addl	$1, -36(%rbp)
.L6138:
	movl	-36(%rbp), %eax
	cmpl	24(%rbp), %eax
	jl	.L6139
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE909:
	.size	EcsIdentifier_copy, .-EcsIdentifier_copy
	.type	EcsIdentifier_move, @function
EcsIdentifier_move:
.LFB910:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movl	$0, -36(%rbp)
	jmp	.L6141
.L6142:
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movl	-36(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	40+ecs_os_api(%rip), %rdx
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	48+ecs_os_api(%rip), %rax
	movl	$0, %edi
	call	*%rax
	movq	-16(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, 16(%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	movq	-16(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	$0, 16(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	addl	$1, -36(%rbp)
.L6141:
	movl	-36(%rbp), %eax
	cmpl	24(%rbp), %eax
	jl	.L6142
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE910:
	.size	EcsIdentifier_move, .-EcsIdentifier_move
	.type	EcsIdentifier_on_set, @function
EcsIdentifier_on_set:
.LFB911:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L6144
.L6147:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-20(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L6145
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-8(%rbp), %rax
	movl	8(%rax), %edx
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_hash
	movq	-8(%rbp), %rdx
	movq	%rax, 16(%rdx)
	jmp	.L6146
.L6145:
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 16(%rax)
.L6146:
	addl	$1, -20(%rbp)
.L6144:
	movl	-20(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L6147
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE911:
	.size	EcsIdentifier_on_set, .-EcsIdentifier_on_set
	.type	EcsTrigger_ctor, @function
EcsTrigger_ctor:
.LFB912:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L6149
.L6150:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	addl	$1, -20(%rbp)
.L6149:
	movl	-20(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L6150
	nop
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE912:
	.size	EcsTrigger_ctor, .-EcsTrigger_ctor
	.type	EcsTrigger_dtor, @function
EcsTrigger_dtor:
.LFB913:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L6152
.L6153:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_trigger_fini
	addl	$1, -20(%rbp)
.L6152:
	movl	-20(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L6153
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE913:
	.size	EcsTrigger_dtor, .-EcsTrigger_dtor
	.section	.rodata
	.align 8
.LC903:
	.string	"Trigger component cannot be copied"
	.text
	.type	EcsTrigger_copy, @function
EcsTrigger_copy:
.LFB914:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	-36(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.L6156
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	leaq	.LC903(%rip), %rcx
	movl	$27297, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L6156:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE914:
	.size	EcsTrigger_copy, .-EcsTrigger_copy
	.type	EcsTrigger_move, @function
EcsTrigger_move:
.LFB915:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movl	$0, -36(%rbp)
	jmp	.L6158
.L6160:
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L6159
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_trigger_fini
.L6159:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	addl	$1, -36(%rbp)
.L6158:
	movl	-36(%rbp), %eax
	cmpl	24(%rbp), %eax
	jl	.L6160
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE915:
	.size	EcsTrigger_move, .-EcsTrigger_move
	.type	EcsObserver_ctor, @function
EcsObserver_ctor:
.LFB916:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L6162
.L6163:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	addl	$1, -20(%rbp)
.L6162:
	movl	-20(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L6163
	nop
	nop
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE916:
	.size	EcsObserver_ctor, .-EcsObserver_ctor
	.type	EcsObserver_dtor, @function
EcsObserver_dtor:
.LFB917:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%r8, -72(%rbp)
	movl	%r9d, -76(%rbp)
	movl	$0, -20(%rbp)
	jmp	.L6165
.L6166:
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-56(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	-20(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-64(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-40(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_observer_fini
	addl	$1, -20(%rbp)
.L6165:
	movl	-20(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jl	.L6166
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE917:
	.size	EcsObserver_dtor, .-EcsObserver_dtor
	.section	.rodata
	.align 8
.LC904:
	.string	"Observer component cannot be copied"
	.text
	.type	EcsObserver_copy, @function
EcsObserver_copy:
.LFB918:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	-36(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.L6169
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	leaq	.LC904(%rip), %rcx
	movl	$27318, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L6169:
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE918:
	.size	EcsObserver_copy, .-EcsObserver_copy
	.type	EcsObserver_move, @function
EcsObserver_move:
.LFB919:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movl	$0, -36(%rbp)
	jmp	.L6171
.L6173:
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-72(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-80(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-88(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -16(%rbp)
	movl	-36(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-96(%rbp), %rax
	addq	%rdx, %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L6172
	movq	-16(%rbp), %rax
	movq	(%rax), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_observer_fini
.L6172:
	movq	-8(%rbp), %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	addl	$1, -36(%rbp)
.L6171:
	movl	-36(%rbp), %eax
	cmpl	24(%rbp), %eax
	jl	.L6173
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE919:
	.size	EcsObserver_move, .-EcsObserver_move
	.type	register_on_delete, @function
register_on_delete:
.LFB920:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ecs_term_id
	movq	%rax, -24(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L6175
.L6178:
	movq	-40(%rbp), %rax
	movq	152(%rax), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_ensure_id_record
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27336, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC124(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L6176
	leaq	__PRETTY_FUNCTION__.16971(%rip), %rcx
	movl	$27336, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC125(%rip), %rdi
	call	__assert_fail@PLT
.L6176:
	movq	-24(%rbp), %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-16(%rbp), %rax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_ensure_id_record
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27340, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC124(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L6177
	leaq	__PRETTY_FUNCTION__.16971(%rip), %rcx
	movl	$27340, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC125(%rip), %rdi
	call	__assert_fail@PLT
.L6177:
	movq	-24(%rbp), %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movq	%rdx, 8(%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_set_watch
	addl	$1, -28(%rbp)
.L6175:
	movq	-40(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L6178
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE920:
	.size	register_on_delete, .-register_on_delete
	.type	register_on_delete_object, @function
register_on_delete_object:
.LFB921:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ecs_term_id
	movq	%rax, -24(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L6180
.L6182:
	movq	-40(%rbp), %rax
	movq	152(%rax), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_ensure_id_record
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27354, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC124(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jne	.L6181
	leaq	__PRETTY_FUNCTION__.16982(%rip), %rcx
	movl	$27354, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC125(%rip), %rdi
	call	__assert_fail@PLT
.L6181:
	movq	-24(%rbp), %rax
	movl	%eax, %edx
	movq	-8(%rbp), %rax
	movq	%rdx, 16(%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_set_watch
	addl	$1, -28(%rbp)
.L6180:
	movq	-40(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L6182
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE921:
	.size	register_on_delete_object, .-register_on_delete_object
	.type	on_set_component_lifecycle, @function
on_set_component_lifecycle:
.LFB922:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	$1, %edx
	movl	$80, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L6184
.L6185:
	movq	-40(%rbp), %rax
	movq	152(%rax), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$2, %rax
	addq	%rdx, %rax
	salq	$4, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rax, %rdx
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_component_actions_w_id
	addl	$1, -28(%rbp)
.L6184:
	movq	-40(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L6185
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE922:
	.size	on_set_component_lifecycle, .-on_set_component_lifecycle
	.section	.rodata
.LC905:
	.string	"columns != NULL"
.LC906:
	.string	"columns != ((void *)0)"
	.text
	.type	_bootstrap_component, @function
_bootstrap_component:
.LFB923:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	%rdx, -120(%rbp)
	movq	%rcx, -128(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -136(%rbp)
	cmpq	$0, -112(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27388, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -112(%rbp)
	jne	.L6187
	leaq	__PRETTY_FUNCTION__.17004(%rip), %rcx
	movl	$27388, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L6187:
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27391, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC122(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -72(%rbp)
	jne	.L6188
	leaq	__PRETTY_FUNCTION__.17004(%rip), %rcx
	movl	$27391, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC123(%rip), %rdi
	call	__assert_fail@PLT
.L6188:
	movq	-72(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27394, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC905(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	jne	.L6189
	leaq	__PRETTY_FUNCTION__.17004(%rip), %rcx
	movl	$27394, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC906(%rip), %rdi
	call	__assert_fail@PLT
.L6189:
	movq	-104(%rbp), %rax
	movq	40(%rax), %rax
	movq	-120(%rbp), %rdx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_flecs_sparse_ensure
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	-112(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-56(%rbp), %rdi
	movq	-120(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	-104(%rbp), %rax
	movl	$0, %r9d
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	flecs_table_append
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	leal	1(%rax), %edx
	movq	-56(%rbp), %rax
	movl	%edx, 8(%rax)
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rax, %rdx
	movl	-132(%rbp), %eax
	movl	%eax, (%rdx)
	movl	-84(%rbp), %eax
	cltq
	leaq	0(,%rax,8), %rdx
	movq	-48(%rbp), %rax
	addq	%rax, %rdx
	movl	-136(%rbp), %eax
	movl	%eax, 4(%rdx)
	movq	-128(%rbp), %rax
	addq	$3, %rax
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	subl	$3, %eax
	movl	%eax, -76(%rbp)
	movq	-64(%rbp), %rax
	addq	$16, %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -32(%rbp)
	movq	48+ecs_os_api(%rip), %rcx
	movl	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movq	-40(%rbp), %rax
	movq	%rax, %rdi
	call	*%rcx
	movq	%rax, (%rbx)
	movl	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	addq	%rax, %rdx
	movl	-76(%rbp), %eax
	movl	%eax, 8(%rdx)
	movl	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-32(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movl	-76(%rbp), %edx
	movq	-40(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_hash
	movq	%rax, 16(%rbx)
	movq	-64(%rbp), %rax
	addq	$32, %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -24(%rbp)
	movq	48+ecs_os_api(%rip), %rcx
	movl	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movq	-128(%rbp), %rax
	movq	%rax, %rdi
	call	*%rcx
	movq	%rax, (%rbx)
	movl	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rax, %rdx
	movl	-80(%rbp), %eax
	movl	%eax, 8(%rdx)
	movl	-84(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	leaq	(%rdx,%rax), %rbx
	movl	-80(%rbp), %edx
	movq	-128(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_hash
	movq	%rax, 16(%rbx)
	nop
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE923:
	.size	_bootstrap_component, .-_bootstrap_component
	.section	.rodata
.LC907:
	.string	"table->type != NULL"
.LC908:
	.string	"table->type != ((void *)0)"
	.text
	.globl	flecs_bootstrap_type
	.type	flecs_bootstrap_type, @function
flecs_bootstrap_type:
.LFB924:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-64(%rbp), %rax
	movq	%rax, -16(%rbp)
	leaq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	leaq	-32(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_find_or_create
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27431, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -40(%rbp)
	jne	.L6191
	leaq	__PRETTY_FUNCTION__.17022(%rip), %rcx
	movl	$27431, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L6191:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27432, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC907(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	testq	%rax, %rax
	jne	.L6192
	leaq	__PRETTY_FUNCTION__.17022(%rip), %rcx
	movl	$27432, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC908(%rip), %rdi
	call	__assert_fail@PLT
.L6192:
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6194
	call	__stack_chk_fail@PLT
.L6194:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE924:
	.size	flecs_bootstrap_type, .-flecs_bootstrap_type
	.type	bootstrap_types, @function
bootstrap_types:
.LFB925:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	flecs_bootstrap_type
	movq	%rax, FLECS__TEcsComponent(%rip)
	movq	-8(%rbp), %rax
	movl	$3, %esi
	movq	%rax, %rdi
	call	flecs_bootstrap_type
	movq	%rax, FLECS__TEcsType(%rip)
	movq	-8(%rbp), %rax
	movl	$4, %esi
	movq	%rax, %rdi
	call	flecs_bootstrap_type
	movq	%rax, FLECS__TEcsIdentifier(%rip)
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE925:
	.size	bootstrap_types, .-bootstrap_types
	.type	bootstrap_component_table, @function
bootstrap_component_table:
.LFB926:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	$1, -64(%rbp)
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	movl	$272, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -48(%rbp)
	movl	$276, %eax
	salq	$32, %rax
	movl	$258, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -40(%rbp)
	leaq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$4, -72(%rbp)
	leaq	-80(%rbp), %rdx
	movq	-104(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_table_find_or_create
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_or_create_data
	movq	%rax, -88(%rbp)
	movl	$32, %edx
	movl	$16, %esi
	movl	$8, %edi
	call	_ecs_vector_new
	movq	-88(%rbp), %rdx
	movq	%rax, (%rdx)
	movl	$32, %edx
	movl	$16, %esi
	movl	$8, %edi
	call	_ecs_vector_new
	movq	-88(%rbp), %rdx
	movq	%rax, 8(%rdx)
	movq	16+ecs_os_api(%rip), %rax
	movl	$48, %edi
	call	*%rax
	movq	-88(%rbp), %rdx
	movq	%rax, 16(%rdx)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27477, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC198(%rip), %rdx
	movl	$4, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L6197
	leaq	__PRETTY_FUNCTION__.17033(%rip), %rcx
	movl	$27477, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC199(%rip), %rdi
	call	__assert_fail@PLT
.L6197:
	movq	-88(%rbp), %rax
	movq	16(%rax), %rbx
	movl	$32, %edx
	movl	$16, %esi
	movl	$8, %edi
	call	_ecs_vector_new
	movq	%rax, (%rbx)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	movw	$8, 8(%rax)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	movw	$4, 10(%rax)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	leaq	16(%rax), %rbx
	movl	$32, %edx
	movl	$16, %esi
	movl	$24, %edi
	call	_ecs_vector_new
	movq	%rax, (%rbx)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	addq	$16, %rax
	movw	$24, 8(%rax)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	addq	$16, %rax
	movw	$8, 10(%rax)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	leaq	32(%rax), %rbx
	movl	$32, %edx
	movl	$16, %esi
	movl	$24, %edi
	call	_ecs_vector_new
	movq	%rax, (%rbx)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	addq	$32, %rax
	movw	$24, 8(%rax)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	addq	$32, %rax
	movw	$8, 10(%rax)
	movq	-96(%rbp), %rax
	movl	$3, 20(%rax)
	movq	-96(%rbp), %rax
	movq	-24(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6199
	call	__stack_chk_fail@PLT
.L6199:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE926:
	.size	bootstrap_component_table, .-bootstrap_component_table
	.section	.rodata
	.align 8
.LC909:
	.string	"ecs_get_name(world, id) != NULL"
	.align 8
.LC910:
	.string	"ecs_get_name(world, id) != ((void *)0)"
	.align 8
.LC911:
	.string	"ecs_lookup_fullpath(world, name) == id"
	.align 8
.LC912:
	.string	"ecs_lookup_path_w_sep(world, 0, name, \".\", ((void *)0), 1) == id"
	.text
	.type	bootstrap_entity, @function
bootstrap_entity:
.LFB927:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$304, %rsp
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	%rdx, -296(%rbp)
	movq	%rcx, -304(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-272(%rbp), %rax
	movabsq	$8026310034028063846, %rcx
	movq	%rcx, (%rax)
	movl	$3040626, 8(%rax)
	movq	-296(%rbp), %rdx
	leaq	-272(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcat@PLT
	movq	-296(%rbp), %rdx
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	leaq	-272(%rbp), %rdx
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movq	-288(%rbp), %rdx
	movq	-280(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27508, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC909(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-288(%rbp), %rdx
	movq	-280(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	testq	%rax, %rax
	jne	.L6201
	leaq	__PRETTY_FUNCTION__.17041(%rip), %rcx
	movl	$27508, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC910(%rip), %rdi
	call	__assert_fail@PLT
.L6201:
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-304(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-288(%rbp), %rcx
	movq	-280(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	cmpq	$0, -304(%rbp)
	je	.L6202
	movl	$258, %eax
	cmpq	%rax, -304(%rbp)
	jne	.L6205
.L6202:
	movq	-296(%rbp), %rdx
	movq	-280(%rbp), %rax
	movl	$1, %r9d
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_lookup_path_w_sep
	cmpq	%rax, -288(%rbp)
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27512, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC911(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-296(%rbp), %rdx
	movq	-280(%rbp), %rax
	movl	$1, %r9d
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_lookup_path_w_sep
	cmpq	%rax, -288(%rbp)
	je	.L6205
	leaq	__PRETTY_FUNCTION__.17041(%rip), %rcx
	movl	$27512, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC912(%rip), %rdi
	call	__assert_fail@PLT
.L6205:
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6204
	call	__stack_chk_fail@PLT
.L6204:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE927:
	.size	bootstrap_entity, .-bootstrap_entity
	.section	.rodata
.LC913:
	.string	"bootstrap core components"
.LC914:
	.string	"EcsIdentifier"
.LC915:
	.string	"EcsComponent"
.LC916:
	.string	"EcsComponentLifecycle"
.LC917:
	.string	"EcsType"
.LC918:
	.string	"EcsQuery"
.LC919:
	.string	"EcsTrigger"
.LC920:
	.string	"EcsObserver"
.LC921:
	.string	"EcsName"
.LC922:
	.string	"EcsSymbol"
.LC923:
	.string	"EcsModule"
.LC924:
	.string	"EcsPrefab"
.LC925:
	.string	"EcsHidden"
.LC926:
	.string	"EcsDisabled"
.LC927:
	.string	"flecs"
.LC928:
	.string	"core"
.LC929:
	.string	"World"
.LC930:
	.string	"This"
.LC931:
	.string	"*"
.LC932:
	.string	"Transitive"
.LC933:
	.string	"Final"
.LC934:
	.string	"Tag"
.LC935:
	.string	"IsA"
.LC936:
	.string	"ChildOf"
.LC937:
	.string	"OnAdd"
.LC938:
	.string	"OnRemove"
.LC939:
	.string	"OnSet"
.LC940:
	.string	"UnSet"
.LC941:
	.string	"OnDelete"
.LC942:
	.string	"OnDeleteObject"
.LC943:
	.string	"Remove"
.LC944:
	.string	"Delete"
.LC945:
	.string	"Throw"
	.text
	.globl	flecs_bootstrap
	.type	flecs_bootstrap, @function
flecs_bootstrap:
.LFB928:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$2968, %rsp
	.cfi_offset 3, -24
	movq	%rdi, -2968(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -24(%rbp)
	xorl	%eax, %eax
	movq	$0, FLECS__TEcsComponent(%rip)
	leaq	.LC913(%rip), %rcx
	movl	$27522, %edx
	leaq	.LC74(%rip), %rsi
	movl	$1, %edi
	movl	$0, %eax
	call	_ecs_trace
	call	ecs_log_push
	movq	-2968(%rbp), %rax
	movq	%rax, %rdi
	call	bootstrap_component_table
	movq	%rax, -2952(%rbp)
	cmpq	$0, -2952(%rbp)
	jne	.L6207
	leaq	__PRETTY_FUNCTION__.17046(%rip), %rcx
	movl	$27527, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC93(%rip), %rdi
	call	__assert_fail@PLT
.L6207:
	movq	-2952(%rbp), %rsi
	movq	-2968(%rbp), %rax
	movl	$8, %r9d
	movl	$24, %r8d
	leaq	.LC914(%rip), %rcx
	movl	$4, %edx
	movq	%rax, %rdi
	call	_bootstrap_component
	movq	-2952(%rbp), %rsi
	movq	-2968(%rbp), %rax
	movl	$4, %r9d
	movl	$8, %r8d
	leaq	.LC915(%rip), %rcx
	movl	$1, %edx
	movq	%rax, %rdi
	call	_bootstrap_component
	movq	-2952(%rbp), %rsi
	movq	-2968(%rbp), %rax
	movl	$8, %r9d
	movl	$80, %r8d
	leaq	.LC916(%rip), %rcx
	movl	$2, %edx
	movq	%rax, %rdi
	call	_bootstrap_component
	movq	-2952(%rbp), %rsi
	movq	-2968(%rbp), %rax
	movl	$8, %r9d
	movl	$16, %r8d
	leaq	.LC917(%rip), %rcx
	movl	$3, %edx
	movq	%rax, %rdi
	call	_bootstrap_component
	movq	-2952(%rbp), %rsi
	movq	-2968(%rbp), %rax
	movl	$8, %r9d
	movl	$8, %r8d
	leaq	.LC918(%rip), %rcx
	movl	$7, %edx
	movq	%rax, %rdi
	call	_bootstrap_component
	movq	-2952(%rbp), %rsi
	movq	-2968(%rbp), %rax
	movl	$8, %r9d
	movl	$8, %r8d
	leaq	.LC919(%rip), %rcx
	movl	$6, %edx
	movq	%rax, %rdi
	call	_bootstrap_component
	movq	-2952(%rbp), %rsi
	movq	-2968(%rbp), %rax
	movl	$8, %r9d
	movl	$8, %r8d
	leaq	.LC920(%rip), %rcx
	movl	$8, %edx
	movq	%rax, %rdi
	call	_bootstrap_component
	movq	$0, -2944(%rbp)
	movq	$0, -2936(%rbp)
	movq	$0, -2928(%rbp)
	movq	$0, -2920(%rbp)
	movq	$0, -2912(%rbp)
	movq	$0, -2904(%rbp)
	movq	$0, -2896(%rbp)
	movq	$0, -2888(%rbp)
	movq	$0, -2880(%rbp)
	movq	$0, -2872(%rbp)
	leaq	EcsIdentifier_ctor(%rip), %rax
	movq	%rax, -2944(%rbp)
	leaq	EcsIdentifier_dtor(%rip), %rax
	movq	%rax, -2936(%rbp)
	leaq	EcsIdentifier_copy(%rip), %rax
	movq	%rax, -2928(%rbp)
	leaq	EcsIdentifier_move(%rip), %rax
	movq	%rax, -2920(%rbp)
	leaq	EcsIdentifier_on_set(%rip), %rax
	movq	%rax, -2872(%rbp)
	leaq	-2944(%rbp), %rdx
	movq	-2968(%rbp), %rax
	movl	$4, %esi
	movq	%rax, %rdi
	call	ecs_set_component_actions_w_id
	movq	$0, -2864(%rbp)
	movq	$0, -2856(%rbp)
	movq	$0, -2848(%rbp)
	movq	$0, -2840(%rbp)
	movq	$0, -2832(%rbp)
	movq	$0, -2824(%rbp)
	movq	$0, -2816(%rbp)
	movq	$0, -2808(%rbp)
	movq	$0, -2800(%rbp)
	movq	$0, -2792(%rbp)
	leaq	EcsTrigger_ctor(%rip), %rax
	movq	%rax, -2864(%rbp)
	leaq	EcsTrigger_dtor(%rip), %rax
	movq	%rax, -2856(%rbp)
	leaq	EcsTrigger_copy(%rip), %rax
	movq	%rax, -2848(%rbp)
	leaq	EcsTrigger_move(%rip), %rax
	movq	%rax, -2840(%rbp)
	leaq	-2864(%rbp), %rdx
	movq	-2968(%rbp), %rax
	movl	$6, %esi
	movq	%rax, %rdi
	call	ecs_set_component_actions_w_id
	movq	$0, -2784(%rbp)
	movq	$0, -2776(%rbp)
	movq	$0, -2768(%rbp)
	movq	$0, -2760(%rbp)
	movq	$0, -2752(%rbp)
	movq	$0, -2744(%rbp)
	movq	$0, -2736(%rbp)
	movq	$0, -2728(%rbp)
	movq	$0, -2720(%rbp)
	movq	$0, -2712(%rbp)
	leaq	EcsObserver_ctor(%rip), %rax
	movq	%rax, -2784(%rbp)
	leaq	EcsObserver_dtor(%rip), %rax
	movq	%rax, -2776(%rbp)
	leaq	EcsObserver_copy(%rip), %rax
	movq	%rax, -2768(%rbp)
	leaq	EcsObserver_move(%rip), %rax
	movq	%rax, -2760(%rbp)
	leaq	-2784(%rbp), %rdx
	movq	-2968(%rbp), %rax
	movl	$8, %esi
	movq	%rax, %rdi
	call	ecs_set_component_actions_w_id
	movq	-2968(%rbp), %rax
	movq	$32, 528(%rax)
	movq	-2968(%rbp), %rax
	movq	$384, 536(%rax)
	movq	-2968(%rbp), %rax
	movq	$0, 544(%rax)
	movq	-2968(%rbp), %rax
	movq	$0, 552(%rax)
	movq	-2968(%rbp), %rax
	movq	%rax, %rdi
	call	bootstrap_types
	movl	$258, %edx
	movq	-2968(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_set_scope
	movl	$271, %ecx
	movq	-2968(%rbp), %rax
	leaq	3+.LC921(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$271, %ecx
	movq	-2968(%rbp), %rax
	leaq	.LC921(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-2968(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$271, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$272, %ecx
	movq	-2968(%rbp), %rax
	leaq	3+.LC922(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$272, %ecx
	movq	-2968(%rbp), %rax
	leaq	.LC922(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-2968(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$272, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$259, %ecx
	movq	-2968(%rbp), %rax
	leaq	3+.LC923(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$259, %ecx
	movq	-2968(%rbp), %rax
	leaq	.LC923(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-2968(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$259, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$260, %ecx
	movq	-2968(%rbp), %rax
	leaq	3+.LC924(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$260, %ecx
	movq	-2968(%rbp), %rax
	leaq	.LC924(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-2968(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$260, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$262, %ecx
	movq	-2968(%rbp), %rax
	leaq	3+.LC925(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$262, %ecx
	movq	-2968(%rbp), %rax
	leaq	.LC925(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-2968(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$262, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$261, %ecx
	movq	-2968(%rbp), %rax
	leaq	3+.LC926(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$261, %ecx
	movq	-2968(%rbp), %rax
	leaq	.LC926(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_symbol
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rbx
	movq	-2968(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movl	%eax, %eax
	leaq	(%rbx,%rax), %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$261, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$257, %ecx
	movq	-2968(%rbp), %rax
	leaq	.LC927(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$259, %edx
	movl	$257, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$258, %ecx
	movq	-2968(%rbp), %rax
	leaq	.LC928(%rip), %rdx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	movl	$259, %edx
	movl	$258, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$276, %eax
	salq	$32, %rax
	movl	$257, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$258, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$258, %edx
	movl	$256, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC929(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$267, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC930(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$266, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC931(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$268, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC932(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$269, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC933(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$270, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC934(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$277, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC935(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$276, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC936(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$286, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC937(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$287, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC938(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$288, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC939(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$289, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC940(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$290, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC941(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$299, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC942(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$306, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC943(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$307, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC944(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$258, %edx
	movl	$308, %esi
	movq	-2968(%rbp), %rax
	movq	%rdx, %rcx
	leaq	.LC945(%rip), %rdx
	movq	%rax, %rdi
	call	bootstrap_entity
	movl	$268, %edx
	movl	$277, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$270, %edx
	movl	$277, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$270, %edx
	movl	$276, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$269, %edx
	movq	-2968(%rbp), %rax
	movl	$1, %esi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$269, %edx
	movq	-2968(%rbp), %rax
	movl	$4, %esi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$269, %edx
	movl	$268, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$269, %edx
	movl	$269, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$269, %edx
	movl	$277, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$269, %edx
	movl	$290, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movl	$269, %edx
	movl	$299, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	leaq	-2704(%rbp), %rdx
	movl	$0, %eax
	movl	$111, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$290, %eax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -2128(%rbp)
	movl	$286, %eax
	movq	%rax, -1928(%rbp)
	leaq	register_on_delete(%rip), %rax
	movq	%rax, -1864(%rbp)
	leaq	-2704(%rbp), %rdx
	movq	-2968(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_trigger_init
	leaq	-1808(%rbp), %rdx
	movl	$0, %eax
	movl	$111, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$299, %eax
	salq	$32, %rax
	movl	$266, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -1232(%rbp)
	movl	$286, %eax
	movq	%rax, -1032(%rbp)
	leaq	register_on_delete_object(%rip), %rax
	movq	%rax, -968(%rbp)
	leaq	-1808(%rbp), %rdx
	movq	-2968(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_trigger_init
	leaq	-912(%rbp), %rdx
	movl	$0, %eax
	movl	$111, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	$2, -336(%rbp)
	movl	$288, %eax
	movq	%rax, -136(%rbp)
	leaq	on_set_component_lifecycle(%rip), %rax
	movq	%rax, -72(%rbp)
	leaq	-912(%rbp), %rdx
	movq	-2968(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_trigger_init
	movl	$299, %eax
	salq	$32, %rax
	movl	$307, %edx
	movl	%edx, %edx
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movl	$276, %ecx
	movq	-2968(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
	movq	-2968(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_bootstrap_hierarchy
	movq	-2968(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_set_scope
	call	ecs_log_pop
	nop
	movq	-24(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6208
	call	__stack_chk_fail@PLT
.L6208:
	addq	$2968, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE928:
	.size	flecs_bootstrap, .-flecs_bootstrap
	.section	.rodata
.LC946:
	.string	"%u"
	.text
	.type	path_append, @function
path_append:
.LFB929:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%r8, -88(%rbp)
	movq	%r9, -96(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -56(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27677, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -56(%rbp)
	jne	.L6210
	leaq	__PRETTY_FUNCTION__.17061(%rip), %rcx
	movl	$27677, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L6210:
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27678, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L6211
	leaq	__PRETTY_FUNCTION__.17061(%rip), %rcx
	movl	$27678, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L6211:
	movq	$0, -48(%rbp)
	movq	-72(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_is_valid
	testb	%al, %al
	je	.L6212
	movl	$276, %edx
	movq	-72(%rbp), %rsi
	movq	-56(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_get_object
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.L6213
	movq	-48(%rbp), %rax
	cmpq	-64(%rbp), %rax
	je	.L6214
	movl	$258, %eax
	cmpq	%rax, -48(%rbp)
	je	.L6214
	movq	-96(%rbp), %r8
	movq	-88(%rbp), %rdi
	movq	-80(%rbp), %rcx
	movq	-48(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	-56(%rbp), %rax
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	path_append
	movq	-80(%rbp), %rdx
	movq	-96(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	jmp	.L6214
.L6213:
	cmpq	$0, -88(%rbp)
	je	.L6214
	movq	-88(%rbp), %rdx
	movq	-96(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L6214:
	movq	-72(%rbp), %rdx
	movq	-56(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_get_name
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L6215
	movq	-72(%rbp), %rax
	movl	%eax, %edx
	leaq	-32(%rbp), %rax
	leaq	.LC946(%rip), %rsi
	movq	%rax, %rdi
	movl	$0, %eax
	call	sprintf@PLT
	leaq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
	jmp	.L6215
.L6212:
	movq	-72(%rbp), %rax
	movl	%eax, %edx
	leaq	-32(%rbp), %rax
	leaq	.LC946(%rip), %rsi
	movq	%rax, %rdi
	movl	$0, %eax
	call	sprintf@PLT
	leaq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
.L6215:
	movq	-40(%rbp), %rdx
	movq	-96(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
	cmpq	$0, -48(%rbp)
	setne	%al
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6217
	call	__stack_chk_fail@PLT
.L6217:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE929:
	.size	path_append, .-path_append
	.section	.rodata
	.align 8
.LC947:
	.string	"!length || length == ecs_os_strlen(name)"
	.align 8
.LC948:
	.string	"!length || length == (ecs_size_t)strlen(name)"
	.align 8
.LC949:
	.string	"!hash || hash == flecs_hash(name, length)"
	.text
	.type	get_string_key, @function
get_string_key:
.LFB930:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	movq	%rcx, -64(%rbp)
	cmpl	$0, -52(%rbp)
	je	.L6219
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	cmpl	%eax, -52(%rbp)
	jne	.L6220
.L6219:
	movl	$1, %eax
	jmp	.L6221
.L6220:
	movl	$0, %eax
.L6221:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27716, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC947(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -52(%rbp)
	je	.L6222
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	cmpl	%eax, -52(%rbp)
	je	.L6222
	leaq	__PRETTY_FUNCTION__.17070(%rip), %rcx
	movl	$27716, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC948(%rip), %rdi
	call	__assert_fail@PLT
.L6222:
	cmpl	$0, -52(%rbp)
	jne	.L6223
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, -52(%rbp)
.L6223:
	cmpq	$0, -64(%rbp)
	je	.L6224
	movl	-52(%rbp), %edx
	movq	-48(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_hash
	cmpq	%rax, -64(%rbp)
	jne	.L6225
.L6224:
	movl	$1, %eax
	jmp	.L6226
.L6225:
	movl	$0, %eax
.L6226:
	andl	$1, %eax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27723, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC949(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -64(%rbp)
	je	.L6227
	movl	-52(%rbp), %edx
	movq	-48(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_hash
	cmpq	%rax, -64(%rbp)
	je	.L6227
	leaq	__PRETTY_FUNCTION__.17070(%rip), %rcx
	movl	$27723, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC949(%rip), %rdi
	call	__assert_fail@PLT
.L6227:
	cmpq	$0, -64(%rbp)
	jne	.L6228
	movl	-52(%rbp), %edx
	movq	-48(%rbp), %rax
	movl	%edx, %esi
	movq	%rax, %rdi
	call	flecs_hash
	movq	%rax, -64(%rbp)
.L6228:
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-40(%rbp), %rax
	movl	-52(%rbp), %edx
	movl	%edx, 8(%rax)
	movq	-40(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-40(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE930:
	.size	get_string_key, .-get_string_key
	.type	find_by_name, @function
find_by_name:
.LFB931:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -80(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-32(%rbp), %rax
	movq	-80(%rbp), %rcx
	movl	-68(%rbp), %edx
	movq	-64(%rbp), %rsi
	movq	%rax, %rdi
	call	get_string_key
	leaq	-32(%rbp), %rcx
	movq	-56(%rbp), %rax
	pushq	24(%rax)
	pushq	16(%rax)
	pushq	8(%rax)
	pushq	(%rax)
	movl	$8, %edx
	movq	%rcx, %rsi
	movl	$24, %edi
	call	_flecs_hashmap_get
	addq	$32, %rsp
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.L6231
	movl	$0, %eax
	jmp	.L6233
.L6231:
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
.L6233:
	movq	-8(%rbp), %rdi
	xorq	%fs:40, %rdi
	je	.L6234
	call	__stack_chk_fail@PLT
.L6234:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE931:
	.size	find_by_name, .-find_by_name
	.section	.rodata
.LC950:
	.string	"name != NULL"
.LC951:
	.string	"name != ((void *)0)"
	.align 8
.LC952:
	.string	"conflicting entity registered with name '%s'"
	.text
	.type	register_by_name, @function
register_by_name:
.LFB932:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	addq	$-128, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movl	%ecx, -108(%rbp)
	movq	%r8, -120(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -96(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27763, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC280(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -96(%rbp)
	jne	.L6236
	leaq	__PRETTY_FUNCTION__.17087(%rip), %rcx
	movl	$27763, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC280(%rip), %rdi
	call	__assert_fail@PLT
.L6236:
	cmpq	$0, -104(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27764, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC950(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -104(%rbp)
	jne	.L6237
	leaq	__PRETTY_FUNCTION__.17087(%rip), %rcx
	movl	$27764, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC951(%rip), %rdi
	call	__assert_fail@PLT
.L6237:
	leaq	-64(%rbp), %rax
	movq	-120(%rbp), %rcx
	movl	-108(%rbp), %edx
	movq	-104(%rbp), %rsi
	movq	%rax, %rdi
	call	get_string_key
	movq	-48(%rbp), %rcx
	movl	-56(%rbp), %edx
	movq	-104(%rbp), %rsi
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	find_by_name
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L6238
	movq	-72(%rbp), %rax
	cmpq	-96(%rbp), %rax
	je	.L6239
	movq	-104(%rbp), %rax
	movq	%rax, %r8
	leaq	.LC952(%rip), %rcx
	movl	$27771, %edx
	leaq	.LC74(%rip), %rsi
	movl	$8, %edi
	movl	$0, %eax
	call	_ecs_abort
	call	abort@PLT
.L6238:
	movq	48+ecs_os_api(%rip), %rdx
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -64(%rbp)
.L6239:
	leaq	-32(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	movq	-88(%rbp), %rax
	pushq	24(%rax)
	pushq	16(%rax)
	pushq	8(%rax)
	pushq	(%rax)
	movl	$8, %ecx
	movl	$24, %esi
	call	_flecs_hashmap_ensure
	addq	$32, %rsp
	movq	-24(%rbp), %rax
	movq	-96(%rbp), %rdx
	movq	%rdx, (%rax)
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6240
	call	__stack_chk_fail@PLT
.L6240:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE932:
	.size	register_by_name, .-register_by_name
	.type	is_number, @function
is_number:
.LFB933:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27788, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC950(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L6242
	leaq	__PRETTY_FUNCTION__.17094(%rip), %rcx
	movl	$27788, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC951(%rip), %rdi
	call	__assert_fail@PLT
.L6242:
	call	__ctype_b_loc@PLT
	movq	(%rax), %rdx
	movq	-24(%rbp), %rax
	movzbl	(%rax), %eax
	movsbq	%al, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	jne	.L6243
	movl	$0, %eax
	jmp	.L6244
.L6243:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, -4(%rbp)
	movl	$1, -8(%rbp)
	jmp	.L6245
.L6248:
	movl	-8(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movzbl	(%rax), %eax
	movb	%al, -9(%rbp)
	call	__ctype_b_loc@PLT
	movq	(%rax), %rax
	movsbq	-9(%rbp), %rdx
	addq	%rdx, %rdx
	addq	%rdx, %rax
	movzwl	(%rax), %eax
	movzwl	%ax, %eax
	andl	$2048, %eax
	testl	%eax, %eax
	je	.L6249
	addl	$1, -8(%rbp)
.L6245:
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jl	.L6248
	jmp	.L6247
.L6249:
	nop
.L6247:
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	setge	%al
.L6244:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE933:
	.size	is_number, .-is_number
	.section	.rodata
.LC953:
	.string	"result >= 0"
	.text
	.type	name_to_id, @function
name_to_id:
.LFB934:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	atol@PLT
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	notq	%rax
	shrq	$63, %rax
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27811, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC953(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -8(%rbp)
	jns	.L6251
	leaq	__PRETTY_FUNCTION__.17105(%rip), %rcx
	movl	$27811, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC953(%rip), %rdi
	call	__assert_fail@PLT
.L6251:
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE934:
	.size	name_to_id, .-name_to_id
	.type	get_builtin, @function
get_builtin:
.LFB935:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$46, %al
	jne	.L6254
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L6254
	movl	$267, %eax
	jmp	.L6255
.L6254:
	movq	-8(%rbp), %rax
	movzbl	(%rax), %eax
	cmpb	$42, %al
	jne	.L6256
	movq	-8(%rbp), %rax
	addq	$1, %rax
	movzbl	(%rax), %eax
	testb	%al, %al
	jne	.L6256
	movl	$266, %eax
	jmp	.L6255
.L6256:
	movl	$0, %eax
.L6255:
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE935:
	.size	get_builtin, .-get_builtin
	.type	find_child_in_table, @function
find_child_in_table:
.LFB936:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	$271, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_type_index_of
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.L6258
	movl	$0, %eax
	jmp	.L6259
.L6258:
	movq	-56(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.L6260
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L6261
.L6260:
	movl	$0, %eax
	jmp	.L6259
.L6261:
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_vector_count
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	jne	.L6262
	movl	$0, %eax
	jmp	.L6259
.L6262:
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movl	-40(%rbp), %edx
	movslq	%edx, %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	is_number
	testb	%al, %al
	je	.L6263
	movq	-64(%rbp), %rax
	movq	%rax, %rdi
	call	name_to_id
	jmp	.L6259
.L6263:
	movl	$0, -44(%rbp)
	jmp	.L6264
.L6266:
	movl	-44(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-16(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L6265
	movq	-64(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	strcmp@PLT
	testl	%eax, %eax
	jne	.L6265
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	-44(%rbp), %edx
	movl	%edx, %ecx
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_get
	movq	(%rax), %rax
	jmp	.L6259
.L6265:
	addl	$1, -44(%rbp)
.L6264:
	movl	-44(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jl	.L6266
	movl	$0, %eax
.L6259:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE936:
	.size	find_child_in_table, .-find_child_in_table
	.type	is_sep, @function
is_sep:
.LFB937:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	movslq	%eax, %rdx
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L6268
	movq	-24(%rbp), %rax
	movq	(%rax), %rdx
	movl	-4(%rbp), %eax
	cltq
	addq	%rax, %rdx
	movq	-24(%rbp), %rax
	movq	%rdx, (%rax)
	movl	$1, %eax
	jmp	.L6269
.L6268:
	movl	$0, %eax
.L6269:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE937:
	.size	is_sep, .-is_sep
	.section	.rodata
.LC954:
	.string	"template_nesting >= 0"
	.text
	.type	path_elem, @function
path_elem:
.LFB938:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	jmp	.L6271
.L6277:
	cmpb	$60, -25(%rbp)
	jne	.L6272
	addl	$1, -24(%rbp)
	jmp	.L6273
.L6272:
	cmpb	$62, -25(%rbp)
	jne	.L6273
	subl	$1, -24(%rbp)
.L6273:
	movl	-24(%rbp), %eax
	notl	%eax
	shrl	$31, %eax
	movzbl	%al, %eax
	movq	-40(%rbp), %rdx
	movq	%rdx, %r9
	movl	$27900, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC954(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpl	$0, -24(%rbp)
	jns	.L6274
	leaq	__PRETTY_FUNCTION__.17137(%rip), %rcx
	movl	$27900, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC954(%rip), %rdi
	call	__assert_fail@PLT
.L6274:
	cmpl	$0, -24(%rbp)
	jne	.L6275
	movq	-48(%rbp), %rdx
	leaq	-16(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	is_sep
	testb	%al, %al
	jne	.L6283
.L6275:
	addl	$1, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
.L6271:
	movq	-16(%rbp), %rax
	movzbl	(%rax), %eax
	movb	%al, -25(%rbp)
	cmpb	$0, -25(%rbp)
	jne	.L6277
	jmp	.L6276
.L6283:
	nop
.L6276:
	cmpq	$0, -56(%rbp)
	je	.L6278
	movq	-56(%rbp), %rax
	movl	-20(%rbp), %edx
	movl	%edx, (%rax)
.L6278:
	cmpl	$0, -20(%rbp)
	je	.L6279
	movq	-16(%rbp), %rax
	jmp	.L6281
.L6279:
	movl	$0, %eax
.L6281:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6282
	call	__stack_chk_fail@PLT
.L6282:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE938:
	.size	path_elem, .-path_elem
	.type	get_parent_from_path, @function
get_parent_from_path:
.LFB939:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$64, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movl	%r8d, %eax
	movb	%al, -52(%rbp)
	movb	$0, -13(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27931, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L6285
	leaq	__PRETTY_FUNCTION__.17150(%rip), %rcx
	movl	$27931, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L6285:
	cmpq	$0, -48(%rbp)
	je	.L6286
	movq	-48(%rbp), %rax
	movq	%rax, %rdi
	call	strlen@PLT
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	movslq	%eax, %rdx
	movq	-48(%rbp), %rcx
	movq	-8(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	strncmp@PLT
	testl	%eax, %eax
	jne	.L6286
	movl	-12(%rbp), %eax
	cltq
	addq	%rax, -8(%rbp)
	movq	$0, -32(%rbp)
	movb	$1, -13(%rbp)
.L6286:
	movzbl	-13(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L6287
	cmpq	$0, -32(%rbp)
	jne	.L6287
	cmpb	$0, -52(%rbp)
	je	.L6287
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_scope
	movq	%rax, -32(%rbp)
.L6287:
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-32(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE939:
	.size	get_parent_from_path, .-get_parent_from_path
	.type	on_set_symbol, @function
on_set_symbol:
.LFB940:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	$1, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	ecs_term_w_size
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -28(%rbp)
	jmp	.L6290
.L6291:
	movq	-40(%rbp), %rax
	movq	152(%rax), %rax
	movl	-28(%rbp), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
	addq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	16(%rax), %rsi
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movl	8(%rax), %ecx
	movl	-28(%rbp), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	addq	%rax, %rax
	addq	%rdx, %rax
	salq	$3, %rax
	movq	%rax, %rdx
	movq	-24(%rbp), %rax
	addq	%rdx, %rax
	movq	(%rax), %rdx
	movq	-16(%rbp), %rax
	leaq	336(%rax), %rdi
	movq	-8(%rbp), %rax
	movq	%rsi, %r8
	movq	%rax, %rsi
	call	register_by_name
	addl	$1, -28(%rbp)
.L6290:
	movq	-40(%rbp), %rax
	movl	204(%rax), %eax
	cmpl	%eax, -28(%rbp)
	jl	.L6291
	nop
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE940:
	.size	on_set_symbol, .-on_set_symbol
	.type	string_hash, @function
string_hash:
.LFB941:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$27969, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC795(%rip), %rdx
	movl	$2, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	testq	%rax, %rax
	jne	.L6293
	leaq	__PRETTY_FUNCTION__.17166(%rip), %rcx
	movl	$27969, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC795(%rip), %rdi
	call	__assert_fail@PLT
.L6293:
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE941:
	.size	string_hash, .-string_hash
	.type	string_compare, @function
string_compare:
.LFB942:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	je	.L6296
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	setg	%al
	movzbl	%al, %edx
	movl	-24(%rbp), %eax
	cmpl	-20(%rbp), %eax
	setl	%al
	movzbl	%al, %eax
	subl	%eax, %edx
	movl	%edx, %eax
	jmp	.L6297
.L6296:
	movl	-24(%rbp), %eax
	movslq	%eax, %rdx
	movq	-8(%rbp), %rax
	movq	(%rax), %rcx
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcmp@PLT
.L6297:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE942:
	.size	string_compare, .-string_compare
	.globl	flecs_string_hashmap_new
	.type	flecs_string_hashmap_new, @function
flecs_string_hashmap_new:
.LFB943:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-24(%rbp), %rax
	leaq	string_compare(%rip), %r8
	leaq	string_hash(%rip), %rcx
	movl	$8, %edx
	movl	$24, %esi
	movq	%rax, %rdi
	call	_flecs_hashmap_new
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6300
	call	__stack_chk_fail@PLT
.L6300:
	movq	-24(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE943:
	.size	flecs_string_hashmap_new, .-flecs_string_hashmap_new
	.globl	flecs_bootstrap_hierarchy
	.type	flecs_bootstrap_hierarchy, @function
flecs_bootstrap_hierarchy:
.LFB944:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$912, %rsp
	movq	%rdi, -904(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-896(%rbp), %rdx
	movl	$0, %eax
	movl	$111, %ecx
	movq	%rdx, %rdi
	rep stosq
	movl	$272, %eax
	movl	%eax, %edx
	movabsq	$17179869184, %rax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -320(%rbp)
	movl	$288, %eax
	movq	%rax, -120(%rbp)
	leaq	on_set_symbol(%rip), %rax
	movq	%rax, -56(%rbp)
	leaq	-896(%rbp), %rdx
	movq	-904(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_trigger_init
	nop
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6302
	call	__stack_chk_fail@PLT
.L6302:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE944:
	.size	flecs_bootstrap_hierarchy, .-flecs_bootstrap_hierarchy
	.globl	ecs_get_path_w_sep
	.type	ecs_get_path_w_sep, @function
ecs_get_path_w_sep:
.LFB945:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1152, %rsp
	movq	%rdi, -1112(%rbp)
	movq	%rsi, -1120(%rbp)
	movq	%rdx, -1128(%rbp)
	movq	%rcx, -1136(%rbp)
	movq	%r8, -1144(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -1112(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28013, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -1112(%rbp)
	jne	.L6304
	leaq	__PRETTY_FUNCTION__.17189(%rip), %rcx
	movl	$28013, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L6304:
	movq	-1112(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -1112(%rbp)
	cmpq	$0, -1136(%rbp)
	jne	.L6305
	leaq	.LC264(%rip), %rax
	movq	%rax, -1136(%rbp)
.L6305:
	leaq	-1104(%rbp), %rdx
	movl	$0, %eax
	movl	$136, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-1120(%rbp), %rax
	cmpq	-1128(%rbp), %rax
	je	.L6306
	leaq	-1104(%rbp), %r8
	movq	-1144(%rbp), %rdi
	movq	-1136(%rbp), %rcx
	movq	-1128(%rbp), %rdx
	movq	-1120(%rbp), %rsi
	movq	-1112(%rbp), %rax
	movq	%r8, %r9
	movq	%rdi, %r8
	movq	%rax, %rdi
	call	path_append
	jmp	.L6307
.L6306:
	leaq	-1104(%rbp), %rax
	leaq	.LC34(%rip), %rsi
	movq	%rax, %rdi
	call	ecs_strbuf_appendstr
.L6307:
	leaq	-1104(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_strbuf_get
	movq	-8(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L6309
	call	__stack_chk_fail@PLT
.L6309:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE945:
	.size	ecs_get_path_w_sep, .-ecs_get_path_w_sep
	.globl	ecs_lookup_child
	.type	ecs_lookup_child, @function
ecs_lookup_child:
.LFB946:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$112, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28036, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L6311
	leaq	__PRETTY_FUNCTION__.17197(%rip), %rcx
	movl	$28036, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L6311:
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -88(%rbp)
	movq	$0, -72(%rbp)
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L6312
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L6312
	movq	-64(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L6313
.L6315:
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	-104(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	find_child_in_table
	movq	%rax, -72(%rbp)
	cmpq	$0, -72(%rbp)
	je	.L6313
	movq	-72(%rbp), %rax
	jmp	.L6314
.L6313:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L6315
.L6312:
	movq	-72(%rbp), %rax
.L6314:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6316
	call	__stack_chk_fail@PLT
.L6316:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE946:
	.size	ecs_lookup_child, .-ecs_lookup_child
	.globl	ecs_lookup
	.type	ecs_lookup, @function
ecs_lookup:
.LFB947:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L6318
	movl	$0, %eax
	jmp	.L6319
.L6318:
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28063, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L6320
	leaq	__PRETTY_FUNCTION__.17209(%rip), %rcx
	movl	$28063, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L6320:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	get_builtin
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L6321
	movq	-8(%rbp), %rax
	jmp	.L6319
.L6321:
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	is_number
	testb	%al, %al
	je	.L6322
	movq	-32(%rbp), %rax
	movq	%rax, %rdi
	call	name_to_id
	jmp	.L6319
.L6322:
	movq	-24(%rbp), %rax
	leaq	304(%rax), %rdi
	movq	-32(%rbp), %rax
	movl	$0, %ecx
	movl	$0, %edx
	movq	%rax, %rsi
	call	find_by_name
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L6323
	movq	-8(%rbp), %rax
	jmp	.L6319
.L6323:
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_lookup_child
.L6319:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE947:
	.size	ecs_lookup, .-ecs_lookup
	.globl	ecs_lookup_symbol
	.type	ecs_lookup_symbol, @function
ecs_lookup_symbol:
.LFB948:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movl	%edx, %eax
	movb	%al, -36(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L6325
	movl	$0, %eax
	jmp	.L6326
.L6325:
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28092, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L6327
	leaq	__PRETTY_FUNCTION__.17216(%rip), %rcx
	movl	$28092, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L6327:
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	leaq	336(%rax), %rdi
	movq	-32(%rbp), %rax
	movl	$0, %ecx
	movl	$0, %edx
	movq	%rax, %rsi
	call	find_by_name
	movq	%rax, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.L6328
	movq	-8(%rbp), %rax
	jmp	.L6326
.L6328:
	cmpb	$0, -36(%rbp)
	je	.L6329
	movq	-32(%rbp), %rdx
	movq	-24(%rbp), %rax
	movl	$1, %r9d
	movl	$0, %r8d
	leaq	.LC264(%rip), %rcx
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_lookup_path_w_sep
	jmp	.L6326
.L6329:
	movl	$0, %eax
.L6326:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE948:
	.size	ecs_lookup_symbol, .-ecs_lookup_symbol
	.globl	ecs_lookup_path_w_sep
	.type	ecs_lookup_path_w_sep, @function
ecs_lookup_path_w_sep:
.LFB949:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$192, %rsp
	movq	%rdi, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movq	%rcx, -176(%rbp)
	movq	%r8, -184(%rbp)
	movl	%r9d, %eax
	movb	%al, -188(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-168(%rbp), %rax
	testq	%rax, %rax
	jne	.L6331
	movl	$0, %eax
	jmp	.L6349
.L6331:
	cmpq	$0, -176(%rbp)
	jne	.L6333
	leaq	.LC264(%rip), %rax
	movq	%rax, -176(%rbp)
.L6333:
	cmpq	$0, -152(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28123, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -152(%rbp)
	jne	.L6334
	leaq	__PRETTY_FUNCTION__.17226(%rip), %rcx
	movl	$28123, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L6334:
	movq	-152(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -152(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, %rdi
	call	get_builtin
	movq	%rax, -88(%rbp)
	cmpq	$0, -88(%rbp)
	je	.L6335
	movq	-88(%rbp), %rax
	jmp	.L6349
.L6335:
	movq	-168(%rbp), %rax
	movq	-152(%rbp), %rdx
	leaq	304(%rdx), %rdi
	movl	$0, %ecx
	movl	$0, %edx
	movq	%rax, %rsi
	call	find_by_name
	movq	%rax, -88(%rbp)
	cmpq	$0, -88(%rbp)
	je	.L6336
	movq	-88(%rbp), %rax
	jmp	.L6349
.L6336:
	leaq	-80(%rbp), %rax
	movq	%rax, -104(%rbp)
	movl	$64, -124(%rbp)
	movb	$0, -129(%rbp)
	cmpq	$0, -176(%rbp)
	jne	.L6337
	leaq	.LC264(%rip), %rax
	movq	%rax, -176(%rbp)
.L6337:
	movq	-184(%rbp), %rcx
	leaq	-168(%rbp), %rdx
	movq	-160(%rbp), %rsi
	movq	-152(%rbp), %rax
	movl	$1, %r8d
	movq	%rax, %rdi
	call	get_parent_from_path
	movq	%rax, -160(%rbp)
.L6338:
	movq	-160(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -112(%rbp)
	jmp	.L6339
.L6344:
	movl	-128(%rbp), %eax
	cmpl	%eax, -124(%rbp)
	jle	.L6340
	movl	-128(%rbp), %eax
	movslq	%eax, %rdx
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	jmp	.L6341
.L6340:
	cmpl	$64, -124(%rbp)
	jne	.L6342
	movq	$0, -104(%rbp)
.L6342:
	movq	24+ecs_os_api(%rip), %rdx
	movl	-128(%rbp), %eax
	leal	1(%rax), %ecx
	movq	-104(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -104(%rbp)
	movl	-128(%rbp), %eax
	movslq	%eax, %rdx
	movq	-112(%rbp), %rcx
	movq	-104(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.L6341:
	movl	-128(%rbp), %eax
	movslq	%eax, %rdx
	movq	-104(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-120(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-104(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	-152(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_lookup_child
	movq	%rax, -96(%rbp)
	cmpq	$0, -96(%rbp)
	je	.L6351
.L6339:
	leaq	-128(%rbp), %rdx
	movq	-176(%rbp), %rcx
	movq	-120(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	path_elem
	movq	%rax, -120(%rbp)
	cmpq	$0, -120(%rbp)
	jne	.L6344
	jmp	.L6343
.L6351:
	nop
.L6343:
	cmpq	$0, -96(%rbp)
	jne	.L6345
	cmpb	$0, -188(%rbp)
	je	.L6345
	movzbl	-129(%rbp), %eax
	xorl	$1, %eax
	testb	%al, %al
	je	.L6345
	cmpq	$0, -160(%rbp)
	je	.L6346
	movl	$276, %edx
	movq	-160(%rbp), %rsi
	movq	-152(%rbp), %rax
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_get_object
	movq	%rax, -160(%rbp)
	jmp	.L6338
.L6346:
	movq	$258, -160(%rbp)
	movb	$1, -129(%rbp)
	jmp	.L6338
.L6345:
	leaq	-80(%rbp), %rax
	cmpq	%rax, -104(%rbp)
	je	.L6348
	movq	40+ecs_os_api(%rip), %rdx
	movq	-104(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L6348:
	movq	-96(%rbp), %rax
.L6349:
	movq	-8(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L6350
	call	__stack_chk_fail@PLT
.L6350:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE949:
	.size	ecs_lookup_path_w_sep, .-ecs_lookup_path_w_sep
	.globl	ecs_set_scope
	.type	ecs_set_scope, @function
ecs_set_scope:
.LFB950:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$80, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	leaq	-72(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_world
	movq	%rax, -48(%rbp)
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-80(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rdx, %rax
	movq	%rax, -56(%rbp)
	leaq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	movl	$1, -24(%rbp)
	movq	-48(%rbp), %rax
	movq	64(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	-80(%rbp), %rdx
	movq	%rdx, 64(%rax)
	cmpq	$0, -80(%rbp)
	je	.L6353
	movq	-72(%rbp), %rax
	leaq	88(%rax), %rsi
	movq	-72(%rbp), %rax
	leaq	-32(%rbp), %rdx
	movl	$0, %ecx
	movq	%rax, %rdi
	call	flecs_table_traverse_add
	movq	-48(%rbp), %rdx
	movq	%rax, 56(%rdx)
	jmp	.L6354
.L6353:
	movq	-72(%rbp), %rax
	leaq	88(%rax), %rdx
	movq	-48(%rbp), %rax
	movq	%rdx, 56(%rax)
.L6354:
	movq	-40(%rbp), %rax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6356
	call	__stack_chk_fail@PLT
.L6356:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE950:
	.size	ecs_set_scope, .-ecs_set_scope
	.globl	ecs_get_scope
	.type	ecs_get_scope, @function
ecs_get_scope:
.LFB951:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_stage_from_readonly_world
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	64(%rax), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE951:
	.size	ecs_get_scope, .-ecs_get_scope
	.globl	ecs_get_child_count
	.type	ecs_get_child_count, @function
ecs_get_child_count:
.LFB952:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$96, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -88(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28231, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -88(%rbp)
	jne	.L6360
	leaq	__PRETTY_FUNCTION__.17257(%rip), %rcx
	movl	$28231, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L6360:
	movq	-88(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -88(%rbp)
	movl	$0, -68(%rbp)
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-96(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-88(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.L6361
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L6361
	movq	-64(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-48(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	jmp	.L6362
.L6363:
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	addl	%eax, -68(%rbp)
.L6362:
	leaq	-48(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -56(%rbp)
	cmpq	$0, -56(%rbp)
	jne	.L6363
.L6361:
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6365
	call	__stack_chk_fail@PLT
.L6365:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE952:
	.size	ecs_get_child_count, .-ecs_get_child_count
	.section	.rodata
.LC955:
	.string	"iter_world != NULL"
.LC956:
	.string	"iter_world != ((void *)0)"
	.text
	.globl	ecs_scope_iter_w_filter
	.type	ecs_scope_iter_w_filter, @function
ecs_scope_iter_w_filter:
.LFB953:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$2384, %rsp
	movq	%rdi, -2328(%rbp)
	movq	%rsi, -2336(%rbp)
	movq	%rdx, -2344(%rbp)
	movq	%rcx, -2352(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -2336(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28253, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC955(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -2336(%rbp)
	jne	.L6367
	leaq	__PRETTY_FUNCTION__.17270(%rip), %rcx
	movl	$28253, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC956(%rip), %rdi
	call	__assert_fail@PLT
.L6367:
	movq	-2336(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_get_world
	movq	%rax, -2320(%rbp)
	leaq	-2304(%rbp), %rdx
	movl	$0, %eax
	movl	$286, %ecx
	movq	%rdx, %rdi
	rep stosq
	movq	-2336(%rbp), %rax
	movq	%rax, -2304(%rbp)
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-2344(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-2320(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	flecs_get_id_record
	movq	%rax, -2312(%rbp)
	cmpq	$0, -2312(%rbp)
	je	.L6368
	movq	-2312(%rbp), %rax
	movq	(%rax), %rax
	testq	%rax, %rax
	je	.L6368
	movq	-2312(%rbp), %rax
	movq	(%rax), %rdx
	leaq	-2384(%rbp), %rax
	movq	%rdx, %rsi
	movq	%rax, %rdi
	call	ecs_map_iter
	movq	-2384(%rbp), %rax
	movq	-2376(%rbp), %rdx
	movq	%rax, -472(%rbp)
	movq	%rdx, -464(%rbp)
	movq	-2368(%rbp), %rax
	movq	-2360(%rbp), %rdx
	movq	%rax, -456(%rbp)
	movq	%rdx, -448(%rbp)
	movq	-2312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	call	ecs_map_count
	movl	%eax, -2176(%rbp)
	cmpq	$0, -2352(%rbp)
	je	.L6368
	movq	-2352(%rbp), %rdx
	leaq	-2072(%rbp), %rax
	movq	%rdx, %rsi
	movl	$200, %edx
	movq	%rax, %rdi
	movq	%rdx, %rcx
	rep movsq
.L6368:
	movq	-2328(%rbp), %rax
	movq	%rax, %rdi
	leaq	-2304(%rbp), %rax
	movl	$286, %edx
	movq	%rax, %rsi
	movq	%rdx, %rcx
	rep movsq
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6370
	call	__stack_chk_fail@PLT
.L6370:
	movq	-2328(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE953:
	.size	ecs_scope_iter_w_filter, .-ecs_scope_iter_w_filter
	.globl	ecs_scope_iter
	.type	ecs_scope_iter, @function
ecs_scope_iter:
.LFB954:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-24(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movl	$0, %ecx
	movq	%rax, %rdi
	call	ecs_scope_iter_w_filter
	movq	-8(%rbp), %rax
	xorq	%fs:40, %rax
	je	.L6373
	call	__stack_chk_fail@PLT
.L6373:
	movq	-24(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE954:
	.size	ecs_scope_iter, .-ecs_scope_iter
	.globl	ecs_scope_next
	.type	ecs_scope_next, @function
ecs_scope_next:
.LFB955:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1680, %rsp
	movq	%rdi, -1672(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movq	-1672(%rbp), %rax
	addq	$232, %rax
	movq	%rax, -1656(%rbp)
	movq	-1656(%rbp), %rax
	addq	$1600, %rax
	movq	%rax, -1648(%rbp)
	movq	-1656(%rbp), %rdx
	leaq	-1616(%rbp), %rax
	movq	%rdx, %rsi
	movl	$200, %edx
	movq	%rax, %rdi
	movq	%rdx, %rcx
	rep movsq
	jmp	.L6375
.L6382:
	movq	-1640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -1632(%rbp)
	cmpq	$0, -1632(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28289, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC93(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -1632(%rbp)
	jne	.L6376
	leaq	__PRETTY_FUNCTION__.17286(%rip), %rcx
	movl	$28289, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC94(%rip), %rdi
	call	__assert_fail@PLT
.L6376:
	movq	-1656(%rbp), %rax
	movl	1632(%rax), %eax
	leal	1(%rax), %edx
	movq	-1656(%rbp), %rax
	movl	%edx, 1632(%rax)
	movq	-1632(%rbp), %rax
	movq	%rax, %rdi
	call	flecs_table_get_data
	movq	%rax, -1624(%rbp)
	cmpq	$0, -1624(%rbp)
	jne	.L6377
	jmp	.L6375
.L6377:
	movq	-1632(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movq	-1672(%rbp), %rdx
	movl	%eax, 204(%rdx)
	movq	-1672(%rbp), %rax
	movl	204(%rax), %eax
	testl	%eax, %eax
	jne	.L6378
	jmp	.L6375
.L6378:
	movq	-40(%rbp), %rax
	testq	%rax, %rax
	jne	.L6379
	movq	-32(%rbp), %rax
	testq	%rax, %rax
	je	.L6380
.L6379:
	movq	-1672(%rbp), %rax
	movq	(%rax), %rax
	leaq	-1616(%rbp), %rdx
	movq	-1632(%rbp), %rcx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	flecs_table_match_filter
	xorl	$1, %eax
	testb	%al, %al
	je	.L6380
	jmp	.L6375
.L6380:
	movq	-1672(%rbp), %rax
	movq	-1632(%rbp), %rdx
	movq	%rdx, 48(%rax)
	movq	-1624(%rbp), %rax
	movq	16(%rax), %rdx
	movq	-1672(%rbp), %rax
	movq	%rdx, 144(%rax)
	movq	-1632(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_table_count
	movq	-1672(%rbp), %rdx
	movl	%eax, 204(%rdx)
	movq	-1624(%rbp), %rax
	movq	(%rax), %rax
	movl	$16, %edx
	movl	$8, %esi
	movq	%rax, %rdi
	call	_ecs_vector_first
	movq	-1672(%rbp), %rdx
	movq	%rax, 152(%rdx)
	movq	-1672(%rbp), %rax
	movb	$1, 212(%rax)
	nop
.L6381:
	endbr64
	movq	-1672(%rbp), %rax
	movb	$1, 212(%rax)
	movl	$1, %eax
	jmp	.L6384
.L6375:
	movq	-1648(%rbp), %rax
	movl	$0, %edx
	movl	$16, %esi
	movq	%rax, %rdi
	call	_ecs_map_next
	movq	%rax, -1640(%rbp)
	cmpq	$0, -1640(%rbp)
	jne	.L6382
	movq	-1672(%rbp), %rax
	movb	$0, 212(%rax)
	movl	$0, %eax
.L6384:
	movq	-8(%rbp), %rcx
	xorq	%fs:40, %rcx
	je	.L6385
	call	__stack_chk_fail@PLT
.L6385:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE955:
	.size	ecs_scope_next, .-ecs_scope_next
	.globl	ecs_set_name_prefix
	.type	ecs_set_name_prefix, @function
ecs_set_name_prefix:
.LFB956:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28330, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -24(%rbp)
	jne	.L6387
	leaq	__PRETTY_FUNCTION__.17296(%rip), %rcx
	movl	$28330, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L6387:
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	sete	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28331, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC225(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$1701016439, %eax
	je	.L6388
	leaq	__PRETTY_FUNCTION__.17296(%rip), %rcx
	movl	$28331, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC226(%rip), %rdi
	call	__assert_fail@PLT
.L6388:
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rdx, 464(%rax)
	movq	-8(%rbp), %rax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE956:
	.size	ecs_set_name_prefix, .-ecs_set_name_prefix
	.globl	ecs_add_path_w_sep
	.type	ecs_add_path_w_sep, @function
ecs_add_path_w_sep:
.LFB957:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$192, %rsp
	movq	%rdi, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movq	%rcx, -176(%rbp)
	movq	%r8, -184(%rbp)
	movq	%r9, -192(%rbp)
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	cmpq	$0, -152(%rbp)
	setne	%al
	movzbl	%al, %eax
	movl	$0, %r9d
	movl	$28346, %r8d
	leaq	.LC74(%rip), %rcx
	leaq	.LC137(%rip), %rdx
	movl	$7, %esi
	movl	%eax, %edi
	movl	$0, %eax
	call	_ecs_assert
	cmpq	$0, -152(%rbp)
	jne	.L6391
	leaq	__PRETTY_FUNCTION__.17306(%rip), %rcx
	movl	$28346, %edx
	leaq	.LC74(%rip), %rsi
	leaq	.LC138(%rip), %rdi
	call	__assert_fail@PLT
.L6391:
	cmpq	$0, -184(%rbp)
	jne	.L6392
	leaq	.LC264(%rip), %rax
	movq	%rax, -184(%rbp)
.L6392:
	movq	-176(%rbp), %rax
	testq	%rax, %rax
	jne	.L6393
	cmpq	$0, -160(%rbp)
	jne	.L6394
	movq	-152(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, -160(%rbp)
.L6394:
	cmpq	$0, -168(%rbp)
	je	.L6395
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-160(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L6395:
	movq	-160(%rbp), %rax
	jmp	.L6410
.L6393:
	movq	-176(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -120(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	$64, -132(%rbp)
	cmpq	$0, -160(%rbp)
	sete	%al
	movzbl	%al, %edi
	movq	-192(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	movq	-168(%rbp), %rsi
	movq	-152(%rbp), %rax
	movl	%edi, %r8d
	movq	%rax, %rdi
	call	get_parent_from_path
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, -104(%rbp)
	movq	$0, -96(%rbp)
	jmp	.L6397
.L6405:
	movl	-136(%rbp), %eax
	cmpl	%eax, -132(%rbp)
	jle	.L6398
	movl	-136(%rbp), %eax
	movslq	%eax, %rdx
	movq	-120(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	jmp	.L6399
.L6398:
	cmpl	$64, -132(%rbp)
	jne	.L6400
	movq	$0, -112(%rbp)
.L6400:
	movq	24+ecs_os_api(%rip), %rdx
	movl	-136(%rbp), %eax
	leal	1(%rax), %ecx
	movq	-112(%rbp), %rax
	movl	%ecx, %esi
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -112(%rbp)
	movl	-136(%rbp), %eax
	movslq	%eax, %rdx
	movq	-120(%rbp), %rcx
	movq	-112(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	memcpy@PLT
	movl	-136(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -132(%rbp)
.L6399:
	movl	-136(%rbp), %eax
	movslq	%eax, %rdx
	movq	-112(%rbp), %rax
	addq	%rdx, %rax
	movb	$0, (%rax)
	movq	-128(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-112(%rbp), %rdx
	movq	-104(%rbp), %rcx
	movq	-152(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_lookup_child
	movq	%rax, -88(%rbp)
	cmpq	$0, -88(%rbp)
	jne	.L6401
	cmpq	$0, -96(%rbp)
	je	.L6402
	movq	40+ecs_os_api(%rip), %rdx
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L6402:
	movq	48+ecs_os_api(%rip), %rdx
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -96(%rbp)
	cmpq	$0, -160(%rbp)
	je	.L6403
	movq	-184(%rbp), %rcx
	movq	-128(%rbp), %rax
	movl	$0, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	path_elem
	testq	%rax, %rax
	jne	.L6403
	movq	-160(%rbp), %rax
	movq	%rax, -88(%rbp)
.L6403:
	cmpq	$0, -88(%rbp)
	jne	.L6404
	movq	-152(%rbp), %rax
	movq	%rax, %rdi
	call	ecs_new_id
	movq	%rax, -88(%rbp)
.L6404:
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	movq	-152(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
	cmpq	$0, -104(%rbp)
	je	.L6401
	movl	$276, %eax
	salq	$32, %rax
	movq	%rax, %rdx
	movq	-104(%rbp), %rax
	movl	%eax, %eax
	addq	%rax, %rdx
	movabsq	$-432345564227567616, %rax
	orq	%rax, %rdx
	movq	-88(%rbp), %rcx
	movq	-152(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_add_id
.L6401:
	movq	-88(%rbp), %rax
	movq	%rax, -104(%rbp)
.L6397:
	leaq	-136(%rbp), %rdx
	movq	-184(%rbp), %rcx
	movq	-128(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	path_elem
	movq	%rax, -128(%rbp)
	cmpq	$0, -128(%rbp)
	jne	.L6405
	cmpq	$0, -160(%rbp)
	je	.L6406
	movq	-104(%rbp), %rax
	cmpq	-160(%rbp), %rax
	je	.L6406
	cmpq	$0, -96(%rbp)
	je	.L6407
	movq	40+ecs_os_api(%rip), %rdx
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L6407:
	movq	48+ecs_os_api(%rip), %rdx
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rdx
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rax
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	ecs_set_name
.L6406:
	cmpq	$0, -96(%rbp)
	je	.L6408
	movq	40+ecs_os_api(%rip), %rdx
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L6408:
	leaq	-80(%rbp), %rax
	cmpq	%rax, -112(%rbp)
	je	.L6409
	movq	40+ecs_os_api(%rip), %rdx
	movq	-112(%rbp), %rax
	movq	%rax, %rdi
	call	*%rdx
.L6409:
	movq	-104(%rbp), %rax
.L6410:
	movq	-8(%rbp), %rsi
	xorq	%fs:40, %rsi
	je	.L6411
	call	__stack_chk_fail@PLT
.L6411:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE957:
	.size	ecs_add_path_w_sep, .-ecs_add_path_w_sep
	.globl	ecs_new_from_path_w_sep
	.type	ecs_new_from_path_w_sep, @function
ecs_new_from_path_w_sep:
.LFB958:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.L6413
	leaq	.LC264(%rip), %rax
	movq	%rax, -32(%rbp)
.L6413:
	movq	-40(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-24(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rdi, %r9
	movq	%rsi, %r8
	movl	$0, %esi
	movq	%rax, %rdi
	call	ecs_add_path_w_sep
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE958:
	.size	ecs_new_from_path_w_sep, .-ecs_new_from_path_w_sep
	.globl	ecs_use
	.type	ecs_use, @function
ecs_use:
.LFB959:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rax
	leaq	304(%rax), %rdi
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rax
	movl	$0, %r8d
	movl	$0, %ecx
	movq	%rax, %rsi
	call	register_by_name
	nop
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE959:
	.size	ecs_use, .-ecs_use
	.section	.rodata
	.align 16
	.type	__PRETTY_FUNCTION__.7960, @object
	.size	__PRETTY_FUNCTION__.7960, 16
__PRETTY_FUNCTION__.7960:
	.string	"flecs_init_data"
	.align 16
	.type	__PRETTY_FUNCTION__.7995, @object
	.size	__PRETTY_FUNCTION__.7995, 22
__PRETTY_FUNCTION__.7995:
	.string	"notify_component_info"
	.align 16
	.type	__PRETTY_FUNCTION__.8031, @object
	.size	__PRETTY_FUNCTION__.8031, 22
__PRETTY_FUNCTION__.8031:
	.string	"compare_matched_query"
	.align 8
	.type	__PRETTY_FUNCTION__.8040, @object
	.size	__PRETTY_FUNCTION__.8040, 12
__PRETTY_FUNCTION__.8040:
	.string	"add_monitor"
	.align 16
	.type	__PRETTY_FUNCTION__.8047, @object
	.size	__PRETTY_FUNCTION__.8047, 17
__PRETTY_FUNCTION__.8047:
	.string	"register_monitor"
	.align 8
	.type	__PRETTY_FUNCTION__.8121, @object
	.size	__PRETTY_FUNCTION__.8121, 15
__PRETTY_FUNCTION__.8121:
	.string	"register_query"
	.align 16
	.type	__PRETTY_FUNCTION__.8138, @object
	.size	__PRETTY_FUNCTION__.8138, 17
__PRETTY_FUNCTION__.8138:
	.string	"unregister_query"
	.align 16
	.type	__PRETTY_FUNCTION__.8142, @object
	.size	__PRETTY_FUNCTION__.8142, 21
__PRETTY_FUNCTION__.8142:
	.string	"flecs_table_get_data"
	.align 16
	.type	__PRETTY_FUNCTION__.8146, @object
	.size	__PRETTY_FUNCTION__.8146, 31
__PRETTY_FUNCTION__.8146:
	.string	"flecs_table_get_or_create_data"
	.align 8
	.type	__PRETTY_FUNCTION__.8173, @object
	.size	__PRETTY_FUNCTION__.8173, 15
__PRETTY_FUNCTION__.8173:
	.string	"dtor_component"
	.align 16
	.type	__PRETTY_FUNCTION__.8184, @object
	.size	__PRETTY_FUNCTION__.8184, 20
__PRETTY_FUNCTION__.8184:
	.string	"dtor_all_components"
	.align 8
	.type	__PRETTY_FUNCTION__.8218, @object
	.size	__PRETTY_FUNCTION__.8218, 10
__PRETTY_FUNCTION__.8218:
	.string	"fini_data"
	.align 16
	.type	__PRETTY_FUNCTION__.8264, @object
	.size	__PRETTY_FUNCTION__.8264, 17
__PRETTY_FUNCTION__.8264:
	.string	"flecs_table_free"
	.align 16
	.type	__PRETTY_FUNCTION__.8277, @object
	.size	__PRETTY_FUNCTION__.8277, 18
__PRETTY_FUNCTION__.8277:
	.string	"flecs_table_reset"
	.align 16
	.type	__PRETTY_FUNCTION__.8286, @object
	.size	__PRETTY_FUNCTION__.8286, 23
__PRETTY_FUNCTION__.8286:
	.string	"flecs_table_mark_dirty"
	.align 8
	.type	__PRETTY_FUNCTION__.8371, @object
	.size	__PRETTY_FUNCTION__.8371, 12
__PRETTY_FUNCTION__.8371:
	.string	"ensure_data"
	.align 8
	.type	__PRETTY_FUNCTION__.8388, @object
	.size	__PRETTY_FUNCTION__.8388, 12
__PRETTY_FUNCTION__.8388:
	.string	"grow_column"
	.align 8
	.type	__PRETTY_FUNCTION__.8404, @object
	.size	__PRETTY_FUNCTION__.8404, 10
__PRETTY_FUNCTION__.8404:
	.string	"grow_data"
	.align 16
	.type	__PRETTY_FUNCTION__.8453, @object
	.size	__PRETTY_FUNCTION__.8453, 19
__PRETTY_FUNCTION__.8453:
	.string	"flecs_table_append"
	.align 16
	.type	__PRETTY_FUNCTION__.8509, @object
	.size	__PRETTY_FUNCTION__.8509, 19
__PRETTY_FUNCTION__.8509:
	.string	"flecs_table_delete"
	.align 8
	.type	__PRETTY_FUNCTION__.8576, @object
	.size	__PRETTY_FUNCTION__.8576, 10
__PRETTY_FUNCTION__.8576:
	.string	"fast_move"
	.align 16
	.type	__PRETTY_FUNCTION__.8592, @object
	.size	__PRETTY_FUNCTION__.8592, 17
__PRETTY_FUNCTION__.8592:
	.string	"flecs_table_move"
	.align 16
	.type	__PRETTY_FUNCTION__.8633, @object
	.size	__PRETTY_FUNCTION__.8633, 20
__PRETTY_FUNCTION__.8633:
	.string	"flecs_table_appendn"
	.align 16
	.type	__PRETTY_FUNCTION__.8641, @object
	.size	__PRETTY_FUNCTION__.8641, 21
__PRETTY_FUNCTION__.8641:
	.string	"flecs_table_set_size"
	.align 16
	.type	__PRETTY_FUNCTION__.8685, @object
	.size	__PRETTY_FUNCTION__.8685, 17
__PRETTY_FUNCTION__.8685:
	.string	"flecs_table_swap"
	.align 16
	.type	__PRETTY_FUNCTION__.8752, @object
	.size	__PRETTY_FUNCTION__.8752, 17
__PRETTY_FUNCTION__.8752:
	.string	"merge_table_data"
	.align 16
	.type	__PRETTY_FUNCTION__.8780, @object
	.size	__PRETTY_FUNCTION__.8780, 16
__PRETTY_FUNCTION__.8780:
	.string	"ecs_table_count"
	.align 16
	.type	__PRETTY_FUNCTION__.8789, @object
	.size	__PRETTY_FUNCTION__.8789, 18
__PRETTY_FUNCTION__.8789:
	.string	"flecs_table_merge"
	.align 16
	.type	__PRETTY_FUNCTION__.8808, @object
	.size	__PRETTY_FUNCTION__.8808, 25
__PRETTY_FUNCTION__.8808:
	.string	"flecs_table_replace_data"
	.align 16
	.type	__PRETTY_FUNCTION__.8815, @object
	.size	__PRETTY_FUNCTION__.8815, 25
__PRETTY_FUNCTION__.8815:
	.string	"flecs_table_match_filter"
	.align 16
	.type	__PRETTY_FUNCTION__.8820, @object
	.size	__PRETTY_FUNCTION__.8820, 28
__PRETTY_FUNCTION__.8820:
	.string	"flecs_table_get_dirty_state"
	.align 16
	.type	__PRETTY_FUNCTION__.8825, @object
	.size	__PRETTY_FUNCTION__.8825, 24
__PRETTY_FUNCTION__.8825:
	.string	"flecs_table_get_monitor"
	.align 16
	.type	__PRETTY_FUNCTION__.8845, @object
	.size	__PRETTY_FUNCTION__.8845, 17
__PRETTY_FUNCTION__.8845:
	.string	"ecs_table_unlock"
	.align 16
	.type	__PRETTY_FUNCTION__.8868, @object
	.size	__PRETTY_FUNCTION__.8868, 22
__PRETTY_FUNCTION__.8868:
	.string	"get_component_w_index"
	.align 16
	.type	__PRETTY_FUNCTION__.8889, @object
	.size	__PRETTY_FUNCTION__.8889, 19
__PRETTY_FUNCTION__.8889:
	.string	"get_base_component"
	.align 16
	.type	__PRETTY_FUNCTION__.8914, @object
	.size	__PRETTY_FUNCTION__.8914, 21
__PRETTY_FUNCTION__.8914:
	.string	"set_info_from_record"
	.align 16
	.type	__PRETTY_FUNCTION__.8967, @object
	.size	__PRETTY_FUNCTION__.8967, 29
__PRETTY_FUNCTION__.8967:
	.string	"run_set_systems_for_entities"
	.type	__PRETTY_FUNCTION__.8985, @object
	.size	__PRETTY_FUNCTION__.8985, 7
__PRETTY_FUNCTION__.8985:
	.string	"notify"
	.align 16
	.type	__PRETTY_FUNCTION__.9024, @object
	.size	__PRETTY_FUNCTION__.9024, 21
__PRETTY_FUNCTION__.9024:
	.string	"instantiate_children"
	.align 16
	.type	__PRETTY_FUNCTION__.9075, @object
	.size	__PRETTY_FUNCTION__.9075, 19
__PRETTY_FUNCTION__.9075:
	.string	"override_from_base"
	.align 16
	.type	__PRETTY_FUNCTION__.9118, @object
	.size	__PRETTY_FUNCTION__.9118, 20
__PRETTY_FUNCTION__.9118:
	.string	"components_override"
	.align 8
	.type	__PRETTY_FUNCTION__.9148, @object
	.size	__PRETTY_FUNCTION__.9148, 11
__PRETTY_FUNCTION__.9148:
	.string	"set_switch"
	.align 8
	.type	__PRETTY_FUNCTION__.9178, @object
	.size	__PRETTY_FUNCTION__.9178, 11
__PRETTY_FUNCTION__.9178:
	.string	"new_entity"
	.align 8
	.type	__PRETTY_FUNCTION__.9192, @object
	.size	__PRETTY_FUNCTION__.9192, 12
__PRETTY_FUNCTION__.9192:
	.string	"move_entity"
	.type	__PRETTY_FUNCTION__.9232, @object
	.size	__PRETTY_FUNCTION__.9232, 7
__PRETTY_FUNCTION__.9232:
	.string	"commit"
	.align 8
	.type	__PRETTY_FUNCTION__.9251, @object
	.size	__PRETTY_FUNCTION__.9251, 11
__PRETTY_FUNCTION__.9251:
	.string	"new_w_data"
	.align 8
	.type	__PRETTY_FUNCTION__.9287, @object
	.size	__PRETTY_FUNCTION__.9287, 9
__PRETTY_FUNCTION__.9287:
	.string	"has_type"
	.align 8
	.type	__PRETTY_FUNCTION__.9295, @object
	.size	__PRETTY_FUNCTION__.9295, 11
__PRETTY_FUNCTION__.9295:
	.string	"add_remove"
	.align 8
	.type	__PRETTY_FUNCTION__.9310, @object
	.size	__PRETTY_FUNCTION__.9310, 15
__PRETTY_FUNCTION__.9310:
	.string	"add_ids_w_info"
	.align 16
	.type	__PRETTY_FUNCTION__.9321, @object
	.size	__PRETTY_FUNCTION__.9321, 18
__PRETTY_FUNCTION__.9321:
	.string	"remove_ids_w_info"
	.align 8
	.type	__PRETTY_FUNCTION__.9331, @object
	.size	__PRETTY_FUNCTION__.9331, 8
__PRETTY_FUNCTION__.9331:
	.string	"add_ids"
	.align 8
	.type	__PRETTY_FUNCTION__.9343, @object
	.size	__PRETTY_FUNCTION__.9343, 11
__PRETTY_FUNCTION__.9343:
	.string	"remove_ids"
	.align 8
	.type	__PRETTY_FUNCTION__.9357, @object
	.size	__PRETTY_FUNCTION__.9357, 12
__PRETTY_FUNCTION__.9357:
	.string	"get_mutable"
	.align 16
	.type	__PRETTY_FUNCTION__.9371, @object
	.size	__PRETTY_FUNCTION__.9371, 22
__PRETTY_FUNCTION__.9371:
	.string	"flecs_run_add_actions"
	.align 16
	.type	__PRETTY_FUNCTION__.9382, @object
	.size	__PRETTY_FUNCTION__.9382, 25
__PRETTY_FUNCTION__.9382:
	.string	"flecs_run_remove_actions"
	.align 16
	.type	__PRETTY_FUNCTION__.9399, @object
	.size	__PRETTY_FUNCTION__.9399, 22
__PRETTY_FUNCTION__.9399:
	.string	"flecs_run_set_systems"
	.align 16
	.type	__PRETTY_FUNCTION__.9435, @object
	.size	__PRETTY_FUNCTION__.9435, 19
__PRETTY_FUNCTION__.9435:
	.string	"flecs_run_monitors"
	.align 8
	.type	__PRETTY_FUNCTION__.9486, @object
	.size	__PRETTY_FUNCTION__.9486, 11
__PRETTY_FUNCTION__.9486:
	.string	"ecs_commit"
	.align 8
	.type	__PRETTY_FUNCTION__.9492, @object
	.size	__PRETTY_FUNCTION__.9492, 11
__PRETTY_FUNCTION__.9492:
	.string	"ecs_new_id"
	.align 16
	.type	__PRETTY_FUNCTION__.9510, @object
	.size	__PRETTY_FUNCTION__.9510, 21
__PRETTY_FUNCTION__.9510:
	.string	"ecs_new_component_id"
	.align 8
	.type	__PRETTY_FUNCTION__.9519, @object
	.size	__PRETTY_FUNCTION__.9519, 15
__PRETTY_FUNCTION__.9519:
	.string	"ecs_new_w_type"
	.align 8
	.type	__PRETTY_FUNCTION__.9531, @object
	.size	__PRETTY_FUNCTION__.9531, 13
__PRETTY_FUNCTION__.9531:
	.string	"ecs_new_w_id"
	.align 16
	.type	__PRETTY_FUNCTION__.9554, @object
	.size	__PRETTY_FUNCTION__.9554, 19
__PRETTY_FUNCTION__.9554:
	.string	"traverse_from_expr"
	.align 16
	.type	__PRETTY_FUNCTION__.9605, @object
	.size	__PRETTY_FUNCTION__.9605, 20
__PRETTY_FUNCTION__.9605:
	.string	"traverse_add_remove"
	.align 16
	.type	__PRETTY_FUNCTION__.9642, @object
	.size	__PRETTY_FUNCTION__.9642, 20
__PRETTY_FUNCTION__.9642:
	.string	"deferred_add_remove"
	.align 16
	.type	__PRETTY_FUNCTION__.9647, @object
	.size	__PRETTY_FUNCTION__.9647, 16
__PRETTY_FUNCTION__.9647:
	.string	"ecs_entity_init"
	.align 16
	.type	__PRETTY_FUNCTION__.9664, @object
	.size	__PRETTY_FUNCTION__.9664, 19
__PRETTY_FUNCTION__.9664:
	.string	"ecs_component_init"
	.align 8
	.type	__PRETTY_FUNCTION__.9689, @object
	.size	__PRETTY_FUNCTION__.9689, 14
__PRETTY_FUNCTION__.9689:
	.string	"ecs_type_init"
	.align 16
	.type	__PRETTY_FUNCTION__.9703, @object
	.size	__PRETTY_FUNCTION__.9703, 20
__PRETTY_FUNCTION__.9703:
	.string	"ecs_bulk_new_w_data"
	.align 16
	.type	__PRETTY_FUNCTION__.9712, @object
	.size	__PRETTY_FUNCTION__.9712, 20
__PRETTY_FUNCTION__.9712:
	.string	"ecs_bulk_new_w_type"
	.align 16
	.type	__PRETTY_FUNCTION__.9722, @object
	.size	__PRETTY_FUNCTION__.9722, 18
__PRETTY_FUNCTION__.9722:
	.string	"ecs_bulk_new_w_id"
	.align 8
	.type	__PRETTY_FUNCTION__.9731, @object
	.size	__PRETTY_FUNCTION__.9731, 10
__PRETTY_FUNCTION__.9731:
	.string	"ecs_clear"
	.align 16
	.type	__PRETTY_FUNCTION__.9758, @object
	.size	__PRETTY_FUNCTION__.9758, 18
__PRETTY_FUNCTION__.9758:
	.string	"remove_from_table"
	.align 16
	.type	__PRETTY_FUNCTION__.9808, @object
	.size	__PRETTY_FUNCTION__.9808, 24
__PRETTY_FUNCTION__.9808:
	.string	"on_delete_object_action"
	.align 8
	.type	__PRETTY_FUNCTION__.9841, @object
	.size	__PRETTY_FUNCTION__.9841, 11
__PRETTY_FUNCTION__.9841:
	.string	"ecs_delete"
	.align 8
	.type	__PRETTY_FUNCTION__.9855, @object
	.size	__PRETTY_FUNCTION__.9855, 13
__PRETTY_FUNCTION__.9855:
	.string	"ecs_add_type"
	.align 8
	.type	__PRETTY_FUNCTION__.9862, @object
	.size	__PRETTY_FUNCTION__.9862, 11
__PRETTY_FUNCTION__.9862:
	.string	"ecs_add_id"
	.align 16
	.type	__PRETTY_FUNCTION__.9869, @object
	.size	__PRETTY_FUNCTION__.9869, 16
__PRETTY_FUNCTION__.9869:
	.string	"ecs_remove_type"
	.align 8
	.type	__PRETTY_FUNCTION__.9876, @object
	.size	__PRETTY_FUNCTION__.9876, 14
__PRETTY_FUNCTION__.9876:
	.string	"ecs_remove_id"
	.align 16
	.type	__PRETTY_FUNCTION__.9884, @object
	.size	__PRETTY_FUNCTION__.9884, 22
__PRETTY_FUNCTION__.9884:
	.string	"ecs_add_remove_entity"
	.align 16
	.type	__PRETTY_FUNCTION__.9893, @object
	.size	__PRETTY_FUNCTION__.9893, 20
__PRETTY_FUNCTION__.9893:
	.string	"ecs_add_remove_type"
	.align 8
	.type	__PRETTY_FUNCTION__.9902, @object
	.size	__PRETTY_FUNCTION__.9902, 10
__PRETTY_FUNCTION__.9902:
	.string	"ecs_clone"
	.align 8
	.type	__PRETTY_FUNCTION__.9915, @object
	.size	__PRETTY_FUNCTION__.9915, 11
__PRETTY_FUNCTION__.9915:
	.string	"ecs_get_id"
	.align 16
	.type	__PRETTY_FUNCTION__.9928, @object
	.size	__PRETTY_FUNCTION__.9928, 17
__PRETTY_FUNCTION__.9928:
	.string	"ecs_get_ref_w_id"
	.align 8
	.type	__PRETTY_FUNCTION__.9939, @object
	.size	__PRETTY_FUNCTION__.9939, 15
__PRETTY_FUNCTION__.9939:
	.string	"ecs_get_mut_id"
	.align 8
	.type	__PRETTY_FUNCTION__.9951, @object
	.size	__PRETTY_FUNCTION__.9951, 15
__PRETTY_FUNCTION__.9951:
	.string	"ecs_emplace_id"
	.align 16
	.type	__PRETTY_FUNCTION__.9962, @object
	.size	__PRETTY_FUNCTION__.9962, 16
__PRETTY_FUNCTION__.9962:
	.string	"ecs_modified_id"
	.align 16
	.type	__PRETTY_FUNCTION__.9979, @object
	.size	__PRETTY_FUNCTION__.9979, 16
__PRETTY_FUNCTION__.9979:
	.string	"assign_ptr_w_id"
	.align 8
	.type	__PRETTY_FUNCTION__.9992, @object
	.size	__PRETTY_FUNCTION__.9992, 11
__PRETTY_FUNCTION__.9992:
	.string	"ecs_set_id"
	.align 8
	.type	__PRETTY_FUNCTION__.9998, @object
	.size	__PRETTY_FUNCTION__.9998, 13
__PRETTY_FUNCTION__.9998:
	.string	"ecs_get_case"
	.align 16
	.type	__PRETTY_FUNCTION__.10010, @object
	.size	__PRETTY_FUNCTION__.10010, 26
__PRETTY_FUNCTION__.10010:
	.string	"ecs_enable_component_w_id"
	.align 16
	.type	__PRETTY_FUNCTION__.10022, @object
	.size	__PRETTY_FUNCTION__.10022, 30
__PRETTY_FUNCTION__.10022:
	.string	"ecs_is_component_enabled_w_id"
	.align 8
	.type	__PRETTY_FUNCTION__.10034, @object
	.size	__PRETTY_FUNCTION__.10034, 11
__PRETTY_FUNCTION__.10034:
	.string	"ecs_has_id"
	.align 8
	.type	__PRETTY_FUNCTION__.10047, @object
	.size	__PRETTY_FUNCTION__.10047, 13
__PRETTY_FUNCTION__.10047:
	.string	"ecs_has_type"
	.align 8
	.type	__PRETTY_FUNCTION__.10054, @object
	.size	__PRETTY_FUNCTION__.10054, 15
__PRETTY_FUNCTION__.10054:
	.string	"ecs_get_object"
	.align 8
	.type	__PRETTY_FUNCTION__.10063, @object
	.size	__PRETTY_FUNCTION__.10063, 13
__PRETTY_FUNCTION__.10063:
	.string	"ecs_get_name"
	.align 8
	.type	__PRETTY_FUNCTION__.10069, @object
	.size	__PRETTY_FUNCTION__.10069, 15
__PRETTY_FUNCTION__.10069:
	.string	"ecs_get_symbol"
	.align 8
	.type	__PRETTY_FUNCTION__.10076, @object
	.size	__PRETTY_FUNCTION__.10076, 13
__PRETTY_FUNCTION__.10076:
	.string	"ecs_set_name"
	.align 8
	.type	__PRETTY_FUNCTION__.10083, @object
	.size	__PRETTY_FUNCTION__.10083, 15
__PRETTY_FUNCTION__.10083:
	.string	"ecs_set_symbol"
	.align 16
	.type	__PRETTY_FUNCTION__.10089, @object
	.size	__PRETTY_FUNCTION__.10089, 17
__PRETTY_FUNCTION__.10089:
	.string	"ecs_type_from_id"
	.align 8
	.type	__PRETTY_FUNCTION__.10105, @object
	.size	__PRETTY_FUNCTION__.10105, 13
__PRETTY_FUNCTION__.10105:
	.string	"ecs_is_valid"
	.align 8
	.type	__PRETTY_FUNCTION__.10112, @object
	.size	__PRETTY_FUNCTION__.10112, 13
__PRETTY_FUNCTION__.10112:
	.string	"ecs_is_alive"
	.align 8
	.type	__PRETTY_FUNCTION__.10117, @object
	.size	__PRETTY_FUNCTION__.10117, 14
__PRETTY_FUNCTION__.10117:
	.string	"ecs_get_alive"
	.align 8
	.type	__PRETTY_FUNCTION__.10123, @object
	.size	__PRETTY_FUNCTION__.10123, 11
__PRETTY_FUNCTION__.10123:
	.string	"ecs_ensure"
	.align 8
	.type	__PRETTY_FUNCTION__.10128, @object
	.size	__PRETTY_FUNCTION__.10128, 11
__PRETTY_FUNCTION__.10128:
	.string	"ecs_exists"
	.align 8
	.type	__PRETTY_FUNCTION__.10133, @object
	.size	__PRETTY_FUNCTION__.10133, 14
__PRETTY_FUNCTION__.10133:
	.string	"ecs_get_table"
	.align 8
	.type	__PRETTY_FUNCTION__.10145, @object
	.size	__PRETTY_FUNCTION__.10145, 15
__PRETTY_FUNCTION__.10145:
	.string	"ecs_get_typeid"
	.align 8
	.type	__PRETTY_FUNCTION__.10153, @object
	.size	__PRETTY_FUNCTION__.10153, 15
__PRETTY_FUNCTION__.10153:
	.string	"ecs_count_type"
	.align 8
	.type	__PRETTY_FUNCTION__.10159, @object
	.size	__PRETTY_FUNCTION__.10159, 13
__PRETTY_FUNCTION__.10159:
	.string	"ecs_count_id"
	.align 16
	.type	__PRETTY_FUNCTION__.10173, @object
	.size	__PRETTY_FUNCTION__.10173, 17
__PRETTY_FUNCTION__.10173:
	.string	"ecs_count_filter"
	.align 16
	.type	__PRETTY_FUNCTION__.10185, @object
	.size	__PRETTY_FUNCTION__.10185, 16
__PRETTY_FUNCTION__.10185:
	.string	"ecs_defer_begin"
	.align 8
	.type	__PRETTY_FUNCTION__.10190, @object
	.size	__PRETTY_FUNCTION__.10190, 14
__PRETTY_FUNCTION__.10190:
	.string	"ecs_defer_end"
	.align 8
	.type	__PRETTY_FUNCTION__.10210, @object
	.size	__PRETTY_FUNCTION__.10210, 11
__PRETTY_FUNCTION__.10210:
	.string	"ecs_id_str"
	.align 8
	.type	__PRETTY_FUNCTION__.10233, @object
	.size	__PRETTY_FUNCTION__.10233, 15
__PRETTY_FUNCTION__.10233:
	.string	"flush_bulk_new"
	.align 16
	.type	__PRETTY_FUNCTION__.10304, @object
	.size	__PRETTY_FUNCTION__.10304, 18
__PRETTY_FUNCTION__.10304:
	.string	"flecs_defer_flush"
	.align 16
	.type	__PRETTY_FUNCTION__.10332, @object
	.size	__PRETTY_FUNCTION__.10332, 18
__PRETTY_FUNCTION__.10332:
	.string	"flecs_defer_purge"
	.align 16
	.type	__PRETTY_FUNCTION__.10348, @object
	.size	__PRETTY_FUNCTION__.10348, 24
__PRETTY_FUNCTION__.10348:
	.string	"new_defer_component_ids"
	.align 8
	.type	__PRETTY_FUNCTION__.10373, @object
	.size	__PRETTY_FUNCTION__.10373, 13
__PRETTY_FUNCTION__.10373:
	.string	"merge_stages"
	.align 16
	.type	__PRETTY_FUNCTION__.10441, @object
	.size	__PRETTY_FUNCTION__.10441, 21
__PRETTY_FUNCTION__.10441:
	.string	"flecs_defer_bulk_new"
	.align 16
	.type	__PRETTY_FUNCTION__.10483, @object
	.size	__PRETTY_FUNCTION__.10483, 16
__PRETTY_FUNCTION__.10483:
	.string	"flecs_defer_set"
	.align 16
	.type	__PRETTY_FUNCTION__.10504, @object
	.size	__PRETTY_FUNCTION__.10504, 17
__PRETTY_FUNCTION__.10504:
	.string	"flecs_stage_init"
	.align 16
	.type	__PRETTY_FUNCTION__.10509, @object
	.size	__PRETTY_FUNCTION__.10509, 19
__PRETTY_FUNCTION__.10509:
	.string	"flecs_stage_deinit"
	.align 8
	.type	__PRETTY_FUNCTION__.10514, @object
	.size	__PRETTY_FUNCTION__.10514, 15
__PRETTY_FUNCTION__.10514:
	.string	"ecs_set_stages"
	.align 16
	.type	__PRETTY_FUNCTION__.10535, @object
	.size	__PRETTY_FUNCTION__.10535, 17
__PRETTY_FUNCTION__.10535:
	.string	"ecs_get_stage_id"
	.align 8
	.type	__PRETTY_FUNCTION__.10541, @object
	.size	__PRETTY_FUNCTION__.10541, 14
__PRETTY_FUNCTION__.10541:
	.string	"ecs_get_stage"
	.align 16
	.type	__PRETTY_FUNCTION__.10545, @object
	.size	__PRETTY_FUNCTION__.10545, 18
__PRETTY_FUNCTION__.10545:
	.string	"ecs_staging_begin"
	.align 16
	.type	__PRETTY_FUNCTION__.10555, @object
	.size	__PRETTY_FUNCTION__.10555, 16
__PRETTY_FUNCTION__.10555:
	.string	"ecs_staging_end"
	.align 8
	.type	__PRETTY_FUNCTION__.10559, @object
	.size	__PRETTY_FUNCTION__.10559, 10
__PRETTY_FUNCTION__.10559:
	.string	"ecs_merge"
	.align 16
	.type	__PRETTY_FUNCTION__.10570, @object
	.size	__PRETTY_FUNCTION__.10570, 18
__PRETTY_FUNCTION__.10570:
	.string	"ecs_set_automerge"
	.align 16
	.type	__PRETTY_FUNCTION__.10583, @object
	.size	__PRETTY_FUNCTION__.10583, 21
__PRETTY_FUNCTION__.10583:
	.string	"ecs_async_stage_free"
	.align 16
	.type	__PRETTY_FUNCTION__.10591, @object
	.size	__PRETTY_FUNCTION__.10591, 16
__PRETTY_FUNCTION__.10591:
	.string	"ecs_is_deferred"
	.type	__PRETTY_FUNCTION__.10599, @object
	.size	__PRETTY_FUNCTION__.10599, 7
__PRETTY_FUNCTION__.10599:
	.string	"resize"
	.align 16
	.type	__PRETTY_FUNCTION__.10605, @object
	.size	__PRETTY_FUNCTION__.10605, 16
__PRETTY_FUNCTION__.10605:
	.string	"_ecs_vector_new"
	.align 16
	.type	__PRETTY_FUNCTION__.10613, @object
	.size	__PRETTY_FUNCTION__.10613, 23
__PRETTY_FUNCTION__.10613:
	.string	"_ecs_vector_from_array"
	.align 16
	.type	__PRETTY_FUNCTION__.10631, @object
	.size	__PRETTY_FUNCTION__.10631, 23
__PRETTY_FUNCTION__.10631:
	.string	"ecs_vector_assert_size"
	.align 16
	.type	__PRETTY_FUNCTION__.10638, @object
	.size	__PRETTY_FUNCTION__.10638, 17
__PRETTY_FUNCTION__.10638:
	.string	"_ecs_vector_addn"
	.align 16
	.type	__PRETTY_FUNCTION__.10654, @object
	.size	__PRETTY_FUNCTION__.10654, 16
__PRETTY_FUNCTION__.10654:
	.string	"_ecs_vector_add"
	.align 16
	.type	__PRETTY_FUNCTION__.10662, @object
	.size	__PRETTY_FUNCTION__.10662, 23
__PRETTY_FUNCTION__.10662:
	.string	"_ecs_vector_move_index"
	.align 16
	.type	__PRETTY_FUNCTION__.10674, @object
	.size	__PRETTY_FUNCTION__.10674, 16
__PRETTY_FUNCTION__.10674:
	.string	"_ecs_vector_pop"
	.align 16
	.type	__PRETTY_FUNCTION__.10683, @object
	.size	__PRETTY_FUNCTION__.10683, 19
__PRETTY_FUNCTION__.10683:
	.string	"_ecs_vector_remove"
	.align 16
	.type	__PRETTY_FUNCTION__.10694, @object
	.size	__PRETTY_FUNCTION__.10694, 20
__PRETTY_FUNCTION__.10694:
	.string	"_ecs_vector_reclaim"
	.align 16
	.type	__PRETTY_FUNCTION__.10710, @object
	.size	__PRETTY_FUNCTION__.10710, 21
__PRETTY_FUNCTION__.10710:
	.string	"_ecs_vector_set_size"
	.align 16
	.type	__PRETTY_FUNCTION__.10725, @object
	.size	__PRETTY_FUNCTION__.10725, 22
__PRETTY_FUNCTION__.10725:
	.string	"_ecs_vector_set_count"
	.align 16
	.type	__PRETTY_FUNCTION__.10732, @object
	.size	__PRETTY_FUNCTION__.10732, 18
__PRETTY_FUNCTION__.10732:
	.string	"_ecs_vector_first"
	.align 16
	.type	__PRETTY_FUNCTION__.10739, @object
	.size	__PRETTY_FUNCTION__.10739, 16
__PRETTY_FUNCTION__.10739:
	.string	"_ecs_vector_get"
	.align 16
	.type	__PRETTY_FUNCTION__.10746, @object
	.size	__PRETTY_FUNCTION__.10746, 17
__PRETTY_FUNCTION__.10746:
	.string	"_ecs_vector_last"
	.align 16
	.type	__PRETTY_FUNCTION__.10767, @object
	.size	__PRETTY_FUNCTION__.10767, 17
__PRETTY_FUNCTION__.10767:
	.string	"_ecs_vector_sort"
	.align 16
	.type	__PRETTY_FUNCTION__.10777, @object
	.size	__PRETTY_FUNCTION__.10777, 19
__PRETTY_FUNCTION__.10777:
	.string	"_ecs_vector_memory"
	.align 8
	.type	__PRETTY_FUNCTION__.10800, @object
	.size	__PRETTY_FUNCTION__.10800, 10
__PRETTY_FUNCTION__.10800:
	.string	"chunk_new"
	.align 8
	.type	__PRETTY_FUNCTION__.10809, @object
	.size	__PRETTY_FUNCTION__.10809, 10
__PRETTY_FUNCTION__.10809:
	.string	"get_chunk"
	.align 16
	.type	__PRETTY_FUNCTION__.10824, @object
	.size	__PRETTY_FUNCTION__.10824, 17
__PRETTY_FUNCTION__.10824:
	.string	"strip_generation"
	.align 8
	.type	__PRETTY_FUNCTION__.10850, @object
	.size	__PRETTY_FUNCTION__.10850, 10
__PRETTY_FUNCTION__.10850:
	.string	"create_id"
	.align 8
	.type	__PRETTY_FUNCTION__.10858, @object
	.size	__PRETTY_FUNCTION__.10858, 10
__PRETTY_FUNCTION__.10858:
	.string	"new_index"
	.align 8
	.type	__PRETTY_FUNCTION__.10868, @object
	.size	__PRETTY_FUNCTION__.10868, 15
__PRETTY_FUNCTION__.10868:
	.string	"try_sparse_any"
	.align 8
	.type	__PRETTY_FUNCTION__.10880, @object
	.size	__PRETTY_FUNCTION__.10880, 11
__PRETTY_FUNCTION__.10880:
	.string	"try_sparse"
	.align 8
	.type	__PRETTY_FUNCTION__.10888, @object
	.size	__PRETTY_FUNCTION__.10888, 11
__PRETTY_FUNCTION__.10888:
	.string	"get_sparse"
	.align 8
	.type	__PRETTY_FUNCTION__.10895, @object
	.size	__PRETTY_FUNCTION__.10895, 11
__PRETTY_FUNCTION__.10895:
	.string	"swap_dense"
	.align 16
	.type	__PRETTY_FUNCTION__.10904, @object
	.size	__PRETTY_FUNCTION__.10904, 18
__PRETTY_FUNCTION__.10904:
	.string	"_flecs_sparse_new"
	.align 16
	.type	__PRETTY_FUNCTION__.10910, @object
	.size	__PRETTY_FUNCTION__.10910, 27
__PRETTY_FUNCTION__.10910:
	.string	"flecs_sparse_set_id_source"
	.align 16
	.type	__PRETTY_FUNCTION__.10914, @object
	.size	__PRETTY_FUNCTION__.10914, 19
__PRETTY_FUNCTION__.10914:
	.string	"flecs_sparse_clear"
	.align 16
	.type	__PRETTY_FUNCTION__.10928, @object
	.size	__PRETTY_FUNCTION__.10928, 20
__PRETTY_FUNCTION__.10928:
	.string	"flecs_sparse_new_id"
	.align 16
	.type	__PRETTY_FUNCTION__.10933, @object
	.size	__PRETTY_FUNCTION__.10933, 21
__PRETTY_FUNCTION__.10933:
	.string	"flecs_sparse_new_ids"
	.align 16
	.type	__PRETTY_FUNCTION__.10948, @object
	.size	__PRETTY_FUNCTION__.10948, 18
__PRETTY_FUNCTION__.10948:
	.string	"_flecs_sparse_add"
	.align 16
	.type	__PRETTY_FUNCTION__.10954, @object
	.size	__PRETTY_FUNCTION__.10954, 21
__PRETTY_FUNCTION__.10954:
	.string	"flecs_sparse_last_id"
	.align 16
	.type	__PRETTY_FUNCTION__.10961, @object
	.size	__PRETTY_FUNCTION__.10961, 21
__PRETTY_FUNCTION__.10961:
	.string	"_flecs_sparse_ensure"
	.align 16
	.type	__PRETTY_FUNCTION__.10987, @object
	.size	__PRETTY_FUNCTION__.10987, 25
__PRETTY_FUNCTION__.10987:
	.string	"_flecs_sparse_remove_get"
	.align 16
	.type	__PRETTY_FUNCTION__.11004, @object
	.size	__PRETTY_FUNCTION__.11004, 28
__PRETTY_FUNCTION__.11004:
	.string	"flecs_sparse_set_generation"
	.align 16
	.type	__PRETTY_FUNCTION__.11014, @object
	.size	__PRETTY_FUNCTION__.11014, 20
__PRETTY_FUNCTION__.11014:
	.string	"flecs_sparse_exists"
	.align 16
	.type	__PRETTY_FUNCTION__.11023, @object
	.size	__PRETTY_FUNCTION__.11023, 24
__PRETTY_FUNCTION__.11023:
	.string	"_flecs_sparse_get_dense"
	.align 16
	.type	__PRETTY_FUNCTION__.11042, @object
	.size	__PRETTY_FUNCTION__.11042, 18
__PRETTY_FUNCTION__.11042:
	.string	"_flecs_sparse_get"
	.align 16
	.type	__PRETTY_FUNCTION__.11048, @object
	.size	__PRETTY_FUNCTION__.11048, 22
__PRETTY_FUNCTION__.11048:
	.string	"_flecs_sparse_get_any"
	.align 16
	.type	__PRETTY_FUNCTION__.11058, @object
	.size	__PRETTY_FUNCTION__.11058, 17
__PRETTY_FUNCTION__.11058:
	.string	"flecs_sparse_ids"
	.align 16
	.type	__PRETTY_FUNCTION__.11063, @object
	.size	__PRETTY_FUNCTION__.11063, 22
__PRETTY_FUNCTION__.11063:
	.string	"flecs_sparse_set_size"
	.align 8
	.type	__PRETTY_FUNCTION__.11078, @object
	.size	__PRETTY_FUNCTION__.11078, 12
__PRETTY_FUNCTION__.11078:
	.string	"sparse_copy"
	.align 16
	.type	__PRETTY_FUNCTION__.11087, @object
	.size	__PRETTY_FUNCTION__.11087, 21
__PRETTY_FUNCTION__.11087:
	.string	"flecs_sparse_restore"
	.align 8
	.type	__PRETTY_FUNCTION__.11228, @object
	.size	__PRETTY_FUNCTION__.11228, 13
__PRETTY_FUNCTION__.11228:
	.string	"ecs_dim_type"
	.align 16
	.type	__PRETTY_FUNCTION__.11254, @object
	.size	__PRETTY_FUNCTION__.11254, 16
__PRETTY_FUNCTION__.11254:
	.string	"ecs_column_type"
	.align 8
	.type	__PRETTY_FUNCTION__.11322, @object
	.size	__PRETTY_FUNCTION__.11322, 14
__PRETTY_FUNCTION__.11322:
	.string	"ensure_entity"
	.align 8
	.type	__PRETTY_FUNCTION__.11370, @object
	.size	__PRETTY_FUNCTION__.11370, 11
__PRETTY_FUNCTION__.11370:
	.string	"ecs_import"
	.align 16
	.type	__PRETTY_FUNCTION__.11381, @object
	.size	__PRETTY_FUNCTION__.11381, 24
__PRETTY_FUNCTION__.11381:
	.string	"ecs_import_from_library"
	.align 16
	.type	__PRETTY_FUNCTION__.11399, @object
	.size	__PRETTY_FUNCTION__.11399, 19
__PRETTY_FUNCTION__.11399:
	.string	"ecs_add_module_tag"
	.align 16
	.type	__PRETTY_FUNCTION__.11409, @object
	.size	__PRETTY_FUNCTION__.11409, 16
__PRETTY_FUNCTION__.11409:
	.string	"ecs_module_init"
	.align 8
	.type	__PRETTY_FUNCTION__.11423, @object
	.size	__PRETTY_FUNCTION__.11423, 15
__PRETTY_FUNCTION__.11423:
	.string	"_ecs_queue_new"
	.align 16
	.type	__PRETTY_FUNCTION__.11431, @object
	.size	__PRETTY_FUNCTION__.11431, 22
__PRETTY_FUNCTION__.11431:
	.string	"_ecs_queue_from_array"
	.align 16
	.type	__PRETTY_FUNCTION__.11560, @object
	.size	__PRETTY_FUNCTION__.11560, 17
__PRETTY_FUNCTION__.11560:
	.string	"ecs_gauge_reduce"
	.align 16
	.type	__PRETTY_FUNCTION__.11571, @object
	.size	__PRETTY_FUNCTION__.11571, 20
__PRETTY_FUNCTION__.11571:
	.string	"ecs_get_world_stats"
	.align 16
	.type	__PRETTY_FUNCTION__.11594, @object
	.size	__PRETTY_FUNCTION__.11594, 20
__PRETTY_FUNCTION__.11594:
	.string	"ecs_get_query_stats"
	.align 16
	.type	__PRETTY_FUNCTION__.11609, @object
	.size	__PRETTY_FUNCTION__.11609, 21
__PRETTY_FUNCTION__.11609:
	.string	"ecs_get_system_stats"
	.align 16
	.type	__PRETTY_FUNCTION__.11616, @object
	.size	__PRETTY_FUNCTION__.11616, 17
__PRETTY_FUNCTION__.11616:
	.string	"get_system_stats"
	.align 16
	.type	__PRETTY_FUNCTION__.11624, @object
	.size	__PRETTY_FUNCTION__.11624, 23
__PRETTY_FUNCTION__.11624:
	.string	"ecs_get_pipeline_stats"
	.align 16
	.type	__PRETTY_FUNCTION__.11650, @object
	.size	__PRETTY_FUNCTION__.11650, 21
__PRETTY_FUNCTION__.11650:
	.string	"ecs_dump_world_stats"
	.align 16
	.type	__PRETTY_FUNCTION__.11688, @object
	.size	__PRETTY_FUNCTION__.11688, 16
__PRETTY_FUNCTION__.11688:
	.string	"snapshot_create"
	.align 16
	.type	__PRETTY_FUNCTION__.11705, @object
	.size	__PRETTY_FUNCTION__.11705, 25
__PRETTY_FUNCTION__.11705:
	.string	"ecs_snapshot_take_w_iter"
	.align 16
	.type	__PRETTY_FUNCTION__.11726, @object
	.size	__PRETTY_FUNCTION__.11726, 21
__PRETTY_FUNCTION__.11726:
	.string	"ecs_snapshot_restore"
	.align 16
	.type	__PRETTY_FUNCTION__.11760, @object
	.size	__PRETTY_FUNCTION__.11760, 18
__PRETTY_FUNCTION__.11760:
	.string	"ecs_snapshot_next"
	.align 8
	.type	__PRETTY_FUNCTION__.11782, @object
	.size	__PRETTY_FUNCTION__.11782, 12
__PRETTY_FUNCTION__.11782:
	.string	"bulk_delete"
	.align 16
	.type	__PRETTY_FUNCTION__.11813, @object
	.size	__PRETTY_FUNCTION__.11813, 25
__PRETTY_FUNCTION__.11813:
	.string	"ecs_bulk_add_remove_type"
	.align 16
	.type	__PRETTY_FUNCTION__.11832, @object
	.size	__PRETTY_FUNCTION__.11832, 18
__PRETTY_FUNCTION__.11832:
	.string	"ecs_bulk_add_type"
	.align 16
	.type	__PRETTY_FUNCTION__.11849, @object
	.size	__PRETTY_FUNCTION__.11849, 20
__PRETTY_FUNCTION__.11849:
	.string	"ecs_bulk_add_entity"
	.align 16
	.type	__PRETTY_FUNCTION__.11867, @object
	.size	__PRETTY_FUNCTION__.11867, 21
__PRETTY_FUNCTION__.11867:
	.string	"ecs_bulk_remove_type"
	.align 16
	.type	__PRETTY_FUNCTION__.11884, @object
	.size	__PRETTY_FUNCTION__.11884, 23
__PRETTY_FUNCTION__.11884:
	.string	"ecs_bulk_remove_entity"
	.align 8
	.type	__PRETTY_FUNCTION__.12021, @object
	.size	__PRETTY_FUNCTION__.12021, 15
__PRETTY_FUNCTION__.12021:
	.string	"ecs_parse_term"
	.align 8
	.type	__PRETTY_FUNCTION__.12034, @object
	.size	__PRETTY_FUNCTION__.12034, 14
__PRETTY_FUNCTION__.12034:
	.string	"da_get_column"
	.align 16
	.type	__PRETTY_FUNCTION__.12043, @object
	.size	__PRETTY_FUNCTION__.12043, 24
__PRETTY_FUNCTION__.12043:
	.string	"da_get_or_create_column"
	.align 16
	.type	__PRETTY_FUNCTION__.12048, @object
	.size	__PRETTY_FUNCTION__.12048, 17
__PRETTY_FUNCTION__.12048:
	.string	"get_entity_array"
	.align 16
	.type	__PRETTY_FUNCTION__.12063, @object
	.size	__PRETTY_FUNCTION__.12063, 18
__PRETTY_FUNCTION__.12063:
	.string	"ecs_record_ensure"
	.align 16
	.type	__PRETTY_FUNCTION__.12077, @object
	.size	__PRETTY_FUNCTION__.12077, 22
__PRETTY_FUNCTION__.12077:
	.string	"ecs_table_find_column"
	.align 16
	.type	__PRETTY_FUNCTION__.12105, @object
	.size	__PRETTY_FUNCTION__.12105, 23
__PRETTY_FUNCTION__.12105:
	.string	"ecs_table_set_entities"
	.align 16
	.type	__PRETTY_FUNCTION__.12126, @object
	.size	__PRETTY_FUNCTION__.12126, 19
__PRETTY_FUNCTION__.12126:
	.string	"ecs_records_update"
	.align 16
	.type	__PRETTY_FUNCTION__.12136, @object
	.size	__PRETTY_FUNCTION__.12136, 24
__PRETTY_FUNCTION__.12136:
	.string	"ecs_table_delete_column"
	.align 16
	.type	__PRETTY_FUNCTION__.12152, @object
	.size	__PRETTY_FUNCTION__.12152, 22
__PRETTY_FUNCTION__.12152:
	.string	"ecs_record_get_column"
	.align 16
	.type	__PRETTY_FUNCTION__.12164, @object
	.size	__PRETTY_FUNCTION__.12164, 19
__PRETTY_FUNCTION__.12164:
	.string	"ecs_record_copy_to"
	.align 16
	.type	__PRETTY_FUNCTION__.12183, @object
	.size	__PRETTY_FUNCTION__.12183, 23
__PRETTY_FUNCTION__.12183:
	.string	"ecs_record_copy_pod_to"
	.align 16
	.type	__PRETTY_FUNCTION__.12199, @object
	.size	__PRETTY_FUNCTION__.12199, 19
__PRETTY_FUNCTION__.12199:
	.string	"ecs_record_move_to"
	.align 8
	.type	__PRETTY_FUNCTION__.12266, @object
	.size	__PRETTY_FUNCTION__.12266, 14
__PRETTY_FUNCTION__.12266:
	.string	"ecs_get_world"
	.align 32
	.type	__PRETTY_FUNCTION__.12270, @object
	.size	__PRETTY_FUNCTION__.12270, 32
__PRETTY_FUNCTION__.12270:
	.string	"flecs_stage_from_readonly_world"
	.align 16
	.type	__PRETTY_FUNCTION__.12275, @object
	.size	__PRETTY_FUNCTION__.12275, 23
__PRETTY_FUNCTION__.12275:
	.string	"flecs_stage_from_world"
	.align 16
	.type	__PRETTY_FUNCTION__.12304, @object
	.size	__PRETTY_FUNCTION__.12304, 25
__PRETTY_FUNCTION__.12304:
	.string	"flecs_monitor_mark_dirty"
	.align 16
	.type	__PRETTY_FUNCTION__.12313, @object
	.size	__PRETTY_FUNCTION__.12313, 23
__PRETTY_FUNCTION__.12313:
	.string	"flecs_monitor_register"
	.align 8
	.type	__PRETTY_FUNCTION__.12356, @object
	.size	__PRETTY_FUNCTION__.12356, 9
__PRETTY_FUNCTION__.12356:
	.string	"ecs_mini"
	.align 8
	.type	__PRETTY_FUNCTION__.12391, @object
	.size	__PRETTY_FUNCTION__.12391, 9
__PRETTY_FUNCTION__.12391:
	.string	"ecs_quit"
	.align 16
	.type	__PRETTY_FUNCTION__.12395, @object
	.size	__PRETTY_FUNCTION__.12395, 16
__PRETTY_FUNCTION__.12395:
	.string	"ecs_should_quit"
	.align 16
	.type	__PRETTY_FUNCTION__.12409, @object
	.size	__PRETTY_FUNCTION__.12409, 20
__PRETTY_FUNCTION__.12409:
	.string	"flecs_notify_tables"
	.align 16
	.type	__PRETTY_FUNCTION__.12521, @object
	.size	__PRETTY_FUNCTION__.12521, 31
__PRETTY_FUNCTION__.12521:
	.string	"ecs_set_component_actions_w_id"
	.align 16
	.type	__PRETTY_FUNCTION__.12529, @object
	.size	__PRETTY_FUNCTION__.12529, 26
__PRETTY_FUNCTION__.12529:
	.string	"ecs_component_has_actions"
	.align 8
	.type	__PRETTY_FUNCTION__.12536, @object
	.size	__PRETTY_FUNCTION__.12536, 11
__PRETTY_FUNCTION__.12536:
	.string	"ecs_atfini"
	.align 16
	.type	__PRETTY_FUNCTION__.12543, @object
	.size	__PRETTY_FUNCTION__.12543, 19
__PRETTY_FUNCTION__.12543:
	.string	"ecs_run_post_frame"
	.align 8
	.type	__PRETTY_FUNCTION__.12614, @object
	.size	__PRETTY_FUNCTION__.12614, 9
__PRETTY_FUNCTION__.12614:
	.string	"ecs_fini"
	.align 8
	.type	__PRETTY_FUNCTION__.12619, @object
	.size	__PRETTY_FUNCTION__.12619, 8
__PRETTY_FUNCTION__.12619:
	.string	"ecs_dim"
	.align 16
	.type	__PRETTY_FUNCTION__.12623, @object
	.size	__PRETTY_FUNCTION__.12623, 30
__PRETTY_FUNCTION__.12623:
	.string	"flecs_eval_component_monitors"
	.align 16
	.type	__PRETTY_FUNCTION__.12628, @object
	.size	__PRETTY_FUNCTION__.12628, 23
__PRETTY_FUNCTION__.12628:
	.string	"ecs_measure_frame_time"
	.align 16
	.type	__PRETTY_FUNCTION__.12633, @object
	.size	__PRETTY_FUNCTION__.12633, 24
__PRETTY_FUNCTION__.12633:
	.string	"ecs_measure_system_time"
	.align 16
	.type	__PRETTY_FUNCTION__.12641, @object
	.size	__PRETTY_FUNCTION__.12641, 19
__PRETTY_FUNCTION__.12641:
	.string	"ecs_set_target_fps"
	.align 16
	.type	__PRETTY_FUNCTION__.12645, @object
	.size	__PRETTY_FUNCTION__.12645, 16
__PRETTY_FUNCTION__.12645:
	.string	"ecs_get_context"
	.align 16
	.type	__PRETTY_FUNCTION__.12650, @object
	.size	__PRETTY_FUNCTION__.12650, 16
__PRETTY_FUNCTION__.12650:
	.string	"ecs_set_context"
	.align 16
	.type	__PRETTY_FUNCTION__.12656, @object
	.size	__PRETTY_FUNCTION__.12656, 21
__PRETTY_FUNCTION__.12656:
	.string	"ecs_set_entity_range"
	.align 16
	.type	__PRETTY_FUNCTION__.12661, @object
	.size	__PRETTY_FUNCTION__.12661, 23
__PRETTY_FUNCTION__.12661:
	.string	"ecs_enable_range_check"
	.align 16
	.type	__PRETTY_FUNCTION__.12670, @object
	.size	__PRETTY_FUNCTION__.12670, 19
__PRETTY_FUNCTION__.12670:
	.string	"ecs_enable_locking"
	.align 8
	.type	__PRETTY_FUNCTION__.12675, @object
	.size	__PRETTY_FUNCTION__.12675, 9
__PRETTY_FUNCTION__.12675:
	.string	"ecs_lock"
	.align 8
	.type	__PRETTY_FUNCTION__.12679, @object
	.size	__PRETTY_FUNCTION__.12679, 11
__PRETTY_FUNCTION__.12679:
	.string	"ecs_unlock"
	.align 8
	.type	__PRETTY_FUNCTION__.12683, @object
	.size	__PRETTY_FUNCTION__.12683, 15
__PRETTY_FUNCTION__.12683:
	.string	"ecs_begin_wait"
	.align 8
	.type	__PRETTY_FUNCTION__.12687, @object
	.size	__PRETTY_FUNCTION__.12687, 13
__PRETTY_FUNCTION__.12687:
	.string	"ecs_end_wait"
	.align 16
	.type	__PRETTY_FUNCTION__.12692, @object
	.size	__PRETTY_FUNCTION__.12692, 17
__PRETTY_FUNCTION__.12692:
	.string	"flecs_get_c_info"
	.align 16
	.type	__PRETTY_FUNCTION__.12697, @object
	.size	__PRETTY_FUNCTION__.12697, 27
__PRETTY_FUNCTION__.12697:
	.string	"flecs_get_or_create_c_info"
	.align 8
	.type	__PRETTY_FUNCTION__.12704, @object
	.size	__PRETTY_FUNCTION__.12704, 13
__PRETTY_FUNCTION__.12704:
	.string	"insert_sleep"
	.align 16
	.type	__PRETTY_FUNCTION__.12717, @object
	.size	__PRETTY_FUNCTION__.12717, 20
__PRETTY_FUNCTION__.12717:
	.string	"start_measure_frame"
	.align 16
	.type	__PRETTY_FUNCTION__.12725, @object
	.size	__PRETTY_FUNCTION__.12725, 19
__PRETTY_FUNCTION__.12725:
	.string	"stop_measure_frame"
	.align 16
	.type	__PRETTY_FUNCTION__.12731, @object
	.size	__PRETTY_FUNCTION__.12731, 16
__PRETTY_FUNCTION__.12731:
	.string	"ecs_frame_begin"
	.align 8
	.type	__PRETTY_FUNCTION__.12736, @object
	.size	__PRETTY_FUNCTION__.12736, 14
__PRETTY_FUNCTION__.12736:
	.string	"ecs_frame_end"
	.align 16
	.type	__PRETTY_FUNCTION__.12751, @object
	.size	__PRETTY_FUNCTION__.12751, 21
__PRETTY_FUNCTION__.12751:
	.string	"flecs_notify_queries"
	.align 16
	.type	__PRETTY_FUNCTION__.12761, @object
	.size	__PRETTY_FUNCTION__.12761, 19
__PRETTY_FUNCTION__.12761:
	.string	"flecs_delete_table"
	.align 16
	.type	__PRETTY_FUNCTION__.12771, @object
	.size	__PRETTY_FUNCTION__.12771, 22
__PRETTY_FUNCTION__.12771:
	.string	"register_table_for_id"
	.align 8
	.type	__PRETTY_FUNCTION__.12838, @object
	.size	__PRETTY_FUNCTION__.12838, 13
__PRETTY_FUNCTION__.12838:
	.string	"verify_nodes"
	.align 8
	.type	__PRETTY_FUNCTION__.12846, @object
	.size	__PRETTY_FUNCTION__.12846, 11
__PRETTY_FUNCTION__.12846:
	.string	"get_header"
	.align 8
	.type	__PRETTY_FUNCTION__.12854, @object
	.size	__PRETTY_FUNCTION__.12854, 12
__PRETTY_FUNCTION__.12854:
	.string	"remove_node"
	.align 16
	.type	__PRETTY_FUNCTION__.12863, @object
	.size	__PRETTY_FUNCTION__.12863, 17
__PRETTY_FUNCTION__.12863:
	.string	"flecs_switch_new"
	.align 16
	.type	__PRETTY_FUNCTION__.12910, @object
	.size	__PRETTY_FUNCTION__.12910, 17
__PRETTY_FUNCTION__.12910:
	.string	"flecs_switch_set"
	.align 16
	.type	__PRETTY_FUNCTION__.12923, @object
	.size	__PRETTY_FUNCTION__.12923, 20
__PRETTY_FUNCTION__.12923:
	.string	"flecs_switch_remove"
	.align 16
	.type	__PRETTY_FUNCTION__.12940, @object
	.size	__PRETTY_FUNCTION__.12940, 17
__PRETTY_FUNCTION__.12940:
	.string	"flecs_switch_get"
	.align 16
	.type	__PRETTY_FUNCTION__.12961, @object
	.size	__PRETTY_FUNCTION__.12961, 19
__PRETTY_FUNCTION__.12961:
	.string	"flecs_switch_first"
	.align 16
	.type	__PRETTY_FUNCTION__.12967, @object
	.size	__PRETTY_FUNCTION__.12967, 18
__PRETTY_FUNCTION__.12967:
	.string	"flecs_switch_next"
	.align 16
	.type	__PRETTY_FUNCTION__.13068, @object
	.size	__PRETTY_FUNCTION__.13068, 17
__PRETTY_FUNCTION__.13068:
	.string	"term_resolve_ids"
	.align 8
	.type	__PRETTY_FUNCTION__.13077, @object
	.size	__PRETTY_FUNCTION__.13077, 13
__PRETTY_FUNCTION__.13077:
	.string	"ecs_id_match"
	.align 16
	.type	__PRETTY_FUNCTION__.13099, @object
	.size	__PRETTY_FUNCTION__.13099, 18
__PRETTY_FUNCTION__.13099:
	.string	"ecs_term_finalize"
	.align 16
	.type	__PRETTY_FUNCTION__.13130, @object
	.size	__PRETTY_FUNCTION__.13130, 16
__PRETTY_FUNCTION__.13130:
	.string	"ecs_filter_init"
	.align 16
	.type	__PRETTY_FUNCTION__.13230, @object
	.size	__PRETTY_FUNCTION__.13230, 25
__PRETTY_FUNCTION__.13230:
	.string	"flecs_filter_match_table"
	.align 8
	.type	__PRETTY_FUNCTION__.13268, @object
	.size	__PRETTY_FUNCTION__.13268, 14
__PRETTY_FUNCTION__.13268:
	.string	"ecs_term_iter"
	.align 8
	.type	__PRETTY_FUNCTION__.13283, @object
	.size	__PRETTY_FUNCTION__.13283, 15
__PRETTY_FUNCTION__.13283:
	.string	"term_iter_next"
	.align 8
	.type	__PRETTY_FUNCTION__.13295, @object
	.size	__PRETTY_FUNCTION__.13295, 14
__PRETTY_FUNCTION__.13295:
	.string	"ecs_term_next"
	.align 16
	.type	__PRETTY_FUNCTION__.13302, @object
	.size	__PRETTY_FUNCTION__.13302, 16
__PRETTY_FUNCTION__.13302:
	.string	"ecs_filter_iter"
	.align 16
	.type	__PRETTY_FUNCTION__.13339, @object
	.size	__PRETTY_FUNCTION__.13339, 18
__PRETTY_FUNCTION__.13339:
	.string	"observer_callback"
	.align 16
	.type	__PRETTY_FUNCTION__.13348, @object
	.size	__PRETTY_FUNCTION__.13348, 18
__PRETTY_FUNCTION__.13348:
	.string	"ecs_observer_init"
	.align 16
	.type	__PRETTY_FUNCTION__.13411, @object
	.size	__PRETTY_FUNCTION__.13411, 17
__PRETTY_FUNCTION__.13411:
	.string	"flecs_bitset_set"
	.align 16
	.type	__PRETTY_FUNCTION__.13419, @object
	.size	__PRETTY_FUNCTION__.13419, 17
__PRETTY_FUNCTION__.13419:
	.string	"flecs_bitset_get"
	.align 16
	.type	__PRETTY_FUNCTION__.13427, @object
	.size	__PRETTY_FUNCTION__.13427, 20
__PRETTY_FUNCTION__.13427:
	.string	"flecs_bitset_remove"
	.align 16
	.type	__PRETTY_FUNCTION__.13435, @object
	.size	__PRETTY_FUNCTION__.13435, 18
__PRETTY_FUNCTION__.13435:
	.string	"flecs_bitset_swap"
	.align 8
	.type	__PRETTY_FUNCTION__.13467, @object
	.size	__PRETTY_FUNCTION__.13467, 13
__PRETTY_FUNCTION__.13467:
	.string	"fast_strncpy"
	.align 16
	.type	__PRETTY_FUNCTION__.13485, @object
	.size	__PRETTY_FUNCTION__.13485, 26
__PRETTY_FUNCTION__.13485:
	.string	"ecs_strbuf_vappend_intern"
	.align 16
	.type	__PRETTY_FUNCTION__.13584, @object
	.size	__PRETTY_FUNCTION__.13584, 20
__PRETTY_FUNCTION__.13584:
	.string	"flecs_type_contains"
	.align 8
	.type	__PRETTY_FUNCTION__.13604, @object
	.size	__PRETTY_FUNCTION__.13604, 15
__PRETTY_FUNCTION__.13604:
	.string	"ecs_type_merge"
	.align 8
	.type	__PRETTY_FUNCTION__.13615, @object
	.size	__PRETTY_FUNCTION__.13615, 9
__PRETTY_FUNCTION__.13615:
	.string	"has_case"
	.align 8
	.type	__PRETTY_FUNCTION__.13644, @object
	.size	__PRETTY_FUNCTION__.13644, 12
__PRETTY_FUNCTION__.13644:
	.string	"search_type"
	.align 8
	.type	__PRETTY_FUNCTION__.13687, @object
	.size	__PRETTY_FUNCTION__.13687, 13
__PRETTY_FUNCTION__.13687:
	.string	"ecs_type_add"
	.align 16
	.type	__PRETTY_FUNCTION__.13696, @object
	.size	__PRETTY_FUNCTION__.13696, 16
__PRETTY_FUNCTION__.13696:
	.string	"ecs_type_remove"
	.align 16
	.type	__PRETTY_FUNCTION__.13721, @object
	.size	__PRETTY_FUNCTION__.13721, 28
__PRETTY_FUNCTION__.13721:
	.string	"ecs_type_get_entity_for_xor"
	.align 8
	.type	__PRETTY_FUNCTION__.13785, @object
	.size	__PRETTY_FUNCTION__.13785, 15
__PRETTY_FUNCTION__.13785:
	.string	"ecs_os_gettime"
	.align 16
	.type	__PRETTY_FUNCTION__.13789, @object
	.size	__PRETTY_FUNCTION__.13789, 18
__PRETTY_FUNCTION__.13789:
	.string	"ecs_os_api_malloc"
	.align 16
	.type	__PRETTY_FUNCTION__.13793, @object
	.size	__PRETTY_FUNCTION__.13793, 18
__PRETTY_FUNCTION__.13793:
	.string	"ecs_os_api_calloc"
	.align 16
	.type	__PRETTY_FUNCTION__.13798, @object
	.size	__PRETTY_FUNCTION__.13798, 19
__PRETTY_FUNCTION__.13798:
	.string	"ecs_os_api_realloc"
	.align 16
	.type	__PRETTY_FUNCTION__.13807, @object
	.size	__PRETTY_FUNCTION__.13807, 18
__PRETTY_FUNCTION__.13807:
	.string	"ecs_os_api_strdup"
	.align 16
	.type	__PRETTY_FUNCTION__.13871, @object
	.size	__PRETTY_FUNCTION__.13871, 17
__PRETTY_FUNCTION__.13871:
	.string	"group_by_cascade"
	.align 16
	.type	__PRETTY_FUNCTION__.13898, @object
	.size	__PRETTY_FUNCTION__.13898, 21
__PRETTY_FUNCTION__.13898:
	.string	"order_grouped_tables"
	.align 8
	.type	__PRETTY_FUNCTION__.13923, @object
	.size	__PRETTY_FUNCTION__.13923, 12
__PRETTY_FUNCTION__.13923:
	.string	"group_table"
	.align 16
	.type	__PRETTY_FUNCTION__.13970, @object
	.size	__PRETTY_FUNCTION__.13970, 17
__PRETTY_FUNCTION__.13970:
	.string	"get_comp_and_src"
	.align 16
	.type	__PRETTY_FUNCTION__.13995, @object
	.size	__PRETTY_FUNCTION__.13995, 20
__PRETTY_FUNCTION__.13995:
	.string	"get_component_index"
	.align 8
	.type	__PRETTY_FUNCTION__.14010, @object
	.size	__PRETTY_FUNCTION__.14010, 8
__PRETTY_FUNCTION__.14010:
	.string	"add_ref"
	.align 8
	.type	__PRETTY_FUNCTION__.14063, @object
	.size	__PRETTY_FUNCTION__.14063, 10
__PRETTY_FUNCTION__.14063:
	.string	"add_table"
	.align 16
	.type	__PRETTY_FUNCTION__.14190, @object
	.size	__PRETTY_FUNCTION__.14190, 16
__PRETTY_FUNCTION__.14190:
	.string	"ptr_from_helper"
	.align 16
	.type	__PRETTY_FUNCTION__.14216, @object
	.size	__PRETTY_FUNCTION__.14216, 25
__PRETTY_FUNCTION__.14216:
	.string	"build_sorted_table_range"
	.align 8
	.type	__PRETTY_FUNCTION__.14301, @object
	.size	__PRETTY_FUNCTION__.14301, 12
__PRETTY_FUNCTION__.14301:
	.string	"sort_tables"
	.align 16
	.type	__PRETTY_FUNCTION__.14351, @object
	.size	__PRETTY_FUNCTION__.14351, 18
__PRETTY_FUNCTION__.14351:
	.string	"process_signature"
	.align 8
	.type	__PRETTY_FUNCTION__.14370, @object
	.size	__PRETTY_FUNCTION__.14370, 11
__PRETTY_FUNCTION__.14370:
	.string	"move_table"
	.align 8
	.type	__PRETTY_FUNCTION__.14396, @object
	.size	__PRETTY_FUNCTION__.14396, 15
__PRETTY_FUNCTION__.14396:
	.string	"activate_table"
	.align 16
	.type	__PRETTY_FUNCTION__.14451, @object
	.size	__PRETTY_FUNCTION__.14451, 24
__PRETTY_FUNCTION__.14451:
	.string	"resolve_cascade_subject"
	.align 8
	.type	__PRETTY_FUNCTION__.14468, @object
	.size	__PRETTY_FUNCTION__.14468, 13
__PRETTY_FUNCTION__.14468:
	.string	"remove_table"
	.align 16
	.type	__PRETTY_FUNCTION__.14530, @object
	.size	__PRETTY_FUNCTION__.14530, 16
__PRETTY_FUNCTION__.14530:
	.string	"remove_subquery"
	.align 16
	.type	__PRETTY_FUNCTION__.14550, @object
	.size	__PRETTY_FUNCTION__.14550, 19
__PRETTY_FUNCTION__.14550:
	.string	"flecs_query_notify"
	.align 16
	.type	__PRETTY_FUNCTION__.14557, @object
	.size	__PRETTY_FUNCTION__.14557, 19
__PRETTY_FUNCTION__.14557:
	.string	"ecs_query_order_by"
	.align 16
	.type	__PRETTY_FUNCTION__.14564, @object
	.size	__PRETTY_FUNCTION__.14564, 19
__PRETTY_FUNCTION__.14564:
	.string	"ecs_query_group_by"
	.align 8
	.type	__PRETTY_FUNCTION__.14569, @object
	.size	__PRETTY_FUNCTION__.14569, 15
__PRETTY_FUNCTION__.14569:
	.string	"ecs_query_init"
	.align 8
	.type	__PRETTY_FUNCTION__.14583, @object
	.size	__PRETTY_FUNCTION__.14583, 15
__PRETTY_FUNCTION__.14583:
	.string	"ecs_query_fini"
	.align 16
	.type	__PRETTY_FUNCTION__.14614, @object
	.size	__PRETTY_FUNCTION__.14614, 20
__PRETTY_FUNCTION__.14614:
	.string	"ecs_query_iter_page"
	.align 16
	.type	__PRETTY_FUNCTION__.14646, @object
	.size	__PRETTY_FUNCTION__.14646, 21
__PRETTY_FUNCTION__.14646:
	.string	"flecs_query_set_iter"
	.align 16
	.type	__PRETTY_FUNCTION__.14672, @object
	.size	__PRETTY_FUNCTION__.14672, 21
__PRETTY_FUNCTION__.14672:
	.string	"find_smallest_column"
	.align 16
	.type	__PRETTY_FUNCTION__.14721, @object
	.size	__PRETTY_FUNCTION__.14721, 19
__PRETTY_FUNCTION__.14721:
	.string	"bitset_column_next"
	.align 32
	.type	bitmask_remain.14710, @object
	.size	bitmask_remain.14710, 512
bitmask_remain.14710:
	.quad	-1
	.quad	-2
	.quad	-4
	.quad	-8
	.quad	-16
	.quad	-32
	.quad	-64
	.quad	-128
	.quad	-256
	.quad	-512
	.quad	-1024
	.quad	-2048
	.quad	-4096
	.quad	-8192
	.quad	-16384
	.quad	-32768
	.quad	-65536
	.quad	-131072
	.quad	-262144
	.quad	-524288
	.quad	-1048576
	.quad	-2097152
	.quad	-4194304
	.quad	-8388608
	.quad	-16777216
	.quad	-33554432
	.quad	-67108864
	.quad	-134217728
	.quad	-268435456
	.quad	-536870912
	.quad	-1073741824
	.quad	-2147483648
	.quad	-4294967296
	.quad	-8589934592
	.quad	-17179869184
	.quad	-34359738368
	.quad	-68719476736
	.quad	-137438953472
	.quad	-274877906944
	.quad	-549755813888
	.quad	-1099511627776
	.quad	-2199023255552
	.quad	-4398046511104
	.quad	-8796093022208
	.quad	-17592186044416
	.quad	-35184372088832
	.quad	-70368744177664
	.quad	-140737488355328
	.quad	-281474976710656
	.quad	-562949953421312
	.quad	-1125899906842624
	.quad	-2251799813685248
	.quad	-4503599627370496
	.quad	-9007199254740992
	.quad	-18014398509481984
	.quad	-36028797018963968
	.quad	-72057594037927936
	.quad	-144115188075855872
	.quad	-288230376151711744
	.quad	-576460752303423488
	.quad	-1152921504606846976
	.quad	-2305843009213693952
	.quad	-4611686018427387904
	.quad	-9223372036854775808
	.align 32
	.type	bitmask.14709, @object
	.size	bitmask.14709, 512
bitmask.14709:
	.quad	1
	.quad	2
	.quad	4
	.quad	8
	.quad	16
	.quad	32
	.quad	64
	.quad	128
	.quad	256
	.quad	512
	.quad	1024
	.quad	2048
	.quad	4096
	.quad	8192
	.quad	16384
	.quad	32768
	.quad	65536
	.quad	131072
	.quad	262144
	.quad	524288
	.quad	1048576
	.quad	2097152
	.quad	4194304
	.quad	8388608
	.quad	16777216
	.quad	33554432
	.quad	67108864
	.quad	134217728
	.quad	268435456
	.quad	536870912
	.quad	1073741824
	.quad	2147483648
	.quad	4294967296
	.quad	8589934592
	.quad	17179869184
	.quad	34359738368
	.quad	68719476736
	.quad	137438953472
	.quad	274877906944
	.quad	549755813888
	.quad	1099511627776
	.quad	2199023255552
	.quad	4398046511104
	.quad	8796093022208
	.quad	17592186044416
	.quad	35184372088832
	.quad	70368744177664
	.quad	140737488355328
	.quad	281474976710656
	.quad	562949953421312
	.quad	1125899906842624
	.quad	2251799813685248
	.quad	4503599627370496
	.quad	9007199254740992
	.quad	18014398509481984
	.quad	36028797018963968
	.quad	72057594037927936
	.quad	144115188075855872
	.quad	288230376151711744
	.quad	576460752303423488
	.quad	1152921504606846976
	.quad	2305843009213693952
	.quad	4611686018427387904
	.quad	-9223372036854775808
	.align 8
	.type	__PRETTY_FUNCTION__.14771, @object
	.size	__PRETTY_FUNCTION__.14771, 15
__PRETTY_FUNCTION__.14771:
	.string	"ecs_query_next"
	.align 16
	.type	__PRETTY_FUNCTION__.14816, @object
	.size	__PRETTY_FUNCTION__.14816, 18
__PRETTY_FUNCTION__.14816:
	.string	"ecs_query_changed"
	.align 16
	.type	__PRETTY_FUNCTION__.14852, @object
	.size	__PRETTY_FUNCTION__.14852, 24
__PRETTY_FUNCTION__.14852:
	.string	"flecs_component_from_id"
	.align 8
	.type	__PRETTY_FUNCTION__.14923, @object
	.size	__PRETTY_FUNCTION__.14923, 11
__PRETTY_FUNCTION__.14923:
	.string	"init_edges"
	.align 8
	.type	__PRETTY_FUNCTION__.14951, @object
	.size	__PRETTY_FUNCTION__.14951, 13
__PRETTY_FUNCTION__.14951:
	.string	"create_table"
	.align 16
	.type	__PRETTY_FUNCTION__.14968, @object
	.size	__PRETTY_FUNCTION__.14968, 19
__PRETTY_FUNCTION__.14968:
	.string	"add_entity_to_type"
	.align 16
	.type	__PRETTY_FUNCTION__.14982, @object
	.size	__PRETTY_FUNCTION__.14982, 24
__PRETTY_FUNCTION__.14982:
	.string	"remove_entity_from_type"
	.align 16
	.type	__PRETTY_FUNCTION__.15011, @object
	.size	__PRETTY_FUNCTION__.15011, 17
__PRETTY_FUNCTION__.15011:
	.string	"find_xor_replace"
	.align 16
	.type	__PRETTY_FUNCTION__.15025, @object
	.size	__PRETTY_FUNCTION__.15025, 29
__PRETTY_FUNCTION__.15025:
	.string	"flecs_table_switch_from_case"
	.align 16
	.type	__PRETTY_FUNCTION__.15041, @object
	.size	__PRETTY_FUNCTION__.15041, 29
__PRETTY_FUNCTION__.15041:
	.string	"find_or_create_table_include"
	.align 16
	.type	__PRETTY_FUNCTION__.15062, @object
	.size	__PRETTY_FUNCTION__.15062, 28
__PRETTY_FUNCTION__.15062:
	.string	"flecs_table_traverse_remove"
	.align 16
	.type	__PRETTY_FUNCTION__.15102, @object
	.size	__PRETTY_FUNCTION__.15102, 25
__PRETTY_FUNCTION__.15102:
	.string	"flecs_table_traverse_add"
	.align 16
	.type	__PRETTY_FUNCTION__.15144, @object
	.size	__PRETTY_FUNCTION__.15144, 18
__PRETTY_FUNCTION__.15144:
	.string	"count_occurrences"
	.align 16
	.type	__PRETTY_FUNCTION__.15164, @object
	.size	__PRETTY_FUNCTION__.15164, 19
__PRETTY_FUNCTION__.15164:
	.string	"verify_constraints"
	.align 8
	.type	__PRETTY_FUNCTION__.15174, @object
	.size	__PRETTY_FUNCTION__.15174, 15
__PRETTY_FUNCTION__.15174:
	.string	"find_or_create"
	.align 16
	.type	__PRETTY_FUNCTION__.15186, @object
	.size	__PRETTY_FUNCTION__.15186, 27
__PRETTY_FUNCTION__.15186:
	.string	"flecs_table_find_or_create"
	.align 16
	.type	__PRETTY_FUNCTION__.15195, @object
	.size	__PRETTY_FUNCTION__.15195, 22
__PRETTY_FUNCTION__.15195:
	.string	"flecs_init_root_table"
	.align 16
	.type	__PRETTY_FUNCTION__.15201, @object
	.size	__PRETTY_FUNCTION__.15201, 24
__PRETTY_FUNCTION__.15201:
	.string	"flecs_table_clear_edges"
	.align 8
	.type	__PRETTY_FUNCTION__.15246, @object
	.size	__PRETTY_FUNCTION__.15246, 14
__PRETTY_FUNCTION__.15246:
	.string	"get_bucket_id"
	.align 8
	.type	__PRETTY_FUNCTION__.15254, @object
	.size	__PRETTY_FUNCTION__.15254, 11
__PRETTY_FUNCTION__.15254:
	.string	"get_bucket"
	.align 8
	.type	__PRETTY_FUNCTION__.15277, @object
	.size	__PRETTY_FUNCTION__.15277, 14
__PRETTY_FUNCTION__.15277:
	.string	"ensure_bucket"
	.align 16
	.type	__PRETTY_FUNCTION__.15293, @object
	.size	__PRETTY_FUNCTION__.15293, 19
__PRETTY_FUNCTION__.15293:
	.string	"remove_from_bucket"
	.type	__PRETTY_FUNCTION__.15312, @object
	.size	__PRETTY_FUNCTION__.15312, 7
__PRETTY_FUNCTION__.15312:
	.string	"rehash"
	.align 8
	.type	__PRETTY_FUNCTION__.15337, @object
	.size	__PRETTY_FUNCTION__.15337, 13
__PRETTY_FUNCTION__.15337:
	.string	"_ecs_map_new"
	.align 8
	.type	__PRETTY_FUNCTION__.15347, @object
	.size	__PRETTY_FUNCTION__.15347, 13
__PRETTY_FUNCTION__.15347:
	.string	"_ecs_map_get"
	.align 16
	.type	__PRETTY_FUNCTION__.15365, @object
	.size	__PRETTY_FUNCTION__.15365, 16
__PRETTY_FUNCTION__.15365:
	.string	"_ecs_map_ensure"
	.align 8
	.type	__PRETTY_FUNCTION__.15372, @object
	.size	__PRETTY_FUNCTION__.15372, 13
__PRETTY_FUNCTION__.15372:
	.string	"_ecs_map_set"
	.align 8
	.type	__PRETTY_FUNCTION__.15383, @object
	.size	__PRETTY_FUNCTION__.15383, 15
__PRETTY_FUNCTION__.15383:
	.string	"ecs_map_remove"
	.align 8
	.type	__PRETTY_FUNCTION__.15399, @object
	.size	__PRETTY_FUNCTION__.15399, 14
__PRETTY_FUNCTION__.15399:
	.string	"ecs_map_clear"
	.align 8
	.type	__PRETTY_FUNCTION__.15410, @object
	.size	__PRETTY_FUNCTION__.15410, 14
__PRETTY_FUNCTION__.15410:
	.string	"_ecs_map_next"
	.align 8
	.type	__PRETTY_FUNCTION__.15426, @object
	.size	__PRETTY_FUNCTION__.15426, 13
__PRETTY_FUNCTION__.15426:
	.string	"ecs_map_grow"
	.align 16
	.type	__PRETTY_FUNCTION__.15433, @object
	.size	__PRETTY_FUNCTION__.15433, 17
__PRETTY_FUNCTION__.15433:
	.string	"ecs_map_set_size"
	.align 8
	.type	__PRETTY_FUNCTION__.15440, @object
	.size	__PRETTY_FUNCTION__.15440, 15
__PRETTY_FUNCTION__.15440:
	.string	"ecs_map_memory"
	.align 8
	.type	__PRETTY_FUNCTION__.15453, @object
	.size	__PRETTY_FUNCTION__.15453, 14
__PRETTY_FUNCTION__.15453:
	.string	"ecs_iter_fini"
	.align 16
	.type	__PRETTY_FUNCTION__.15459, @object
	.size	__PRETTY_FUNCTION__.15459, 16
__PRETTY_FUNCTION__.15459:
	.string	"ecs_term_w_size"
	.align 16
	.type	__PRETTY_FUNCTION__.15464, @object
	.size	__PRETTY_FUNCTION__.15464, 18
__PRETTY_FUNCTION__.15464:
	.string	"ecs_term_is_owned"
	.align 16
	.type	__PRETTY_FUNCTION__.15469, @object
	.size	__PRETTY_FUNCTION__.15469, 21
__PRETTY_FUNCTION__.15469:
	.string	"ecs_term_is_readonly"
	.align 16
	.type	__PRETTY_FUNCTION__.15477, @object
	.size	__PRETTY_FUNCTION__.15477, 16
__PRETTY_FUNCTION__.15477:
	.string	"ecs_term_is_set"
	.align 16
	.type	__PRETTY_FUNCTION__.15482, @object
	.size	__PRETTY_FUNCTION__.15482, 16
__PRETTY_FUNCTION__.15482:
	.string	"ecs_term_source"
	.align 8
	.type	__PRETTY_FUNCTION__.15487, @object
	.size	__PRETTY_FUNCTION__.15487, 12
__PRETTY_FUNCTION__.15487:
	.string	"ecs_term_id"
	.align 8
	.type	__PRETTY_FUNCTION__.15492, @object
	.size	__PRETTY_FUNCTION__.15492, 14
__PRETTY_FUNCTION__.15492:
	.string	"ecs_term_size"
	.align 8
	.type	__PRETTY_FUNCTION__.15496, @object
	.size	__PRETTY_FUNCTION__.15496, 15
__PRETTY_FUNCTION__.15496:
	.string	"ecs_iter_table"
	.align 8
	.type	__PRETTY_FUNCTION__.15500, @object
	.size	__PRETTY_FUNCTION__.15500, 14
__PRETTY_FUNCTION__.15500:
	.string	"ecs_iter_type"
	.align 16
	.type	__PRETTY_FUNCTION__.15506, @object
	.size	__PRETTY_FUNCTION__.15506, 21
__PRETTY_FUNCTION__.15506:
	.string	"ecs_iter_find_column"
	.align 16
	.type	__PRETTY_FUNCTION__.15512, @object
	.size	__PRETTY_FUNCTION__.15512, 23
__PRETTY_FUNCTION__.15512:
	.string	"ecs_iter_column_w_size"
	.align 16
	.type	__PRETTY_FUNCTION__.15520, @object
	.size	__PRETTY_FUNCTION__.15520, 21
__PRETTY_FUNCTION__.15520:
	.string	"ecs_iter_column_size"
	.align 16
	.type	__PRETTY_FUNCTION__.15536, @object
	.size	__PRETTY_FUNCTION__.15536, 20
__PRETTY_FUNCTION__.15536:
	.string	"register_id_trigger"
	.align 16
	.type	__PRETTY_FUNCTION__.15545, @object
	.size	__PRETTY_FUNCTION__.15545, 17
__PRETTY_FUNCTION__.15545:
	.string	"register_trigger"
	.align 16
	.type	__PRETTY_FUNCTION__.15558, @object
	.size	__PRETTY_FUNCTION__.15558, 19
__PRETTY_FUNCTION__.15558:
	.string	"unregister_trigger"
	.align 16
	.type	__PRETTY_FUNCTION__.15571, @object
	.size	__PRETTY_FUNCTION__.15571, 19
__PRETTY_FUNCTION__.15571:
	.string	"flecs_triggers_get"
	.align 16
	.type	__PRETTY_FUNCTION__.15585, @object
	.size	__PRETTY_FUNCTION__.15585, 19
__PRETTY_FUNCTION__.15585:
	.string	"notify_trigger_set"
	.align 16
	.type	__PRETTY_FUNCTION__.15616, @object
	.size	__PRETTY_FUNCTION__.15616, 17
__PRETTY_FUNCTION__.15616:
	.string	"ecs_trigger_init"
	.align 8
	.type	__PRETTY_FUNCTION__.15644, @object
	.size	__PRETTY_FUNCTION__.15644, 14
__PRETTY_FUNCTION__.15644:
	.string	"flflecs_to_i8"
	.align 8
	.type	__PRETTY_FUNCTION__.15648, @object
	.size	__PRETTY_FUNCTION__.15648, 13
__PRETTY_FUNCTION__.15648:
	.string	"flecs_to_i16"
	.align 8
	.type	__PRETTY_FUNCTION__.15652, @object
	.size	__PRETTY_FUNCTION__.15652, 13
__PRETTY_FUNCTION__.15652:
	.string	"flecs_to_u32"
	.align 16
	.type	__PRETTY_FUNCTION__.15656, @object
	.size	__PRETTY_FUNCTION__.15656, 16
__PRETTY_FUNCTION__.15656:
	.string	"flecs_to_size_t"
	.align 16
	.type	__PRETTY_FUNCTION__.15660, @object
	.size	__PRETTY_FUNCTION__.15660, 18
__PRETTY_FUNCTION__.15660:
	.string	"flecs_from_size_t"
	.align 8
	.type	__PRETTY_FUNCTION__.15688, @object
	.size	__PRETTY_FUNCTION__.15688, 14
__PRETTY_FUNCTION__.15688:
	.string	"ecs_os_memdup"
	.align 16
	.type	__PRETTY_FUNCTION__.15705, @object
	.size	__PRETTY_FUNCTION__.15705, 18
__PRETTY_FUNCTION__.15705:
	.string	"flecs_string_hash"
	.align 16
	.type	__PRETTY_FUNCTION__.15715, @object
	.size	__PRETTY_FUNCTION__.15715, 18
__PRETTY_FUNCTION__.15715:
	.string	"flecs_os_time_now"
	.align 16
	.type	__PRETTY_FUNCTION__.15723, @object
	.size	__PRETTY_FUNCTION__.15723, 20
__PRETTY_FUNCTION__.15723:
	.string	"flecs_os_time_sleep"
	.align 8
	.type	__PRETTY_FUNCTION__.15740, @object
	.size	__PRETTY_FUNCTION__.15740, 14
__PRETTY_FUNCTION__.15740:
	.string	"start_workers"
	.align 8
	.type	__PRETTY_FUNCTION__.15761, @object
	.size	__PRETTY_FUNCTION__.15761, 14
__PRETTY_FUNCTION__.15761:
	.string	"wait_for_sync"
	.align 16
	.type	__PRETTY_FUNCTION__.15783, @object
	.size	__PRETTY_FUNCTION__.15783, 17
__PRETTY_FUNCTION__.15783:
	.string	"ecs_stop_threads"
	.align 16
	.type	__PRETTY_FUNCTION__.15788, @object
	.size	__PRETTY_FUNCTION__.15788, 17
__PRETTY_FUNCTION__.15788:
	.string	"ecs_worker_begin"
	.align 16
	.type	__PRETTY_FUNCTION__.15794, @object
	.size	__PRETTY_FUNCTION__.15794, 16
__PRETTY_FUNCTION__.15794:
	.string	"ecs_worker_sync"
	.align 8
	.type	__PRETTY_FUNCTION__.15799, @object
	.size	__PRETTY_FUNCTION__.15799, 15
__PRETTY_FUNCTION__.15799:
	.string	"ecs_worker_end"
	.align 16
	.type	__PRETTY_FUNCTION__.15805, @object
	.size	__PRETTY_FUNCTION__.15805, 21
__PRETTY_FUNCTION__.15805:
	.string	"ecs_workers_progress"
	.align 16
	.type	__PRETTY_FUNCTION__.15820, @object
	.size	__PRETTY_FUNCTION__.15820, 16
__PRETTY_FUNCTION__.15820:
	.string	"ecs_set_threads"
	.align 8
	.type	__PRETTY_FUNCTION__.15874, @object
	.size	__PRETTY_FUNCTION__.15874, 15
__PRETTY_FUNCTION__.15874:
	.string	"group_by_phase"
	.align 16
	.type	__PRETTY_FUNCTION__.15908, @object
	.size	__PRETTY_FUNCTION__.15908, 16
__PRETTY_FUNCTION__.15908:
	.string	"set_write_state"
	.align 8
	.type	__PRETTY_FUNCTION__.15973, @object
	.size	__PRETTY_FUNCTION__.15973, 15
__PRETTY_FUNCTION__.15973:
	.string	"build_pipeline"
	.align 16
	.type	__PRETTY_FUNCTION__.16001, @object
	.size	__PRETTY_FUNCTION__.16001, 20
__PRETTY_FUNCTION__.16001:
	.string	"ecs_pipeline_update"
	.align 16
	.type	__PRETTY_FUNCTION__.16009, @object
	.size	__PRETTY_FUNCTION__.16009, 17
__PRETTY_FUNCTION__.16009:
	.string	"ecs_pipeline_run"
	.align 16
	.type	__PRETTY_FUNCTION__.16047, @object
	.size	__PRETTY_FUNCTION__.16047, 21
__PRETTY_FUNCTION__.16047:
	.string	"build_pipeline_query"
	.align 16
	.type	__PRETTY_FUNCTION__.16064, @object
	.size	__PRETTY_FUNCTION__.16064, 20
__PRETTY_FUNCTION__.16064:
	.string	"EcsOnUpdatePipeline"
	.align 16
	.type	__PRETTY_FUNCTION__.16086, @object
	.size	__PRETTY_FUNCTION__.16086, 23
__PRETTY_FUNCTION__.16086:
	.string	"ecs_deactivate_systems"
	.align 16
	.type	__PRETTY_FUNCTION__.16103, @object
	.size	__PRETTY_FUNCTION__.16103, 17
__PRETTY_FUNCTION__.16103:
	.string	"ecs_set_pipeline"
	.align 16
	.type	__PRETTY_FUNCTION__.16107, @object
	.size	__PRETTY_FUNCTION__.16107, 17
__PRETTY_FUNCTION__.16107:
	.string	"ecs_get_pipeline"
	.align 16
	.type	__PRETTY_FUNCTION__.16142, @object
	.size	__PRETTY_FUNCTION__.16142, 20
__PRETTY_FUNCTION__.16142:
	.string	"FlecsPipelineImport"
	.align 8
	.type	__PRETTY_FUNCTION__.16159, @object
	.size	__PRETTY_FUNCTION__.16159, 15
__PRETTY_FUNCTION__.16159:
	.string	"ProgressTimers"
	.align 16
	.type	__PRETTY_FUNCTION__.16195, @object
	.size	__PRETTY_FUNCTION__.16195, 16
__PRETTY_FUNCTION__.16195:
	.string	"ecs_set_timeout"
	.align 16
	.type	__PRETTY_FUNCTION__.16202, @object
	.size	__PRETTY_FUNCTION__.16202, 16
__PRETTY_FUNCTION__.16202:
	.string	"ecs_get_timeout"
	.align 16
	.type	__PRETTY_FUNCTION__.16209, @object
	.size	__PRETTY_FUNCTION__.16209, 17
__PRETTY_FUNCTION__.16209:
	.string	"ecs_set_interval"
	.align 16
	.type	__PRETTY_FUNCTION__.16216, @object
	.size	__PRETTY_FUNCTION__.16216, 17
__PRETTY_FUNCTION__.16216:
	.string	"ecs_get_interval"
	.align 16
	.type	__PRETTY_FUNCTION__.16223, @object
	.size	__PRETTY_FUNCTION__.16223, 16
__PRETTY_FUNCTION__.16223:
	.string	"ecs_start_timer"
	.align 8
	.type	__PRETTY_FUNCTION__.16229, @object
	.size	__PRETTY_FUNCTION__.16229, 15
__PRETTY_FUNCTION__.16229:
	.string	"ecs_stop_timer"
	.align 8
	.type	__PRETTY_FUNCTION__.16236, @object
	.size	__PRETTY_FUNCTION__.16236, 13
__PRETTY_FUNCTION__.16236:
	.string	"ecs_set_rate"
	.align 16
	.type	__PRETTY_FUNCTION__.16250, @object
	.size	__PRETTY_FUNCTION__.16250, 20
__PRETTY_FUNCTION__.16250:
	.string	"ecs_set_tick_source"
	.align 16
	.type	__PRETTY_FUNCTION__.16282, @object
	.size	__PRETTY_FUNCTION__.16282, 17
__PRETTY_FUNCTION__.16282:
	.string	"FlecsTimerImport"
	.align 16
	.type	__PRETTY_FUNCTION__.16325, @object
	.size	__PRETTY_FUNCTION__.16325, 17
__PRETTY_FUNCTION__.16325:
	.string	"get_in_component"
	.align 16
	.type	__PRETTY_FUNCTION__.16336, @object
	.size	__PRETTY_FUNCTION__.16336, 20
__PRETTY_FUNCTION__.16336:
	.string	"activate_in_columns"
	.align 16
	.type	__PRETTY_FUNCTION__.16352, @object
	.size	__PRETTY_FUNCTION__.16352, 20
__PRETTY_FUNCTION__.16352:
	.string	"register_out_column"
	.align 16
	.type	__PRETTY_FUNCTION__.16364, @object
	.size	__PRETTY_FUNCTION__.16364, 21
__PRETTY_FUNCTION__.16364:
	.string	"register_out_columns"
	.align 16
	.type	__PRETTY_FUNCTION__.16382, @object
	.size	__PRETTY_FUNCTION__.16382, 20
__PRETTY_FUNCTION__.16382:
	.string	"ecs_system_activate"
	.align 16
	.type	__PRETTY_FUNCTION__.16389, @object
	.size	__PRETTY_FUNCTION__.16389, 18
__PRETTY_FUNCTION__.16389:
	.string	"ecs_enable_system"
	.align 8
	.type	__PRETTY_FUNCTION__.16396, @object
	.size	__PRETTY_FUNCTION__.16396, 11
__PRETTY_FUNCTION__.16396:
	.string	"ecs_enable"
	.align 16
	.type	__PRETTY_FUNCTION__.16442, @object
	.size	__PRETTY_FUNCTION__.16442, 17
__PRETTY_FUNCTION__.16442:
	.string	"ecs_run_w_filter"
	.align 8
	.type	__PRETTY_FUNCTION__.16453, @object
	.size	__PRETTY_FUNCTION__.16453, 15
__PRETTY_FUNCTION__.16453:
	.string	"ecs_run_worker"
	.align 16
	.type	__PRETTY_FUNCTION__.16469, @object
	.size	__PRETTY_FUNCTION__.16469, 18
__PRETTY_FUNCTION__.16469:
	.string	"flecs_run_monitor"
	.align 16
	.type	__PRETTY_FUNCTION__.16534, @object
	.size	__PRETTY_FUNCTION__.16534, 16
__PRETTY_FUNCTION__.16534:
	.string	"ecs_system_init"
	.align 16
	.type	__PRETTY_FUNCTION__.16564, @object
	.size	__PRETTY_FUNCTION__.16564, 18
__PRETTY_FUNCTION__.16564:
	.string	"FlecsSystemImport"
	.align 16
	.type	__PRETTY_FUNCTION__.16603, @object
	.size	__PRETTY_FUNCTION__.16603, 22
__PRETTY_FUNCTION__.16603:
	.string	"ids_to_normalized_ids"
	.align 16
	.type	__PRETTY_FUNCTION__.16639, @object
	.size	__PRETTY_FUNCTION__.16639, 19
__PRETTY_FUNCTION__.16639:
	.string	"ecs_table_from_str"
	.align 16
	.type	__PRETTY_FUNCTION__.16679, @object
	.size	__PRETTY_FUNCTION__.16679, 19
__PRETTY_FUNCTION__.16679:
	.string	"_flecs_hashmap_get"
	.align 16
	.type	__PRETTY_FUNCTION__.16689, @object
	.size	__PRETTY_FUNCTION__.16689, 22
__PRETTY_FUNCTION__.16689:
	.string	"_flecs_hashmap_ensure"
	.align 16
	.type	__PRETTY_FUNCTION__.16705, @object
	.size	__PRETTY_FUNCTION__.16705, 19
__PRETTY_FUNCTION__.16705:
	.string	"_flecs_hashmap_set"
	.align 16
	.type	__PRETTY_FUNCTION__.16721, @object
	.size	__PRETTY_FUNCTION__.16721, 22
__PRETTY_FUNCTION__.16721:
	.string	"_flecs_hashmap_remove"
	.align 16
	.type	__PRETTY_FUNCTION__.16971, @object
	.size	__PRETTY_FUNCTION__.16971, 19
__PRETTY_FUNCTION__.16971:
	.string	"register_on_delete"
	.align 16
	.type	__PRETTY_FUNCTION__.16982, @object
	.size	__PRETTY_FUNCTION__.16982, 26
__PRETTY_FUNCTION__.16982:
	.string	"register_on_delete_object"
	.align 16
	.type	__PRETTY_FUNCTION__.17004, @object
	.size	__PRETTY_FUNCTION__.17004, 21
__PRETTY_FUNCTION__.17004:
	.string	"_bootstrap_component"
	.align 16
	.type	__PRETTY_FUNCTION__.17022, @object
	.size	__PRETTY_FUNCTION__.17022, 21
__PRETTY_FUNCTION__.17022:
	.string	"flecs_bootstrap_type"
	.align 16
	.type	__PRETTY_FUNCTION__.17033, @object
	.size	__PRETTY_FUNCTION__.17033, 26
__PRETTY_FUNCTION__.17033:
	.string	"bootstrap_component_table"
	.align 16
	.type	__PRETTY_FUNCTION__.17041, @object
	.size	__PRETTY_FUNCTION__.17041, 17
__PRETTY_FUNCTION__.17041:
	.string	"bootstrap_entity"
	.align 16
	.type	__PRETTY_FUNCTION__.17046, @object
	.size	__PRETTY_FUNCTION__.17046, 16
__PRETTY_FUNCTION__.17046:
	.string	"flecs_bootstrap"
	.align 8
	.type	__PRETTY_FUNCTION__.17061, @object
	.size	__PRETTY_FUNCTION__.17061, 12
__PRETTY_FUNCTION__.17061:
	.string	"path_append"
	.align 8
	.type	__PRETTY_FUNCTION__.17070, @object
	.size	__PRETTY_FUNCTION__.17070, 15
__PRETTY_FUNCTION__.17070:
	.string	"get_string_key"
	.align 16
	.type	__PRETTY_FUNCTION__.17087, @object
	.size	__PRETTY_FUNCTION__.17087, 17
__PRETTY_FUNCTION__.17087:
	.string	"register_by_name"
	.align 8
	.type	__PRETTY_FUNCTION__.17094, @object
	.size	__PRETTY_FUNCTION__.17094, 10
__PRETTY_FUNCTION__.17094:
	.string	"is_number"
	.align 8
	.type	__PRETTY_FUNCTION__.17105, @object
	.size	__PRETTY_FUNCTION__.17105, 11
__PRETTY_FUNCTION__.17105:
	.string	"name_to_id"
	.align 8
	.type	__PRETTY_FUNCTION__.17137, @object
	.size	__PRETTY_FUNCTION__.17137, 10
__PRETTY_FUNCTION__.17137:
	.string	"path_elem"
	.align 16
	.type	__PRETTY_FUNCTION__.17150, @object
	.size	__PRETTY_FUNCTION__.17150, 21
__PRETTY_FUNCTION__.17150:
	.string	"get_parent_from_path"
	.align 8
	.type	__PRETTY_FUNCTION__.17166, @object
	.size	__PRETTY_FUNCTION__.17166, 12
__PRETTY_FUNCTION__.17166:
	.string	"string_hash"
	.align 16
	.type	__PRETTY_FUNCTION__.17189, @object
	.size	__PRETTY_FUNCTION__.17189, 19
__PRETTY_FUNCTION__.17189:
	.string	"ecs_get_path_w_sep"
	.align 16
	.type	__PRETTY_FUNCTION__.17197, @object
	.size	__PRETTY_FUNCTION__.17197, 17
__PRETTY_FUNCTION__.17197:
	.string	"ecs_lookup_child"
	.align 8
	.type	__PRETTY_FUNCTION__.17209, @object
	.size	__PRETTY_FUNCTION__.17209, 11
__PRETTY_FUNCTION__.17209:
	.string	"ecs_lookup"
	.align 16
	.type	__PRETTY_FUNCTION__.17216, @object
	.size	__PRETTY_FUNCTION__.17216, 18
__PRETTY_FUNCTION__.17216:
	.string	"ecs_lookup_symbol"
	.align 16
	.type	__PRETTY_FUNCTION__.17226, @object
	.size	__PRETTY_FUNCTION__.17226, 22
__PRETTY_FUNCTION__.17226:
	.string	"ecs_lookup_path_w_sep"
	.align 16
	.type	__PRETTY_FUNCTION__.17257, @object
	.size	__PRETTY_FUNCTION__.17257, 20
__PRETTY_FUNCTION__.17257:
	.string	"ecs_get_child_count"
	.align 16
	.type	__PRETTY_FUNCTION__.17270, @object
	.size	__PRETTY_FUNCTION__.17270, 24
__PRETTY_FUNCTION__.17270:
	.string	"ecs_scope_iter_w_filter"
	.align 8
	.type	__PRETTY_FUNCTION__.17286, @object
	.size	__PRETTY_FUNCTION__.17286, 15
__PRETTY_FUNCTION__.17286:
	.string	"ecs_scope_next"
	.align 16
	.type	__PRETTY_FUNCTION__.17296, @object
	.size	__PRETTY_FUNCTION__.17296, 20
__PRETTY_FUNCTION__.17296:
	.string	"ecs_set_name_prefix"
	.align 16
	.type	__PRETTY_FUNCTION__.17306, @object
	.size	__PRETTY_FUNCTION__.17306, 19
__PRETTY_FUNCTION__.17306:
	.string	"ecs_add_path_w_sep"
	.align 4
.LC410:
	.long	0
	.align 4
.LC411:
	.long	1114636288
	.align 4
.LC414:
	.long	1065353216
	.align 4
.LC548:
	.long	1082130432
	.align 4
.LC549:
	.long	1073741824
	.align 4
.LC550:
	.long	1015580809
	.align 4
.LC734:
	.long	1069547520
	.align 8
.LC793:
	.long	0
	.long	1104006501
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	 1f - 0f
	.long	 4f - 1f
	.long	 5
0:
	.string	 "GNU"
1:
	.align 8
	.long	 0xc0000002
	.long	 3f - 2f
2:
	.long	 0x3
3:
	.align 8
4:
